Search.setIndex({"docnames": ["examples/example_kernel_digit_classification", "examples/example_kernel_grid_search", "examples/example_qnn_backend_mitigation", "examples/example_quantum_bayesian_optimization", "examples/examples_index", "index", "install/install", "modules/classes", "modules/generated/squlearn.Executor", "modules/generated/squlearn.encoding_circuit.ChebyshevPQC", "modules/generated/squlearn.encoding_circuit.ChebyshevRx", "modules/generated/squlearn.encoding_circuit.ChebyshevTower", "modules/generated/squlearn.encoding_circuit.EncodingCircuitDerivatives", "modules/generated/squlearn.encoding_circuit.HighDimEncodingCircuit", "modules/generated/squlearn.encoding_circuit.HubregtsenEncodingCircuit", "modules/generated/squlearn.encoding_circuit.LayeredEncodingCircuit", "modules/generated/squlearn.encoding_circuit.MultiControlEncodingCircuit", "modules/generated/squlearn.encoding_circuit.ParamZFeatureMap", "modules/generated/squlearn.encoding_circuit.PrunedEncodingCircuit", "modules/generated/squlearn.encoding_circuit.QiskitEncodingCircuit", "modules/generated/squlearn.encoding_circuit.TranspiledEncodingCircuit", "modules/generated/squlearn.encoding_circuit.YZ_CX_EncodingCircuit", "modules/generated/squlearn.encoding_circuit.automated_pruning", "modules/generated/squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase", "modules/generated/squlearn.encoding_circuit.pruning_from_QFI", "modules/generated/squlearn.kernel.matrix.FidelityKernel", "modules/generated/squlearn.kernel.matrix.ProjectedQuantumKernel", "modules/generated/squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase", "modules/generated/squlearn.kernel.ml.QGPC", "modules/generated/squlearn.kernel.ml.QGPR", "modules/generated/squlearn.kernel.ml.QKRR", "modules/generated/squlearn.kernel.ml.QSVC", "modules/generated/squlearn.kernel.ml.QSVR", "modules/generated/squlearn.kernel.optimization.kernel_loss_base.KernelLossBase", "modules/generated/squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase", "modules/generated/squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer", "modules/generated/squlearn.kernel.optimization.negative_log_likelihood.NLL", "modules/generated/squlearn.kernel.optimization.target_alignment.TargetAlignment", "modules/generated/squlearn.observables.CustomObservable", "modules/generated/squlearn.observables.IsingHamiltonian", "modules/generated/squlearn.observables.SinglePauli", "modules/generated/squlearn.observables.SingleProbability", "modules/generated/squlearn.observables.SummedPaulis", "modules/generated/squlearn.observables.SummedProbabilities", "modules/generated/squlearn.observables.observable_base.ObservableBase", "modules/generated/squlearn.observables.observable_derivatives.ObservableDerivatives", "modules/generated/squlearn.optimizers.Adam", "modules/generated/squlearn.optimizers.LBFGSB", "modules/generated/squlearn.optimizers.SLSQP", "modules/generated/squlearn.optimizers.SPSA", "modules/generated/squlearn.optimizers.optimizer_base.OptimizerBase", "modules/generated/squlearn.qnn.QNNClassifier", "modules/generated/squlearn.qnn.QNNRegressor", "modules/generated/squlearn.qnn.ShotsFromRSTD", "modules/generated/squlearn.qnn.base_qnn.BaseQNN", "modules/generated/squlearn.qnn.get_lr_decay", "modules/generated/squlearn.qnn.get_variance_fac", "modules/generated/squlearn.qnn.loss.LossBase", "modules/generated/squlearn.qnn.loss.ParameterRegularizationLoss", "modules/generated/squlearn.qnn.loss.SquaredLoss", "modules/generated/squlearn.qnn.loss.VarianceLoss", "modules/generated/squlearn.qnn.qnn.Expec", "modules/generated/squlearn.qnn.qnn.QNN", "modules/generated/squlearn.qnn.training.train", "modules/generated/squlearn.qnn.training.train_mini_batch", "modules/generated/squlearn.util.OpTree", "modules/generated/squlearn.util.optree.OpTreeCircuit", "modules/generated/squlearn.util.optree.OpTreeContainer", "modules/generated/squlearn.util.optree.OpTreeExpectationValue", "modules/generated/squlearn.util.optree.OpTreeList", "modules/generated/squlearn.util.optree.OpTreeMeasuredOperator", "modules/generated/squlearn.util.optree.OpTreeOperator", "modules/generated/squlearn.util.optree.OpTreeSum", "modules/generated/squlearn.util.optree.OpTreeValue", "user_guide/encoding_circuits", "user_guide/executor", "user_guide/kernel_methods", "user_guide/observables", "user_guide/quantum_neural_networks", "user_guide/user_guide_index"], "filenames": ["examples/example_kernel_digit_classification.nblink", "examples/example_kernel_grid_search.nblink", "examples/example_qnn_backend_mitigation.nblink", "examples/example_quantum_bayesian_optimization.nblink", "examples/examples_index.rst", "index.rst", "install/install.rst", "modules/classes.rst", "modules/generated/squlearn.Executor.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevPQC.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevRx.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevTower.rst", "modules/generated/squlearn.encoding_circuit.EncodingCircuitDerivatives.rst", "modules/generated/squlearn.encoding_circuit.HighDimEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.HubregtsenEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.LayeredEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.MultiControlEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.ParamZFeatureMap.rst", "modules/generated/squlearn.encoding_circuit.PrunedEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.QiskitEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.TranspiledEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.YZ_CX_EncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.automated_pruning.rst", "modules/generated/squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.rst", "modules/generated/squlearn.encoding_circuit.pruning_from_QFI.rst", "modules/generated/squlearn.kernel.matrix.FidelityKernel.rst", "modules/generated/squlearn.kernel.matrix.ProjectedQuantumKernel.rst", "modules/generated/squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.rst", "modules/generated/squlearn.kernel.ml.QGPC.rst", "modules/generated/squlearn.kernel.ml.QGPR.rst", "modules/generated/squlearn.kernel.ml.QKRR.rst", "modules/generated/squlearn.kernel.ml.QSVC.rst", "modules/generated/squlearn.kernel.ml.QSVR.rst", "modules/generated/squlearn.kernel.optimization.kernel_loss_base.KernelLossBase.rst", "modules/generated/squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase.rst", "modules/generated/squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer.rst", "modules/generated/squlearn.kernel.optimization.negative_log_likelihood.NLL.rst", "modules/generated/squlearn.kernel.optimization.target_alignment.TargetAlignment.rst", "modules/generated/squlearn.observables.CustomObservable.rst", "modules/generated/squlearn.observables.IsingHamiltonian.rst", "modules/generated/squlearn.observables.SinglePauli.rst", "modules/generated/squlearn.observables.SingleProbability.rst", "modules/generated/squlearn.observables.SummedPaulis.rst", "modules/generated/squlearn.observables.SummedProbabilities.rst", "modules/generated/squlearn.observables.observable_base.ObservableBase.rst", "modules/generated/squlearn.observables.observable_derivatives.ObservableDerivatives.rst", "modules/generated/squlearn.optimizers.Adam.rst", "modules/generated/squlearn.optimizers.LBFGSB.rst", "modules/generated/squlearn.optimizers.SLSQP.rst", "modules/generated/squlearn.optimizers.SPSA.rst", "modules/generated/squlearn.optimizers.optimizer_base.OptimizerBase.rst", "modules/generated/squlearn.qnn.QNNClassifier.rst", "modules/generated/squlearn.qnn.QNNRegressor.rst", "modules/generated/squlearn.qnn.ShotsFromRSTD.rst", "modules/generated/squlearn.qnn.base_qnn.BaseQNN.rst", "modules/generated/squlearn.qnn.get_lr_decay.rst", "modules/generated/squlearn.qnn.get_variance_fac.rst", "modules/generated/squlearn.qnn.loss.LossBase.rst", "modules/generated/squlearn.qnn.loss.ParameterRegularizationLoss.rst", "modules/generated/squlearn.qnn.loss.SquaredLoss.rst", "modules/generated/squlearn.qnn.loss.VarianceLoss.rst", "modules/generated/squlearn.qnn.qnn.Expec.rst", "modules/generated/squlearn.qnn.qnn.QNN.rst", "modules/generated/squlearn.qnn.training.train.rst", "modules/generated/squlearn.qnn.training.train_mini_batch.rst", "modules/generated/squlearn.util.OpTree.rst", "modules/generated/squlearn.util.optree.OpTreeCircuit.rst", "modules/generated/squlearn.util.optree.OpTreeContainer.rst", "modules/generated/squlearn.util.optree.OpTreeExpectationValue.rst", "modules/generated/squlearn.util.optree.OpTreeList.rst", "modules/generated/squlearn.util.optree.OpTreeMeasuredOperator.rst", "modules/generated/squlearn.util.optree.OpTreeOperator.rst", "modules/generated/squlearn.util.optree.OpTreeSum.rst", "modules/generated/squlearn.util.optree.OpTreeValue.rst", "user_guide/encoding_circuits.rst", "user_guide/executor.rst", "user_guide/kernel_methods.rst", "user_guide/observables.rst", "user_guide/quantum_neural_networks.rst", "user_guide/user_guide_index.rst"], "titles": ["Handwritten Digit Recognition with Projected Quantum Kernels", "Hyperparameter Optimization and Pipelines", "Error Mitigation for QNNs on IBM Devices", "Bayesian Optimization using a Quantum Gaussian Process Surrogate Model", "Examples", "Welcome to the sQUlearn documentation!", "Installation", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn</span></code>.Executor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevPQC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevRx", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevTower", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.EncodingCircuitDerivatives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.HighDimEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.HubregtsenEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.LayeredEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.MultiControlEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ParamZFeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.PrunedEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.QiskitEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.TranspiledEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.YZ_CX_EncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.automated_pruning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit.encoding_circuit_base</span></code>.EncodingCircuitBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.pruning_from_QFI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix</span></code>.FidelityKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix</span></code>.ProjectedQuantumKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix.kernel_matrix_base</span></code>.KernelMatrixBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QGPC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QGPR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QKRR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.kernel_loss_base</span></code>.KernelLossBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.kernel_optimization_base</span></code>.KernelOptimizerBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.kernel_optimizer</span></code>.KernelOptimizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.negative_log_likelihood</span></code>.NLL", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.target_alignment</span></code>.TargetAlignment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.CustomObservable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.IsingHamiltonian", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SinglePauli", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SingleProbability", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SummedPaulis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SummedProbabilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables.observable_base</span></code>.ObservableBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables.observable_derivatives</span></code>.ObservableDerivatives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.Adam", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.LBFGSB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SLSQP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SPSA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers.optimizer_base</span></code>.OptimizerBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.QNNClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.QNNRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.ShotsFromRSTD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.base_qnn</span></code>.BaseQNN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.get_lr_decay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.get_variance_fac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.LossBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.ParameterRegularizationLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.SquaredLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.VarianceLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.qnn</span></code>.Expec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.qnn</span></code>.QNN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.training</span></code>.train", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.training</span></code>.train_mini_batch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util</span></code>.OpTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeContainer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeExpectationValue", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeList", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeMeasuredOperator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeOperator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeSum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeValue", "Quantum Encoding Circuits", "The Executor Class", "Quantum Kernel Methods", "Observables for expectation values", "Quantum Neural Networks", "User Guide"], "terms": {"In": [0, 1, 2, 3, 8, 28, 31, 51, 62, 74, 75, 76, 77, 78], "thi": [0, 1, 2, 3, 5, 8, 12, 15, 17, 18, 25, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 54, 58, 59, 60, 65, 74, 75, 76, 77, 78], "notebook": [0, 1, 2, 3], "imag": 0, "ar": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 54, 62, 63, 64, 65, 69, 72, 74, 75, 76, 77, 78], "classifi": [0, 5, 28, 31, 32], "comput": [0, 2, 5, 12, 14, 25, 26, 27, 28, 31, 33, 36, 37, 38, 62, 65, 74, 75, 76, 77, 78], "learn": [0, 1, 2, 3, 5, 6, 13, 21, 25, 26, 28, 29, 30, 31, 32, 36, 46, 51, 52, 55, 74, 76], "promis": [0, 76], "advantag": 0, "over": [0, 2, 72, 76, 78], "convent": [0, 76], "algorithm": [0, 1, 3, 22, 24, 26, 29, 74, 75, 76, 78], "becaus": [0, 2, 29, 30, 31, 32, 52], "thei": [0, 2, 5, 8, 28, 31, 32, 51, 52, 74, 75, 76, 78], "can": [0, 1, 2, 3, 5, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 25, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 51, 52, 54, 55, 62, 65, 67, 69, 72, 74, 75, 76, 77, 78], "map": [0, 1, 11, 15, 17, 19, 38, 39, 40, 41, 42, 43, 44, 76, 78], "an": [0, 1, 2, 3, 8, 19, 26, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 55, 61, 62, 65, 68, 70, 71, 73, 74, 75, 76, 78], "exponenti": [0, 76, 78], "larg": [0, 21], "state": [0, 25, 38, 41, 43, 46, 74, 76, 78], "space": [0, 3, 25, 26, 30, 76], "howev": [0, 2, 74, 75, 78], "size": [0, 3, 15, 18, 19, 20, 46, 63, 64, 74, 76, 78], "also": [0, 1, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 53, 65, 69, 72, 74, 75, 76, 77, 78], "have": [0, 1, 2, 15, 31, 65, 74, 76, 78], "disadvantag": 0, "i": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "back": 0, "classic": [0, 1, 5, 26, 74, 76, 78], "after": [0, 13, 25, 26, 30, 53, 75, 76, 77], "being": [0, 41], "hilbert": [0, 25, 26, 76], "order": [0, 15, 28, 31, 32, 45, 62, 74, 76, 77], "take": [0, 2, 8, 74, 78], "benefit": [0, 75], "qml": [0, 1, 5, 76], "without": [0, 74, 76], "its": [0, 1, 2, 3, 12, 19, 28, 29, 46, 61, 62, 69, 72, 74, 78], "drawback": 0, "make": [0, 1, 14, 16, 30], "us": [0, 1, 4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 61, 62, 63, 64, 65, 67, 74, 75, 76, 77, 78], "squlearn": [0, 1, 2, 3, 6, 74, 75, 76, 77, 78], "": [0, 1, 2, 3, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 29, 30, 34, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 62, 65, 74, 76, 78], "implement": [0, 2, 3, 15, 24, 25, 29, 30, 33, 39, 41, 43, 45, 46, 47, 48, 49, 51, 52, 57, 58, 65, 76, 78], "qsvc": [0, 28, 32, 76], "projectedquantumkernel": [0, 1, 3, 15, 30, 31, 32], "here": [0, 1, 2, 3, 31, 32, 78], "well": [0, 5, 15, 63, 64, 76, 78], "known": [0, 2, 3, 76], "from": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 61, 62, 65, 69, 72, 74, 75, 76, 77, 78], "easili": [0, 3], "solvabl": [0, 29, 30], "workflow": [0, 1, 76], "appli": [0, 2, 3, 15, 26, 31, 32, 45, 65, 69, 70, 72, 74, 76, 78], "solv": [0, 3, 25, 26, 29, 30, 76, 78], "repres": [0, 1, 3, 66, 67, 68, 69, 70, 71, 73, 76, 78], "kind": [0, 39, 42, 67], "task": [0, 1, 2, 76], "transfer": 0, "more": [0, 1, 2, 3, 5, 9, 28, 30, 31, 32, 45, 74, 77, 78], "complex": [0, 76, 77], "fig": [0, 1, 3], "1": [0, 1, 2, 3, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 28, 29, 30, 31, 32, 35, 36, 37, 39, 41, 43, 45, 46, 51, 52, 53, 54, 56, 69, 72, 74, 76, 77, 78], "pipelin": [0, 4, 5, 28, 29, 30, 31, 32, 51, 52, 54], "let": 0, "start": [0, 3, 9, 11, 13, 34, 55], "off": [0, 2, 3, 9, 39, 65], "do": [0, 31, 32, 75, 78], "some": [0, 2, 3, 15, 28, 29, 30, 31, 32, 51, 52, 54, 76], "defin": [0, 1, 3, 13, 15, 25, 27, 29, 30, 32, 34, 36, 37, 38, 52, 61, 62, 76, 78], "helper": 0, "function": [0, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "matplotlib": [0, 1, 2, 3], "pylab": [0, 1], "plt": [0, 1, 2, 3], "line": [0, 76], "line2d": 0, "numpi": [0, 1, 2, 3, 6, 15, 24, 25, 26, 27, 29, 30, 31, 32, 46, 47, 48, 49, 50, 52, 57, 58, 59, 60, 65, 76, 78], "np": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 59, 62, 63, 64, 74, 76, 78], "sklearn": [0, 1, 15, 28, 29, 30, 31, 32, 51, 52, 54], "dataset": [0, 2, 15, 21, 28, 31, 51], "load_digit": 0, "manifold": 0, "tsne": 0, "metric": [0, 26, 28, 31, 51, 76], "accuracy_scor": 0, "model_select": [0, 1, 15, 31, 32, 51, 52], "train_test_split": [0, 31, 32, 51, 52], "minmaxscal": [0, 51], "executor": [0, 1, 2, 3, 5, 15, 22, 25, 26, 27, 28, 29, 30, 31, 32, 35, 51, 52, 53, 54, 62, 74, 76, 78, 79], "encoding_circuit": [0, 1, 2, 3, 25, 26, 27, 28, 29, 30, 31, 32, 35, 51, 52, 54, 74, 76, 77, 78], "chebyshevpqc": [0, 2, 10, 30, 74, 76, 78], "ml": [0, 1, 3, 26, 51, 52], "matrix": [0, 1, 3, 22, 24, 28, 29, 30, 31, 32, 35, 36, 37, 52, 74, 76, 78], "hidden": 0, "websit": 0, "sake": 0, "readabl": 0, "If": [0, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 54, 61, 62, 63, 64, 65, 75, 76, 77], "you": [0, 2, 5, 28, 29, 30, 31, 32, 51, 52, 54, 74, 76, 78], "want": [0, 1, 74, 75], "replic": [0, 2], "code": [0, 9, 10, 11, 13, 14, 16, 17, 21, 78], "pleas": [0, 1, 2, 5, 28, 29, 30, 31, 32, 51, 52, 54, 74], "see": [0, 2, 12, 27, 28, 29, 30, 31, 32, 45, 51, 52, 53, 54, 56, 75, 76, 78], "origin": [0, 28, 29, 30, 31, 32, 51, 52, 54, 74, 76], "wide": [0, 74], "we": [0, 1, 2, 3, 60, 74, 76, 78], "util": [0, 2, 3, 8, 12, 15, 26, 28, 29, 30, 31, 32, 51, 52, 54, 74, 76, 77, 78], "includ": [0, 1, 5, 8, 42, 43, 51, 52, 54, 62, 75], "scikit": [0, 1, 3, 5, 6, 26, 28, 29, 30, 31, 32, 51, 52, 76], "compris": [0, 78], "pictur": 0, "8": [0, 1, 2, 26, 36, 46], "time": [0, 2, 8, 9, 15, 31, 65, 75, 76], "pixel": 0, "contain": [0, 2, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 65, 67, 73, 74, 76, 77, 78], "one": [0, 8, 14, 15, 16, 28, 29, 31, 32, 40, 42, 46, 76], "singl": [0, 21, 40, 41, 42, 43, 45, 69, 72, 77], "each": [0, 1, 2, 3, 28, 29, 30, 31, 32, 42, 51, 52, 54, 59, 62, 63, 64, 65, 69, 72, 74, 76, 77, 78], "accord": [0, 31, 32, 51, 52, 74], "label": [0, 1, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 28, 30, 31, 32, 34, 35, 36, 37, 51, 52, 54, 61, 63, 64], "numer": [0, 12, 25, 26, 27, 29, 30], "depict": [0, 78], "load": [0, 1], "displai": [0, 2, 5, 61], "3": [0, 1, 2, 3, 5, 6, 9, 13, 15, 19, 20, 25, 26, 28, 29, 30, 31, 32, 45, 51, 52, 54, 74, 76, 77, 78], "x": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 40, 42, 46, 51, 52, 54, 62, 65, 74, 76, 77, 78], "y": [0, 1, 2, 3, 9, 15, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 40, 42, 51, 52, 54, 65, 74, 76, 77], "return_x_i": [0, 28], "true": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 54, 57, 58, 59, 60, 62, 63, 64, 65, 74, 75, 77, 78], "input": [0, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 35, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 55, 56, 61, 62, 63, 64, 65, 74, 75, 77, 78], "store": [0, 29, 30, 31, 32, 62, 74], "row": [0, 13], "dimens": [0, 9, 10, 11, 13, 14, 15, 16, 17, 21, 23, 74], "64": 0, "left": [0, 13, 26, 58, 59, 76, 77], "right": [0, 26, 58, 59, 76, 77], "class": [0, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79], "valu": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 73, 74, 76, 78, 79], "between": [0, 2, 3, 5, 9, 17, 26, 59, 74, 75, 76, 78], "0": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 39, 40, 41, 43, 45, 46, 51, 52, 53, 54, 55, 56, 58, 60, 69, 72, 74, 75, 76, 77, 78], "9": [0, 1, 2, 5, 6, 26, 29, 46, 51, 52], "u": [0, 1, 2, 3, 15, 29, 30, 32, 52, 78], "continu": 0, "visual": [0, 1, 2], "sampl": [0, 1, 2, 3, 9, 28, 29, 30, 31, 32, 51, 52, 53, 56, 78], "4": [0, 1, 2, 3, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 30, 36, 51, 52, 59, 62, 74, 76, 77, 78], "plot_dataset": 0, "5": [0, 1, 2, 3, 6, 13, 20, 26, 30, 36, 41, 43, 51, 52, 74, 76, 77, 78], "To": [0, 1, 2, 3, 5, 6, 74, 76, 77, 78], "model": [0, 1, 2, 4, 5, 25, 28, 29, 30, 31, 32, 51, 52, 54, 58, 59, 60, 74, 76, 78], "need": [0, 2, 31, 76, 77], "perform": [0, 1, 2, 3, 26, 28, 30, 31, 32, 46, 51, 52, 54, 64, 74], "coupl": 0, "step": [0, 1, 2, 3, 30, 46, 63, 64], "art": 0, "limit": [0, 2, 22], "qubit": [0, 1, 2, 3, 9, 10, 11, 13, 14, 16, 17, 21, 23, 26, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 74, 76, 78], "simul": [0, 3, 5, 8, 75, 78], "them": [0, 15, 76, 78], "hardwar": [0, 2, 9, 14, 16, 78], "onli": [0, 3, 8, 12, 22, 25, 28, 29, 30, 31, 32, 42, 51, 52, 54, 62, 65, 74, 75, 76], "possibl": [0, 3, 8, 11, 15, 26, 28, 29, 30, 31, 32, 42, 46, 51, 52, 58, 74, 75, 77, 78], "few": 0, "handl": [0, 5, 8, 75], "our": [0, 2, 3, 5], "featur": [0, 1, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 31, 32, 34, 52, 62, 74, 76, 77, 78], "everi": [0, 1, 26], "would": [0, 29, 30, 32, 52], "result": [0, 2, 3, 8, 26, 28, 29, 30, 31, 35, 45, 46, 47, 48, 49, 50, 51, 52, 54, 62, 65, 74, 75, 76, 77, 78], "either": [0, 8, 9, 11, 12, 13, 15, 26, 28, 29, 30, 31, 32, 33, 36, 37, 45, 51, 52, 54, 58, 74, 76, 78], "veri": [0, 15, 31], "yet": 0, "deep": [0, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 62], "noisi": [0, 2, 3, 13, 78], "circuit": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 51, 52, 54, 62, 63, 64, 65, 66, 68, 70, 75, 76, 77, 78, 79], "encod": [0, 1, 2, 3, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 51, 52, 54, 62, 63, 64, 76, 77, 78, 79], "therefor": [0, 76, 78], "form": [0, 1, 3, 9, 17, 45, 65, 76, 78], "t": [0, 14, 15, 21, 25, 26, 28, 29, 30, 31, 32, 36, 37, 51, 52, 65, 76, 77], "sne": 0, "leav": 0, "two": [0, 1, 9, 26, 29, 38, 74, 76, 78], "x_tsne": 0, "n_compon": 0, "2": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 53, 58, 59, 62, 74, 75, 76, 77, 78], "learning_r": 0, "auto": [0, 19], "init": 0, "random": [0, 1, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 35, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 78], "perplex": 0, "40": [0, 15], "fit_transform": [0, 51], "now": [0, 1, 2, 78], "plot": [0, 1, 2, 3], "hint": 0, "rerun": [0, 1], "cell": [0, 1, 2, 78], "view": [0, 76], "differ": [0, 1, 2, 3, 8, 15, 25, 26, 31, 38, 39, 40, 41, 42, 43, 44, 46, 75, 76], "respect": [0, 12, 25, 26, 28, 29, 30, 33, 34, 61, 62, 74, 76, 77, 78], "posit": [0, 3, 28, 29, 30, 78], "6": [0, 1, 2, 6, 26, 29, 30, 46, 77, 78], "choic": [0, 1, 2, 3, 25, 29, 76], "arang": [0, 2, 52, 78], "1000": [0, 8, 75], "shape": [0, 2, 28, 29, 30, 31, 32, 51, 52], "replac": [0, 31, 32, 45], "fals": [0, 1, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 28, 29, 30, 31, 32, 38, 40, 41, 42, 43, 45, 46, 51, 52, 54, 64, 65, 74, 75], "plot_numb": 0, "titl": [0, 1, 2, 3], "plot_data_in_feature_spac": 0, "highlight_row": 0, "clearli": 0, "cluster": 0, "number": [0, 1, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 56, 58, 60, 62, 64, 65, 74, 75, 77, 78], "new": [0, 1, 2, 3, 8, 28, 29, 30, 31, 32, 51, 52, 54, 75, 78], "locat": [0, 3, 78], "mark": [0, 76], "lastli": [0, 2], "select": [0, 3, 18, 78], "n": [0, 13, 15, 21, 36, 39, 76, 77], "train": [0, 1, 7, 9, 14, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 51, 52, 54, 74, 77, 78], "test": [0, 1, 2, 25, 26, 27, 28, 29, 30, 31, 32, 51, 52, 76], "7": [0, 1, 2, 13, 18, 26], "n_sampl": [0, 3, 15, 22, 28, 29, 30, 31, 32, 51, 52], "x_train": [0, 1, 2, 30, 31, 32, 35, 51, 52, 76, 78], "x_test": [0, 1, 31, 32, 51, 52, 78], "y_train": [0, 1, 2, 30, 31, 32, 35, 51, 52, 76, 78], "y_test": [0, 1, 31, 32, 51, 52], "test_siz": [0, 51, 52], "33": [0, 51, 52], "random_st": [0, 3, 15, 31, 32, 51, 52], "42": [0, 1, 6, 15, 51, 52], "next": [0, 3, 8, 62, 78], "interv": 0, "both": [0, 1, 2, 5, 8, 65, 74, 75, 76, 78], "improv": [0, 2, 3, 28, 29, 30], "overli": 0, "consid": [0, 5, 19, 21, 22, 24, 39, 61, 76], "scaler": [0, 1], "transform": [0, 31, 65], "power": [0, 26, 76], "techniqu": [0, 2, 5, 25, 26, 76], "variou": [0, 2, 5, 8, 75], "problem": [0, 3, 29, 30, 76, 78], "regress": [0, 1, 3, 7, 29, 30, 31, 32, 51, 52, 59, 60, 78], "exampl": [0, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 28, 29, 30, 31, 32, 35, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 62, 74, 75, 76, 77, 78], "core": [0, 5], "idea": [0, 76], "behind": 0, "high": [0, 3, 5, 8, 13, 75], "where": [0, 1, 2, 3, 8, 9, 10, 15, 28, 29, 30, 31, 32, 39, 52, 53, 74, 76, 78], "becom": 0, "easier": [0, 1], "separ": [0, 8, 15, 31], "figur": [0, 1, 15, 18, 19, 20, 74, 75, 78], "abov": [0, 1, 13, 75, 76, 78], "show": [0, 1, 2, 3, 28, 75, 76, 78], "phi": [0, 3, 25, 76], "It": [0, 2, 8, 11, 15, 31, 32, 51, 52, 74, 75, 77, 78], "hyperplan": [0, 31], "calcul": [0, 1, 2, 26, 29, 45, 57, 58, 59, 60, 65, 74, 76, 77, 78], "similar": [0, 8, 15, 38, 76], "point": [0, 3, 26, 28, 29, 31, 32, 51, 52, 54, 59, 64, 76, 78], "evalu": [0, 1, 3, 8, 12, 22, 25, 26, 27, 28, 30, 31, 45, 46, 53, 62, 65, 73, 74, 75, 78], "scalar": 0, "product": [0, 76], "langl": [0, 25, 78], "rangl": [0, 25, 78], "trick": [0, 76], "allow": [0, 1, 2, 3, 12, 28, 29, 30, 31, 32, 38, 39, 42, 51, 52, 54, 74, 75, 77, 78], "directli": [0, 5], "explicitli": [0, 1, 76, 78], "leverag": [0, 2, 74, 75], "parameter": [0, 2, 9, 17, 22, 25, 26, 38, 40, 41, 51, 52, 54, 62, 74, 77, 78], "pqc": [0, 2, 25, 27, 51, 52, 54, 62, 63, 64, 74, 76, 78], "ket": [0, 41, 43, 76], "potenti": [0, 2], "case": [0, 1, 8, 28, 29, 45, 62, 65, 75, 78], "cf": [0, 30, 76], "obtain": [0, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 28, 29, 30, 31, 32, 45, 62, 74, 75, 76, 77, 78], "measur": [0, 8, 21, 26, 30, 38, 40, 41, 42, 43, 65, 70, 76, 78], "wave": [0, 61, 77], "creat": [0, 1, 2, 3, 8, 14, 15, 19, 21, 26, 31, 39, 61, 62, 75], "k": [0, 3, 25, 26, 29, 36, 76], "vert": 0, "text": [0, 3, 26, 40, 41, 53, 58, 78], "ha": [0, 1, 2, 8, 22, 23, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 57, 58, 59, 60, 63, 64, 76, 78], "sever": [0, 2, 5, 74, 76, 77, 78], "For": [0, 1, 2, 3, 5, 29, 30, 31, 32, 51, 52, 74, 76, 78], "element": [0, 9, 12, 65, 74], "overal": 0, "quadrat": [0, 76], "demonstr": [0, 1, 2, 78], "instead": [0, 28, 29, 30, 31, 32, 42, 43, 51, 52, 54, 75], "intrigu": 0, "properti": [0, 31, 32, 75, 76], "With": [0, 1, 19, 77, 78], "effect": [0, 2, 28, 29, 30, 31, 32, 51, 52, 54, 76], "all": [0, 1, 2, 8, 15, 25, 26, 28, 29, 30, 32, 39, 43, 52, 58, 59, 65, 74, 75, 76, 77], "far": 0, "other": [0, 28, 29, 30, 31, 32, 51, 52, 54, 75, 77, 78], "thu": [0, 75, 76, 78], "bad": 0, "allevi": 0, "come": 0, "onc": [0, 65], "which": [0, 1, 2, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 34, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 54, 62, 65, 74, 75, 76, 77, 78], "lead": [0, 2, 76], "linear": [0, 9, 15, 19, 25, 26, 29, 30, 74, 76, 77], "reprint": 0, "huang": [0, 26, 76], "hy": [0, 26], "broughton": [0, 26], "m": [0, 3, 5, 9, 21, 26, 29, 53, 56, 76, 78], "mohseni": [0, 26], "et": [0, 13, 14, 25, 26, 37, 76], "al": [0, 13, 14, 25, 26, 37, 76], "nat": [0, 26, 76], "commun": [0, 26, 76], "12": [0, 1, 2, 6, 26, 76], "2631": [0, 26, 76], "2021": [0, 13, 14, 21, 25, 26, 37, 76], "http": [0, 5, 6, 22, 24, 29, 30, 74], "doi": [0, 5, 22, 24, 74], "org": [0, 1, 5, 22, 24, 30, 74], "10": [0, 1, 2, 3, 5, 8, 22, 24, 26, 29, 64, 74, 75, 78], "1038": 0, "s41467": 0, "021": 0, "22539": 0, "licens": 0, "under": [0, 5], "cc": 0, "BY": 0, "four": [0, 40], "three": [0, 9, 26], "layer": [0, 1, 2, 3, 5, 9, 10, 11, 13, 14, 15, 16, 17, 21, 28, 29, 30, 31, 32, 74, 78], "rotat": [0, 9, 11, 14, 15, 16], "mathrm": [0, 3, 76], "r": [0, 3, 28, 29, 30, 31, 32, 51, 52, 65, 77], "_": [0, 12, 76], "trainabl": [0, 9, 12, 19, 25, 26, 27, 34, 38, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 60, 74, 76, 77, 78], "paramet": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78], "arcco": [0, 9, 10, 15, 74], "angl": 0, "follow": [0, 1, 2, 5, 6, 15, 16, 74, 75, 76, 77, 78], "circular": 0, "entangl": [0, 9, 10, 13, 14, 15, 16, 17, 74, 76, 78], "control": [0, 3, 9, 15, 16, 53, 63, 64, 76, 78], "z": [0, 2, 3, 15, 17, 26, 38, 39, 40, 41, 42, 43, 52, 65, 74, 76, 77, 78], "gate": [0, 2, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 23, 65, 74, 78], "enclos": 0, "p": [0, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 30, 39, 45, 65, 74, 76, 77, 78], "num_qubit": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 35, 38, 39, 40, 41, 42, 43, 44, 45, 62, 74, 76, 77, 78], "num_featur": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 23, 26, 28, 29, 30, 31, 32, 35, 74, 76, 78], "num_lay": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 28, 29, 30, 31, 32, 35, 74, 76, 78], "draw": [0, 1, 2, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 74, 78], "output": [0, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 59, 60, 62, 74, 78], "mpl": [0, 1, 2, 15, 18, 19, 20, 74, 78], "note": [0, 1, 2, 3, 28, 29, 30, 31, 32, 38, 51, 52, 54, 74, 75, 76, 77, 78], "sinc": [0, 2, 28, 31, 51, 58, 60, 75], "twelv": 0, "repeat": [0, 9, 14, 15, 16, 78], "ascend": 0, "call": [0, 2, 8, 15, 19, 28, 29, 30, 31, 32, 52, 74, 76, 78], "re": [0, 3, 75], "upload": 0, "own": [0, 74], "32": 0, "direct": [0, 13], "embed": [0, 14, 25, 26, 37, 76, 78], "furthermor": [0, 2, 15, 74, 77, 78], "gaussian": [0, 1, 4, 5, 28, 29, 30, 36, 76], "outer": [0, 9, 10, 76], "e": [0, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 36, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 56, 62, 63, 64, 75, 76], "k_": [0, 26, 36, 37], "ij": [0, 12, 39], "exp": [0, 26, 56, 76], "gamma": [0, 26, 30, 31, 32, 76], "lvert": [0, 78], "theta": [0, 28, 40, 76, 78], "x_i": [0, 3, 12, 26, 37, 59, 78], "x_j": [0, 12, 26, 37], "rvert_2": 0, "cdot": [0, 26, 76, 78], "correspond": [0, 9, 10, 28, 31, 75, 76], "l_2": 0, "norm": [0, 3, 31], "fix": [0, 25, 26, 27], "again": [0, 13], "mapsto": 0, "statevector_simul": [0, 1, 2, 3, 8, 26, 28, 29, 30, 31, 32, 35, 51, 52, 74, 75, 76, 78], "xyz": [0, 26, 30, 76], "outer_kernel": [0, 26, 30, 76], "initial_paramet": [0, 25, 26, 27, 30, 31, 32, 34, 35], "rand": [0, 2, 26, 28, 29, 31, 32, 35, 51, 52], "num_paramet": [0, 2, 26, 28, 29, 31, 32, 35, 38, 39, 40, 41, 42, 43, 44, 45], "readi": [0, 5], "svm": [0, 31, 32, 76], "A": [0, 2, 3, 5, 8, 9, 11, 13, 15, 19, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 51, 52, 53, 54, 56, 62, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78], "work": [0, 3, 5, 28, 29, 30, 31, 32, 51, 52, 54, 62, 65, 76], "find": [0, 3, 34, 76], "categori": 0, "chosen": [0, 3, 9, 25, 78], "so": [0, 1, 31, 76], "maxim": [0, 53], "distanc": [0, 26, 31, 76], "closest": 0, "These": [0, 1, 25, 31, 32, 76], "help": 0, "decis": [0, 31], "boundari": 0, "establish": [0, 2, 78], "base": [0, 1, 2, 3, 8, 11, 17, 18, 22, 23, 25, 26, 27, 29, 44, 50, 51, 52, 54, 56, 57, 74, 76, 77, 78], "side": 0, "fall": [0, 2], "fit": [0, 1, 2, 3, 15, 25, 26, 28, 29, 30, 31, 32, 46, 51, 52, 54, 78], "11": [0, 2, 18], "quantum_kernel": [0, 1, 3, 15, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 76], "c": [0, 1, 21, 28, 31, 32, 39, 78], "break_ti": 0, "cache_s": [0, 1], "200": [0, 1], "class_weight": 0, "none": [0, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 62, 63, 64, 69, 72, 76], "decision_function_shap": [0, 31], "x27": [0, 1], "ovr": [0, 31], "lt": [0, 1, 2], "bound": [0, 3, 46, 47, 48, 49, 50, 53], "projected_quantum_kernel": [0, 1], "object": [0, 1, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78], "0x000001ba1a541e50": 0, "gt": [0, 1], "max_it": [0, 1], "probabl": [0, 2, 3, 28, 31, 41, 43, 51, 62, 76], "shrink": [0, 1], "tol": [0, 1, 46], "001": [0, 1, 78], "verbos": [0, 1, 22], "jupyt": [0, 1], "environ": [0, 1, 2, 5, 8, 75], "html": [0, 1], "represent": [0, 1, 3, 28, 76], "trust": [0, 1], "On": [0, 1], "github": [0, 1, 5, 6], "unabl": [0, 1], "render": [0, 1, 3], "try": [0, 1], "page": [0, 1], "nbviewer": [0, 1], "qsvcqsvc": 0, "check": [0, 28, 29, 30, 31, 32, 51, 52, 54, 65, 75], "predict": [0, 1, 2, 3, 28, 29, 30, 31, 32, 51, 52, 78], "print": [0, 1, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 31, 32, 39, 45, 77, 78], "f": [0, 1, 2, 3, 5, 29, 31, 32, 39, 59, 76, 78], "accuraci": [0, 3, 28, 31, 51, 78], "score": [0, 1, 28, 29, 30, 31, 32, 51, 52], "9522388059701492": 0, "9696969696969697": 0, "describ": [0, 61, 76, 78], "share": 0, "correctli": [0, 28, 31, 51], "multiclass": 0, "frac": [0, 12, 26, 29, 30, 32, 36, 37, 45, 52, 53, 56, 59, 78], "correct": 0, "total": [0, 29, 30, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 52, 74, 78], "go": [0, 1], "previou": [0, 3, 14, 16], "add": [0, 1, 3, 15, 65, 77], "inform": [0, 2, 3, 13, 22, 24, 28, 29, 30, 31, 32, 45, 51, 52, 54, 65, 74, 75, 76, 78], "specif": [0, 1, 2, 8, 31, 32, 78], "highlight": [0, 1], "were": 0, "understand": [0, 1], "how": [0, 1, 2, 3, 13, 28, 29, 30, 31, 32, 51, 52, 54, 75, 76, 78], "addition": [0, 2, 6, 15, 28, 31, 32, 39, 78], "color": [0, 1, 3], "background": [0, 30], "indic": [0, 3, 9, 10, 13, 18, 24, 69, 72, 74, 75], "region": 0, "assign": [0, 12, 13, 19, 25, 26, 27, 28, 45, 65, 76], "13": [0, 2], "plot_result": 0, "clf": [0, 51], "x_highlight": 0, "y_highlight": 0, "x_rang": 0, "resolut": 0, "30": 0, "final": [0, 2, 55, 78], "chose": 0, "begin": [0, 56, 78], "14": [0, 2, 30], "y_pred": [0, 1, 3, 29, 30, 31, 32, 51, 52, 78], "tutori": [1, 2, 5], "integr": [1, 5], "quantum": [1, 2, 4, 5, 8, 9, 13, 14, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 51, 52, 53, 54, 56, 62, 75, 77, 79], "machin": [1, 5, 6, 13, 21, 25, 26, 29, 30, 36, 74, 76], "method": [1, 2, 3, 5, 15, 19, 24, 25, 27, 54, 74, 75, 79], "tradit": [1, 78], "ll": 1, "through": [1, 2, 3, 5, 8, 15, 75, 76, 78], "preprocess": [1, 51], "definit": [1, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 76, 77], "gridsearchcv": [1, 15], "The": [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 59, 62, 65, 66, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79], "seamlessli": [1, 8], "alongsid": 1, "initi": [1, 2, 3, 8, 9, 10, 25, 26, 27, 34, 35, 46, 47, 48, 49, 50, 51, 52, 53, 54, 62, 63, 64, 76, 77, 78], "requir": [1, 5, 6, 8, 28, 31, 51, 75, 78], "like": [1, 5, 28, 29, 30, 31, 32, 51, 52, 75, 78], "support": [1, 5, 28, 29, 30, 31, 32, 40, 65, 76, 77], "vector": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 62, 69, 74, 76], "qsvr": [1, 29, 30, 31, 76], "process": [1, 2, 4, 5, 28, 29, 30, 36, 51, 52, 54, 76, 78], "qgpr": [1, 3, 30, 76], "scale": [1, 11, 29, 76], "reli": [1, 2, 76], "panda": 1, "pd": 1, "seaborn": 1, "sn": 1, "standardscal": 1, "yz_cx_encodingcircuit": 1, "fidelitykernel": [1, 3, 26, 28, 29, 35], "synthet": 1, "hold": [1, 33, 61, 76], "out": [1, 13, 75, 76], "best": [1, 3, 15, 29, 30, 32, 52], "estim": [1, 2, 8, 28, 29, 30, 31, 32, 46, 51, 52, 54, 65, 75, 76], "def": [1, 3, 15], "generate_i": 1, "pi": [1, 22, 26, 32], "return": [1, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 74, 75], "sin": [1, 3, 26, 32], "seed": [1, 2, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54], "linspac": [1, 3, 32], "100": [1, 2, 31, 32, 46, 53, 76, 78], "20": [1, 2, 35, 78], "figsiz": 1, "ground": [1, 63, 64], "truth": [1, 63, 64], "o": [1, 2, 45, 61, 62], "v": [1, 29, 30, 32, 52, 56], "legend": [1, 2, 3], "0x1ed1bb031f0": [], "compar": [1, 2], "same": [1, 2, 15, 28, 39, 42, 43, 45, 47, 48, 49, 59, 63, 64, 65, 74, 75, 76], "variant": 1, "fidel": [1, 3, 14, 16, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37], "project": [1, 3, 4, 5, 26, 28, 29, 30, 31, 32, 36, 37, 74, 75, 77], "vari": 1, "dure": [1, 2, 9, 65, 77, 78], "instanc": [1, 28, 29, 30, 51, 52, 53, 54, 63, 64, 75, 76, 78], "qiskit": [1, 2, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 38, 39, 40, 41, 42, 43, 44, 49, 65, 76, 77, 78], "statevectorsimul": [1, 8], "fidelity_kernel": 1, "parameter_se": [1, 3, 25, 26, 27, 51, 52, 54, 76], "projected_kernel": 1, "section": [1, 2, 78], "num_qubit_list": 1, "num_layers_list": 1, "encoding_circuit_param": 1, "estimator__num_qubit": 1, "estimator__num_lay": 1, "estimator_list": 1, "full_regular": [1, 29], "param_grid": [1, 15], "estimator_param": 1, "copi": [1, 2, 28, 31, 32, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75], "append": [1, 26, 69, 72], "ensur": [1, 2, 74], "mean": [1, 3, 28, 29, 30, 31, 32, 51, 52, 78], "standard": [1, 3, 29, 31, 32, 53, 75, 76, 78], "deviat": [1, 29, 53, 78], "part": [1, 51, 52], "cross": [1, 31], "valid": [1, 27, 31], "overwritten": [1, 8, 23], "everyth": [1, 8], "execut": [1, 2, 5, 8, 62, 75], "combin": [1, 21, 26, 51, 52, 62, 65], "choos": [1, 25, 26], "grid_search": [1, 15], "neg_mean_squared_error": 1, "reshap": [1, 3, 26, 30], "0x000001ed1bda3af0": [], "estimat": 1, "epsilon": [1, 32], "0x000001ecb489adc0": [], "gridsearchcvgridsearchcv": 1, "pipelinepipelin": 1, "standardscalerstandardscal": 1, "qgprqgpr": 1, "heat": 1, "neg": [1, 3, 29, 30, 32, 36, 37, 52, 76], "mse": 1, "larger": [1, 29, 30, 38, 39, 40, 41, 42, 43, 44], "better": 1, "intuit": [1, 3], "impact": 1, "extract": 1, "datafram": 1, "results_df": 1, "cv_results_": 1, "uniqu": 1, "per": [1, 11, 31, 32, 46], "num_combin": 1, "len": 1, "num_estim": 1, "subplot": 1, "n_row": 1, "int": [1, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 58, 60, 62, 64, 65, 69, 72, 78], "ceil": 1, "sqrt": [1, 26, 37, 78], "n_col": 1, "ax": [1, 15, 18, 19, 20, 74, 78], "flatten": [1, 9, 10], "axi": [1, 9], "arrai": [1, 3, 22, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 46, 51, 52, 65, 69], "index": [1, 11, 13, 38, 65, 69, 72], "min": [1, 2, 3, 75], "max": [1, 2, 3], "colormap": 1, "vmin": 1, "vmax": 1, "mean_test_scor": 1, "estimator_nam": 1, "pqk": [1, 15, 28, 29, 30, 31, 32, 33, 36, 37], "loop": [1, 51, 52, 54, 76], "chunk": 1, "rang": [1, 2, 3, 74], "start_idx": 1, "end_idx": 1, "chunk_df": 1, "iloc": 1, "pivot": 1, "get": [1, 3, 8, 28, 29, 30, 31, 32, 51, 52, 54, 64, 77, 78], "suitabl": [1, 78], "heat_map_data": 1, "pivot_t": 1, "param_estimator__num_qubit": 1, "column": [1, 13, 28, 31], "param_estimator__num_lay": 1, "cbar": 1, "disabl": [1, 2, 75], "individu": [1, 28, 74], "colorbar": 1, "heatmap": 1, "annot": 1, "fmt": 1, "3f": 1, "cmap": 1, "coolwarm": 1, "set_titl": 1, "set_xlabel": 1, "set_ylabel": 1, "cbar_ax": 1, "add_ax": 1, "92": 1, "02": [1, 2, 26], "collect": [1, 76], "cax": 1, "tight_layout": 1, "rect": 1, "user": [1, 2, 5, 8, 28, 29, 30, 31, 32, 51, 52, 54, 74, 76, 78], "mow": 1, "appdata": 1, "local": [1, 19, 74, 76], "temp": 1, "ipykernel_24012": [], "2408242799": 1, "py": 1, "58": 1, "userwarn": 1, "compat": [1, 5, 75], "might": [1, 3], "incorrect": 1, "shown": [1, 13, 76, 78], "best_estim": 1, "best_estimator_": 1, "test_scor": 1, "scatter": [1, 3], "red": [1, 3], "xlabel": [1, 3], "ylabel": [1, 3], "999999978217105": 1, "did": [1, 2], "quit": [1, 3], "good": [1, 74], "counterpart": [1, 76], "sensit": 1, "addit": [1, 2, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 28, 29, 30, 31, 32, 47, 48, 49, 76, 78], "been": [1, 2, 76, 78], "regular": [1, 5, 25, 26, 27, 29, 30, 31, 32, 36, 46, 51, 52, 56, 58, 75, 76], "slack": 1, "variabl": [1, 15], "treat": [1, 3], "equal": [1, 39, 42, 43, 58, 74], "estimator__c": 1, "1e0": 1, "1e1": 1, "1e2": 1, "estimator__epsilon": 1, "1e": [1, 22, 24, 29, 30, 46], "best_score_": 1, "0204753114345332e": [], "05": [1, 26, 46], "39": [1, 2], "0001": [1, 2], "0x000001ed1f382970": [], "adequ": 1, "similarli": [1, 2, 75], "setup": 2, "within": [2, 15, 29, 76], "context": [2, 77], "neural": [2, 5, 9, 51, 52, 53, 54, 56, 74, 77, 79], "network": [2, 5, 9, 51, 52, 53, 54, 56, 74, 77, 79], "firstli": 2, "small": [2, 31, 46, 76], "parabol": 2, "subsequ": [2, 3, 76, 78], "illustr": [2, 76, 78], "configur": [2, 75, 78], "connect": 2, "assum": [2, 29, 30, 31, 32, 76], "alreadi": [2, 51, 52, 54, 76], "account": 2, "access": [2, 12, 74, 75, 76], "detail": [2, 8, 31, 53, 56, 74, 76], "instruct": [2, 65, 74], "regist": 2, "your": [2, 3, 5, 78], "refer": [2, 5, 9, 13, 14, 21, 25, 26, 29, 30, 36, 37, 53, 56, 63, 64, 74, 75, 76, 78], "link": [2, 29], "manag": [2, 75], "given": [2, 3, 8, 13, 15, 26, 28, 29, 30, 31, 32, 36, 37, 46, 47, 48, 49, 50, 51, 52, 54, 62, 63, 65, 70, 76, 78], "lengthi": 2, "queu": 2, "qasm": [2, 3], "emul": 2, "real": [2, 5, 25, 26, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 75, 76, 78], "characterist": [2, 78], "emploi": [2, 74, 77, 78], "ibmq_qasm_simul": [2, 75], "oper": [2, 12, 26, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 54, 57, 58, 59, 60, 61, 62, 65, 68, 69, 70, 71, 72, 74, 76, 77, 78], "cloud": 2, "actual": [2, 30, 33, 34], "explor": [2, 3, 78], "option": [2, 3, 8, 14, 16, 17, 19, 20, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 39, 41, 42, 43, 46, 47, 48, 49, 51, 52, 54, 65, 69, 72, 74, 76, 77, 78], "adapt": [2, 3, 76], "reduc": [2, 76, 78], "finit": [2, 9, 46, 53, 56, 78], "first": [2, 9, 10, 12, 13, 14, 16, 20, 26, 38, 45, 46, 65, 74, 75, 77], "involv": [2, 9, 10, 74, 78], "necessari": [2, 3, 6, 8, 38, 39, 40, 41, 42, 43, 44, 75, 77], "runtim": [2, 6, 8, 75], "packag": [1, 2, 5, 6, 74, 75], "aer": [2, 6, 8, 75], "pyplot": [2, 3], "qiskit_ibm_runtim": [2, 8, 20, 74, 75, 77], "qiskitruntimeservic": [2, 8, 75], "session": [2, 8, 75], "qiskit_a": [2, 75], "noisemodel": 2, "observ": [2, 3, 5, 8, 26, 51, 52, 54, 61, 63, 64, 76, 78, 79], "summedpauli": [2, 45, 51, 77, 78], "qnnregressor": [2, 51, 78], "squaredloss": [2, 51, 52, 78], "optim": [2, 4, 5, 9, 15, 29, 51, 52, 54, 55, 63, 64, 75, 76], "adam": [2, 35, 55, 76], "data": [2, 3, 5, 13, 14, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 51, 52, 54, 59, 61, 62, 63, 64, 74, 76, 78], "nqubit": 2, "summat": [2, 42, 72, 78], "pauli": [2, 26, 38, 40, 41, 42, 45, 75, 76, 77, 78], "matric": [2, 22, 26, 29, 30, 31, 32, 76, 77, 78], "hat": [2, 13, 26, 39, 40, 41, 42, 43, 45, 77, 78], "alpha": [2, 3, 9, 10, 11, 26, 30, 58, 60, 78], "sum_i": [2, 12, 39, 42, 43, 58, 59, 60], "_i": [2, 39, 41, 42, 43, 60], "beta_i": 2, "op": [2, 45, 77, 78], "sparsepauliop": [2, 38, 39, 40, 41, 42, 43, 44, 45, 65, 68, 70, 71, 77, 78], "ii": [2, 39, 77], "iz": [2, 77], "zi": [2, 38, 77], "coeff": [2, 39, 45, 77, 78], "parameterexpress": [2, 39, 45, 65, 77, 78], "sourc": [2, 9, 10, 11, 13, 14, 16, 17, 21, 78], "weight": [2, 28, 29, 30, 31, 32, 51, 52, 54, 58, 59, 60, 63, 64], "l2": [2, 58], "loss": [2, 33, 34, 35, 36, 37, 51, 52, 53, 54, 63, 64, 76, 78], "routin": [2, 8, 74, 76], "rate": [2, 46, 55], "noteworthi": 2, "expect": [2, 3, 5, 26, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 54, 61, 62, 65, 68, 70, 76, 78, 79], "therebi": 2, "randomli": [2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 38, 39, 40, 41, 42, 43, 44], "param_ini": [2, 51, 52, 54, 63, 64], "ones": [2, 38, 39, 40, 41, 42, 43, 44, 62, 76], "param_op_ini": [2, 51, 52, 54, 63, 64], "qnn_simul": 2, "lr": [2, 35, 46, 76, 78], "simpl": [2, 10, 15], "parametr": [2, 76], "squar": [2, 29, 30, 32, 45, 52, 59, 77, 78], "afterward": [2, 15], "01": [2, 3, 26, 46, 52, 78], "00": [2, 26], "67it": 2, "finial": 2, "param": [2, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 62], "param_op": [2, 62], "65135232": 2, "66524017": 2, "94685078": 2, "96012197": 2, "07676122": 2, "50876202": 2, "97004195": 2, "64628971": 2, "84914015": 2, "66567045": 2, "94664274": 2, "41717632": 2, "89088529": 2, "proce": [2, 3], "infer": [2, 78], "gener": [2, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 32, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 62, 65, 74, 76, 78], "affirm": 2, "success": [2, 74], "parabola": 2, "phase": [2, 78], "outcom": [2, 31, 78], "delai": 2, "physic": [2, 38, 39, 40, 41, 42, 43, 44, 76, 77], "must": [2, 28, 29, 30, 31, 32, 36, 37, 40, 74], "token": [2, 8, 75], "outsid": 2, "throughout": 2, "interact": 2, "advanc": 2, "file": [2, 8, 46, 75], "via": [2, 5, 8, 9, 12, 28, 29, 30, 31, 32, 75, 77], "save_account": [2, 75], "servic": [2, 8, 75], "channel": [2, 8, 75], "ibm_quantum": [2, 8, 75], "noisy_backend": 2, "get_backend": [2, 8, 75], "ibm_nairobi": [2, 8, 75], "backend_noise_model": 2, "from_backend": 2, "upcom": [2, 78], "specifi": [1, 2, 8, 12, 15, 20, 22, 26, 27, 29, 30, 33, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 74, 75, 76, 78], "usag": 2, "000": 2, "shot": [2, 3, 8, 53, 62, 63, 64, 75], "noise_model": 2, "coupling_map": 2, "basis_g": 2, "10000": [2, 78], "earlier": 2, "Then": [2, 78], "updat": [2, 3, 8, 28, 29, 30, 31, 32, 46, 51, 52, 54, 78], "executor_backend": 2, "cach": [2, 8, 12, 26, 45, 51, 52, 54, 62, 74, 75], "qnn_backend": 2, "pretrain": [2, 51, 52, 54, 78], "turn": [2, 65], "notic": 2, "primari": 2, "longer": 2, "smooth": 2, "zigzag": 2, "pattern": [2, 15, 76], "occur": [2, 65], "introduc": [2, 15, 76, 78], "chang": [1, 2, 9, 11, 13, 26, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 77], "offset": [2, 56, 78], "ad": [2, 15, 17, 65, 74, 77, 78], "upon": [2, 75], "closer": 2, "examin": 2, "constant": [2, 29, 30, 32, 46, 52, 78], "reason": [2, 76], "perfect": 2, "affect": 2, "issu": 2, "significantli": [2, 78], "resilience_level": [2, 75], "optimization_level": [2, 75], "overwrit": [2, 8], "reset_options_estim": [2, 8], "present": [2, 14], "default": [1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 51, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 69, 72, 75, 76], "achiev": [2, 15, 26, 75, 77, 78], "resili": 2, "level": [2, 5, 8, 26, 75], "translat": 2, "depth": [2, 65, 76, 78], "close": [1, 2, 8, 9, 10, 14, 16, 21, 74, 78], "align": [2, 37, 76], "nevertheless": [2, 78], "mention": [2, 75, 76], "slight": 2, "increas": [2, 47, 48, 49, 76, 78], "last": [2, 9, 10, 13, 14, 16, 38], "entail": 2, "artifici": [2, 78], "scenario": [2, 3], "offer": [2, 5, 74, 76, 78], "fine": 2, "tune": 2, "consult": 2, "complet": 2, "noise_factor": 2, "noise_amplifi": 2, "cxamplifi": 2, "quadraticextrapol": 2, "forthcom": 2, "gather": [2, 3], "consequ": [2, 74, 76], "provid": [2, 5, 8, 18, 28, 29, 30, 31, 32, 36, 37, 45, 51, 52, 54, 74, 75, 76, 77, 78], "distinct": 2, "reset": [2, 8, 46, 53, 62], "fresh": 2, "root": 2, "15": [2, 18], "16": [2, 51, 52], "reset_options_sampl": [2, 8], "readout": 2, "17": [2, 6], "crucial": [2, 74, 77], "aspect": 2, "approach": [2, 3, 74, 76, 78], "capabl": [2, 5], "imperfect": 2, "diminish": 2, "world": 2, "address": 2, "stem": 2, "lower": [2, 22, 24], "ani": [2, 8, 67, 75], "enabl": [2, 5, 29, 74, 75, 78], "elimin": 2, "necess": 2, "costli": 2, "18": 2, "reiniti": [2, 51, 52, 54], "aim": [2, 5], "activ": 2, "adjust": [2, 11, 15, 31, 32, 55, 56, 62, 74, 75, 76, 77], "hyperparamet": [2, 3, 4, 5, 15, 26, 28, 29, 30, 36], "serv": [2, 5], "pre": [2, 3, 30, 74, 75], "factor": [2, 11, 51, 52, 54, 56, 69, 72], "term": [2, 11, 14, 25, 26, 37, 39, 65, 76, 78], "while": [2, 3, 15, 78], "recommend": [2, 13, 29, 62, 75], "typic": [2, 3, 8, 26, 78], "depend": [2, 3, 19, 25, 29, 30, 78], "capac": 2, "intens": 2, "primarili": 2, "infrastructur": 2, "usual": [2, 18, 75], "hour": 2, "19": 2, "005": [2, 58, 60, 78], "reduct": [2, 9, 53, 56], "david": 2, "kreplin": [2, 5, 9, 53, 56, 78], "marco": 2, "roth": [2, 3, 5, 9, 29, 53, 56, 78], "arxiv": [2, 5, 9, 14, 21, 25, 26, 37, 53, 56, 76, 78], "preprint": 2, "2306": [2, 9, 53, 56, 78], "01639": [2, 9, 53, 56, 78], "2023": [2, 5, 9, 53, 56, 76, 78], "kernel": [3, 4, 5, 14, 15, 16, 52, 74, 77, 79], "conceptu": 3, "layout": 3, "taken": [3, 36, 37, 46], "rapp": [3, 5, 29], "global": 3, "boldsymbol": [3, 76], "arg": [3, 26], "min_": [3, 78], "g": [3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 56, 62, 63, 64, 75, 76], "iter": [3, 13, 46, 47, 48, 49, 55, 56, 58, 60, 78], "guidanc": [], "modest": 3, "amount": [], "attract": [], "expens": 3, "black": 3, "box": 3, "further": [31, 78], "restrict": 76, "regard": 5, "proxi": [], "exploit": [3, 76], "trade": 3, "quantifi": 3, "acquisit": 3, "procedur": [25, 26, 30, 76], "approxim": [3, 59, 76], "increasingli": [], "due": [3, 76, 78], "posterior": 3, "varianc": [3, 29, 51, 52, 54, 56, 57, 58, 59, 60, 62, 77], "gp": [28, 29, 76], "popular": [], "common": [3, 78], "ei": 3, "mu": 3, "lambda": 3, "sigma": [3, 29, 35, 36, 76], "varphi": 3, "uncertainti": 3, "distribut": [3, 29], "cumul": 3, "normal": [3, 8, 29], "current": [1, 3, 5, 8, 46, 51, 52, 54, 62, 76, 77], "minimum": [3, 34, 78], "error": [3, 4, 5, 13, 28, 29, 30, 31, 32, 51, 52, 54, 75, 78], "favour": 3, "qbo": 3, "qgp": 3, "follw": 3, "structr": 3, "made": [3, 19], "import": [3, 8, 12, 15, 18, 19, 20, 26, 28, 29, 30, 31, 32, 35, 39, 45, 51, 52, 74, 75, 76, 77, 78], "scipi": [3, 6, 29, 30, 31, 32, 47, 48, 78], "minim": [3, 35, 46, 47, 48, 49, 50, 51, 52, 53, 56, 63, 64, 76, 78], "optimizeresult": [3, 35], "stat": 3, "skopt": 3, "bayesopt": 3, "__init__": 3, "self": [1, 3, 21, 28, 29, 30, 31, 32, 33, 51, 52, 54], "domain": [3, 78], "surrogate_model": 3, "nr_initial_point": 3, "x_plot": 3, "y_plot": 3, "xi": [3, 39], "plot_it": 3, "blackbox_funct": 3, "rnd": 3, "prepar": 3, "search": [3, 15], "_initial_sampl": 3, "rv": 3, "y_init": 3, "plot_surrogate_acquisit": 3, "whether": [3, 8, 29, 30, 37, 78], "expected_improv": 3, "x_sampl": 3, "y_sampl": 3, "gpr": 3, "return_std": [3, 29], "mu_sampl": 3, "mu_sample_opt": 3, "errstat": 3, "divid": [3, 31], "warn": [1, 3], "imp": 3, "cdf": 3, "pdf": [3, 9, 10, 11, 13, 14, 16, 17, 21, 78], "ravel": 3, "propose_loc": 3, "dim": 3, "n_dim": 3, "min_val": 3, "inf": 3, "min_x": 3, "min_obj": 3, "optimum": 3, "n_restart": 3, "x0": [3, 46, 47, 48, 49, 50], "uniform": 3, "restart": [3, 8, 13, 56, 75], "maxit": [3, 35, 46, 76, 78], "l": [3, 26, 36, 47, 53, 58, 78], "bfg": [3, 47, 78], "b": [3, 15, 39, 42, 43, 47, 56, 78], "fun": [3, 46, 47, 48, 49, 50], "run_optim": [3, 34, 35, 76], "n_iter": 3, "acq_func": 3, "exist": [3, 28, 29, 30, 31, 32, 51, 52, 54, 74, 75], "x_next": 3, "y_next": 3, "vstack": 3, "plot_surrog": 3, "argmin": 3, "func_val": 3, "x_iter": 3, "rais": [3, 28, 29, 30, 31, 32, 51, 52, 54], "valueerror": 3, "cannot": 3, "nois": [3, 9, 15, 25, 31, 53, 56, 76, 78], "free": [3, 5, 74, 78], "marker": 3, "blue": [3, 78], "fill_between": 3, "96": 3, "y_conv": 3, "accumul": 3, "ro": 3, "converg": 3, "exchang": 3, "customis": 3, "There": [3, 5, 74, 78], "rescal": [3, 21, 31, 32, 37], "custom": [3, 26, 38], "avail": [3, 5, 15, 19, 30, 74, 76, 77], "analit": 3, "know": 3, "mimiz": 3, "exactli": 3, "what": 3, "happen": 3, "noise_level": 3, "tanh": 3, "randn": 3, "contour": 3, "50": 3, "fx": 3, "unknown": 3, "fill": [3, 13], "concaten": [3, 74], "fx_i": 3, "fc": 3, "ec": 3, "grid": 3, "hubregtsenencodingcircuit": [3, 12, 18, 28, 29, 31, 32, 35, 74], "set": [3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 74, 76, 77, 78], "up": [3, 13, 61, 75, 76, 78], "enc_circ": [3, 28, 29, 30, 35, 76], "q_kernel": [3, 28, 29, 35], "qgpr_model": 3, "strateg": 3, "run": [3, 5, 6, 8, 34, 35, 38, 39, 40, 41, 42, 43, 44, 46, 55, 75, 77], "especi": 3, "when": [3, 6, 8, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 52, 74, 75, 76, 77, 78], "18689176": 3, "1774259": 3, "89617324": 3, "19732843": 3, "28305494": 3, "84752248": 3, "11968248": 3, "08250642": 3, "48620317": 3, "49091803": 3, "sophist": [3, 74], "price": 3, "industri": 3, "machineri": 3, "intrest": 3, "reader": 3, "about": [3, 8, 30, 31, 32], "handwritten": [4, 5], "digit": [4, 5], "recognit": [4, 5], "bayesian": [4, 5, 29], "surrog": [4, 5], "mitig": [4, 5, 25, 75, 76, 78], "qnn": [4, 5, 26, 50, 74, 76, 77], "ibm": [4, 5, 6, 8, 75], "devic": [4, 5], "friendli": [5, 74], "nisq": [5, 76], "python": [5, 6], "librari": [5, 17, 19, 74], "design": [5, 18, 74, 76, 78], "seamless": 5, "tool": 5, "dual": 5, "architectur": [5, 78], "research": 5, "practition": 5, "effici": [5, 9, 14, 16], "prototyp": 5, "experiment": 5, "comprehens": [5, 74], "toolset": 5, "along": [5, 56, 76, 78], "customiz": 5, "strategi": [5, 15], "autom": [5, 22, 74], "special": 5, "By": [3, 5, 29, 30, 31, 32, 74, 76], "focus": 5, "end": [5, 9, 14, 16], "bridg": [5, 76], "gap": 5, "practic": [5, 76], "applic": [5, 74, 76, 78], "least": 5, "version": [5, 28, 29, 30, 31, 32, 51, 52, 54], "command": [5, 6], "pip": [5, 6], "altern": [5, 11, 19, 78], "git": [5, 6], "ssh": 5, "com": [5, 6, 29], "elabor": 5, "folder": [5, 75], "beginn": 5, "found": [5, 8, 65, 74, 78], "thank": 5, "read": [5, 28, 30, 39, 78], "guidelin": [5, 76], "befor": [5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 29, 51, 52, 54, 64, 75, 77, 78], "submit": 5, "pull": [5, 74], "request": [5, 28, 29, 30, 31, 32, 51, 52, 54, 74], "apach": 5, "paper": 5, "d": [5, 9, 26, 39, 45, 53, 56, 78], "willmann": 5, "schnabel": 5, "j": [5, 37, 39, 45, 76, 77], "48550": 5, "2311": 5, "08990": 5, "maintain": 5, "group": [5, 15, 65, 75, 77], "fraunhof": 5, "institut": 5, "manufactur": 5, "engin": 5, "ipa": 5, "www": 5, "de": 5, "question": [5, 31], "discuss": [5, 76], "feel": [5, 74], "gmail": 5, "bleed": 5, "edg": 5, "develop": 5, "guid": [5, 8, 28, 29, 30, 31, 32, 51, 52, 54, 76, 78], "api": 5, "regressor": [5, 29, 30, 32, 52], "recent": 6, "python3": 6, "dill": 6, "automat": [6, 8, 12, 13, 19, 45, 74, 75, 78], "latest": 6, "master": 6, "modul": [7, 77], "classif": [7, 13, 28, 31, 32, 51, 52, 78], "wrapper": [7, 19, 29, 30, 31, 32, 47, 48, 49, 74, 78], "str": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 42, 45, 46, 51, 52, 54, 58, 61, 62, 65], "backend": [5, 8, 20, 25, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 74, 75, 76, 77], "baseestim": [8, 65], "basesampl": [8, 65], "options_estim": [8, 75], "options_sampl": [8, 75], "log_fil": [8, 46, 75], "bool": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 54, 57, 58, 59, 60, 62, 63, 64, 65, 78], "cache_dir": [8, 75], "_cach": [8, 75], "max_session_tim": 8, "8h": 8, "max_jobs_retri": [8, 75], "wait_restart": [8, 75], "primitive_se": 8, "job": [8, 75], "system": [8, 25, 26, 29, 30, 38, 39, 40, 41, 42, 43, 44, 75], "central": [8, 75, 76], "compon": [8, 74, 75, 78], "respons": [8, 75], "low": [5, 8, 13, 26, 75, 78], "primit": [8, 62, 65, 76], "sub": [8, 28, 29, 30, 31, 32, 51, 52, 54, 75], "program": [8, 74, 75, 77], "care": [8, 78], "fail": [8, 75], "introduct": 8, "union": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 54, 61, 62, 63, 64, 65, 68, 70], "string": [8, 26, 38, 42, 61, 62, 74, 75, 77], "qasm_simul": [8, 75], "sampler": [8, 65, 75], "mandatori": [8, 77], "name": [8, 19, 26, 28, 29, 30, 31, 32, 51, 52, 54, 65, 75], "log": [8, 28, 31, 36, 37, 46, 52, 75, 76], "empti": [8, 33, 34], "directori": 8, "maximum": [8, 9, 10, 46, 74, 75, 78], "retri": 8, "until": [8, 78], "abort": [8, 75], "wait": 8, "second": [8, 15, 20, 38, 45, 46, 62, 65, 74, 77, 78], "type": [8, 12, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 58, 65, 69, 70, 72, 76, 78], "get_estim": [8, 75], "estimator_run": [8, 75], "get_sampl": [8, 75], "qsikit": [8, 75], "ideal": [8, 76], "exec": 8, "set_shot": [8, 62], "insert_your_token_her": [8, 75], "random_circuit": 8, "decompos": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23], "rep": [8, 19, 74], "backend_run": 8, "run_input": 8, "argument": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 28, 29, 30, 31, 32, 53, 75, 76, 78], "pass": [8, 19, 28, 29, 30, 31, 32, 51, 52, 54, 76, 78], "clear_estimator_cach": 8, "clear": 8, "avoid": [8, 9, 46, 75], "memori": 8, "overflow": 8, "clear_sampler_cach": 8, "close_sess": 8, "create_sess": [8, 75], "parameter_valu": [8, 36, 37], "kwarg": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 28, 29, 30, 31, 32, 46, 51, 52, 53, 54, 57, 58, 59, 60], "jobv1": 8, "get_shot": [8, 62], "getter": [8, 62], "reset_opt": 8, "reset_shot": [8, 53, 62], "wa": [5, 8], "sampler_run": [8, 75], "set_options_estim": 8, "field": 8, "set_options_sampl": 8, "set_primitive_opt": 8, "set_seed_for_primit": 8, "num_shot": [8, 62], "entangling_g": [9, 13], "crz": [9, 15, 74], "float": [9, 10, 11, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 69, 72, 73, 78], "chebyshev": [9, 10, 11, 78], "consist": [9, 29, 30, 32, 52, 76, 78], "basi": [9, 65, 77], "around": 9, "non": [9, 15, 28], "polynomi": [9, 26], "rx": [9, 10, 11, 15, 16, 65, 74], "degre": [9, 31, 32, 78], "rzz": [9, 15], "multipl": [9, 15, 38, 42, 45, 51, 52, 54, 59, 60, 62, 65, 77], "dimension": [9, 10, 11, 13, 14, 16, 17, 21, 76], "png": [9, 10, 11, 13, 14, 16, 17, 21, 78], "hire": [9, 10, 11, 13, 14, 16, 17, 21, 78], "latter": [9, 28], "switch": [9, 39, 76], "swap": [9, 15], "manipul": [9, 74, 78], "feature_label": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23], "parameter_label": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23], "quantumcircuit": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 65, 66, 68, 70], "format": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 45, 46, 47, 48, 49, 50, 54, 62, 65, 74], "generate_initial_paramet": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 38, 39, 40, 41, 42, 43, 44], "ndarrai": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 59, 60, 62, 63, 64, 65], "get_cheb_indic": [9, 10], "flat": [9, 10], "list": [9, 10, 12, 15, 18, 24, 26, 28, 29, 30, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 54, 58, 62, 63, 64, 65, 69, 72, 74, 76, 77, 78], "otherwis": [9, 10, 23, 28, 29, 30, 31, 32, 41, 51, 52, 54], "get_circuit": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23], "parametervector": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 38, 39, 40, 41, 42, 43, 44, 45, 65, 74], "param_vec": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23], "get_param": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 62], "dict": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 54, 57, 58, 59, 60, 61, 62, 65, 78], "hyper": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 31, 32, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 62, 78], "dictionari": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 46, 51, 52, 54, 62, 65], "set_param": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 51, 52, 54, 62], "build": [5, 10, 74, 75, 77, 78], "num_chebyshev": [11, 26], "rotation_g": 11, "ry": [11, 15, 16, 19, 21, 65, 74], "hadamard_start": 11, "arrang": 11, "block": [11, 29, 78], "tower": [9, 10, 11], "n_chebyshev": 11, "rz": [11, 15, 16, 21, 65, 74], "hadamard": 11, "stack": 11, "togeth": [11, 77, 78], "place": [11, 15, 74], "encodingcircuitbas": [12, 18, 20, 22, 25, 26, 27, 51, 52, 54, 62], "optree_cach": [12, 45, 62], "differenti": [12, 45, 61, 62, 65, 74], "deriv": [12, 45, 61, 62, 65, 74], "shift": [12, 74, 78], "rule": [12, 74, 78], "tabl": 12, "below": [12, 15, 28, 75, 76], "parameterel": 12, "feature_vector": 12, "parameter_vector": [12, 45, 74, 77], "ident": [12, 39, 42, 43, 45, 65], "dx": 12, "gradient": [12, 28, 46, 47, 48, 49, 50, 53, 57, 58, 59, 60, 64, 65, 74, 75, 77], "nabla_x": 12, "big": 12, "partial": [12, 59, 74, 76], "x_1": 12, "ldot": 12, "x_n": 12, "dp": [12, 45, 74], "nabla_p": 12, "p_1": 12, "p_m": 12, "dxdx": 12, "hessian": [12, 74, 77], "h": [12, 15, 39, 40, 41, 42, 43, 65, 74, 76], "x_": 12, "dpdxdx": 12, "laplac": 12, "delta": 12, "nabla": 12, "2_i": 12, "laplace_dp": 12, "laplacian": [12, 26, 62], "circ": 12, "dpdp": 12, "p_": 12, "p_i": [12, 58], "p_j": [12, 59], "dxdp": 12, "mix": 12, "xp": 12, "encoding_circuit_deriv": 12, "fm": [12, 18, 20, 26, 74, 77], "fm_deriv": [12, 74], "grad": [12, 46, 47, 48, 49, 50], "dp0": 12, "optre": [12, 45, 62, 74], "express": [12, 38, 39, 40, 41, 42, 43, 44, 62], "faster": [12, 45], "assign_paramet": [12, 25, 26, 27, 28, 29, 35, 45, 65, 76], "optreeelementbas": [12, 45, 65, 69, 72], "operatorbas": [12, 45], "tupl": [12, 22, 38, 42, 45, 57, 58, 59, 60, 61, 62, 65, 74, 77], "determin": [12, 13, 15, 19, 24, 29, 30, 32, 45, 51, 52, 53, 62, 74], "cycl": 13, "cycling_typ": 13, "saw": 13, "layer_typ": 13, "iswap": 13, "23": [13, 29, 30, 32, 52], "highdim": 13, "reach": [13, 76], "goe": 13, "down": [13, 26], "number_of_lay": 13, "repetit": [13, 15], "thrown": [13, 23], "cx": [13, 15, 19, 21, 65, 74], "peter": 13, "evan": 13, "processor": 13, "npj": 13, "161": 13, "final_encod": [14, 16], "reupload": 14, "redund": [14, 16, 18, 22, 24, 74, 75], "necessarili": [14, 16], "hubregtsen": [14, 18, 25, 26, 37, 74, 76], "Near": [14, 25, 26, 37, 76], "2105": [14, 25, 26, 37, 76], "02276v1": [14, 25, 26, 37, 76], "feature_str": 15, "parameter_str": 15, "creation": [15, 74, 75, 77], "associ": [15, 61, 77], "suppli": [15, 26, 38, 51, 52, 54, 65, 74, 77], "nearest": [15, 74], "neighbor": [15, 74], "nn": [15, 74], "aa": 15, "cx_entangl": [15, 74], "538": [15, 19, 74], "33x367": 15, "889": [15, 18, 74, 78], "func": 15, "layered_encoding_circuit": [15, 74], "add_lay": [15, 74], "1207": [15, 74], "22x367": [15, 74], "anoth": 15, "from_str": [15, 61, 74], "curli": 15, "bracket": 15, "sc": 15, "s_conjug": 15, "tc": 15, "t_conjug": 15, "ch": 15, "ch_entangl": 15, "cy": [15, 65], "cy_entangl": 15, "cz": [15, 65], "cz_entangl": 15, "cp": 15, "cp_entangl": 15, "crx": 15, "crx_entangl": 15, "cry": 15, "cry_entangl": 15, "crz_entangl": 15, "rxx": 15, "rxx_entangl": 15, "ryi": 15, "ryy_entangl": 15, "rzz_entangl": 15, "rzx": 15, "rzx_entangl": 15, "cu": 15, "cu_entangl": 15, "1458": 15, "05x367": 15, "construct": [15, 40, 74, 76, 77, 78], "num_layer_1": 15, "make_regress": 15, "qkrr": [15, 26, 29, 76], "n_featur": [15, 28, 29, 30, 31, 32, 51, 52], "lec": 15, "encoding_circuit_str": 15, "cv": 15, "nbest": 15, "solut": [15, 29, 30, 74, 76], "best_params_": 15, "identifi": [15, 65], "variable_str": 15, "callabl": [15, 19, 20, 46, 47, 48, 49, 50, 51, 52, 54, 58, 60, 69, 72, 78], "conjug": 15, "structur": [15, 45, 61, 62, 65, 74, 75, 78], "ent_strategi": 15, "classmethod": [15, 61], "num_lat": 15, "hz": 16, "cnot": 17, "zfeaturemap": 17, "pruned_paramet": 18, "prune": [18, 22, 24], "accept": [18, 74], "872": 18, "774x367": 18, "encodingcircuit": [18, 78], "remov": [18, 29, 65, 69, 72, 74], "qiskit_circuit": 19, "blueprintcircuit": 19, "mode": [19, 58], "\u03b8p": 19, "twoloc": [19, 74], "insert_barri": [19, 74], "33x284": [19, 74], "278": [19, 74], "zzfeaturemap": 19, "feature_dimens": 19, "2210": 19, "55x1204": 19, "No": [19, 75], "transpile_func": 20, "transpil": [20, 65, 75, 77], "chebyshevrx": [20, 51, 52, 74, 77], "fake_provid": [20, 74, 77], "fakemanilav2": [20, 74, 77], "initial_layout": [20, 74, 77], "1335": [20, 74], "81x451": [20, 74], "yz": 21, "One": 21, "prefactor": 21, "haug": 21, "kim": 21, "2108": 21, "01039v3": 21, "pruning_thresh": [22, 24], "x_lim": 22, "p_lim": 22, "x_val": 22, "p_val": 22, "prunedencodingcircuit": [22, 74], "1103": [22, 24, 74], "prxquantum": [22, 24, 74], "040309": [22, 24, 74], "quantum_fit": 22, "fisher": [22, 24, 74, 75], "threshold": [22, 24, 25, 26, 76, 78], "eigenvalu": [22, 24], "notimplementederror": 23, "qfi": [24, 75], "fischer": [24, 75], "propos": 24, "evaluate_dupl": 25, "off_diagon": 25, "mit_depol_nois": [25, 76], "overlap": 25, "wrap": [25, 47, 48, 76, 78], "appropri": [25, 78], "duplic": [25, 65], "depolar": [25, 76], "msplit": [25, 76], "mmean": [25, 76], "ref": [25, 26, 29, 30, 36, 53, 56, 76, 78], "meaning": 25, "fqk": [25, 28, 29, 30, 31, 32, 33, 36, 37], "tikhonov": [25, 26, 76], "prior": [25, 26, 29, 30], "havlicek": 25, "supervis": [25, 76], "enhanc": 25, "natur": [25, 76], "567": 25, "209": 25, "212": 25, "2019": [25, 76], "schuld": [25, 76], "phy": [25, 76], "rev": [25, 76], "lett": [25, 76], "122": 25, "040504": [25, 76], "02276": 25, "2d": [25, 27], "evaluate_pairwis": [25, 26, 27], "evaluate_with_paramet": [25, 26, 27], "observablebas": [26, 45, 51, 52, 54, 62, 77], "outerkernelbas": 26, "emb": [26, 74], "than": [26, 31, 38, 39, 40, 41, 42, 43, 44, 78], "done": [26, 76], "As": [26, 76], "outerkernel": 26, "num_hyper_paramet": 26, "name_hyper_paramet": 26, "euclidean": 26, "keyword": [26, 28, 29, 30, 53, 78], "nu": 26, "bigg": 26, "length_scal": 26, "period": 26, "sigma_0": 26, "additive_chi2": 26, "chi2": 26, "poli": 26, "rbf": [26, 76], "sigmoid": [26, 56], "cosin": 26, "sklean": 26, "chebyshevtow": 26, "kernel_matrix": 26, "00000000e": 26, "87671384e": [], "03": 26, "39336076e": [], "31179132e": [], "06795978e": [], "52095634e": [], "54573185e": [], "74099501e": [], "48853940e": [], "19692185e": [], "68644975e": [], "69917661e": [], "27503311e": [], "48867629e": [], "78976110e": [], "92151078e": [], "50643776e": [], "54374816e": [], "04": 26, "89932019e": [], "72184111e": [], "25340733e": [], "43547585e": [], "12927395e": [], "23489995e": [], "20573868e": [], "19903016e": [], "81173531e": [], "42989930e": [], "95344333e": [], "78189055e": [], "66784061e": [], "11051858e": [], "66595394e": [], "70432173e": [], "05464350e": [], "69912738e": [], "34448995e": [], "20560733e": [], "99977266e": [], "50216556e": [], "96635354e": [], "38274713e": [], "19136127e": [], "18028351e": [], "40837454e": [], "41485127e": [], "customobserv": [26, 77], "measument": 26, "zzzz": 26, "yyyi": 26, "xxxx": 26, "ml_method": 26, "evaluate_qnn": 26, "should": [27, 28, 29, 30, 31, 32, 51, 52, 54, 76, 78], "attribut": [27, 28, 31, 75], "kernmatrixbas": 27, "_regularize_matrix": 27, "kernelmatrixbas": [28, 29, 30, 31, 32, 33, 36, 37], "extend": [28, 78], "gaussian_process": 28, "gaussianprocessclassifi": 28, "inherit": 28, "underli": [28, 29, 30, 31, 32], "load_iri": 28, "qgpc_ansatz": 28, "98": 28, "predict_proba": [28, 31, 51], "85643716": 28, "07037611": 28, "07318673": 28, "80314475": 28, "09988938": 28, "09696586": 28, "target": [28, 29, 30, 31, 32, 37, 76, 78], "binari": [28, 43], "get_metadata_rout": [28, 29, 30, 31, 32, 51, 52, 54], "metadata": [28, 29, 30, 31, 32, 51, 52, 54], "rout": [28, 29, 30, 31, 32, 51, 52, 54, 75], "mechan": [28, 29, 30, 31, 32, 51, 52, 54, 76], "metadatarequest": [28, 29, 30, 31, 32, 51, 52, 54], "encapsul": [28, 29, 30, 31, 32, 51, 52, 54], "log_marginal_likelihood": 28, "eval_gradi": 28, "clone_kernel": 28, "margin": 28, "likelihood": [28, 36, 37, 76], "multi": [28, 31, 51], "versu": 28, "rest": 28, "n_kernel_param": 28, "mai": [28, 29, 30, 31, 32, 52, 77, 78], "compound": 28, "precomput": [28, 29, 30, 31, 32, 46, 52], "kernel_": 28, "modifi": [28, 75, 78], "log_likelihood": 28, "log_likelihood_gradi": 28, "queri": [28, 29], "classes_": [28, 31], "sort": [28, 31], "appear": [9, 10, 28, 31], "n_class": [28, 31], "sample_weight": [28, 29, 30, 31, 32, 51, 52], "subset": [28, 31, 51], "harsh": [28, 31, 51], "n_output": [28, 29, 30, 31, 32, 51, 52], "w": [28, 29, 30, 31, 32, 51, 52, 65, 77], "set_score_request": [28, 29, 30, 31, 32, 51, 52], "unchang": [28, 29, 30, 31, 32, 51, 52, 54], "relev": [28, 29, 30, 31, 32, 51, 52, 54], "enable_metadata_rout": [28, 29, 30, 31, 32, 51, 52, 54], "set_config": [28, 29, 30, 31, 32, 51, 52, 54], "ignor": [28, 29, 30, 31, 32, 51, 52, 54], "meta": [28, 29, 30, 31, 32, 51, 52, 54], "alia": [28, 29, 30, 31, 32, 51, 52, 54, 65], "metadata_rout": [28, 29, 30, 31, 32, 51, 52, 54], "retain": [28, 29, 30, 31, 32, 51, 52, 54], "insid": [28, 29, 30, 31, 32, 51, 52, 54], "06": [29, 30], "normalize_i": 29, "analog": [29, 30, 76, 78], "gram": 29, "particularli": [29, 30, 31, 32], "strength": [29, 30, 36, 51, 52], "condit": [29, 30], "assur": [29, 30], "stronger": [29, 30], "unit": 29, "zero": [29, 39, 46, 58, 76, 77], "revers": [29, 38], "report": 29, "full": [29, 39], "carl": [29, 36], "rasmussen": [29, 36], "christoph": [29, 36], "william": [29, 36], "mit": [29, 30, 36], "press": [29, 30, 36], "2006": [29, 36], "ab": [], "2304": [], "12923": [], "qgpr_ansatz": 29, "sample_train": 29, "label_train": 29, "sample_test": 29, "calculate_cov_and_mean": 29, "covari": 29, "just": 29, "quantumgaussianprocessregressor": 29, "return_cov": 29, "choleski": [29, 30], "decomposit": [29, 30], "stabil": [29, 30], "most": [29, 75, 76, 78], "k_train": [29, 30], "k_testtrain": [29, 30], "k_test": 29, "y_std": 29, "y_cov": 29, "joint": 29, "y_mean": 29, "coeffici": [29, 30, 32, 52], "residu": [29, 30, 32, 52], "sum": [29, 30, 32, 38, 39, 42, 43, 45, 52, 65, 72, 74, 77], "y_true": [29, 30, 32, 52], "arbitrarili": [29, 30, 32, 52], "wors": [29, 30, 32, 52], "alwai": [29, 30, 32, 52], "disregard": [29, 30, 32, 52], "n_samples_fit": [29, 30, 32, 52], "multioutput": [29, 30, 32, 52], "uniform_averag": [29, 30, 32, 52], "keep": [29, 30, 32, 52], "r2_score": [29, 30, 32, 52], "influenc": [29, 30, 32, 52, 78], "except": [29, 30, 32, 52, 76], "multioutputregressor": [29, 30, 32, 52], "set_predict_request": 29, "ridg": [30, 76], "krr": 30, "theoret": 30, "0e": 30, "dual_coeff_": 30, "n_train": 30, "n_test": 30, "kevin": 30, "murphi": 30, "probabilist": 30, "perspect": 30, "chapter": [30, 36], "pp": 30, "493": 30, "en": 30, "wikipedia": 30, "wiki": 30, "ridge_regress": 30, "q_kernel_pqk": 30, "qkrr_pqk": 30, "y_pred_pqk": 30, "accordingli": 30, "itself": [30, 33], "svc": [31, 32], "parent": [31, 32, 33, 34, 75], "document": [1, 31, 32, 74, 76, 78], "omit": [31, 32, 75], "coef0": [31, 32], "notabl": [31, 32], "make_moon": 31, "decision_funct": 31, "ovo": 31, "proport": 31, "exact": 31, "coef_": 31, "monoton": 31, "spars": [31, 32], "higher": [31, 32, 62, 74, 77, 78], "forc": [31, 32], "put": [31, 32, 76], "emphasi": [31, 32], "contigu": [31, 32], "float64": [31, 32], "csr_matrix": [31, 32], "dens": [31, 32], "n_samples_test": [31, 32], "n_samples_train": [31, 32], "predict_log_proba": 31, "slightli": 31, "those": 31, "produc": 31, "meaningless": 31, "set_fit_request": [31, 32, 51, 52, 54], "svr": 32, "inlier": 32, "outlier": 32, "kernellossbas": [34, 35], "optimizerbas": [34, 35, 51, 52, 54, 63, 64], "sequenc": [34, 35, 36, 37, 46, 47, 48, 49, 50, 78], "guess": [34, 46, 47, 48, 49, 50], "variat": [35, 36, 37], "nll": [35, 76], "nll_loss": [35, 76], "noise_std": 35, "opt_result": 35, "optimal_paramet": 35, "\u03b8": [36, 37], "equat": [36, 37, 39, 40, 41, 42, 43], "\u03c3i": 36, "2\u03c0": 36, "27": 37, "28": 37, "ta": 37, "sum_": [37, 39, 76], "y_i": 37, "y_j": 37, "rescale_class_label": 37, "operator_str": [38, 77], "charact": 38, "zz": [38, 39, 52, 77], "xx": 38, "get_oper": [38, 39, 40, 41, 42, 43, 44, 45], "statefn": [38, 39, 40, 41, 42, 43, 44], "get_pauli": [38, 39, 40, 41, 42, 43, 44], "get_pauli_map": [38, 39, 40, 41, 42, 43, 44], "set_map": [38, 39, 40, 41, 42, 43, 44, 77], "sprasepauliop": [38, 39, 40, 41, 42, 43, 44], "qubit_map": [38, 39, 40, 41, 42, 43, 44, 77], "num_all_qubit": [38, 39, 40, 41, 42, 43, 44], "whenev": [38, 39, 40, 41, 42, 43, 44], "Ising": [39, 45, 77], "hamiltonian": [39, 45, 77], "b_i": [39, 42, 43], "c_i": [39, 42], "d_": 39, "_j": 39, "ob": [39, 77], "ix": [39, 77], "foral": 39, "op_str": [40, 42, 77], "z_i": 40, "qquad": [40, 41], "act": [40, 78], "one_st": [41, 43], "bra": [41, 43, 76], "full_sum": [42, 43], "include_ident": [42, 43], "pauliop": [42, 43, 44], "abstract": [44, 57], "oo": [45, 61, 62], "dop": [45, 61, 77], "odop": 45, "dopdop": [45, 61], "odopdop": 45, "oodop": 45, "oodopdop": 45, "isinghamiltonian": [45, 52, 77], "iii": [45, 77], "iiz": [45, 77], "izi": [45, 77], "zii": [45, 77], "izz": [45, 77], "ziz": [45, 77], "zzi": [45, 77], "get_operator_squar": [45, 77], "p_op": [45, 77], "num_oper": 45, "callback": [46, 47, 48, 49, 50, 51, 52, 54], "default_callback": [46, 47, 48, 49], "toler": 46, "termin": 46, "beta_1": 46, "decai": [46, 55, 56, 78], "moment": 46, "beta_2": 46, "99": 46, "divis": 46, "num_averag": 46, "averag": 46, "maxiter_tot": 46, "skip_fun": 46, "skip": 46, "ep": 46, "optimizerresult": [46, 47, 48, 49, 50], "set_callback": [46, 47, 48, 49, 50], "counter": [47, 48, 49], "observable_bas": [51, 52, 54], "lossbas": [51, 52, 54, 63, 64], "batch_siz": [51, 52, 54, 64, 78], "epoch": [51, 52, 54, 64, 78], "shuffl": [51, 52, 54, 64, 78], "opt_param_op": [51, 52, 54, 57, 58, 59, 60, 63, 64], "shot_control": [51, 52, 54, 63, 64, 78], "shotcontrolbas": [51, 52, 54, 63, 64], "pbar": [51, 52, 54], "interfac": [5, 51, 52, 75], "possibli": [51, 52], "mini": [51, 52, 64], "batch": [51, 52, 54, 64], "Will": [51, 52], "sgdmixin": [51, 52, 54], "sgd": [51, 52, 54, 64, 78], "els": [51, 52], "tqdm": [51, 52, 54], "bar": [51, 52, 54], "slsqp": [51, 52, 76], "make_blob": 51, "60": 51, "center": 51, "partial_fit": [51, 52], "won": [51, 52], "baseqnn": [51, 52], "set_partial_fit_request": [51, 52], "qnnclassifi": [52, 78], "reg": [52, 78], "rstd_bound": [53, 78], "min_shot": [53, 78], "max_shot": [53, 78], "5000": [53, 75], "rstd": [53, 78], "n_": [53, 78], "sigma_l": [53, 78], "beta": [53, 78], "rel": [53, 78], "set_executor": 53, "set_shots_for_grad": 53, "set_shots_for_loss": 53, "cost": [54, 78], "lr_start": 55, "lr_end": 55, "iter_decai": 55, "iter_plateau": 55, "length": [55, 56], "plateau": [55, 56, 78], "alpha_": 56, "value_dict": [57, 58, 59, 60], "set_opt_param_op": [57, 58, 59, 60], "flag": [57, 58, 59, 60, 65], "parameter_list": 58, "parameter_operator_list": 58, "l1": 58, "variance_factor": [58, 60], "l_": [58, 60, 78], "var": [58, 60, 61], "var_i": 58, "ground_truth": [59, 63, 64], "sum_j": 59, "w_i": 59, "f_ref": 59, "count": [59, 77], "multiple_output": [59, 60], "sigma_f": [59, 78], "operatornam": 60, "neglect": 60, "wave_funct": 61, "parametervectorel": 61, "from_paramet": 61, "val": 61, "convert": 61, "from_tupl": 61, "from_vari": 61, "result_cach": 62, "nest": [62, 65], "kei": [62, 65, 74, 76], "entri": 62, "evaluate_dfdop": 62, "evaluate_dfdopdx": 62, "evaluate_dfdp": 62, "evaluate_dfdpdx": 62, "evaluate_dfdx": 62, "evaluate_dfdxdx": 62, "evaluate_diff_tupl": 62, "diff_tupl": 62, "evaluate_f": 62, "evaluate_from_str": 62, "input_str": 62, "evaluate_laplac": 62, "evaluate_laplace_dop": 62, "evaluate_laplace_dp": 62, "evaluate_prob": 62, "quantuminst": 62, "sparsevectorstatefn": 62, "to_dict_fn": 62, "evaluate_var": 62, "evaluate_vari": 62, "get_optree_from_expec": 62, "input_expec": 62, "expec": 62, "get_optree_from_str": 62, "prefix": 62, "op0__": 62, "op1__": 62, "etc": [62, 75], "input_valu": [63, 64], "descent": 64, "static": 65, "optreederiv": 65, "optreenodebas": [65, 69, 72], "optreecircuit": [65, 68, 70], "optreeoper": [65, 68, 70], "optreeleafcircuit": [65, 66, 68, 70], "differentiate_v2": 65, "recurs": 65, "transpile_to_supported_instruct": 65, "supported_g": 65, "ecr": 65, "sdg": 65, "sx": 65, "tdg": 65, "optreeevalu": 65, "evaluate_tree_with_estim": 65, "expectation_tre": 65, "optreeexpectationvalu": [65, 70], "detect_dupl": 65, "tree": 65, "optreeleafexpectationvalu": [65, 68, 70], "detect_expectation_dupl": 65, "detect": 65, "evaluate_tree_with_sampl": 65, "evaluate_with_estim": 65, "dictionary_circuit": 65, "dictionary_oper": 65, "dictionaries_combin": 65, "optreeleafoper": [65, 68, 71], "evaluate_with_sampl": 65, "optreemeasuredoper": 65, "optreeleafmeasuredoper": [65, 70], "transform_to_zbasi": 65, "optree_el": 65, "abelian_group": 65, "commut": 65, "inplac": 65, "gen_expectation_tre": 65, "circuit_tre": 65, "operator_tre": 65, "leaf": [65, 66, 67, 68, 70, 71, 73], "get_first_leaf": 65, "optreeleafbas": 65, "get_num_nested_list": 65, "get_number_of_leaf": 65, "get_tree_depth": 65, "hash_circuit": 65, "hash": [65, 75], "_circuit_kei": 65, "comparison": 65, "hash_oper": 65, "_observable_kei": 65, "simplifi": [65, 78], "kept": 65, "untouch": 65, "merg": 65, "doubl": 65, "branch": 65, "item": 67, "arbitrari": [67, 74, 77], "optreeleafcontain": 67, "children_list": [69, 72], "factor_list": [69, 72], "operation_list": [69, 72], "node": [69, 72], "children": [69, 72], "child": [69, 72], "measure_circuit": 70, "optreeleafvalu": 73, "mani": [74, 78], "obligatori": 74, "facilit": 74, "fulli": [74, 75], "contribut": 74, "match": 74, "fm1": 74, "fm2": 74, "fm3": 74, "1374": 74, "44x367": 74, "qiskitencodingcircuit": 74, "effortlessli": 74, "manner": [74, 78], "regardless": 74, "fashion": 74, "inspir": [74, 76], "1040x367": 74, "qfim": 74, "automated_prun": 74, "pruned_encoding_circuit": 74, "370": 74, "906x200": 74, "667": 74, "often": [3, 74, 78], "essenti": [74, 78], "straightforward": [74, 76], "futur": [74, 75], "get_deriv": [74, 77], "proprietari": 74, "arithmet": 74, "grad_from_str": 74, "grad_from_tupl": 74, "grad_from_list": 74, "intern": [74, 75], "fake": [74, 75], "varieti": 75, "comfort": 75, "summar": 75, "ingo": 75, "arrow": 75, "outgo": 75, "remot": 75, "doe": 75, "cancel": 75, "resubmit": 75, "paus": 75, "action": [5, 75], "ca": 75, "framework": [75, 76], "wai": [75, 76], "principl": [75, 78], "long": 75, "vice": [75, 76], "versa": [75, 76], "zne": 75, "deprec": 75, "qiskit_ibm_provid": 75, "ibmprovid": 75, "hub": 75, "600": 75, "lincombqgt": 75, "quantum_info": 75, "intial": 75, "set_opt": 75, "among": [76, 78], "fact": 76, "formal": 76, "rich": 76, "mathemat": 76, "theori": 76, "studi": 76, "reproduc": 76, "rkh": 76, "attain": [76, 78], "trivial": 76, "infinit": 76, "endow": 76, "inner": 76, "ever": 76, "braket": 76, "interpret": 76, "fundament": 76, "formul": 76, "whose": 76, "inher": 76, "phenomena": 76, "superposit": 76, "prospect": 76, "abl": 76, "deal": 76, "psi": [76, 78], "u_": 76, "ansatz": 76, "But": 76, "densiti": 76, "rho": 76, "enrich": 76, "schmidt": 76, "reveal": 76, "analysi": 76, "famou": 76, "commonli": [76, 78], "era": 76, "fast": 76, "algebra": 76, "hhl": 76, "basic": 76, "notion": 76, "mere": 76, "conveni": 76, "independ": 76, "qgpc": 76, "literatur": 76, "noth": 76, "implicitli": 76, "predefin": [76, 77, 78], "beyond": 76, "nativ": 76, "geometri": 76, "q": 76, "prime": 76, "tr": 76, "pure": [76, 77], "immedi": 76, "fqk_instanc": 76, "exclus": 76, "diagon": 76, "fulfil": 76, "attempt": 76, "restor": 76, "suffer": 76, "concentr": 76, "untrain": 76, "circumv": 76, "famili": 76, "simplest": 76, "particl": 76, "rdm": 76, "pq": 76, "sum_k": [76, 78], "lbrace": 76, "rbrace": 76, "_k": 76, "neq": 76, "trace": 76, "th": 76, "seen": [76, 78], "ambigu": 76, "concern": 76, "eventu": 76, "reflect": 76, "matern": 76, "expsinesquar": 76, "rationalquadrat": 76, "dotproduct": 76, "pariwisekernel": 76, "speak": 76, "pqk_instanc": 76, "moreov": 76, "At": 76, "kernel_optim": 76, "kerneloptim": 76, "previous": 76, "split": 76, "targetalign": 76, "adam_opt": 76, "kta": 76, "kta_loss": 76, "kta_optim": 76, "opt_kta_result": 76, "retriev": 76, "opt_kta_param": 76, "noise_v": 76, "bet": 76, "nll_optim": 76, "opt_nll_result": 76, "opt_nll_param": 76, "2101": 76, "11020v2": 76, "killoran": 76, "112": 76, "jerbi": 76, "2110": 76, "13162v3": 76, "plai": 77, "role": 77, "conjunct": 77, "simpli": 77, "letter": 77, "multipli": 77, "ob1": 77, "ob2": 77, "zy": 77, "added_ob": 77, "squared_ob": 77, "zizz": 77, "xixi": 77, "set_qubit_map": 77, "transpiledencodingcircuit": 77, "num_physical_qubit": 77, "iiiii": 77, "iiiiz": 77, "iiizi": 77, "ziiii": 77, "observablederiv": 77, "observable_deriv": 77, "cube": 77, "although": 77, "op3": 77, "concept": 78, "realm": 78, "adher": 78, "akin": 78, "neuron": 78, "somewhat": 78, "mislead": 78, "conform": 78, "paradigm": 78, "resembl": 78, "explain": 78, "nomenclatur": 78, "orang": 78, "hybrid": 78, "scheme": [1, 78], "freedom": 78, "denot": 78, "u_i": 78, "tailor": 78, "wherea": 78, "alter": 78, "intric": 78, "interconnect": 78, "repeatedli": 78, "rvert": 78, "freeli": 78, "worth": 78, "assess": 78, "desir": 78, "stochast": 78, "stage": 78, "compos": 78, "main": 78, "dedic": 78, "costoper": 78, "1123": 78, "61x367": 78, "dispos": 78, "ingredi": 78, "particular": 78, "iiii": 78, "iiiz": 78, "iizi": 78, "izii": 78, "ziii": 78, "easi": 78, "lot": 78, "lbfgsb": 78, "spsa": 78, "bigger": 78, "options_dict": 78, "sometim": 78, "benefici": 78, "get_lr_decai": 78, "smaller": 78, "shotsfromrstd": 78, "earli": 78, "later": 78, "qasmsimul": 78, "subject": 78, "logarithm": 78, "yield": 78, "satisfi": 78, "less": 78, "priorit": 78, "focu": 78, "get_variance_fac": 78, "08": 78, "top": 5, "experi": 5, "52469778e": [], "60771570e": [], "62234389e": [], "84230752e": [], "61251895e": [], "82945324e": [], "92830835e": [], "27765865e": [], "81572110e": [], "61260258e": [], "97844597e": [], "84894796e": [], "12393224e": [], "89366373e": [], "20148957e": [], "73556151e": [], "91297324e": [], "47455532e": [], "51645040e": [], "86799971e": [], "19616490e": [], "60844795e": [], "34914828e": [], "19969451e": [], "64652825e": [], "54908068e": [], "42596873e": [], "37859647e": [], "56753509e": [], "45209879e": [], "67167853e": [], "66125687e": [], "75527868e": [], "07663238e": [], "67084003e": [], "98450732e": [], "63437645e": [], "09821186e": [], "98711847e": [], "12171837e": [], "95627653e": [], "99997248e": [], "57012957e": [], "10783695e": [], "95843566e": [], "52071890e": [], "70377028e": [], "62731133e": [], "41575510e": [], "96882433e": [], "99801069e": [], "91435997e": [], "10975356e": [], "52576712e": [], "43251619e": [], "00894721e": [], "91256693e": [], "19681519e": [], "40855437e": [], "11493782e": [], "65929611e": [], "64776212e": [], "58079157e": [], "17095896e": [], "39530851e": [], "70668428e": [], "62171455e": [], "13039315e": [], "63658275e": [], "45912936e": [], "45544555e": [], "61458020e": [], "70370528e": [], "31332970e": [], "00461258e": [], "30349355e": [], "30404600e": [], "52184386e": [], "82877564e": [], "09846984e": [], "42182679e": [], "58005278e": [], "89220365e": [], "81585531e": [], "82643601e": [], "17531434e": [], "03445776e": [], "35825243e": [], "25785225e": [], "01974013e": [], "0x15a965a3d00": 1, "autoqml": [1, 5], "venv": 1, "lib": 1, "site": 1, "266": 1, "futurewarn": 1, "drawer": 1, "34": 1, "iqp": 1, "releas": 1, "silenc": 1, "style": 1, "clifford": 1, "_style": 1, "def_font_ratio": 1, "load_styl": 1, "0x0000015a96b3a820": 1, "0x0000015a9681d310": 1, "ipykernel_16320": 1, "0204753114353172e": 1, "0x0000015a9916f190": 1, "demand": 3, "appeal": 3, "impos": 3, "constraint": 3, "balanc": 3, "area": 3, "prefer": 3, "german": 5, "feder": 5, "ministri": 5, "econom": 5, "affair": 5, "climat": 5, "grant": 5, "01mq22002a": 5, "aqua": 5, "01mq22003d": 5, "educ": 5, "h2giga": 5, "degrad": 5, "el3": 5, "03hy110d": 5, "baseestimatorv1": [8, 65], "basesamplerv1": [8, 65], "aer_simulator_statevector": 8, "86528196e": 26, "85953002e": 26, "31986619e": 26, "49595579e": 26, "84769280e": 26, "83928140e": 26, "16322217e": 26, "46093581e": 26, "94998566e": 26, "57820985e": 26, "66292062e": 26, "08386452e": 26, "12606467e": 26, "98073339e": 26, "99800961e": 26, "41765684e": 26, "55866955e": 26, "40519538e": 26, "89372848e": 26, "57711628e": 26, "21747117e": 26, "46169730e": 26, "54847765e": 26, "59382318e": 26, "66831715e": 26, "18436383e": 26, "36403391e": 26, "56530454e": 26, "62199824e": 26, "67100124e": 26, "41259255e": 26, "52234630e": 26, "21924753e": 26, "12051305e": 26, "99522055e": 26, "34807628e": 26, "19565280e": 26, "59732281e": 26, "10883526e": 26, "99111938e": 26, "62788462e": 26, "33355550e": 26, "48192277e": 26, "79578447e": 26, "10636636e": 26, "springer": 29, "articl": 29, "1007": 29, "s42484": 29, "023": 29, "00138": 29, "split_pauli": 45, "qiskit_algorithm": [49, 75], "aer_simul": 75}, "objects": {"squlearn": [[8, 0, 1, "", "Executor"], [7, 3, 0, "-", "encoding_circuit"], [7, 3, 0, "-", "observables"], [7, 3, 0, "-", "optimizers"], [7, 3, 0, "-", "qnn"]], "squlearn.Executor": [[8, 1, 1, "", "backend"], [8, 2, 1, "", "backend_run"], [8, 2, 1, "", "clear_estimator_cache"], [8, 2, 1, "", "clear_sampler_cache"], [8, 2, 1, "", "close_session"], [8, 2, 1, "", "create_session"], [8, 1, 1, "", "estimator"], [8, 2, 1, "", "estimator_run"], [8, 1, 1, "", "execution"], [8, 2, 1, "", "get_estimator"], [8, 2, 1, "", "get_sampler"], [8, 2, 1, "", "get_shots"], [8, 2, 1, "", "reset_options"], [8, 2, 1, "", "reset_options_estimator"], [8, 2, 1, "", "reset_options_sampler"], [8, 2, 1, "", "reset_shots"], [8, 1, 1, "", "sampler"], [8, 2, 1, "", "sampler_run"], [8, 1, 1, "", "service"], [8, 1, 1, "", "session"], [8, 2, 1, "", "set_options_estimator"], [8, 2, 1, "", "set_options_sampler"], [8, 2, 1, "", "set_primitive_options"], [8, 2, 1, "", "set_seed_for_primitive"], [8, 2, 1, "", "set_shots"], [8, 1, 1, "", "shots"]], "squlearn.encoding_circuit": [[9, 0, 1, "", "ChebyshevPQC"], [10, 0, 1, "", "ChebyshevRx"], [11, 0, 1, "", "ChebyshevTower"], [12, 0, 1, "", "EncodingCircuitDerivatives"], [13, 0, 1, "", "HighDimEncodingCircuit"], [14, 0, 1, "", "HubregtsenEncodingCircuit"], [15, 0, 1, "", "LayeredEncodingCircuit"], [16, 0, 1, "", "MultiControlEncodingCircuit"], [17, 0, 1, "", "ParamZFeatureMap"], [18, 0, 1, "", "PrunedEncodingCircuit"], [19, 0, 1, "", "QiskitEncodingCircuit"], [20, 0, 1, "", "TranspiledEncodingCircuit"], [21, 0, 1, "", "YZ_CX_EncodingCircuit"], [22, 4, 1, "", "automated_pruning"], [24, 4, 1, "", "pruning_from_QFI"]], "squlearn.encoding_circuit.ChebyshevPQC": [[9, 2, 1, "", "draw"], [9, 2, 1, "", "generate_initial_parameters"], [9, 2, 1, "", "get_cheb_indices"], [9, 2, 1, "", "get_circuit"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ChebyshevRx": [[10, 2, 1, "", "draw"], [10, 2, 1, "", "generate_initial_parameters"], [10, 2, 1, "", "get_cheb_indices"], [10, 2, 1, "", "get_circuit"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ChebyshevTower": [[11, 2, 1, "", "draw"], [11, 2, 1, "", "generate_initial_parameters"], [11, 2, 1, "", "get_circuit"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.EncodingCircuitDerivatives": [[12, 2, 1, "", "assign_parameters"], [12, 2, 1, "", "get_derivative"]], "squlearn.encoding_circuit.HighDimEncodingCircuit": [[13, 2, 1, "", "draw"], [13, 2, 1, "", "generate_initial_parameters"], [13, 2, 1, "", "get_circuit"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.HubregtsenEncodingCircuit": [[14, 2, 1, "", "draw"], [14, 2, 1, "", "generate_initial_parameters"], [14, 2, 1, "", "get_circuit"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.LayeredEncodingCircuit": [[15, 2, 1, "", "H"], [15, 2, 1, "", "I"], [15, 2, 1, "", "P"], [15, 2, 1, "", "Rx"], [15, 2, 1, "", "Ry"], [15, 2, 1, "", "Rz"], [15, 2, 1, "", "S"], [15, 2, 1, "", "S_conjugate"], [15, 2, 1, "", "T"], [15, 2, 1, "", "T_conjugate"], [15, 2, 1, "", "U"], [15, 2, 1, "", "X"], [15, 2, 1, "", "Y"], [15, 2, 1, "", "Z"], [15, 2, 1, "", "add_layer"], [15, 2, 1, "", "ch_entangling"], [15, 2, 1, "", "cp_entangling"], [15, 2, 1, "", "crx_entangling"], [15, 2, 1, "", "cry_entangling"], [15, 2, 1, "", "crz_entangling"], [15, 2, 1, "", "cu_entangling"], [15, 2, 1, "", "cx_entangling"], [15, 2, 1, "", "cy_entangling"], [15, 2, 1, "", "cz_entangling"], [15, 2, 1, "", "draw"], [15, 2, 1, "", "from_string"], [15, 2, 1, "", "generate_initial_parameters"], [15, 2, 1, "", "get_circuit"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "rxx_entangling"], [15, 2, 1, "", "ryy_entangling"], [15, 2, 1, "", "rzx_entangling"], [15, 2, 1, "", "rzz_entangling"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "swap"]], "squlearn.encoding_circuit.MultiControlEncodingCircuit": [[16, 2, 1, "", "draw"], [16, 2, 1, "", "generate_initial_parameters"], [16, 2, 1, "", "get_circuit"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ParamZFeatureMap": [[17, 2, 1, "", "draw"], [17, 2, 1, "", "generate_initial_parameters"], [17, 2, 1, "", "get_circuit"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.PrunedEncodingCircuit": [[18, 2, 1, "", "draw"], [18, 2, 1, "", "generate_initial_parameters"], [18, 2, 1, "", "get_circuit"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.QiskitEncodingCircuit": [[19, 2, 1, "", "draw"], [19, 2, 1, "", "generate_initial_parameters"], [19, 2, 1, "", "get_circuit"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.TranspiledEncodingCircuit": [[20, 2, 1, "", "draw"], [20, 2, 1, "", "generate_initial_parameters"], [20, 2, 1, "", "get_circuit"], [20, 2, 1, "", "get_params"], [20, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.YZ_CX_EncodingCircuit": [[21, 2, 1, "", "draw"], [21, 2, 1, "", "generate_initial_parameters"], [21, 2, 1, "", "get_circuit"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.encoding_circuit_base": [[23, 0, 1, "", "EncodingCircuitBase"]], "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase": [[23, 2, 1, "", "draw"], [23, 2, 1, "", "generate_initial_parameters"], [23, 2, 1, "", "get_circuit"], [23, 2, 1, "", "get_params"], [23, 2, 1, "", "set_params"]], "squlearn.kernel": [[7, 3, 0, "-", "matrix"], [7, 3, 0, "-", "optimization"]], "squlearn.kernel.matrix": [[25, 0, 1, "", "FidelityKernel"], [26, 0, 1, "", "ProjectedQuantumKernel"]], "squlearn.kernel.matrix.FidelityKernel": [[25, 2, 1, "", "assign_parameters"], [25, 2, 1, "", "evaluate"], [25, 2, 1, "", "evaluate_pairwise"], [25, 2, 1, "", "evaluate_with_parameters"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "set_params"]], "squlearn.kernel.matrix.ProjectedQuantumKernel": [[26, 2, 1, "", "assign_parameters"], [26, 1, 1, "", "encoding_circuit"], [26, 2, 1, "", "evaluate"], [26, 2, 1, "", "evaluate_pairwise"], [26, 2, 1, "", "evaluate_qnn"], [26, 2, 1, "", "evaluate_with_parameters"], [26, 2, 1, "", "get_params"], [26, 1, 1, "", "measurement"], [26, 1, 1, "", "name_hyper_parameters"], [26, 1, 1, "", "num_features"], [26, 1, 1, "", "num_hyper_parameters"], [26, 1, 1, "", "num_parameters"], [26, 1, 1, "", "num_qubits"], [26, 1, 1, "", "outer_kernel"], [26, 1, 1, "", "parameters"], [26, 2, 1, "", "set_params"]], "squlearn.kernel.matrix.kernel_matrix_base": [[27, 0, 1, "", "KernelMatrixBase"]], "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase": [[27, 2, 1, "", "assign_parameters"], [27, 2, 1, "", "evaluate"], [27, 2, 1, "", "evaluate_pairwise"], [27, 2, 1, "", "evaluate_with_parameters"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "set_params"]], "squlearn.kernel.ml": [[28, 0, 1, "", "QGPC"], [29, 0, 1, "", "QGPR"], [30, 0, 1, "", "QKRR"], [31, 0, 1, "", "QSVC"], [32, 0, 1, "", "QSVR"]], "squlearn.kernel.ml.QGPC": [[28, 2, 1, "", "fit"], [28, 2, 1, "", "get_metadata_routing"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "log_marginal_likelihood"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "predict_proba"], [28, 2, 1, "", "score"], [28, 2, 1, "", "set_params"], [28, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QGPR": [[29, 2, 1, "", "calculate_cov_and_mean"], [29, 2, 1, "", "fit"], [29, 2, 1, "", "get_metadata_routing"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "predict"], [29, 2, 1, "", "score"], [29, 2, 1, "", "set_params"], [29, 2, 1, "", "set_predict_request"], [29, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QKRR": [[30, 2, 1, "", "fit"], [30, 2, 1, "", "get_metadata_routing"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "score"], [30, 2, 1, "", "set_params"], [30, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QSVC": [[31, 2, 1, "", "decision_function"], [31, 2, 1, "", "fit"], [31, 2, 1, "", "get_metadata_routing"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "predict_log_proba"], [31, 2, 1, "", "predict_proba"], [31, 2, 1, "", "score"], [31, 2, 1, "", "set_fit_request"], [31, 2, 1, "", "set_params"], [31, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QSVR": [[32, 2, 1, "", "fit"], [32, 2, 1, "", "get_metadata_routing"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "predict"], [32, 2, 1, "", "score"], [32, 2, 1, "", "set_fit_request"], [32, 2, 1, "", "set_params"], [32, 2, 1, "", "set_score_request"]], "squlearn.kernel.optimization.kernel_loss_base": [[33, 0, 1, "", "KernelLossBase"]], "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase": [[33, 2, 1, "", "compute"]], "squlearn.kernel.optimization.kernel_optimization_base": [[34, 0, 1, "", "KernelOptimizerBase"]], "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase": [[34, 2, 1, "", "run_optimization"]], "squlearn.kernel.optimization.kernel_optimizer": [[35, 0, 1, "", "KernelOptimizer"]], "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer": [[35, 2, 1, "", "run_optimization"]], "squlearn.kernel.optimization.negative_log_likelihood": [[36, 0, 1, "", "NLL"]], "squlearn.kernel.optimization.negative_log_likelihood.NLL": [[36, 2, 1, "", "compute"]], "squlearn.kernel.optimization.target_alignment": [[37, 0, 1, "", "TargetAlignment"]], "squlearn.kernel.optimization.target_alignment.TargetAlignment": [[37, 2, 1, "", "compute"]], "squlearn.observables": [[38, 0, 1, "", "CustomObservable"], [39, 0, 1, "", "IsingHamiltonian"], [40, 0, 1, "", "SinglePauli"], [41, 0, 1, "", "SingleProbability"], [42, 0, 1, "", "SummedPaulis"], [43, 0, 1, "", "SummedProbabilities"]], "squlearn.observables.CustomObservable": [[38, 2, 1, "", "generate_initial_parameters"], [38, 2, 1, "", "get_operator"], [38, 2, 1, "", "get_params"], [38, 2, 1, "", "get_pauli"], [38, 2, 1, "", "get_pauli_mapped"], [38, 1, 1, "", "num_parameters"], [38, 1, 1, "", "num_qubits"], [38, 1, 1, "", "operator_string"], [38, 1, 1, "", "parameterized"], [38, 2, 1, "", "set_map"], [38, 2, 1, "", "set_params"]], "squlearn.observables.IsingHamiltonian": [[39, 1, 1, "", "I"], [39, 1, 1, "", "X"], [39, 1, 1, "", "Z"], [39, 1, 1, "", "ZZ"], [39, 2, 1, "", "generate_initial_parameters"], [39, 2, 1, "", "get_operator"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "get_pauli"], [39, 2, 1, "", "get_pauli_mapped"], [39, 1, 1, "", "num_parameters"], [39, 1, 1, "", "num_qubits"], [39, 2, 1, "", "set_map"], [39, 2, 1, "", "set_params"]], "squlearn.observables.SinglePauli": [[40, 2, 1, "", "generate_initial_parameters"], [40, 2, 1, "", "get_operator"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "get_pauli"], [40, 2, 1, "", "get_pauli_mapped"], [40, 1, 1, "", "num_parameters"], [40, 1, 1, "", "num_qubits"], [40, 1, 1, "", "op_str"], [40, 1, 1, "", "parameterized"], [40, 1, 1, "", "qubit"], [40, 2, 1, "", "set_map"], [40, 2, 1, "", "set_params"]], "squlearn.observables.SingleProbability": [[41, 2, 1, "", "generate_initial_parameters"], [41, 2, 1, "", "get_operator"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "get_pauli"], [41, 2, 1, "", "get_pauli_mapped"], [41, 1, 1, "", "num_parameters"], [41, 1, 1, "", "num_qubits"], [41, 1, 1, "", "one_state"], [41, 1, 1, "", "parameterized"], [41, 1, 1, "", "qubit"], [41, 2, 1, "", "set_map"], [41, 2, 1, "", "set_params"]], "squlearn.observables.SummedPaulis": [[42, 1, 1, "", "full_sum"], [42, 2, 1, "", "generate_initial_parameters"], [42, 2, 1, "", "get_operator"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "get_pauli"], [42, 2, 1, "", "get_pauli_mapped"], [42, 1, 1, "", "include_identity"], [42, 1, 1, "", "num_parameters"], [42, 1, 1, "", "num_qubits"], [42, 1, 1, "", "op_str"], [42, 2, 1, "", "set_map"], [42, 2, 1, "", "set_params"]], "squlearn.observables.SummedProbabilities": [[43, 1, 1, "", "full_sum"], [43, 2, 1, "", "generate_initial_parameters"], [43, 2, 1, "", "get_operator"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "get_pauli"], [43, 2, 1, "", "get_pauli_mapped"], [43, 1, 1, "", "include_identity"], [43, 1, 1, "", "num_parameters"], [43, 1, 1, "", "num_qubits"], [43, 1, 1, "", "one_state"], [43, 2, 1, "", "set_map"], [43, 2, 1, "", "set_params"]], "squlearn.observables.observable_base": [[44, 0, 1, "", "ObservableBase"]], "squlearn.observables.observable_base.ObservableBase": [[44, 2, 1, "", "generate_initial_parameters"], [44, 2, 1, "", "get_operator"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "get_pauli"], [44, 2, 1, "", "get_pauli_mapped"], [44, 1, 1, "", "num_parameters"], [44, 1, 1, "", "num_qubits"], [44, 2, 1, "", "set_map"], [44, 2, 1, "", "set_params"]], "squlearn.observables.observable_derivatives": [[45, 0, 1, "", "ObservableDerivatives"]], "squlearn.observables.observable_derivatives.ObservableDerivatives": [[45, 2, 1, "", "assign_parameters"], [45, 2, 1, "", "get_derivative"], [45, 2, 1, "", "get_operator"], [45, 2, 1, "", "get_operator_squared"], [45, 1, 1, "", "num_operators"], [45, 1, 1, "", "num_parameters"], [45, 1, 1, "", "parameter_vector"]], "squlearn.optimizers": [[46, 0, 1, "", "Adam"], [47, 0, 1, "", "LBFGSB"], [48, 0, 1, "", "SLSQP"], [49, 0, 1, "", "SPSA"]], "squlearn.optimizers.Adam": [[46, 2, 1, "", "minimize"], [46, 2, 1, "", "reset"], [46, 2, 1, "", "set_callback"], [46, 2, 1, "", "step"]], "squlearn.optimizers.LBFGSB": [[47, 2, 1, "", "minimize"], [47, 2, 1, "", "set_callback"]], "squlearn.optimizers.SLSQP": [[48, 2, 1, "", "minimize"], [48, 2, 1, "", "set_callback"]], "squlearn.optimizers.SPSA": [[49, 2, 1, "", "minimize"], [49, 2, 1, "", "set_callback"]], "squlearn.optimizers.optimizer_base": [[50, 0, 1, "", "OptimizerBase"]], "squlearn.optimizers.optimizer_base.OptimizerBase": [[50, 2, 1, "", "minimize"], [50, 2, 1, "", "set_callback"]], "squlearn.qnn": [[51, 0, 1, "", "QNNClassifier"], [52, 0, 1, "", "QNNRegressor"], [53, 0, 1, "", "ShotsFromRSTD"], [55, 0, 1, "", "get_lr_decay"], [56, 0, 1, "", "get_variance_fac"]], "squlearn.qnn.QNNClassifier": [[51, 2, 1, "", "fit"], [51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "partial_fit"], [51, 2, 1, "", "predict"], [51, 2, 1, "", "predict_proba"], [51, 2, 1, "", "score"], [51, 2, 1, "", "set_fit_request"], [51, 2, 1, "", "set_params"], [51, 2, 1, "", "set_partial_fit_request"], [51, 2, 1, "", "set_score_request"]], "squlearn.qnn.QNNRegressor": [[52, 2, 1, "", "fit"], [52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "partial_fit"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "score"], [52, 2, 1, "", "set_fit_request"], [52, 2, 1, "", "set_params"], [52, 2, 1, "", "set_partial_fit_request"], [52, 2, 1, "", "set_score_request"]], "squlearn.qnn.ShotsFromRSTD": [[53, 2, 1, "", "reset_shots"], [53, 2, 1, "", "set_executor"], [53, 2, 1, "", "set_shots_for_grad"], [53, 2, 1, "", "set_shots_for_loss"]], "squlearn.qnn.base_qnn": [[54, 0, 1, "", "BaseQNN"]], "squlearn.qnn.base_qnn.BaseQNN": [[54, 2, 1, "", "fit"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "set_fit_request"], [54, 2, 1, "", "set_params"]], "squlearn.qnn.loss": [[57, 0, 1, "", "LossBase"], [58, 0, 1, "", "ParameterRegularizationLoss"], [59, 0, 1, "", "SquaredLoss"], [60, 0, 1, "", "VarianceLoss"]], "squlearn.qnn.loss.LossBase": [[57, 2, 1, "", "gradient"], [57, 2, 1, "", "set_opt_param_op"], [57, 2, 1, "", "value"], [57, 2, 1, "", "variance"]], "squlearn.qnn.loss.ParameterRegularizationLoss": [[58, 2, 1, "", "gradient"], [58, 2, 1, "", "set_opt_param_op"], [58, 2, 1, "", "value"], [58, 2, 1, "", "variance"]], "squlearn.qnn.loss.SquaredLoss": [[59, 2, 1, "", "gradient"], [59, 2, 1, "", "set_opt_param_op"], [59, 2, 1, "", "value"], [59, 2, 1, "", "variance"]], "squlearn.qnn.loss.VarianceLoss": [[60, 2, 1, "", "gradient"], [60, 2, 1, "", "set_opt_param_op"], [60, 2, 1, "", "value"], [60, 2, 1, "", "variance"]], "squlearn.qnn.qnn": [[61, 0, 1, "", "Expec"], [62, 0, 1, "", "QNN"]], "squlearn.qnn.qnn.Expec": [[61, 2, 1, "", "from_parameter"], [61, 2, 1, "", "from_string"], [61, 2, 1, "", "from_tuple"], [61, 2, 1, "", "from_variable"]], "squlearn.qnn.qnn.QNN": [[62, 2, 1, "", "evaluate"], [62, 2, 1, "", "evaluate_dfdop"], [62, 2, 1, "", "evaluate_dfdopdx"], [62, 2, 1, "", "evaluate_dfdp"], [62, 2, 1, "", "evaluate_dfdpdx"], [62, 2, 1, "", "evaluate_dfdx"], [62, 2, 1, "", "evaluate_dfdxdx"], [62, 2, 1, "", "evaluate_diff_tuple"], [62, 2, 1, "", "evaluate_f"], [62, 2, 1, "", "evaluate_from_string"], [62, 2, 1, "", "evaluate_laplace"], [62, 2, 1, "", "evaluate_laplace_dop"], [62, 2, 1, "", "evaluate_laplace_dp"], [62, 2, 1, "", "evaluate_probabilities"], [62, 2, 1, "", "evaluate_var"], [62, 2, 1, "", "evaluate_variance"], [62, 2, 1, "", "get_optree_from_expec"], [62, 2, 1, "", "get_optree_from_string"], [62, 2, 1, "", "get_params"], [62, 2, 1, "", "get_shots"], [62, 2, 1, "", "reset_shots"], [62, 2, 1, "", "set_params"], [62, 2, 1, "", "set_shots"]], "squlearn.qnn.training": [[63, 0, 1, "", "train"], [64, 0, 1, "", "train_mini_batch"]], "squlearn.util": [[65, 0, 1, "", "OpTree"]], "squlearn.util.OpTree": [[65, 0, 1, "", "OpTreeDerivative"], [65, 0, 1, "", "OpTreeEvaluate"], [65, 2, 1, "", "assign_parameters"], [65, 1, 1, "", "derivative"], [65, 1, 1, "", "evaluate"], [65, 2, 1, "", "gen_expectation_tree"], [65, 2, 1, "", "get_first_leaf"], [65, 2, 1, "", "get_num_nested_lists"], [65, 2, 1, "", "get_number_of_leafs"], [65, 2, 1, "", "get_tree_depth"], [65, 2, 1, "", "hash_circuit"], [65, 2, 1, "", "hash_operator"], [65, 2, 1, "", "simplify"]], "squlearn.util.OpTree.OpTreeDerivative": [[65, 2, 1, "", "differentiate"], [65, 2, 1, "", "differentiate_v2"], [65, 2, 1, "", "transpile_to_supported_instructions"]], "squlearn.util.OpTree.OpTreeEvaluate": [[65, 2, 1, "", "evaluate_tree_with_estimator"], [65, 2, 1, "", "evaluate_tree_with_sampler"], [65, 2, 1, "", "evaluate_with_estimator"], [65, 2, 1, "", "evaluate_with_sampler"], [65, 2, 1, "", "transform_to_zbasis"]], "squlearn.util.optree": [[66, 0, 1, "", "OpTreeCircuit"], [67, 0, 1, "", "OpTreeContainer"], [68, 0, 1, "", "OpTreeExpectationValue"], [69, 0, 1, "", "OpTreeList"], [70, 0, 1, "", "OpTreeMeasuredOperator"], [71, 0, 1, "", "OpTreeOperator"], [72, 0, 1, "", "OpTreeSum"], [73, 0, 1, "", "OpTreeValue"]], "squlearn.util.optree.OpTreeCircuit": [[66, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeContainer": [[67, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeExpectationValue": [[68, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeList": [[69, 2, 1, "", "append"], [69, 2, 1, "", "copy"], [69, 2, 1, "", "remove"]], "squlearn.util.optree.OpTreeMeasuredOperator": [[70, 2, 1, "", "copy"], [70, 2, 1, "", "measure_circuit"]], "squlearn.util.optree.OpTreeOperator": [[71, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeSum": [[72, 2, 1, "", "append"], [72, 2, 1, "", "copy"], [72, 2, 1, "", "remove"]], "squlearn.util.optree.OpTreeValue": [[73, 2, 1, "", "copy"]]}, "objtypes": {"0": "py:class", "1": "py:attribute", "2": "py:method", "3": "py:module", "4": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"], "3": ["py", "module", "Python module"], "4": ["py", "function", "Python function"]}, "titleterms": {"handwritten": 0, "digit": 0, "recognit": 0, "project": [0, 76], "quantum": [0, 3, 7, 74, 76, 78], "kernel": [0, 1, 7, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 76], "import": [0, 1, 2], "definit": 0, "The": [0, 75], "data": [0, 1, 7], "preprocess": 0, "dimension": 0, "reduct": [0, 78], "split": 0, "set": [0, 1, 2, 75], "min": 0, "max": 0, "scale": 0, "classif": [0, 76], "method": [0, 8, 12, 26, 28, 29, 30, 31, 32, 35, 36, 37, 45, 51, 52, 76, 78], "support": 0, "vector": 0, "machin": 0, "hyperparamet": 1, "optim": [1, 3, 7, 33, 34, 35, 36, 37, 46, 47, 48, 49, 50, 78], "pipelin": 1, "summari": 1, "librari": [1, 2], "gener": 1, "up": [1, 2], "grid": 1, "search": 1, "run": [1, 2], "result": 1, "analysi": 1, "error": 2, "mitig": 2, "qnn": [2, 7, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 78], "ibm": 2, "devic": 2, "introduct": 2, "train": [2, 63, 64, 76], "nois": 2, "free": 2, "simul": 2, "evalu": [2, 76], "backend": 2, "without": 2, "dynam": [2, 78], "decoupl": 2, "trex": 2, "zero": 2, "extrapol": 2, "zne": 2, "assess": 2, "us": [2, 3], "sampler": 2, "primit": [2, 75], "m3": 2, "retrain": 2, "varianc": [2, 78], "regular": [2, 78], "literatur": 2, "bayesian": 3, "gaussian": [3, 26], "process": 3, "surrog": 3, "model": 3, "exampl": [4, 5], "welcom": 5, "squlearn": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], "document": 5, "prerequisit": [5, 6], "instal": [5, 6], "stabl": [5, 6], "releas": [5, 6], "contribut": 5, "licens": 5, "cite": 5, "contact": 5, "content": 5, "bleed": 6, "edg": 6, "version": 6, "develop": 6, "api": 7, "refer": 7, "qml": 7, "regressor": 7, "classifi": 7, "circuit": [7, 74], "design": 7, "encod": [7, 74], "tool": 7, "oper": 7, "execut": 7, "core": 7, "implement": [7, 26, 74, 77], "optre": [7, 65, 66, 67, 68, 69, 70, 71, 72, 73], "structur": 7, "base": 7, "class": [7, 75], "executor": [8, 75], "attribut": [8, 26, 30, 38, 39, 40, 41, 42, 43, 44, 45], "encoding_circuit": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "chebyshevpqc": 9, "chebyshevrx": 10, "chebyshevtow": 11, "encodingcircuitderiv": [12, 74], "string": [12, 15, 45], "ar": [12, 26, 45], "recogn": [12, 45], "get_deriv": [12, 45], "highdimencodingcircuit": 13, "hubregtsenencodingcircuit": 14, "layeredencodingcircuit": [15, 74], "singl": 15, "qubit": [15, 77], "gate": 15, "represent": 15, "two": 15, "multicontrolencodingcircuit": 16, "paramzfeaturemap": 17, "prunedencodingcircuit": 18, "qiskitencodingcircuit": 19, "transpiledencodingcircuit": [20, 74], "yz_cx_encodingcircuit": 21, "automated_prun": 22, "encoding_circuit_bas": 23, "encodingcircuitbas": 23, "pruning_from_qfi": 24, "matrix": [25, 26, 27], "fidelitykernel": [25, 76], "projectedquantumkernel": [26, 76], "outer": 26, "follow": 26, "matern": 26, "expsinesquar": 26, "rationalquadrat": 26, "dotproduct": 26, "pairwisekernel": 26, "kernel_matrix_bas": 27, "kernelmatrixbas": 27, "ml": [28, 29, 30, 31, 32], "qgpc": 28, "qgpr": 29, "qkrr": 30, "qsvc": 31, "qsvr": 32, "kernel_loss_bas": 33, "kernellossbas": 33, "kernel_optimization_bas": 34, "kerneloptimizerbas": 34, "kernel_optim": 35, "kerneloptim": 35, "negative_log_likelihood": 36, "nll": 36, "target_align": 37, "targetalign": 37, "observ": [38, 39, 40, 41, 42, 43, 44, 45, 77], "customobserv": 38, "isinghamiltonian": 39, "singlepauli": 40, "singleprob": 41, "summedpauli": 42, "summedprob": 43, "observable_bas": 44, "observablebas": 44, "observable_deriv": 45, "observablederiv": 45, "adam": [46, 78], "lbfgsb": 47, "slsqp": [48, 78], "spsa": 49, "optimizer_bas": 50, "optimizerbas": 50, "qnnclassifi": 51, "qnnregressor": 52, "shotsfromrstd": 53, "base_qnn": 54, "baseqnn": 54, "get_lr_decai": 55, "get_variance_fac": 56, "loss": [57, 58, 59, 60], "lossbas": 57, "parameterregularizationloss": 58, "squaredloss": 59, "varianceloss": 60, "expec": 61, "train_mini_batch": 64, "util": [65, 66, 67, 68, 69, 70, 71, 72, 73, 75], "optreecircuit": 66, "optreecontain": 67, "optreeexpectationvalu": 68, "optreelist": 69, "optreemeasuredoper": 70, "optreeoper": 71, "optreesum": 72, "optreevalu": 73, "combin": 74, "wrap": 74, "qiskit": [74, 75], "creat": 74, "your": 74, "custom": [74, 77], "via": [74, 76], "prune": 74, "differ": 74, "transpil": 74, "overview": 75, "kei": 75, "featur": 75, "initi": 75, "routin": 75, "option": 75, "high": [76, 78], "level": [76, 78], "emploi": 76, "regress": 76, "fidel": 76, "fqk": 76, "pqk": 76, "expect": 77, "valu": 77, "map": 77, "real": 77, "deriv": 77, "neural": 78, "network": 78, "mini": 78, "batch": 78, "gradient": 78, "descent": 78, "schedul": 78, "learn": 78, "rate": 78, "adjust": 78, "shot": 78, "factor": 78, "user": 79, "guid": 79, "acknowledg": 5}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinx": 58}, "alltitles": {"Handwritten Digit Recognition with Projected Quantum Kernels": [[0, "Handwritten-Digit-Recognition-with-Projected-Quantum-Kernels"]], "Imports and Definitions": [[0, "Imports-and-Definitions"]], "The Data": [[0, "The-Data"]], "Preprocessing": [[0, "Preprocessing"]], "Dimensionality Reduction": [[0, "Dimensionality-Reduction"]], "Split Data sets": [[0, "Split-Data-sets"]], "Min Max Scaling": [[0, "Min-Max-Scaling"]], "Classification": [[0, "Classification"], [76, "classification"]], "Quantum Kernel Methods": [[0, "Quantum-Kernel-Methods"], [76, "quantum-kernel-methods"]], "Quantum Kernels": [[0, "Quantum-Kernels"]], "Projected Quantum Kernel": [[0, "Projected-Quantum-Kernel"]], "Support Vector Machine": [[0, "Support-Vector-Machine"]], "Hyperparameter Optimization and Pipelines": [[1, "Hyperparameter-Optimization-and-Pipelines"]], "Summary": [[1, "Summary"]], "Importing Libraries": [[1, "Importing-Libraries"], [2, "Importing-Libraries"]], "Generating Data": [[1, "Generating-Data"]], "Setting up the kernels": [[1, "Setting-up-the-kernels"]], "Setting up the grid search": [[1, "Setting-up-the-grid-search"]], "Running Grid Search": [[1, "Running-Grid-Search"]], "Results Analysis": [[1, "Results-Analysis"]], "Error Mitigation for QNNs on IBM Devices": [[2, "Error-Mitigation-for-QNNs-on-IBM-Devices"]], "Introduction": [[2, "Introduction"]], "Set-up of the QNN": [[2, "Set-up-of-the-QNN"]], "Training of the QNN with a noise free simulator": [[2, "Training-of-the-QNN-with-a-noise-free-simulator"]], "Evaluating the QNN on the IBM backend with error mitigation": [[2, "Evaluating-the-QNN-on-the-IBM-backend-with-error-mitigation"]], "Without error mitigation": [[2, "Without-error-mitigation"]], "Dynamic decoupling and TREX error mitigation": [[2, "Dynamic-decoupling-and-TREX-error-mitigation"]], "Dynamic decoupling and zero-noise extrapolation (ZNE) for error mitigation": [[2, "Dynamic-decoupling-and-zero-noise-extrapolation-(ZNE)-for-error-mitigation"]], "Assessing the QNN on the IBM backend using the sampler primitive": [[2, "Assessing-the-QNN-on-the-IBM-backend-using-the-sampler-primitive"]], "Run the Sampler primitive without error mitigation": [[2, "Run-the-Sampler-primitive-without-error-mitigation"]], "Run the Sampler primitive with dynamic decoupling and M3 error mitigation": [[2, "Run-the-Sampler-primitive-with-dynamic-decoupling-and-M3-error-mitigation"]], "Retraining the QNN on the IBM Backend without Error Mitigation using Variance Regularization": [[2, "Retraining-the-QNN-on-the-IBM-Backend-without-Error-Mitigation-using-Variance-Regularization"]], "Literature:": [[2, "Literature:"]], "Bayesian Optimization using a Quantum Gaussian Process Surrogate Model": [[3, "Bayesian-Optimization-using-a-Quantum-Gaussian-Process-Surrogate-Model"]], "Examples": [[4, "examples"], [5, "examples"]], "Welcome to the sQUlearn documentation!": [[5, "welcome-to-the-squlearn-documentation"]], "Prerequisites": [[5, "prerequisites"], [6, "prerequisites"]], "Install sQUlearn": [[5, "install-squlearn"]], "Stable Release": [[5, "stable-release"], [6, "stable-release"]], "Contribute to sQUlearn": [[5, "contribute-to-squlearn"]], "License": [[5, "license"]], "Cite sQUlearn": [[5, "cite-squlearn"]], "Contact": [[5, "contact"]], "Acknowledgements": [[5, "acknowledgements"]], "Contents:": [[5, null]], "Installation": [[6, "installation"]], "Bleeding-edge version": [[6, "bleeding-edge-version"]], "Development version": [[6, "development-version"]], "API Reference": [[7, "api-reference"]], "QML Regressors": [[7, "qml-regressors"]], "QML Classifiers": [[7, "qml-classifiers"]], "Circuit Design": [[7, "circuit-design"]], "Encoding Circuits": [[7, "module-squlearn.encoding_circuit"]], "Encoding Circuit Tools": [[7, "encoding-circuit-tools"]], "Operators": [[7, "operators"]], "Operator Tools": [[7, "operator-tools"]], "Execution Tools": [[7, "execution-tools"]], "Core": [[7, "core"]], "Quantum Kernel Core": [[7, "module-squlearn.kernel.matrix"]], "QNN Core": [[7, "module-squlearn.qnn"]], "Implemented optimizers": [[7, "module-squlearn.optimizers"]], "OpTree Data Structure": [[7, "optree-data-structure"]], "Base Classes": [[7, "base-classes"]], "squlearn.Executor": [[8, "squlearn-executor"]], "Attributes:": [[8, "attributes"], [26, "attributes"], [30, "attributes"], [38, "attributes"], [39, "attributes"], [40, "attributes"], [41, "attributes"], [42, "attributes"], [42, "id1"], [43, "attributes"], [44, "attributes"], [45, "attributes"]], "Methods:": [[8, "methods"], [26, "methods"], [28, "methods"], [29, "methods"], [30, "methods"], [31, "methods"], [32, "methods"], [35, "methods"], [36, "methods"], [37, "methods"], [51, "methods"], [52, "methods"]], "squlearn.encoding_circuit.ChebyshevPQC": [[9, "squlearn-encoding-circuit-chebyshevpqc"]], "squlearn.encoding_circuit.ChebyshevRx": [[10, "squlearn-encoding-circuit-chebyshevrx"]], "squlearn.encoding_circuit.ChebyshevTower": [[11, "squlearn-encoding-circuit-chebyshevtower"]], "squlearn.encoding_circuit.EncodingCircuitDerivatives": [[12, "squlearn-encoding-circuit-encodingcircuitderivatives"]], "Strings that are recognized by the get_derivative() method": [[12, "id1"], [45, "id1"]], "squlearn.encoding_circuit.HighDimEncodingCircuit": [[13, "squlearn-encoding-circuit-highdimencodingcircuit"]], "squlearn.encoding_circuit.HubregtsenEncodingCircuit": [[14, "squlearn-encoding-circuit-hubregtsenencodingcircuit"]], "squlearn.encoding_circuit.LayeredEncodingCircuit": [[15, "squlearn-encoding-circuit-layeredencodingcircuit"]], "Single qubit gates and their string representation": [[15, "id1"]], "Two qubit gates and their string representation": [[15, "id2"]], "squlearn.encoding_circuit.MultiControlEncodingCircuit": [[16, "squlearn-encoding-circuit-multicontrolencodingcircuit"]], "squlearn.encoding_circuit.ParamZFeatureMap": [[17, "squlearn-encoding-circuit-paramzfeaturemap"]], "squlearn.encoding_circuit.PrunedEncodingCircuit": [[18, "squlearn-encoding-circuit-prunedencodingcircuit"]], "squlearn.encoding_circuit.QiskitEncodingCircuit": [[19, "squlearn-encoding-circuit-qiskitencodingcircuit"]], "squlearn.encoding_circuit.TranspiledEncodingCircuit": [[20, "squlearn-encoding-circuit-transpiledencodingcircuit"]], "squlearn.encoding_circuit.YZ_CX_EncodingCircuit": [[21, "squlearn-encoding-circuit-yz-cx-encodingcircuit"]], "squlearn.encoding_circuit.automated_pruning": [[22, "squlearn-encoding-circuit-automated-pruning"]], "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase": [[23, "squlearn-encoding-circuit-encoding-circuit-base-encodingcircuitbase"]], "squlearn.encoding_circuit.pruning_from_QFI": [[24, "squlearn-encoding-circuit-pruning-from-qfi"]], "squlearn.kernel.matrix.FidelityKernel": [[25, "squlearn-kernel-matrix-fidelitykernel"]], "squlearn.kernel.matrix.ProjectedQuantumKernel": [[26, "squlearn-kernel-matrix-projectedquantumkernel"]], "Outer Kernels are implemented as follows:": [[26, "outer-kernels-are-implemented-as-follows"]], "Gaussian:": [[26, "gaussian"]], "Matern:": [[26, "matern"]], "ExpSineSquared:": [[26, "expsinesquared"]], "RationalQuadratic:": [[26, "rationalquadratic"]], "DotProduct:": [[26, "dotproduct"]], "PairwiseKernel:": [[26, "pairwisekernel"]], "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase": [[27, "squlearn-kernel-matrix-kernel-matrix-base-kernelmatrixbase"]], "squlearn.kernel.ml.QGPC": [[28, "squlearn-kernel-ml-qgpc"]], "squlearn.kernel.ml.QGPR": [[29, "squlearn-kernel-ml-qgpr"]], "squlearn.kernel.ml.QKRR": [[30, "squlearn-kernel-ml-qkrr"]], "squlearn.kernel.ml.QSVC": [[31, "squlearn-kernel-ml-qsvc"]], "squlearn.kernel.ml.QSVR": [[32, "squlearn-kernel-ml-qsvr"]], "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase": [[33, "squlearn-kernel-optimization-kernel-loss-base-kernellossbase"]], "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase": [[34, "squlearn-kernel-optimization-kernel-optimization-base-kerneloptimizerbase"]], "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer": [[35, "squlearn-kernel-optimization-kernel-optimizer-kerneloptimizer"]], "squlearn.kernel.optimization.negative_log_likelihood.NLL": [[36, "squlearn-kernel-optimization-negative-log-likelihood-nll"]], "squlearn.kernel.optimization.target_alignment.TargetAlignment": [[37, "squlearn-kernel-optimization-target-alignment-targetalignment"]], "squlearn.observables.CustomObservable": [[38, "squlearn-observables-customobservable"]], "squlearn.observables.IsingHamiltonian": [[39, "squlearn-observables-isinghamiltonian"]], "squlearn.observables.SinglePauli": [[40, "squlearn-observables-singlepauli"]], "squlearn.observables.SingleProbability": [[41, "squlearn-observables-singleprobability"]], "squlearn.observables.SummedPaulis": [[42, "squlearn-observables-summedpaulis"]], "squlearn.observables.SummedProbabilities": [[43, "squlearn-observables-summedprobabilities"]], "squlearn.observables.observable_base.ObservableBase": [[44, "squlearn-observables-observable-base-observablebase"]], "squlearn.observables.observable_derivatives.ObservableDerivatives": [[45, "squlearn-observables-observable-derivatives-observablederivatives"]], "squlearn.optimizers.Adam": [[46, "squlearn-optimizers-adam"]], "squlearn.optimizers.LBFGSB": [[47, "squlearn-optimizers-lbfgsb"]], "squlearn.optimizers.SLSQP": [[48, "squlearn-optimizers-slsqp"]], "squlearn.optimizers.SPSA": [[49, "squlearn-optimizers-spsa"]], "squlearn.optimizers.optimizer_base.OptimizerBase": [[50, "squlearn-optimizers-optimizer-base-optimizerbase"]], "squlearn.qnn.QNNClassifier": [[51, "squlearn-qnn-qnnclassifier"]], "squlearn.qnn.QNNRegressor": [[52, "squlearn-qnn-qnnregressor"]], "squlearn.qnn.ShotsFromRSTD": [[53, "squlearn-qnn-shotsfromrstd"]], "squlearn.qnn.base_qnn.BaseQNN": [[54, "squlearn-qnn-base-qnn-baseqnn"]], "squlearn.qnn.get_lr_decay": [[55, "squlearn-qnn-get-lr-decay"]], "squlearn.qnn.get_variance_fac": [[56, "squlearn-qnn-get-variance-fac"]], "squlearn.qnn.loss.LossBase": [[57, "squlearn-qnn-loss-lossbase"]], "squlearn.qnn.loss.ParameterRegularizationLoss": [[58, "squlearn-qnn-loss-parameterregularizationloss"]], "squlearn.qnn.loss.SquaredLoss": [[59, "squlearn-qnn-loss-squaredloss"]], "squlearn.qnn.loss.VarianceLoss": [[60, "squlearn-qnn-loss-varianceloss"]], "squlearn.qnn.qnn.Expec": [[61, "squlearn-qnn-qnn-expec"]], "squlearn.qnn.qnn.QNN": [[62, "squlearn-qnn-qnn-qnn"]], "squlearn.qnn.training.train": [[63, "squlearn-qnn-training-train"]], "squlearn.qnn.training.train_mini_batch": [[64, "squlearn-qnn-training-train-mini-batch"]], "squlearn.util.OpTree": [[65, "squlearn-util-optree"]], "squlearn.util.optree.OpTreeCircuit": [[66, "squlearn-util-optree-optreecircuit"]], "squlearn.util.optree.OpTreeContainer": [[67, "squlearn-util-optree-optreecontainer"]], "squlearn.util.optree.OpTreeExpectationValue": [[68, "squlearn-util-optree-optreeexpectationvalue"]], "squlearn.util.optree.OpTreeList": [[69, "squlearn-util-optree-optreelist"]], "squlearn.util.optree.OpTreeMeasuredOperator": [[70, "squlearn-util-optree-optreemeasuredoperator"]], "squlearn.util.optree.OpTreeOperator": [[71, "squlearn-util-optree-optreeoperator"]], "squlearn.util.optree.OpTreeSum": [[72, "squlearn-util-optree-optreesum"]], "squlearn.util.optree.OpTreeValue": [[73, "squlearn-util-optree-optreevalue"]], "Quantum Encoding Circuits": [[74, "quantum-encoding-circuits"]], "Implemented Quantum Encoding Circuits": [[74, "implemented-quantum-encoding-circuits"]], "Combining Quantum Encoding Circuits": [[74, "combining-quantum-encoding-circuits"]], "Wrapping Qiskit Encoding Circuits": [[74, "wrapping-qiskit-encoding-circuits"]], "Create your custom Encoding Circuit via LayeredEncodingCircuit": [[74, "create-your-custom-encoding-circuit-via-layeredencodingcircuit"]], "Pruning of Quantum Encoding Circuits": [[74, "pruning-of-quantum-encoding-circuits"]], "Different Quantum Encoding Circuits via EncodingCircuitDerivatives": [[74, "different-quantum-encoding-circuits-via-encodingcircuitderivatives"]], "Transpile Quantum Encoding Circuits via TranspiledEncodingCircuit": [[74, "transpile-quantum-encoding-circuits-via-transpiledencodingcircuit"]], "The Executor Class": [[75, "the-executor-class"]], "Overview": [[75, "overview"]], "Key Features of the Executor": [[75, "key-features-of-the-executor"]], "Initialization of the Executor class": [[75, "initialization-of-the-executor-class"]], "Utilizing Executor Primitives in Qiskit Routines": [[75, "utilizing-executor-primitives-in-qiskit-routines"]], "Setting Options for Primitives": [[75, "setting-options-for-primitives"]], "High-Level methods that employ quantum kernels": [[76, "high-level-methods-that-employ-quantum-kernels"]], "Regression": [[76, "regression"]], "Methods to evaluate quantum kernels": [[76, "methods-to-evaluate-quantum-kernels"]], "Fidelity Quantum Kernel (FQK) via FidelityKernel": [[76, "fidelity-quantum-kernel-fqk-via-fidelitykernel"]], "Projected Quantum Kernel (PQK) via ProjectedQuantumKernel": [[76, "projected-quantum-kernel-pqk-via-projectedquantumkernel"]], "Training of quantum kernels": [[76, "training-of-quantum-kernels"]], "Observables for expectation values": [[77, "observables-for-expectation-values"]], "Implemented observables.": [[77, "implemented-observables"]], "Custom observables": [[77, "custom-observables"]], "Mapping observables to real qubits": [[77, "mapping-observables-to-real-qubits"]], "Derivatives of the observable": [[77, "derivatives-of-the-observable"]], "Quantum Neural Networks": [[78, "quantum-neural-networks"]], "High-level methods for QNNs": [[78, "high-level-methods-for-qnns"]], "Optimization": [[78, "optimization"]], "SLSQP": [[78, "slsqp"]], "Mini-Batch gradient descent with Adam": [[78, "mini-batch-gradient-descent-with-adam"]], "Schedule of the learning rate of Adam": [[78, "schedule-of-the-learning-rate-of-adam"]], "Dynamically adjustments of the shots": [[78, "dynamically-adjustments-of-the-shots"]], "Variance reduction": [[78, "variance-reduction"]], "Variance reduction with dynamic adjustment of the regularization factor": [[78, "variance-reduction-with-dynamic-adjustment-of-the-regularization-factor"]], "User Guide": [[79, "user-guide"]]}, "indexentries": {"module": [[7, "module-squlearn.encoding_circuit"], [7, "module-squlearn.kernel.matrix"], [7, "module-squlearn.kernel.optimization"], [7, "module-squlearn.observables"], [7, "module-squlearn.optimizers"], [7, "module-squlearn.qnn"]], "squlearn.encoding_circuit": [[7, "module-squlearn.encoding_circuit"]], "squlearn.kernel.matrix": [[7, "module-squlearn.kernel.matrix"]], "squlearn.kernel.optimization": [[7, "module-squlearn.kernel.optimization"]], "squlearn.observables": [[7, "module-squlearn.observables"]], "squlearn.optimizers": [[7, "module-squlearn.optimizers"]], "squlearn.qnn": [[7, "module-squlearn.qnn"]], "executor (class in squlearn)": [[8, "squlearn.Executor"]], "backend (squlearn.executor attribute)": [[8, "squlearn.Executor.backend"]], "backend_run() (squlearn.executor method)": [[8, "squlearn.Executor.backend_run"]], "clear_estimator_cache() (squlearn.executor method)": [[8, "squlearn.Executor.clear_estimator_cache"]], "clear_sampler_cache() (squlearn.executor method)": [[8, "squlearn.Executor.clear_sampler_cache"]], "close_session() (squlearn.executor method)": [[8, "squlearn.Executor.close_session"]], "create_session() (squlearn.executor method)": [[8, "squlearn.Executor.create_session"]], "estimator (squlearn.executor attribute)": [[8, "squlearn.Executor.estimator"]], "estimator_run() (squlearn.executor method)": [[8, "squlearn.Executor.estimator_run"]], "execution (squlearn.executor attribute)": [[8, "squlearn.Executor.execution"]], "get_estimator() (squlearn.executor method)": [[8, "squlearn.Executor.get_estimator"]], "get_sampler() (squlearn.executor method)": [[8, "squlearn.Executor.get_sampler"]], "get_shots() (squlearn.executor method)": [[8, "squlearn.Executor.get_shots"]], "reset_options() (squlearn.executor method)": [[8, "squlearn.Executor.reset_options"]], "reset_options_estimator() (squlearn.executor method)": [[8, "squlearn.Executor.reset_options_estimator"]], "reset_options_sampler() (squlearn.executor method)": [[8, "squlearn.Executor.reset_options_sampler"]], "reset_shots() (squlearn.executor method)": [[8, "squlearn.Executor.reset_shots"]], "sampler (squlearn.executor attribute)": [[8, "squlearn.Executor.sampler"]], "sampler_run() (squlearn.executor method)": [[8, "squlearn.Executor.sampler_run"]], "service (squlearn.executor attribute)": [[8, "squlearn.Executor.service"]], "session (squlearn.executor attribute)": [[8, "squlearn.Executor.session"]], "set_options_estimator() (squlearn.executor method)": [[8, "squlearn.Executor.set_options_estimator"]], "set_options_sampler() (squlearn.executor method)": [[8, "squlearn.Executor.set_options_sampler"]], "set_primitive_options() (squlearn.executor method)": [[8, "squlearn.Executor.set_primitive_options"]], "set_seed_for_primitive() (squlearn.executor method)": [[8, "squlearn.Executor.set_seed_for_primitive"]], "set_shots() (squlearn.executor method)": [[8, "squlearn.Executor.set_shots"]], "shots (squlearn.executor attribute)": [[8, "squlearn.Executor.shots"]], "chebyshevpqc (class in squlearn.encoding_circuit)": [[9, "squlearn.encoding_circuit.ChebyshevPQC"]], "draw() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.generate_initial_parameters"]], "get_cheb_indices() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.get_cheb_indices"]], "get_circuit() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.get_circuit"]], "get_params() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.get_params"]], "set_params() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.set_params"]], "chebyshevrx (class in squlearn.encoding_circuit)": [[10, "squlearn.encoding_circuit.ChebyshevRx"]], "draw() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.generate_initial_parameters"]], "get_cheb_indices() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.get_cheb_indices"]], "get_circuit() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.get_circuit"]], "get_params() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.get_params"]], "set_params() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.set_params"]], "chebyshevtower (class in squlearn.encoding_circuit)": [[11, "squlearn.encoding_circuit.ChebyshevTower"]], "draw() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.get_circuit"]], "get_params() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.get_params"]], "set_params() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.set_params"]], "encodingcircuitderivatives (class in squlearn.encoding_circuit)": [[12, "squlearn.encoding_circuit.EncodingCircuitDerivatives"]], "assign_parameters() (squlearn.encoding_circuit.encodingcircuitderivatives method)": [[12, "squlearn.encoding_circuit.EncodingCircuitDerivatives.assign_parameters"]], "get_derivative() (squlearn.encoding_circuit.encodingcircuitderivatives method)": [[12, "squlearn.encoding_circuit.EncodingCircuitDerivatives.get_derivative"]], "highdimencodingcircuit (class in squlearn.encoding_circuit)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit"]], "draw() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.set_params"]], "hubregtsenencodingcircuit (class in squlearn.encoding_circuit)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit"]], "draw() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.set_params"]], "h() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.H"]], "i() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.I"]], "layeredencodingcircuit (class in squlearn.encoding_circuit)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit"]], "p() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.P"]], "rx() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.Rx"]], "ry() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.Ry"]], "rz() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.Rz"]], "s() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.S"]], "s_conjugate() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.S_conjugate"]], "t() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.T"]], "t_conjugate() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.T_conjugate"]], "u() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.U"]], "x() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.X"]], "y() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.Y"]], "z() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.Z"]], "add_layer() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.add_layer"]], "ch_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.ch_entangling"]], "cp_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.cp_entangling"]], "crx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.crx_entangling"]], "cry_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.cry_entangling"]], "crz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.crz_entangling"]], "cu_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.cu_entangling"]], "cx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.cx_entangling"]], "cy_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.cy_entangling"]], "cz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.cz_entangling"]], "draw() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.draw"]], "from_string() (squlearn.encoding_circuit.layeredencodingcircuit class method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.from_string"]], "generate_initial_parameters() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.get_params"]], "rxx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.rxx_entangling"]], "ryy_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.ryy_entangling"]], "rzx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.rzx_entangling"]], "rzz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.rzz_entangling"]], "set_params() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.set_params"]], "swap() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.swap"]], "multicontrolencodingcircuit (class in squlearn.encoding_circuit)": [[16, "squlearn.encoding_circuit.MultiControlEncodingCircuit"]], "draw() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[16, "squlearn.encoding_circuit.MultiControlEncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[16, "squlearn.encoding_circuit.MultiControlEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[16, "squlearn.encoding_circuit.MultiControlEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[16, "squlearn.encoding_circuit.MultiControlEncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[16, "squlearn.encoding_circuit.MultiControlEncodingCircuit.set_params"]], "paramzfeaturemap (class in squlearn.encoding_circuit)": [[17, "squlearn.encoding_circuit.ParamZFeatureMap"]], "draw() (squlearn.encoding_circuit.paramzfeaturemap method)": [[17, "squlearn.encoding_circuit.ParamZFeatureMap.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.paramzfeaturemap method)": [[17, "squlearn.encoding_circuit.ParamZFeatureMap.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.paramzfeaturemap method)": [[17, "squlearn.encoding_circuit.ParamZFeatureMap.get_circuit"]], "get_params() (squlearn.encoding_circuit.paramzfeaturemap method)": [[17, "squlearn.encoding_circuit.ParamZFeatureMap.get_params"]], "set_params() (squlearn.encoding_circuit.paramzfeaturemap method)": [[17, "squlearn.encoding_circuit.ParamZFeatureMap.set_params"]], "prunedencodingcircuit (class in squlearn.encoding_circuit)": [[18, "squlearn.encoding_circuit.PrunedEncodingCircuit"]], "draw() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[18, "squlearn.encoding_circuit.PrunedEncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[18, "squlearn.encoding_circuit.PrunedEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[18, "squlearn.encoding_circuit.PrunedEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[18, "squlearn.encoding_circuit.PrunedEncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[18, "squlearn.encoding_circuit.PrunedEncodingCircuit.set_params"]], "qiskitencodingcircuit (class in squlearn.encoding_circuit)": [[19, "squlearn.encoding_circuit.QiskitEncodingCircuit"]], "draw() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[19, "squlearn.encoding_circuit.QiskitEncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[19, "squlearn.encoding_circuit.QiskitEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[19, "squlearn.encoding_circuit.QiskitEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[19, "squlearn.encoding_circuit.QiskitEncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[19, "squlearn.encoding_circuit.QiskitEncodingCircuit.set_params"]], "transpiledencodingcircuit (class in squlearn.encoding_circuit)": [[20, "squlearn.encoding_circuit.TranspiledEncodingCircuit"]], "draw() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[20, "squlearn.encoding_circuit.TranspiledEncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[20, "squlearn.encoding_circuit.TranspiledEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[20, "squlearn.encoding_circuit.TranspiledEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[20, "squlearn.encoding_circuit.TranspiledEncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[20, "squlearn.encoding_circuit.TranspiledEncodingCircuit.set_params"]], "yz_cx_encodingcircuit (class in squlearn.encoding_circuit)": [[21, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit"]], "draw() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[21, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[21, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[21, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[21, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[21, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.set_params"]], "automated_pruning() (in module squlearn.encoding_circuit)": [[22, "squlearn.encoding_circuit.automated_pruning"]], "encodingcircuitbase (class in squlearn.encoding_circuit.encoding_circuit_base)": [[23, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase"]], "draw() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[23, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[23, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[23, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.get_circuit"]], "get_params() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[23, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.get_params"]], "set_params() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[23, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.set_params"]], "pruning_from_qfi() (in module squlearn.encoding_circuit)": [[24, "squlearn.encoding_circuit.pruning_from_QFI"]], "fidelitykernel (class in squlearn.kernel.matrix)": [[25, "squlearn.kernel.matrix.FidelityKernel"]], "assign_parameters() (squlearn.kernel.matrix.fidelitykernel method)": [[25, "squlearn.kernel.matrix.FidelityKernel.assign_parameters"]], "evaluate() (squlearn.kernel.matrix.fidelitykernel method)": [[25, "squlearn.kernel.matrix.FidelityKernel.evaluate"]], "evaluate_pairwise() (squlearn.kernel.matrix.fidelitykernel method)": [[25, "squlearn.kernel.matrix.FidelityKernel.evaluate_pairwise"]], "evaluate_with_parameters() (squlearn.kernel.matrix.fidelitykernel method)": [[25, "squlearn.kernel.matrix.FidelityKernel.evaluate_with_parameters"]], "get_params() (squlearn.kernel.matrix.fidelitykernel method)": [[25, "squlearn.kernel.matrix.FidelityKernel.get_params"]], "set_params() (squlearn.kernel.matrix.fidelitykernel method)": [[25, "squlearn.kernel.matrix.FidelityKernel.set_params"]], "projectedquantumkernel (class in squlearn.kernel.matrix)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel"]], "assign_parameters() (squlearn.kernel.matrix.projectedquantumkernel method)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.assign_parameters"]], "encoding_circuit (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.encoding_circuit"]], "evaluate() (squlearn.kernel.matrix.projectedquantumkernel method)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate"]], "evaluate_pairwise() (squlearn.kernel.matrix.projectedquantumkernel method)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_pairwise"]], "evaluate_qnn() (squlearn.kernel.matrix.projectedquantumkernel method)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_qnn"]], "evaluate_with_parameters() (squlearn.kernel.matrix.projectedquantumkernel method)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_with_parameters"]], "get_params() (squlearn.kernel.matrix.projectedquantumkernel method)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.get_params"]], "measurement (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.measurement"]], "name_hyper_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.name_hyper_parameters"]], "num_features (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_features"]], "num_hyper_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_hyper_parameters"]], "num_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_parameters"]], "num_qubits (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_qubits"]], "outer_kernel (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.outer_kernel"]], "parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.parameters"]], "set_params() (squlearn.kernel.matrix.projectedquantumkernel method)": [[26, "squlearn.kernel.matrix.ProjectedQuantumKernel.set_params"]], "kernelmatrixbase (class in squlearn.kernel.matrix.kernel_matrix_base)": [[27, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase"]], "assign_parameters() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[27, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.assign_parameters"]], "evaluate() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[27, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate"]], "evaluate_pairwise() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[27, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate_pairwise"]], "evaluate_with_parameters() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[27, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate_with_parameters"]], "get_params() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[27, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.get_params"]], "set_params() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[27, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.set_params"]], "qgpc (class in squlearn.kernel.ml)": [[28, "squlearn.kernel.ml.QGPC"]], "fit() (squlearn.kernel.ml.qgpc method)": [[28, "squlearn.kernel.ml.QGPC.fit"]], "get_metadata_routing() (squlearn.kernel.ml.qgpc method)": [[28, "squlearn.kernel.ml.QGPC.get_metadata_routing"]], "get_params() (squlearn.kernel.ml.qgpc method)": [[28, "squlearn.kernel.ml.QGPC.get_params"]], "log_marginal_likelihood() (squlearn.kernel.ml.qgpc method)": [[28, "squlearn.kernel.ml.QGPC.log_marginal_likelihood"]], "predict() (squlearn.kernel.ml.qgpc method)": [[28, "squlearn.kernel.ml.QGPC.predict"]], "predict_proba() (squlearn.kernel.ml.qgpc method)": [[28, "squlearn.kernel.ml.QGPC.predict_proba"]], "score() (squlearn.kernel.ml.qgpc method)": [[28, "squlearn.kernel.ml.QGPC.score"]], "set_params() (squlearn.kernel.ml.qgpc method)": [[28, "squlearn.kernel.ml.QGPC.set_params"]], "set_score_request() (squlearn.kernel.ml.qgpc method)": [[28, "squlearn.kernel.ml.QGPC.set_score_request"]], "qgpr (class in squlearn.kernel.ml)": [[29, "squlearn.kernel.ml.QGPR"]], "calculate_cov_and_mean() (squlearn.kernel.ml.qgpr method)": [[29, "squlearn.kernel.ml.QGPR.calculate_cov_and_mean"]], "fit() (squlearn.kernel.ml.qgpr method)": [[29, "squlearn.kernel.ml.QGPR.fit"]], "get_metadata_routing() (squlearn.kernel.ml.qgpr method)": [[29, "squlearn.kernel.ml.QGPR.get_metadata_routing"]], "get_params() (squlearn.kernel.ml.qgpr method)": [[29, "squlearn.kernel.ml.QGPR.get_params"]], "predict() (squlearn.kernel.ml.qgpr method)": [[29, "squlearn.kernel.ml.QGPR.predict"]], "score() (squlearn.kernel.ml.qgpr method)": [[29, "squlearn.kernel.ml.QGPR.score"]], "set_params() (squlearn.kernel.ml.qgpr method)": [[29, "squlearn.kernel.ml.QGPR.set_params"]], "set_predict_request() (squlearn.kernel.ml.qgpr method)": [[29, "squlearn.kernel.ml.QGPR.set_predict_request"]], "set_score_request() (squlearn.kernel.ml.qgpr method)": [[29, "squlearn.kernel.ml.QGPR.set_score_request"]], "qkrr (class in squlearn.kernel.ml)": [[30, "squlearn.kernel.ml.QKRR"]], "fit() (squlearn.kernel.ml.qkrr method)": [[30, "squlearn.kernel.ml.QKRR.fit"]], "get_metadata_routing() (squlearn.kernel.ml.qkrr method)": [[30, "squlearn.kernel.ml.QKRR.get_metadata_routing"]], "get_params() (squlearn.kernel.ml.qkrr method)": [[30, "squlearn.kernel.ml.QKRR.get_params"]], "predict() (squlearn.kernel.ml.qkrr method)": [[30, "squlearn.kernel.ml.QKRR.predict"]], "score() (squlearn.kernel.ml.qkrr method)": [[30, "squlearn.kernel.ml.QKRR.score"]], "set_params() (squlearn.kernel.ml.qkrr method)": [[30, "squlearn.kernel.ml.QKRR.set_params"]], "set_score_request() (squlearn.kernel.ml.qkrr method)": [[30, "squlearn.kernel.ml.QKRR.set_score_request"]], "qsvc (class in squlearn.kernel.ml)": [[31, "squlearn.kernel.ml.QSVC"]], "decision_function() (squlearn.kernel.ml.qsvc method)": [[31, "squlearn.kernel.ml.QSVC.decision_function"]], "fit() (squlearn.kernel.ml.qsvc method)": [[31, "squlearn.kernel.ml.QSVC.fit"]], "get_metadata_routing() (squlearn.kernel.ml.qsvc method)": [[31, "squlearn.kernel.ml.QSVC.get_metadata_routing"]], "get_params() (squlearn.kernel.ml.qsvc method)": [[31, "squlearn.kernel.ml.QSVC.get_params"]], "predict() (squlearn.kernel.ml.qsvc method)": [[31, "squlearn.kernel.ml.QSVC.predict"]], "predict_log_proba() (squlearn.kernel.ml.qsvc method)": [[31, "squlearn.kernel.ml.QSVC.predict_log_proba"]], "predict_proba() (squlearn.kernel.ml.qsvc method)": [[31, "squlearn.kernel.ml.QSVC.predict_proba"]], "score() (squlearn.kernel.ml.qsvc method)": [[31, "squlearn.kernel.ml.QSVC.score"]], "set_fit_request() (squlearn.kernel.ml.qsvc method)": [[31, "squlearn.kernel.ml.QSVC.set_fit_request"]], "set_params() (squlearn.kernel.ml.qsvc method)": [[31, "squlearn.kernel.ml.QSVC.set_params"]], "set_score_request() (squlearn.kernel.ml.qsvc method)": [[31, "squlearn.kernel.ml.QSVC.set_score_request"]], "qsvr (class in squlearn.kernel.ml)": [[32, "squlearn.kernel.ml.QSVR"]], "fit() (squlearn.kernel.ml.qsvr method)": [[32, "squlearn.kernel.ml.QSVR.fit"]], "get_metadata_routing() (squlearn.kernel.ml.qsvr method)": [[32, "squlearn.kernel.ml.QSVR.get_metadata_routing"]], "get_params() (squlearn.kernel.ml.qsvr method)": [[32, "squlearn.kernel.ml.QSVR.get_params"]], "predict() (squlearn.kernel.ml.qsvr method)": [[32, "squlearn.kernel.ml.QSVR.predict"]], "score() (squlearn.kernel.ml.qsvr method)": [[32, "squlearn.kernel.ml.QSVR.score"]], "set_fit_request() (squlearn.kernel.ml.qsvr method)": [[32, "squlearn.kernel.ml.QSVR.set_fit_request"]], "set_params() (squlearn.kernel.ml.qsvr method)": [[32, "squlearn.kernel.ml.QSVR.set_params"]], "set_score_request() (squlearn.kernel.ml.qsvr method)": [[32, "squlearn.kernel.ml.QSVR.set_score_request"]], "kernellossbase (class in squlearn.kernel.optimization.kernel_loss_base)": [[33, "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase"]], "compute() (squlearn.kernel.optimization.kernel_loss_base.kernellossbase method)": [[33, "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase.compute"]], "kerneloptimizerbase (class in squlearn.kernel.optimization.kernel_optimization_base)": [[34, "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase"]], "run_optimization() (squlearn.kernel.optimization.kernel_optimization_base.kerneloptimizerbase method)": [[34, "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase.run_optimization"]], "kerneloptimizer (class in squlearn.kernel.optimization.kernel_optimizer)": [[35, "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer"]], "run_optimization() (squlearn.kernel.optimization.kernel_optimizer.kerneloptimizer method)": [[35, "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer.run_optimization"]], "nll (class in squlearn.kernel.optimization.negative_log_likelihood)": [[36, "squlearn.kernel.optimization.negative_log_likelihood.NLL"]], "compute() (squlearn.kernel.optimization.negative_log_likelihood.nll method)": [[36, "squlearn.kernel.optimization.negative_log_likelihood.NLL.compute"]], "targetalignment (class in squlearn.kernel.optimization.target_alignment)": [[37, "squlearn.kernel.optimization.target_alignment.TargetAlignment"]], "compute() (squlearn.kernel.optimization.target_alignment.targetalignment method)": [[37, "squlearn.kernel.optimization.target_alignment.TargetAlignment.compute"]], "customobservable (class in squlearn.observables)": [[38, "squlearn.observables.CustomObservable"]], "generate_initial_parameters() (squlearn.observables.customobservable method)": [[38, "squlearn.observables.CustomObservable.generate_initial_parameters"]], "get_operator() (squlearn.observables.customobservable method)": [[38, "squlearn.observables.CustomObservable.get_operator"]], "get_params() (squlearn.observables.customobservable method)": [[38, "squlearn.observables.CustomObservable.get_params"]], "get_pauli() (squlearn.observables.customobservable method)": [[38, "squlearn.observables.CustomObservable.get_pauli"]], "get_pauli_mapped() (squlearn.observables.customobservable method)": [[38, "squlearn.observables.CustomObservable.get_pauli_mapped"]], "num_parameters (squlearn.observables.customobservable attribute)": [[38, "squlearn.observables.CustomObservable.num_parameters"]], "num_qubits (squlearn.observables.customobservable attribute)": [[38, "squlearn.observables.CustomObservable.num_qubits"]], "operator_string (squlearn.observables.customobservable attribute)": [[38, "squlearn.observables.CustomObservable.operator_string"]], "parameterized (squlearn.observables.customobservable attribute)": [[38, "squlearn.observables.CustomObservable.parameterized"]], "set_map() (squlearn.observables.customobservable method)": [[38, "squlearn.observables.CustomObservable.set_map"]], "set_params() (squlearn.observables.customobservable method)": [[38, "squlearn.observables.CustomObservable.set_params"]], "i (squlearn.observables.isinghamiltonian attribute)": [[39, "squlearn.observables.IsingHamiltonian.I"]], "isinghamiltonian (class in squlearn.observables)": [[39, "squlearn.observables.IsingHamiltonian"]], "x (squlearn.observables.isinghamiltonian attribute)": [[39, "squlearn.observables.IsingHamiltonian.X"]], "z (squlearn.observables.isinghamiltonian attribute)": [[39, "squlearn.observables.IsingHamiltonian.Z"]], "zz (squlearn.observables.isinghamiltonian attribute)": [[39, "squlearn.observables.IsingHamiltonian.ZZ"]], "generate_initial_parameters() (squlearn.observables.isinghamiltonian method)": [[39, "squlearn.observables.IsingHamiltonian.generate_initial_parameters"]], "get_operator() (squlearn.observables.isinghamiltonian method)": [[39, "squlearn.observables.IsingHamiltonian.get_operator"]], "get_params() (squlearn.observables.isinghamiltonian method)": [[39, "squlearn.observables.IsingHamiltonian.get_params"]], "get_pauli() (squlearn.observables.isinghamiltonian method)": [[39, "squlearn.observables.IsingHamiltonian.get_pauli"]], "get_pauli_mapped() (squlearn.observables.isinghamiltonian method)": [[39, "squlearn.observables.IsingHamiltonian.get_pauli_mapped"]], "num_parameters (squlearn.observables.isinghamiltonian attribute)": [[39, "squlearn.observables.IsingHamiltonian.num_parameters"]], "num_qubits (squlearn.observables.isinghamiltonian attribute)": [[39, "squlearn.observables.IsingHamiltonian.num_qubits"]], "set_map() (squlearn.observables.isinghamiltonian method)": [[39, "squlearn.observables.IsingHamiltonian.set_map"]], "set_params() (squlearn.observables.isinghamiltonian method)": [[39, "squlearn.observables.IsingHamiltonian.set_params"]], "singlepauli (class in squlearn.observables)": [[40, "squlearn.observables.SinglePauli"]], "generate_initial_parameters() (squlearn.observables.singlepauli method)": [[40, "squlearn.observables.SinglePauli.generate_initial_parameters"]], "get_operator() (squlearn.observables.singlepauli method)": [[40, "squlearn.observables.SinglePauli.get_operator"]], "get_params() (squlearn.observables.singlepauli method)": [[40, "squlearn.observables.SinglePauli.get_params"]], "get_pauli() (squlearn.observables.singlepauli method)": [[40, "squlearn.observables.SinglePauli.get_pauli"]], "get_pauli_mapped() (squlearn.observables.singlepauli method)": [[40, "squlearn.observables.SinglePauli.get_pauli_mapped"]], "num_parameters (squlearn.observables.singlepauli attribute)": [[40, "squlearn.observables.SinglePauli.num_parameters"]], "num_qubits (squlearn.observables.singlepauli attribute)": [[40, "squlearn.observables.SinglePauli.num_qubits"]], "op_str (squlearn.observables.singlepauli attribute)": [[40, "squlearn.observables.SinglePauli.op_str"]], "parameterized (squlearn.observables.singlepauli attribute)": [[40, "squlearn.observables.SinglePauli.parameterized"]], "qubit (squlearn.observables.singlepauli attribute)": [[40, "squlearn.observables.SinglePauli.qubit"]], "set_map() (squlearn.observables.singlepauli method)": [[40, "squlearn.observables.SinglePauli.set_map"]], "set_params() (squlearn.observables.singlepauli method)": [[40, "squlearn.observables.SinglePauli.set_params"]], "singleprobability (class in squlearn.observables)": [[41, "squlearn.observables.SingleProbability"]], "generate_initial_parameters() (squlearn.observables.singleprobability method)": [[41, "squlearn.observables.SingleProbability.generate_initial_parameters"]], "get_operator() (squlearn.observables.singleprobability method)": [[41, "squlearn.observables.SingleProbability.get_operator"]], "get_params() (squlearn.observables.singleprobability method)": [[41, "squlearn.observables.SingleProbability.get_params"]], "get_pauli() (squlearn.observables.singleprobability method)": [[41, "squlearn.observables.SingleProbability.get_pauli"]], "get_pauli_mapped() (squlearn.observables.singleprobability method)": [[41, "squlearn.observables.SingleProbability.get_pauli_mapped"]], "num_parameters (squlearn.observables.singleprobability attribute)": [[41, "squlearn.observables.SingleProbability.num_parameters"]], "num_qubits (squlearn.observables.singleprobability attribute)": [[41, "squlearn.observables.SingleProbability.num_qubits"]], "one_state (squlearn.observables.singleprobability attribute)": [[41, "squlearn.observables.SingleProbability.one_state"]], "parameterized (squlearn.observables.singleprobability attribute)": [[41, "squlearn.observables.SingleProbability.parameterized"]], "qubit (squlearn.observables.singleprobability attribute)": [[41, "squlearn.observables.SingleProbability.qubit"]], "set_map() (squlearn.observables.singleprobability method)": [[41, "squlearn.observables.SingleProbability.set_map"]], "set_params() (squlearn.observables.singleprobability method)": [[41, "squlearn.observables.SingleProbability.set_params"]], "summedpaulis (class in squlearn.observables)": [[42, "squlearn.observables.SummedPaulis"]], "full_sum (squlearn.observables.summedpaulis attribute)": [[42, "squlearn.observables.SummedPaulis.full_sum"]], "generate_initial_parameters() (squlearn.observables.summedpaulis method)": [[42, "squlearn.observables.SummedPaulis.generate_initial_parameters"]], "get_operator() (squlearn.observables.summedpaulis method)": [[42, "squlearn.observables.SummedPaulis.get_operator"]], "get_params() (squlearn.observables.summedpaulis method)": [[42, "squlearn.observables.SummedPaulis.get_params"]], "get_pauli() (squlearn.observables.summedpaulis method)": [[42, "squlearn.observables.SummedPaulis.get_pauli"]], "get_pauli_mapped() (squlearn.observables.summedpaulis method)": [[42, "squlearn.observables.SummedPaulis.get_pauli_mapped"]], "include_identity (squlearn.observables.summedpaulis attribute)": [[42, "squlearn.observables.SummedPaulis.include_identity"]], "num_parameters (squlearn.observables.summedpaulis attribute)": [[42, "squlearn.observables.SummedPaulis.num_parameters"]], "num_qubits (squlearn.observables.summedpaulis attribute)": [[42, "squlearn.observables.SummedPaulis.num_qubits"]], "op_str (squlearn.observables.summedpaulis attribute)": [[42, "squlearn.observables.SummedPaulis.op_str"]], "set_map() (squlearn.observables.summedpaulis method)": [[42, "squlearn.observables.SummedPaulis.set_map"]], "set_params() (squlearn.observables.summedpaulis method)": [[42, "squlearn.observables.SummedPaulis.set_params"]], "summedprobabilities (class in squlearn.observables)": [[43, "squlearn.observables.SummedProbabilities"]], "full_sum (squlearn.observables.summedprobabilities attribute)": [[43, "squlearn.observables.SummedProbabilities.full_sum"]], "generate_initial_parameters() (squlearn.observables.summedprobabilities method)": [[43, "squlearn.observables.SummedProbabilities.generate_initial_parameters"]], "get_operator() (squlearn.observables.summedprobabilities method)": [[43, "squlearn.observables.SummedProbabilities.get_operator"]], "get_params() (squlearn.observables.summedprobabilities method)": [[43, "squlearn.observables.SummedProbabilities.get_params"]], "get_pauli() (squlearn.observables.summedprobabilities method)": [[43, "squlearn.observables.SummedProbabilities.get_pauli"]], "get_pauli_mapped() (squlearn.observables.summedprobabilities method)": [[43, "squlearn.observables.SummedProbabilities.get_pauli_mapped"]], "include_identity (squlearn.observables.summedprobabilities attribute)": [[43, "squlearn.observables.SummedProbabilities.include_identity"]], "num_parameters (squlearn.observables.summedprobabilities attribute)": [[43, "squlearn.observables.SummedProbabilities.num_parameters"]], "num_qubits (squlearn.observables.summedprobabilities attribute)": [[43, "squlearn.observables.SummedProbabilities.num_qubits"]], "one_state (squlearn.observables.summedprobabilities attribute)": [[43, "squlearn.observables.SummedProbabilities.one_state"]], "set_map() (squlearn.observables.summedprobabilities method)": [[43, "squlearn.observables.SummedProbabilities.set_map"]], "set_params() (squlearn.observables.summedprobabilities method)": [[43, "squlearn.observables.SummedProbabilities.set_params"]], "observablebase (class in squlearn.observables.observable_base)": [[44, "squlearn.observables.observable_base.ObservableBase"]], "generate_initial_parameters() (squlearn.observables.observable_base.observablebase method)": [[44, "squlearn.observables.observable_base.ObservableBase.generate_initial_parameters"]], "get_operator() (squlearn.observables.observable_base.observablebase method)": [[44, "squlearn.observables.observable_base.ObservableBase.get_operator"]], "get_params() (squlearn.observables.observable_base.observablebase method)": [[44, "squlearn.observables.observable_base.ObservableBase.get_params"]], "get_pauli() (squlearn.observables.observable_base.observablebase method)": [[44, "squlearn.observables.observable_base.ObservableBase.get_pauli"]], "get_pauli_mapped() (squlearn.observables.observable_base.observablebase method)": [[44, "squlearn.observables.observable_base.ObservableBase.get_pauli_mapped"]], "num_parameters (squlearn.observables.observable_base.observablebase attribute)": [[44, "squlearn.observables.observable_base.ObservableBase.num_parameters"]], "num_qubits (squlearn.observables.observable_base.observablebase attribute)": [[44, "squlearn.observables.observable_base.ObservableBase.num_qubits"]], "set_map() (squlearn.observables.observable_base.observablebase method)": [[44, "squlearn.observables.observable_base.ObservableBase.set_map"]], "set_params() (squlearn.observables.observable_base.observablebase method)": [[44, "squlearn.observables.observable_base.ObservableBase.set_params"]], "observablederivatives (class in squlearn.observables.observable_derivatives)": [[45, "squlearn.observables.observable_derivatives.ObservableDerivatives"]], "assign_parameters() (squlearn.observables.observable_derivatives.observablederivatives method)": [[45, "squlearn.observables.observable_derivatives.ObservableDerivatives.assign_parameters"]], "get_derivative() (squlearn.observables.observable_derivatives.observablederivatives method)": [[45, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_derivative"]], "get_operator() (squlearn.observables.observable_derivatives.observablederivatives method)": [[45, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_operator"]], "get_operator_squared() (squlearn.observables.observable_derivatives.observablederivatives method)": [[45, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_operator_squared"]], "num_operators (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[45, "squlearn.observables.observable_derivatives.ObservableDerivatives.num_operators"]], "num_parameters (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[45, "squlearn.observables.observable_derivatives.ObservableDerivatives.num_parameters"]], "parameter_vector (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[45, "squlearn.observables.observable_derivatives.ObservableDerivatives.parameter_vector"]], "adam (class in squlearn.optimizers)": [[46, "squlearn.optimizers.Adam"]], "minimize() (squlearn.optimizers.adam method)": [[46, "squlearn.optimizers.Adam.minimize"]], "reset() (squlearn.optimizers.adam method)": [[46, "squlearn.optimizers.Adam.reset"]], "set_callback() (squlearn.optimizers.adam method)": [[46, "squlearn.optimizers.Adam.set_callback"]], "step() (squlearn.optimizers.adam method)": [[46, "squlearn.optimizers.Adam.step"]], "lbfgsb (class in squlearn.optimizers)": [[47, "squlearn.optimizers.LBFGSB"]], "minimize() (squlearn.optimizers.lbfgsb method)": [[47, "squlearn.optimizers.LBFGSB.minimize"]], "set_callback() (squlearn.optimizers.lbfgsb method)": [[47, "squlearn.optimizers.LBFGSB.set_callback"]], "slsqp (class in squlearn.optimizers)": [[48, "squlearn.optimizers.SLSQP"]], "minimize() (squlearn.optimizers.slsqp method)": [[48, "squlearn.optimizers.SLSQP.minimize"]], "set_callback() (squlearn.optimizers.slsqp method)": [[48, "squlearn.optimizers.SLSQP.set_callback"]], "spsa (class in squlearn.optimizers)": [[49, "squlearn.optimizers.SPSA"]], "minimize() (squlearn.optimizers.spsa method)": [[49, "squlearn.optimizers.SPSA.minimize"]], "set_callback() (squlearn.optimizers.spsa method)": [[49, "squlearn.optimizers.SPSA.set_callback"]], "optimizerbase (class in squlearn.optimizers.optimizer_base)": [[50, "squlearn.optimizers.optimizer_base.OptimizerBase"]], "minimize() (squlearn.optimizers.optimizer_base.optimizerbase method)": [[50, "squlearn.optimizers.optimizer_base.OptimizerBase.minimize"]], "set_callback() (squlearn.optimizers.optimizer_base.optimizerbase method)": [[50, "squlearn.optimizers.optimizer_base.OptimizerBase.set_callback"]], "qnnclassifier (class in squlearn.qnn)": [[51, "squlearn.qnn.QNNClassifier"]], "fit() (squlearn.qnn.qnnclassifier method)": [[51, "squlearn.qnn.QNNClassifier.fit"]], "get_metadata_routing() (squlearn.qnn.qnnclassifier method)": [[51, "squlearn.qnn.QNNClassifier.get_metadata_routing"]], "get_params() (squlearn.qnn.qnnclassifier method)": [[51, "squlearn.qnn.QNNClassifier.get_params"]], "partial_fit() (squlearn.qnn.qnnclassifier method)": [[51, "squlearn.qnn.QNNClassifier.partial_fit"]], "predict() (squlearn.qnn.qnnclassifier method)": [[51, "squlearn.qnn.QNNClassifier.predict"]], "predict_proba() (squlearn.qnn.qnnclassifier method)": [[51, "squlearn.qnn.QNNClassifier.predict_proba"]], "score() (squlearn.qnn.qnnclassifier method)": [[51, "squlearn.qnn.QNNClassifier.score"]], "set_fit_request() (squlearn.qnn.qnnclassifier method)": [[51, "squlearn.qnn.QNNClassifier.set_fit_request"]], "set_params() (squlearn.qnn.qnnclassifier method)": [[51, "squlearn.qnn.QNNClassifier.set_params"]], "set_partial_fit_request() (squlearn.qnn.qnnclassifier method)": [[51, "squlearn.qnn.QNNClassifier.set_partial_fit_request"]], "set_score_request() (squlearn.qnn.qnnclassifier method)": [[51, "squlearn.qnn.QNNClassifier.set_score_request"]], "qnnregressor (class in squlearn.qnn)": [[52, "squlearn.qnn.QNNRegressor"]], "fit() (squlearn.qnn.qnnregressor method)": [[52, "squlearn.qnn.QNNRegressor.fit"]], "get_metadata_routing() (squlearn.qnn.qnnregressor method)": [[52, "squlearn.qnn.QNNRegressor.get_metadata_routing"]], "get_params() (squlearn.qnn.qnnregressor method)": [[52, "squlearn.qnn.QNNRegressor.get_params"]], "partial_fit() (squlearn.qnn.qnnregressor method)": [[52, "squlearn.qnn.QNNRegressor.partial_fit"]], "predict() (squlearn.qnn.qnnregressor method)": [[52, "squlearn.qnn.QNNRegressor.predict"]], "score() (squlearn.qnn.qnnregressor method)": [[52, "squlearn.qnn.QNNRegressor.score"]], "set_fit_request() (squlearn.qnn.qnnregressor method)": [[52, "squlearn.qnn.QNNRegressor.set_fit_request"]], "set_params() (squlearn.qnn.qnnregressor method)": [[52, "squlearn.qnn.QNNRegressor.set_params"]], "set_partial_fit_request() (squlearn.qnn.qnnregressor method)": [[52, "squlearn.qnn.QNNRegressor.set_partial_fit_request"]], "set_score_request() (squlearn.qnn.qnnregressor method)": [[52, "squlearn.qnn.QNNRegressor.set_score_request"]], "shotsfromrstd (class in squlearn.qnn)": [[53, "squlearn.qnn.ShotsFromRSTD"]], "reset_shots() (squlearn.qnn.shotsfromrstd method)": [[53, "squlearn.qnn.ShotsFromRSTD.reset_shots"]], "set_executor() (squlearn.qnn.shotsfromrstd method)": [[53, "squlearn.qnn.ShotsFromRSTD.set_executor"]], "set_shots_for_grad() (squlearn.qnn.shotsfromrstd method)": [[53, "squlearn.qnn.ShotsFromRSTD.set_shots_for_grad"]], "set_shots_for_loss() (squlearn.qnn.shotsfromrstd method)": [[53, "squlearn.qnn.ShotsFromRSTD.set_shots_for_loss"]], "baseqnn (class in squlearn.qnn.base_qnn)": [[54, "squlearn.qnn.base_qnn.BaseQNN"]], "fit() (squlearn.qnn.base_qnn.baseqnn method)": [[54, "squlearn.qnn.base_qnn.BaseQNN.fit"]], "get_metadata_routing() (squlearn.qnn.base_qnn.baseqnn method)": [[54, "squlearn.qnn.base_qnn.BaseQNN.get_metadata_routing"]], "get_params() (squlearn.qnn.base_qnn.baseqnn method)": [[54, "squlearn.qnn.base_qnn.BaseQNN.get_params"]], "set_fit_request() (squlearn.qnn.base_qnn.baseqnn method)": [[54, "squlearn.qnn.base_qnn.BaseQNN.set_fit_request"]], "set_params() (squlearn.qnn.base_qnn.baseqnn method)": [[54, "squlearn.qnn.base_qnn.BaseQNN.set_params"]], "get_lr_decay (class in squlearn.qnn)": [[55, "squlearn.qnn.get_lr_decay"]], "get_variance_fac (class in squlearn.qnn)": [[56, "squlearn.qnn.get_variance_fac"]], "lossbase (class in squlearn.qnn.loss)": [[57, "squlearn.qnn.loss.LossBase"]], "gradient() (squlearn.qnn.loss.lossbase method)": [[57, "squlearn.qnn.loss.LossBase.gradient"]], "set_opt_param_op() (squlearn.qnn.loss.lossbase method)": [[57, "squlearn.qnn.loss.LossBase.set_opt_param_op"]], "value() (squlearn.qnn.loss.lossbase method)": [[57, "squlearn.qnn.loss.LossBase.value"]], "variance() (squlearn.qnn.loss.lossbase method)": [[57, "squlearn.qnn.loss.LossBase.variance"]], "parameterregularizationloss (class in squlearn.qnn.loss)": [[58, "squlearn.qnn.loss.ParameterRegularizationLoss"]], "gradient() (squlearn.qnn.loss.parameterregularizationloss method)": [[58, "squlearn.qnn.loss.ParameterRegularizationLoss.gradient"]], "set_opt_param_op() (squlearn.qnn.loss.parameterregularizationloss method)": [[58, "squlearn.qnn.loss.ParameterRegularizationLoss.set_opt_param_op"]], "value() (squlearn.qnn.loss.parameterregularizationloss method)": [[58, "squlearn.qnn.loss.ParameterRegularizationLoss.value"]], "variance() (squlearn.qnn.loss.parameterregularizationloss method)": [[58, "squlearn.qnn.loss.ParameterRegularizationLoss.variance"]], "squaredloss (class in squlearn.qnn.loss)": [[59, "squlearn.qnn.loss.SquaredLoss"]], "gradient() (squlearn.qnn.loss.squaredloss method)": [[59, "squlearn.qnn.loss.SquaredLoss.gradient"]], "set_opt_param_op() (squlearn.qnn.loss.squaredloss method)": [[59, "squlearn.qnn.loss.SquaredLoss.set_opt_param_op"]], "value() (squlearn.qnn.loss.squaredloss method)": [[59, "squlearn.qnn.loss.SquaredLoss.value"]], "variance() (squlearn.qnn.loss.squaredloss method)": [[59, "squlearn.qnn.loss.SquaredLoss.variance"]], "varianceloss (class in squlearn.qnn.loss)": [[60, "squlearn.qnn.loss.VarianceLoss"]], "gradient() (squlearn.qnn.loss.varianceloss method)": [[60, "squlearn.qnn.loss.VarianceLoss.gradient"]], "set_opt_param_op() (squlearn.qnn.loss.varianceloss method)": [[60, "squlearn.qnn.loss.VarianceLoss.set_opt_param_op"]], "value() (squlearn.qnn.loss.varianceloss method)": [[60, "squlearn.qnn.loss.VarianceLoss.value"]], "variance() (squlearn.qnn.loss.varianceloss method)": [[60, "squlearn.qnn.loss.VarianceLoss.variance"]], "expec (class in squlearn.qnn.qnn)": [[61, "squlearn.qnn.qnn.Expec"]], "from_parameter() (squlearn.qnn.qnn.expec class method)": [[61, "squlearn.qnn.qnn.Expec.from_parameter"]], "from_string() (squlearn.qnn.qnn.expec class method)": [[61, "squlearn.qnn.qnn.Expec.from_string"]], "from_tuple() (squlearn.qnn.qnn.expec class method)": [[61, "squlearn.qnn.qnn.Expec.from_tuple"]], "from_variable() (squlearn.qnn.qnn.expec class method)": [[61, "squlearn.qnn.qnn.Expec.from_variable"]], "qnn (class in squlearn.qnn.qnn)": [[62, "squlearn.qnn.qnn.QNN"]], "evaluate() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate"]], "evaluate_dfdop() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_dfdop"]], "evaluate_dfdopdx() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_dfdopdx"]], "evaluate_dfdp() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_dfdp"]], "evaluate_dfdpdx() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_dfdpdx"]], "evaluate_dfdx() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_dfdx"]], "evaluate_dfdxdx() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_dfdxdx"]], "evaluate_diff_tuple() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_diff_tuple"]], "evaluate_f() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_f"]], "evaluate_from_string() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_from_string"]], "evaluate_laplace() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_laplace"]], "evaluate_laplace_dop() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_laplace_dop"]], "evaluate_laplace_dp() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_laplace_dp"]], "evaluate_probabilities() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_probabilities"]], "evaluate_var() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_var"]], "evaluate_variance() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.evaluate_variance"]], "get_optree_from_expec() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.get_optree_from_expec"]], "get_optree_from_string() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.get_optree_from_string"]], "get_params() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.get_params"]], "get_shots() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.get_shots"]], "reset_shots() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.reset_shots"]], "set_params() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.set_params"]], "set_shots() (squlearn.qnn.qnn.qnn method)": [[62, "squlearn.qnn.qnn.QNN.set_shots"]], "train (class in squlearn.qnn.training)": [[63, "squlearn.qnn.training.train"]], "train_mini_batch (class in squlearn.qnn.training)": [[64, "squlearn.qnn.training.train_mini_batch"]], "optree (class in squlearn.util)": [[65, "squlearn.util.OpTree"]], "optree.optreederivative (class in squlearn.util)": [[65, "squlearn.util.OpTree.OpTreeDerivative"]], "optree.optreeevaluate (class in squlearn.util)": [[65, "squlearn.util.OpTree.OpTreeEvaluate"]], "assign_parameters() (squlearn.util.optree static method)": [[65, "squlearn.util.OpTree.assign_parameters"]], "derivative (squlearn.util.optree attribute)": [[65, "squlearn.util.OpTree.derivative"]], "differentiate() (squlearn.util.optree.optreederivative static method)": [[65, "squlearn.util.OpTree.OpTreeDerivative.differentiate"]], "differentiate_v2() (squlearn.util.optree.optreederivative static method)": [[65, "squlearn.util.OpTree.OpTreeDerivative.differentiate_v2"]], "evaluate (squlearn.util.optree attribute)": [[65, "squlearn.util.OpTree.evaluate"]], "evaluate_tree_with_estimator() (squlearn.util.optree.optreeevaluate static method)": [[65, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_tree_with_estimator"]], "evaluate_tree_with_sampler() (squlearn.util.optree.optreeevaluate static method)": [[65, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_tree_with_sampler"]], "evaluate_with_estimator() (squlearn.util.optree.optreeevaluate static method)": [[65, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_with_estimator"]], "evaluate_with_sampler() (squlearn.util.optree.optreeevaluate static method)": [[65, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_with_sampler"]], "gen_expectation_tree() (squlearn.util.optree static method)": [[65, "squlearn.util.OpTree.gen_expectation_tree"]], "get_first_leaf() (squlearn.util.optree static method)": [[65, "squlearn.util.OpTree.get_first_leaf"]], "get_num_nested_lists() (squlearn.util.optree static method)": [[65, "squlearn.util.OpTree.get_num_nested_lists"]], "get_number_of_leafs() (squlearn.util.optree static method)": [[65, "squlearn.util.OpTree.get_number_of_leafs"]], "get_tree_depth() (squlearn.util.optree static method)": [[65, "squlearn.util.OpTree.get_tree_depth"]], "hash_circuit() (squlearn.util.optree static method)": [[65, "squlearn.util.OpTree.hash_circuit"]], "hash_operator() (squlearn.util.optree static method)": [[65, "squlearn.util.OpTree.hash_operator"]], "simplify() (squlearn.util.optree static method)": [[65, "squlearn.util.OpTree.simplify"]], "transform_to_zbasis() (squlearn.util.optree.optreeevaluate static method)": [[65, "squlearn.util.OpTree.OpTreeEvaluate.transform_to_zbasis"]], "transpile_to_supported_instructions() (squlearn.util.optree.optreederivative static method)": [[65, "squlearn.util.OpTree.OpTreeDerivative.transpile_to_supported_instructions"]], "optreecircuit (class in squlearn.util.optree)": [[66, "squlearn.util.optree.OpTreeCircuit"]], "copy() (squlearn.util.optree.optreecircuit method)": [[66, "squlearn.util.optree.OpTreeCircuit.copy"]], "optreecontainer (class in squlearn.util.optree)": [[67, "squlearn.util.optree.OpTreeContainer"]], "copy() (squlearn.util.optree.optreecontainer method)": [[67, "squlearn.util.optree.OpTreeContainer.copy"]], "optreeexpectationvalue (class in squlearn.util.optree)": [[68, "squlearn.util.optree.OpTreeExpectationValue"]], "copy() (squlearn.util.optree.optreeexpectationvalue method)": [[68, "squlearn.util.optree.OpTreeExpectationValue.copy"]], "optreelist (class in squlearn.util.optree)": [[69, "squlearn.util.optree.OpTreeList"]], "append() (squlearn.util.optree.optreelist method)": [[69, "squlearn.util.optree.OpTreeList.append"]], "copy() (squlearn.util.optree.optreelist method)": [[69, "squlearn.util.optree.OpTreeList.copy"]], "remove() (squlearn.util.optree.optreelist method)": [[69, "squlearn.util.optree.OpTreeList.remove"]], "optreemeasuredoperator (class in squlearn.util.optree)": [[70, "squlearn.util.optree.OpTreeMeasuredOperator"]], "copy() (squlearn.util.optree.optreemeasuredoperator method)": [[70, "squlearn.util.optree.OpTreeMeasuredOperator.copy"]], "measure_circuit() (squlearn.util.optree.optreemeasuredoperator method)": [[70, "squlearn.util.optree.OpTreeMeasuredOperator.measure_circuit"]], "optreeoperator (class in squlearn.util.optree)": [[71, "squlearn.util.optree.OpTreeOperator"]], "copy() (squlearn.util.optree.optreeoperator method)": [[71, "squlearn.util.optree.OpTreeOperator.copy"]], "optreesum (class in squlearn.util.optree)": [[72, "squlearn.util.optree.OpTreeSum"]], "append() (squlearn.util.optree.optreesum method)": [[72, "squlearn.util.optree.OpTreeSum.append"]], "copy() (squlearn.util.optree.optreesum method)": [[72, "squlearn.util.optree.OpTreeSum.copy"]], "remove() (squlearn.util.optree.optreesum method)": [[72, "squlearn.util.optree.OpTreeSum.remove"]], "optreevalue (class in squlearn.util.optree)": [[73, "squlearn.util.optree.OpTreeValue"]], "copy() (squlearn.util.optree.optreevalue method)": [[73, "squlearn.util.optree.OpTreeValue.copy"]]}})