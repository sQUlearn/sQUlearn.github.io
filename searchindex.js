Search.setIndex({"alltitles": {"API Reference": [[8, null]], "Acknowledgements": [[6, "acknowledgements"]], "Assessing the QNN on IBM Quantum Using the Sampler Primitive": [[2, "Assessing-the-QNN-on-IBM-Quantum-Using-the-Sampler-Primitive"]], "Attributes:": [[9, "attributes"], [34, "attributes"], [38, "attributes"], [41, "attributes"], [42, "attributes"], [43, "attributes"], [44, "attributes"], [45, "attributes"], [46, "attributes"], [47, "attributes"], [48, "attributes"], [68, "attributes"], [70, "attributes"], [87, "attributes"]], "Automatic backend selection (IBM Quantum only)": [[89, "automatic-backend-selection-ibm-quantum-only"]], "Base Classes": [[8, "base-classes"]], "Bayesian Optimization using a Quantum Gaussian Process Surrogate Model": [[4, null]], "Bleeding-edge version": [[7, "bleeding-edge-version"]], "Circuit Design": [[8, "circuit-design"]], "Cite sQUlearn": [[6, "cite-squlearn"]], "Classification": [[0, "Classification"], [90, "classification"], [93, "classification"]], "Combining Quantum Encoding Circuits": [[88, "combining-quantum-encoding-circuits"]], "Configuring the Quantum Neural Network (QNN)": [[2, "Configuring-the-Quantum-Neural-Network-(QNN)"]], "Contact": [[6, "contact"]], "Contents:": [[6, null]], "Contribute to sQUlearn": [[6, "contribute-to-squlearn"]], "Core": [[8, "core"]], "Create your custom Encoding Circuit via LayeredEncodingCircuit": [[88, "create-your-custom-encoding-circuit-via-layeredencodingcircuit"]], "Custom observables": [[91, "custom-observables"]], "Derivatives of the observable": [[91, "derivatives-of-the-observable"]], "Development version": [[7, "development-version"]], "Different Quantum Encoding Circuits via EncodingCircuitDerivatives": [[88, "different-quantum-encoding-circuits-via-encodingcircuitderivatives"]], "Dimensionality Reduction": [[0, "Dimensionality-Reduction"]], "DotProduct:": [[34, "dotproduct"]], "Dynamic Decoupling and TREX": [[2, "Dynamic-Decoupling-and-TREX"]], "Dynamic Decoupling and Zero-Noise Extrapolation (ZNE) for Error Mitigation": [[2, "Dynamic-Decoupling-and-Zero-Noise-Extrapolation-(ZNE)-for-Error-Mitigation"]], "Dynamically adjustments of the shots": [[92, "dynamically-adjustments-of-the-shots"]], "Encoding Circuit Tools": [[8, "encoding-circuit-tools"]], "Encoding Circuits": [[8, "module-squlearn.encoding_circuit"]], "Error Mitigation for Quantum Neural Networks on IBM Quantum Devices": [[2, null]], "Evaluating the QNN on the IBM Backend with Error Mitigation": [[2, "Evaluating-the-QNN-on-the-IBM-Backend-with-Error-Mitigation"]], "Examples": [[5, null], [6, "examples"]], "Execution Tools": [[8, "execution-tools"]], "ExpSineSquared:": [[34, "expsinesquared"]], "Fidelity Quantum Kernel (FQK) via FidelityKernel": [[90, "fidelity-quantum-kernel-fqk-via-fidelitykernel"]], "Gaussian:": [[34, "gaussian"]], "Generating Data": [[1, "Generating-Data"]], "Handwritten Digit Recognition with Projected Quantum Kernels": [[0, null]], "High-Level methods that employ quantum kernels": [[90, "high-level-methods-that-employ-quantum-kernels"]], "High-level methods for QNNs": [[92, "high-level-methods-for-qnns"]], "High-level methods for QRC": [[93, "high-level-methods-for-qrc"]], "Hyperparameter Optimization and Pipelines": [[1, null]], "Implemented Quantum Encoding Circuits": [[88, "implemented-quantum-encoding-circuits"]], "Implemented observables.": [[91, "implemented-observables"]], "Implemented optimizers": [[8, "module-squlearn.optimizers"]], "Importing Libraries": [[1, "Importing-Libraries"], [3, "Importing-Libraries"]], "Imports and Definitions": [[0, "Imports-and-Definitions"]], "In-QPU parallelization (Qiskit only)": [[89, "in-qpu-parallelization-qiskit-only"]], "Initialization of the Executor class": [[89, "initialization-of-the-executor-class"]], "Install sQUlearn": [[6, "install-squlearn"]], "Installation": [[7, null]], "Installation with optional dependencies:": [[7, "installation-with-optional-dependencies"]], "Key Features of the Executor": [[89, "key-features-of-the-executor"]], "Library Imports": [[2, "Library-Imports"]], "License": [[6, "license"]], "Mapping observables to real qubits": [[91, "mapping-observables-to-real-qubits"]], "Matern:": [[34, "matern"]], "Methods to evaluate quantum kernels": [[90, "methods-to-evaluate-quantum-kernels"]], "Methods:": [[9, "methods"], [31, "methods"], [32, "methods"], [34, "methods"], [36, "methods"], [37, "methods"], [38, "methods"], [39, "methods"], [40, "methods"], [41, "methods"], [42, "methods"], [43, "methods"], [44, "methods"], [45, "methods"], [46, "methods"], [47, "methods"], [48, "methods"], [55, "methods"], [56, "methods"], [68, "methods"], [70, "methods"], [73, "methods"], [74, "methods"], [87, "methods"]], "Min Max Scaling": [[0, "Min-Max-Scaling"]], "Mini-Batch gradient descent with Adam": [[92, "mini-batch-gradient-descent-with-adam"]], "Observables for expectation values": [[91, null]], "OpTree Data Structure": [[8, "optree-data-structure"]], "Operator Tools": [[8, "operator-tools"]], "Operators": [[8, "operators"]], "Optimization": [[92, "optimization"]], "Outer Kernels are implemented as follows:": [[34, "outer-kernels-are-implemented-as-follows"]], "Overview": [[2, "Overview"], [89, "overview"]], "PairwiseKernel:": [[34, "pairwisekernel"]], "PennyLane interface": [[8, "pennylane-interface"]], "Preprocessing": [[0, "Preprocessing"]], "Prerequisites": [[6, "prerequisites"], [7, "prerequisites"]], "Projected Quantum Kernel": [[0, "Projected-Quantum-Kernel"]], "Projected Quantum Kernel (PQK) via ProjectedQuantumKernel": [[90, "projected-quantum-kernel-pqk-via-projectedquantumkernel"]], "Pruning of Quantum Encoding Circuits": [[88, "pruning-of-quantum-encoding-circuits"]], "QML Classifiers": [[8, "qml-classifiers"]], "QML Regressors": [[8, "qml-regressors"]], "QNN Core": [[8, "module-squlearn.qnn"]], "Quantum Encoding Circuits": [[88, null]], "Quantum Kernel Core": [[8, "module-squlearn.kernel.matrix"]], "Quantum Kernel Methods": [[0, "Quantum-Kernel-Methods"], [90, null]], "Quantum Kernels": [[0, "Quantum-Kernels"]], "Quantum Neural Networks": [[92, null]], "Quantum Reservoir Computing": [[93, null]], "RationalQuadratic:": [[34, "rationalquadratic"]], "Regression": [[90, "regression"], [93, "regression"]], "Result": [[93, "result"], [93, "id4"]], "Results Analysis": [[1, "Results-Analysis"]], "Running Grid Search": [[1, "Running-Grid-Search"]], "SLSQP": [[92, "slsqp"]], "Schedule of the learning rate of Adam": [[92, "schedule-of-the-learning-rate-of-adam"]], "Set-up of the QNN": [[2, "Set-up-of-the-QNN"]], "Setting Options for Qiskit Primitives": [[89, "setting-options-for-qiskit-primitives"]], "Setting up the grid search": [[1, "Setting-up-the-grid-search"]], "Setting up the kernels": [[1, "Setting-up-the-kernels"]], "Setup": [[93, "setup"], [93, "id2"]], "Single qubit gates and their string representation": [[17, "id1"]], "Solving a First-order Ordinary Differential Equation (ODE)": [[3, null]], "Split Data sets": [[0, "Split-Data-sets"]], "Stable Release": [[6, "stable-release"], [7, "stable-release"]], "Strings that are recognized by the get_derivative() method": [[13, "id1"], [48, "id1"]], "Summary": [[1, "Summary"]], "Support Vector Machine": [[0, "Support-Vector-Machine"]], "The Data": [[0, "The-Data"]], "The Executor Class": [[89, null]], "Training": [[93, "training"], [93, "id3"]], "Training of quantum kernels": [[90, "training-of-quantum-kernels"]], "Training of the QNN with a noise free simulator": [[2, "Training-of-the-QNN-with-a-noise-free-simulator"]], "Transpile Quantum Encoding Circuits via TranspiledEncodingCircuit": [[88, "transpile-quantum-encoding-circuits-via-transpiledencodingcircuit"]], "Two qubit gates and their string representation": [[17, "id2"]], "User Guide": [[94, null]], "Utilizing Executor Primitives in Qiskit Routines": [[89, "utilizing-executor-primitives-in-qiskit-routines"]], "Variance reduction": [[92, "variance-reduction"]], "Variance reduction with dynamic adjustment of the regularization factor": [[92, "variance-reduction-with-dynamic-adjustment-of-the-regularization-factor"]], "Welcome to the sQUlearn documentation!": [[6, null]], "Without Error Mitigation": [[2, "Without-Error-Mitigation"]], "Wrapping Qiskit Encoding Circuits": [[88, "wrapping-qiskit-encoding-circuits"]], "squlearn.Executor": [[9, null]], "squlearn.encoding_circuit.ChebyshevPQC": [[10, null]], "squlearn.encoding_circuit.ChebyshevRx": [[11, null]], "squlearn.encoding_circuit.ChebyshevTower": [[12, null]], "squlearn.encoding_circuit.EncodingCircuitDerivatives": [[13, null]], "squlearn.encoding_circuit.HighDimEncodingCircuit": [[14, null]], "squlearn.encoding_circuit.HubregtsenEncodingCircuit": [[15, null]], "squlearn.encoding_circuit.KyriienkoEncodingCircuit": [[16, null]], "squlearn.encoding_circuit.LayeredEncodingCircuit": [[17, null]], "squlearn.encoding_circuit.MultiControlEncodingCircuit": [[18, null]], "squlearn.encoding_circuit.ParamZFeatureMap": [[19, null]], "squlearn.encoding_circuit.PrunedEncodingCircuit": [[20, null]], "squlearn.encoding_circuit.QCNNEncodingCircuit": [[21, null]], "squlearn.encoding_circuit.QiskitEncodingCircuit": [[22, null]], "squlearn.encoding_circuit.RandomEncodingCircuit": [[23, null]], "squlearn.encoding_circuit.RandomLayeredEncodingCircuit": [[24, null]], "squlearn.encoding_circuit.TranspiledEncodingCircuit": [[25, null]], "squlearn.encoding_circuit.YZ_CX_EncodingCircuit": [[26, null]], "squlearn.encoding_circuit.automated_pruning": [[27, null]], "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase": [[28, null]], "squlearn.encoding_circuit.pruning_from_QFI": [[29, null]], "squlearn.kernel.loss.kernel_loss_base.KernelLossBase": [[30, null]], "squlearn.kernel.loss.negative_log_likelihood.NLL": [[31, null]], "squlearn.kernel.loss.target_alignment.TargetAlignment": [[32, null]], "squlearn.kernel.matrix.FidelityKernel": [[33, null]], "squlearn.kernel.matrix.ProjectedQuantumKernel": [[34, null]], "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase": [[35, null]], "squlearn.kernel.ml.QGPC": [[36, null]], "squlearn.kernel.ml.QGPR": [[37, null]], "squlearn.kernel.ml.QKRR": [[38, null]], "squlearn.kernel.ml.QSVC": [[39, null]], "squlearn.kernel.ml.QSVR": [[40, null]], "squlearn.observables.CustomObservable": [[41, null]], "squlearn.observables.IsingHamiltonian": [[42, null]], "squlearn.observables.SinglePauli": [[43, null]], "squlearn.observables.SingleProbability": [[44, null]], "squlearn.observables.SummedPaulis": [[45, null]], "squlearn.observables.SummedProbabilities": [[46, null]], "squlearn.observables.observable_base.ObservableBase": [[47, null]], "squlearn.observables.observable_derivatives.ObservableDerivatives": [[48, null]], "squlearn.optimizers.Adam": [[49, null]], "squlearn.optimizers.LBFGSB": [[50, null]], "squlearn.optimizers.SGLBO": [[51, null]], "squlearn.optimizers.SLSQP": [[52, null]], "squlearn.optimizers.SPSA": [[53, null]], "squlearn.optimizers.optimizer_base.OptimizerBase": [[54, null]], "squlearn.qnn.QNNClassifier": [[55, null]], "squlearn.qnn.QNNRegressor": [[56, null]], "squlearn.qnn.ShotsFromRSTD": [[57, null]], "squlearn.qnn.base_qnn.BaseQNN": [[58, null]], "squlearn.qnn.get_lr_decay": [[59, null]], "squlearn.qnn.get_variance_fac": [[60, null]], "squlearn.qnn.loss.LossBase": [[61, null]], "squlearn.qnn.loss.ODELoss": [[62, null]], "squlearn.qnn.loss.ParameterRegularizationLoss": [[63, null]], "squlearn.qnn.loss.SquaredLoss": [[64, null]], "squlearn.qnn.loss.VarianceLoss": [[65, null]], "squlearn.qnn.lowlevel_qnn.LowLevelQNN": [[66, null]], "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase": [[67, null]], "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane": [[68, null]], "squlearn.qnn.lowlevel_qnn_qiskit.Expec": [[69, null]], "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit": [[70, null]], "squlearn.qnn.training.train": [[71, null]], "squlearn.qnn.training.train_mini_batch": [[72, null]], "squlearn.qrc.QRCClassifier": [[73, null]], "squlearn.qrc.QRCRegressor": [[74, null]], "squlearn.qrc.base_qrc.BaseQRC": [[75, null]], "squlearn.util.OpTree": [[76, null]], "squlearn.util.executor.ExecutorEstimator": [[77, null]], "squlearn.util.executor.ExecutorSampler": [[78, null]], "squlearn.util.optree.OpTreeCircuit": [[79, null]], "squlearn.util.optree.OpTreeContainer": [[80, null]], "squlearn.util.optree.OpTreeExpectationValue": [[81, null]], "squlearn.util.optree.OpTreeList": [[82, null]], "squlearn.util.optree.OpTreeMeasuredOperator": [[83, null]], "squlearn.util.optree.OpTreeOperator": [[84, null]], "squlearn.util.optree.OpTreeSum": [[85, null]], "squlearn.util.optree.OpTreeValue": [[86, null]], "squlearn.util.pennylane.PennyLaneCircuit": [[87, null]]}, "docnames": ["examples/example_kernel_digit_classification", "examples/example_kernel_grid_search", "examples/example_qnn_backend_mitigation", "examples/example_qnn_ode_solver", "examples/example_quantum_bayesian_optimization", "examples/examples_index", "index", "install/install", "modules/classes", "modules/generated/squlearn.Executor", "modules/generated/squlearn.encoding_circuit.ChebyshevPQC", "modules/generated/squlearn.encoding_circuit.ChebyshevRx", "modules/generated/squlearn.encoding_circuit.ChebyshevTower", "modules/generated/squlearn.encoding_circuit.EncodingCircuitDerivatives", "modules/generated/squlearn.encoding_circuit.HighDimEncodingCircuit", "modules/generated/squlearn.encoding_circuit.HubregtsenEncodingCircuit", "modules/generated/squlearn.encoding_circuit.KyriienkoEncodingCircuit", "modules/generated/squlearn.encoding_circuit.LayeredEncodingCircuit", "modules/generated/squlearn.encoding_circuit.MultiControlEncodingCircuit", "modules/generated/squlearn.encoding_circuit.ParamZFeatureMap", "modules/generated/squlearn.encoding_circuit.PrunedEncodingCircuit", "modules/generated/squlearn.encoding_circuit.QCNNEncodingCircuit", "modules/generated/squlearn.encoding_circuit.QiskitEncodingCircuit", "modules/generated/squlearn.encoding_circuit.RandomEncodingCircuit", "modules/generated/squlearn.encoding_circuit.RandomLayeredEncodingCircuit", "modules/generated/squlearn.encoding_circuit.TranspiledEncodingCircuit", "modules/generated/squlearn.encoding_circuit.YZ_CX_EncodingCircuit", "modules/generated/squlearn.encoding_circuit.automated_pruning", "modules/generated/squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase", "modules/generated/squlearn.encoding_circuit.pruning_from_QFI", "modules/generated/squlearn.kernel.loss.kernel_loss_base.KernelLossBase", "modules/generated/squlearn.kernel.loss.negative_log_likelihood.NLL", "modules/generated/squlearn.kernel.loss.target_alignment.TargetAlignment", "modules/generated/squlearn.kernel.matrix.FidelityKernel", "modules/generated/squlearn.kernel.matrix.ProjectedQuantumKernel", "modules/generated/squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase", "modules/generated/squlearn.kernel.ml.QGPC", "modules/generated/squlearn.kernel.ml.QGPR", "modules/generated/squlearn.kernel.ml.QKRR", "modules/generated/squlearn.kernel.ml.QSVC", "modules/generated/squlearn.kernel.ml.QSVR", "modules/generated/squlearn.observables.CustomObservable", "modules/generated/squlearn.observables.IsingHamiltonian", "modules/generated/squlearn.observables.SinglePauli", "modules/generated/squlearn.observables.SingleProbability", "modules/generated/squlearn.observables.SummedPaulis", "modules/generated/squlearn.observables.SummedProbabilities", "modules/generated/squlearn.observables.observable_base.ObservableBase", "modules/generated/squlearn.observables.observable_derivatives.ObservableDerivatives", "modules/generated/squlearn.optimizers.Adam", "modules/generated/squlearn.optimizers.LBFGSB", "modules/generated/squlearn.optimizers.SGLBO", "modules/generated/squlearn.optimizers.SLSQP", "modules/generated/squlearn.optimizers.SPSA", "modules/generated/squlearn.optimizers.optimizer_base.OptimizerBase", "modules/generated/squlearn.qnn.QNNClassifier", "modules/generated/squlearn.qnn.QNNRegressor", "modules/generated/squlearn.qnn.ShotsFromRSTD", "modules/generated/squlearn.qnn.base_qnn.BaseQNN", "modules/generated/squlearn.qnn.get_lr_decay", "modules/generated/squlearn.qnn.get_variance_fac", "modules/generated/squlearn.qnn.loss.LossBase", "modules/generated/squlearn.qnn.loss.ODELoss", "modules/generated/squlearn.qnn.loss.ParameterRegularizationLoss", "modules/generated/squlearn.qnn.loss.SquaredLoss", "modules/generated/squlearn.qnn.loss.VarianceLoss", "modules/generated/squlearn.qnn.lowlevel_qnn.LowLevelQNN", "modules/generated/squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase", "modules/generated/squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane", "modules/generated/squlearn.qnn.lowlevel_qnn_qiskit.Expec", "modules/generated/squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit", "modules/generated/squlearn.qnn.training.train", "modules/generated/squlearn.qnn.training.train_mini_batch", "modules/generated/squlearn.qrc.QRCClassifier", "modules/generated/squlearn.qrc.QRCRegressor", "modules/generated/squlearn.qrc.base_qrc.BaseQRC", "modules/generated/squlearn.util.OpTree", "modules/generated/squlearn.util.executor.ExecutorEstimator", "modules/generated/squlearn.util.executor.ExecutorSampler", "modules/generated/squlearn.util.optree.OpTreeCircuit", "modules/generated/squlearn.util.optree.OpTreeContainer", "modules/generated/squlearn.util.optree.OpTreeExpectationValue", "modules/generated/squlearn.util.optree.OpTreeList", "modules/generated/squlearn.util.optree.OpTreeMeasuredOperator", "modules/generated/squlearn.util.optree.OpTreeOperator", "modules/generated/squlearn.util.optree.OpTreeSum", "modules/generated/squlearn.util.optree.OpTreeValue", "modules/generated/squlearn.util.pennylane.PennyLaneCircuit", "user_guide/encoding_circuits", "user_guide/executor", "user_guide/kernel_methods", "user_guide/observables", "user_guide/quantum_neural_networks", "user_guide/quantum_reservoir_computing", "user_guide/user_guide_index"], "envversion": {"nbsphinx": 4, "sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["examples/example_kernel_digit_classification.nblink", "examples/example_kernel_grid_search.nblink", "examples/example_qnn_backend_mitigation.nblink", "examples/example_qnn_ode_solver.nblink", "examples/example_quantum_bayesian_optimization.nblink", "examples/examples_index.rst", "index.rst", "install/install.rst", "modules/classes.rst", "modules/generated/squlearn.Executor.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevPQC.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevRx.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevTower.rst", "modules/generated/squlearn.encoding_circuit.EncodingCircuitDerivatives.rst", "modules/generated/squlearn.encoding_circuit.HighDimEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.HubregtsenEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.KyriienkoEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.LayeredEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.MultiControlEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.ParamZFeatureMap.rst", "modules/generated/squlearn.encoding_circuit.PrunedEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.QCNNEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.QiskitEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.RandomEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.RandomLayeredEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.TranspiledEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.YZ_CX_EncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.automated_pruning.rst", "modules/generated/squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.rst", "modules/generated/squlearn.encoding_circuit.pruning_from_QFI.rst", "modules/generated/squlearn.kernel.loss.kernel_loss_base.KernelLossBase.rst", "modules/generated/squlearn.kernel.loss.negative_log_likelihood.NLL.rst", "modules/generated/squlearn.kernel.loss.target_alignment.TargetAlignment.rst", "modules/generated/squlearn.kernel.matrix.FidelityKernel.rst", "modules/generated/squlearn.kernel.matrix.ProjectedQuantumKernel.rst", "modules/generated/squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.rst", "modules/generated/squlearn.kernel.ml.QGPC.rst", "modules/generated/squlearn.kernel.ml.QGPR.rst", "modules/generated/squlearn.kernel.ml.QKRR.rst", "modules/generated/squlearn.kernel.ml.QSVC.rst", "modules/generated/squlearn.kernel.ml.QSVR.rst", "modules/generated/squlearn.observables.CustomObservable.rst", "modules/generated/squlearn.observables.IsingHamiltonian.rst", "modules/generated/squlearn.observables.SinglePauli.rst", "modules/generated/squlearn.observables.SingleProbability.rst", "modules/generated/squlearn.observables.SummedPaulis.rst", "modules/generated/squlearn.observables.SummedProbabilities.rst", "modules/generated/squlearn.observables.observable_base.ObservableBase.rst", "modules/generated/squlearn.observables.observable_derivatives.ObservableDerivatives.rst", "modules/generated/squlearn.optimizers.Adam.rst", "modules/generated/squlearn.optimizers.LBFGSB.rst", "modules/generated/squlearn.optimizers.SGLBO.rst", "modules/generated/squlearn.optimizers.SLSQP.rst", "modules/generated/squlearn.optimizers.SPSA.rst", "modules/generated/squlearn.optimizers.optimizer_base.OptimizerBase.rst", "modules/generated/squlearn.qnn.QNNClassifier.rst", "modules/generated/squlearn.qnn.QNNRegressor.rst", "modules/generated/squlearn.qnn.ShotsFromRSTD.rst", "modules/generated/squlearn.qnn.base_qnn.BaseQNN.rst", "modules/generated/squlearn.qnn.get_lr_decay.rst", "modules/generated/squlearn.qnn.get_variance_fac.rst", "modules/generated/squlearn.qnn.loss.LossBase.rst", "modules/generated/squlearn.qnn.loss.ODELoss.rst", "modules/generated/squlearn.qnn.loss.ParameterRegularizationLoss.rst", "modules/generated/squlearn.qnn.loss.SquaredLoss.rst", "modules/generated/squlearn.qnn.loss.VarianceLoss.rst", "modules/generated/squlearn.qnn.lowlevel_qnn.LowLevelQNN.rst", "modules/generated/squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.rst", "modules/generated/squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.rst", "modules/generated/squlearn.qnn.lowlevel_qnn_qiskit.Expec.rst", "modules/generated/squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.rst", "modules/generated/squlearn.qnn.training.train.rst", "modules/generated/squlearn.qnn.training.train_mini_batch.rst", "modules/generated/squlearn.qrc.QRCClassifier.rst", "modules/generated/squlearn.qrc.QRCRegressor.rst", "modules/generated/squlearn.qrc.base_qrc.BaseQRC.rst", "modules/generated/squlearn.util.OpTree.rst", "modules/generated/squlearn.util.executor.ExecutorEstimator.rst", "modules/generated/squlearn.util.executor.ExecutorSampler.rst", "modules/generated/squlearn.util.optree.OpTreeCircuit.rst", "modules/generated/squlearn.util.optree.OpTreeContainer.rst", "modules/generated/squlearn.util.optree.OpTreeExpectationValue.rst", "modules/generated/squlearn.util.optree.OpTreeList.rst", "modules/generated/squlearn.util.optree.OpTreeMeasuredOperator.rst", "modules/generated/squlearn.util.optree.OpTreeOperator.rst", "modules/generated/squlearn.util.optree.OpTreeSum.rst", "modules/generated/squlearn.util.optree.OpTreeValue.rst", "modules/generated/squlearn.util.pennylane.PennyLaneCircuit.rst", "user_guide/encoding_circuits.rst", "user_guide/executor.rst", "user_guide/kernel_methods.rst", "user_guide/observables.rst", "user_guide/quantum_neural_networks.rst", "user_guide/quantum_reservoir_computing.rst", "user_guide/user_guide_index.rst"], "indexentries": {"adam (class in squlearn.optimizers)": [[49, "squlearn.optimizers.Adam", false]], "add_layer() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.add_layer", false]], "append() (squlearn.util.optree.optreelist method)": [[82, "squlearn.util.optree.OpTreeList.append", false]], "append() (squlearn.util.optree.optreesum method)": [[85, "squlearn.util.optree.OpTreeSum.append", false]], "assign_parameters() (squlearn.encoding_circuit.encodingcircuitderivatives method)": [[13, "squlearn.encoding_circuit.EncodingCircuitDerivatives.assign_parameters", false]], "assign_parameters() (squlearn.kernel.matrix.fidelitykernel method)": [[33, "squlearn.kernel.matrix.FidelityKernel.assign_parameters", false]], "assign_parameters() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[35, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.assign_parameters", false]], "assign_parameters() (squlearn.kernel.matrix.projectedquantumkernel method)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.assign_parameters", false]], "assign_parameters() (squlearn.observables.observable_derivatives.observablederivatives method)": [[48, "squlearn.observables.observable_derivatives.ObservableDerivatives.assign_parameters", false]], "assign_parameters() (squlearn.util.optree static method)": [[76, "squlearn.util.OpTree.assign_parameters", false]], "automated_pruning() (in module squlearn.encoding_circuit)": [[27, "squlearn.encoding_circuit.automated_pruning", false]], "backend (squlearn.executor attribute)": [[9, "squlearn.Executor.backend", false]], "backend_chosen (squlearn.executor attribute)": [[9, "squlearn.Executor.backend_chosen", false]], "backend_list (squlearn.executor attribute)": [[9, "squlearn.Executor.backend_list", false]], "backend_name (squlearn.executor attribute)": [[9, "squlearn.Executor.backend_name", false]], "baseqnn (class in squlearn.qnn.base_qnn)": [[58, "squlearn.qnn.base_qnn.BaseQNN", false]], "baseqrc (class in squlearn.qrc.base_qrc)": [[75, "squlearn.qrc.base_qrc.BaseQRC", false]], "build_circuit() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit.build_circuit", false]], "build_circuit_instructions() (squlearn.util.pennylane.pennylanecircuit method)": [[87, "squlearn.util.pennylane.PennyLaneCircuit.build_circuit_instructions", false]], "build_observable_instructions() (squlearn.util.pennylane.pennylanecircuit method)": [[87, "squlearn.util.pennylane.PennyLaneCircuit.build_observable_instructions", false]], "build_pennylane_circuit() (squlearn.util.pennylane.pennylanecircuit method)": [[87, "squlearn.util.pennylane.PennyLaneCircuit.build_pennylane_circuit", false]], "calculate_cov_and_mean() (squlearn.kernel.ml.qgpr method)": [[37, "squlearn.kernel.ml.QGPR.calculate_cov_and_mean", false]], "ch_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.ch_entangling", false]], "chebyshevpqc (class in squlearn.encoding_circuit)": [[10, "squlearn.encoding_circuit.ChebyshevPQC", false]], "chebyshevrx (class in squlearn.encoding_circuit)": [[11, "squlearn.encoding_circuit.ChebyshevRx", false]], "chebyshevtower (class in squlearn.encoding_circuit)": [[12, "squlearn.encoding_circuit.ChebyshevTower", false]], "circuit_arguments (squlearn.util.pennylane.pennylanecircuit attribute)": [[87, "squlearn.util.pennylane.PennyLaneCircuit.circuit_arguments", false]], "circuit_parameter_dimensions (squlearn.util.pennylane.pennylanecircuit attribute)": [[87, "squlearn.util.pennylane.PennyLaneCircuit.circuit_parameter_dimensions", false]], "circuit_parameter_names (squlearn.util.pennylane.pennylanecircuit attribute)": [[87, "squlearn.util.pennylane.PennyLaneCircuit.circuit_parameter_names", false]], "clear_estimator_cache() (squlearn.executor method)": [[9, "squlearn.Executor.clear_estimator_cache", false]], "clear_sampler_cache() (squlearn.executor method)": [[9, "squlearn.Executor.clear_sampler_cache", false]], "close_session() (squlearn.executor method)": [[9, "squlearn.Executor.close_session", false]], "compute() (squlearn.kernel.loss.kernel_loss_base.kernellossbase method)": [[30, "squlearn.kernel.loss.kernel_loss_base.KernelLossBase.compute", false]], "compute() (squlearn.kernel.loss.negative_log_likelihood.nll method)": [[31, "squlearn.kernel.loss.negative_log_likelihood.NLL.compute", false]], "compute() (squlearn.kernel.loss.target_alignment.targetalignment method)": [[32, "squlearn.kernel.loss.target_alignment.TargetAlignment.compute", false]], "convolution() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit.convolution", false]], "copy() (squlearn.util.optree.optreecircuit method)": [[79, "squlearn.util.optree.OpTreeCircuit.copy", false]], "copy() (squlearn.util.optree.optreecontainer method)": [[80, "squlearn.util.optree.OpTreeContainer.copy", false]], "copy() (squlearn.util.optree.optreeexpectationvalue method)": [[81, "squlearn.util.optree.OpTreeExpectationValue.copy", false]], "copy() (squlearn.util.optree.optreelist method)": [[82, "squlearn.util.optree.OpTreeList.copy", false]], "copy() (squlearn.util.optree.optreemeasuredoperator method)": [[83, "squlearn.util.optree.OpTreeMeasuredOperator.copy", false]], "copy() (squlearn.util.optree.optreeoperator method)": [[84, "squlearn.util.optree.OpTreeOperator.copy", false]], "copy() (squlearn.util.optree.optreesum method)": [[85, "squlearn.util.optree.OpTreeSum.copy", false]], "copy() (squlearn.util.optree.optreevalue method)": [[86, "squlearn.util.optree.OpTreeValue.copy", false]], "cp_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.cp_entangling", false]], "create_session() (squlearn.executor method)": [[9, "squlearn.Executor.create_session", false]], "crx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.crx_entangling", false]], "cry_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.cry_entangling", false]], "crz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.crz_entangling", false]], "cu_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.cu_entangling", false]], "customobservable (class in squlearn.observables)": [[41, "squlearn.observables.CustomObservable", false]], "cx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.cx_entangling", false]], "cy_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.cy_entangling", false]], "cz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.cz_entangling", false]], "decision_function() (squlearn.kernel.ml.qsvc method)": [[39, "squlearn.kernel.ml.QSVC.decision_function", false]], "default_circuit() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit.default_circuit", false]], "derivative (squlearn.util.optree attribute)": [[76, "squlearn.util.OpTree.derivative", false]], "differentiate() (squlearn.util.optree.optreederivative static method)": [[76, "squlearn.util.OpTree.OpTreeDerivative.differentiate", false]], "differentiate_v2() (squlearn.util.optree.optreederivative static method)": [[76, "squlearn.util.OpTree.OpTreeDerivative.differentiate_v2", false]], "draw() (squlearn.encoding_circuit.chebyshevpqc method)": [[10, "squlearn.encoding_circuit.ChebyshevPQC.draw", false]], "draw() (squlearn.encoding_circuit.chebyshevrx method)": [[11, "squlearn.encoding_circuit.ChebyshevRx.draw", false]], "draw() (squlearn.encoding_circuit.chebyshevtower method)": [[12, "squlearn.encoding_circuit.ChebyshevTower.draw", false]], "draw() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[28, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.draw", false]], "draw() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[14, "squlearn.encoding_circuit.HighDimEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[15, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.kyriienkoencodingcircuit method)": [[16, "squlearn.encoding_circuit.KyriienkoEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[18, "squlearn.encoding_circuit.MultiControlEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.paramzfeaturemap method)": [[19, "squlearn.encoding_circuit.ParamZFeatureMap.draw", false]], "draw() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[20, "squlearn.encoding_circuit.PrunedEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[22, "squlearn.encoding_circuit.QiskitEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.randomencodingcircuit method)": [[23, "squlearn.encoding_circuit.RandomEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.randomlayeredencodingcircuit method)": [[24, "squlearn.encoding_circuit.RandomLayeredEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[25, "squlearn.encoding_circuit.TranspiledEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[26, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.draw", false]], "draw() (squlearn.util.pennylane.pennylanecircuit method)": [[87, "squlearn.util.pennylane.PennyLaneCircuit.draw", false]], "encoding_circuit (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.encoding_circuit", false]], "encodingcircuitbase (class in squlearn.encoding_circuit.encoding_circuit_base)": [[28, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase", false]], "encodingcircuitderivatives (class in squlearn.encoding_circuit)": [[13, "squlearn.encoding_circuit.EncodingCircuitDerivatives", false]], "estimator (squlearn.executor attribute)": [[9, "squlearn.Executor.estimator", false]], "estimator_options (squlearn.executor attribute)": [[9, "squlearn.Executor.estimator_options", false]], "estimator_run_v1() (squlearn.executor method)": [[9, "squlearn.Executor.estimator_run_v1", false]], "estimator_run_v2() (squlearn.executor method)": [[9, "squlearn.Executor.estimator_run_v2", false]], "evaluate (squlearn.util.optree attribute)": [[76, "squlearn.util.OpTree.evaluate", false]], "evaluate() (squlearn.kernel.matrix.fidelitykernel method)": [[33, "squlearn.kernel.matrix.FidelityKernel.evaluate", false]], "evaluate() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[35, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate", false]], "evaluate() (squlearn.kernel.matrix.projectedquantumkernel method)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate", false]], "evaluate() (squlearn.qnn.lowlevel_qnn.lowlevelqnn method)": [[66, "squlearn.qnn.lowlevel_qnn.LowLevelQNN.evaluate", false]], "evaluate() (squlearn.qnn.lowlevel_qnn_base.lowlevelqnnbase method)": [[67, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.evaluate", false]], "evaluate() (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane method)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.evaluate", false]], "evaluate() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate", false]], "evaluate_derivatives() (squlearn.kernel.matrix.projectedquantumkernel method)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_derivatives", false]], "evaluate_dfdop() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdop", false]], "evaluate_dfdopdx() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdopdx", false]], "evaluate_dfdp() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdp", false]], "evaluate_dfdpdx() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdpdx", false]], "evaluate_dfdx() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdx", false]], "evaluate_dfdxdx() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdxdx", false]], "evaluate_diff_tuple() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_diff_tuple", false]], "evaluate_f() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_f", false]], "evaluate_from_string() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_from_string", false]], "evaluate_laplace() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_laplace", false]], "evaluate_laplace_dop() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_laplace_dop", false]], "evaluate_laplace_dp() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_laplace_dp", false]], "evaluate_pairwise() (squlearn.kernel.matrix.fidelitykernel method)": [[33, "squlearn.kernel.matrix.FidelityKernel.evaluate_pairwise", false]], "evaluate_pairwise() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[35, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate_pairwise", false]], "evaluate_pairwise() (squlearn.kernel.matrix.projectedquantumkernel method)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_pairwise", false]], "evaluate_probabilities() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_probabilities", false]], "evaluate_qnn() (squlearn.kernel.matrix.projectedquantumkernel method)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_qnn", false]], "evaluate_tree_with_estimator() (squlearn.util.optree.optreeevaluate static method)": [[76, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_tree_with_estimator", false]], "evaluate_tree_with_sampler() (squlearn.util.optree.optreeevaluate static method)": [[76, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_tree_with_sampler", false]], "evaluate_var() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_var", false]], "evaluate_variance() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_variance", false]], "evaluate_with_estimator() (squlearn.util.optree.optreeevaluate static method)": [[76, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_with_estimator", false]], "evaluate_with_parameters() (squlearn.kernel.matrix.fidelitykernel method)": [[33, "squlearn.kernel.matrix.FidelityKernel.evaluate_with_parameters", false]], "evaluate_with_parameters() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[35, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate_with_parameters", false]], "evaluate_with_parameters() (squlearn.kernel.matrix.projectedquantumkernel method)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_with_parameters", false]], "evaluate_with_sampler() (squlearn.util.optree.optreeevaluate static method)": [[76, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_with_sampler", false]], "execution (squlearn.executor attribute)": [[9, "squlearn.Executor.execution", false]], "executor (class in squlearn)": [[9, "squlearn.Executor", false]], "executorestimator (class in squlearn.util.executor)": [[77, "squlearn.util.executor.ExecutorEstimator", false]], "executorsampler (class in squlearn.util.executor)": [[78, "squlearn.util.executor.ExecutorSampler", false]], "expec (class in squlearn.qnn.lowlevel_qnn_qiskit)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.Expec", false]], "features (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.features", false]], "features (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.features", false]], "fidelitykernel (class in squlearn.kernel.matrix)": [[33, "squlearn.kernel.matrix.FidelityKernel", false]], "fit() (squlearn.kernel.ml.qgpc method)": [[36, "squlearn.kernel.ml.QGPC.fit", false]], "fit() (squlearn.kernel.ml.qgpr method)": [[37, "squlearn.kernel.ml.QGPR.fit", false]], "fit() (squlearn.kernel.ml.qkrr method)": [[38, "squlearn.kernel.ml.QKRR.fit", false]], "fit() (squlearn.kernel.ml.qsvc method)": [[39, "squlearn.kernel.ml.QSVC.fit", false]], "fit() (squlearn.kernel.ml.qsvr method)": [[40, "squlearn.kernel.ml.QSVR.fit", false]], "fit() (squlearn.qnn.base_qnn.baseqnn method)": [[58, "squlearn.qnn.base_qnn.BaseQNN.fit", false]], "fit() (squlearn.qnn.qnnclassifier method)": [[55, "squlearn.qnn.QNNClassifier.fit", false]], "fit() (squlearn.qnn.qnnregressor method)": [[56, "squlearn.qnn.QNNRegressor.fit", false]], "fit() (squlearn.qrc.base_qrc.baseqrc method)": [[75, "squlearn.qrc.base_qrc.BaseQRC.fit", false]], "fit() (squlearn.qrc.qrcclassifier method)": [[73, "squlearn.qrc.QRCClassifier.fit", false]], "fit() (squlearn.qrc.qrcregressor method)": [[74, "squlearn.qrc.QRCRegressor.fit", false]], "from_parameter() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_parameter", false]], "from_parameter_vector() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_parameter_vector", false]], "from_string() (squlearn.encoding_circuit.layeredencodingcircuit class method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.from_string", false]], "from_string() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_string", false]], "from_tuple() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_tuple", false]], "from_variable() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_variable", false]], "full_sum (squlearn.observables.summedpaulis attribute)": [[45, "squlearn.observables.SummedPaulis.full_sum", false]], "full_sum (squlearn.observables.summedprobabilities attribute)": [[46, "squlearn.observables.SummedProbabilities.full_sum", false]], "fully_connected() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit.fully_connected", false]], "gen_expectation_tree() (squlearn.util.optree static method)": [[76, "squlearn.util.OpTree.gen_expectation_tree", false]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevpqc method)": [[10, "squlearn.encoding_circuit.ChebyshevPQC.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevrx method)": [[11, "squlearn.encoding_circuit.ChebyshevRx.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevtower method)": [[12, "squlearn.encoding_circuit.ChebyshevTower.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[28, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[14, "squlearn.encoding_circuit.HighDimEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[15, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.kyriienkoencodingcircuit method)": [[16, "squlearn.encoding_circuit.KyriienkoEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[18, "squlearn.encoding_circuit.MultiControlEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.paramzfeaturemap method)": [[19, "squlearn.encoding_circuit.ParamZFeatureMap.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[20, "squlearn.encoding_circuit.PrunedEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[22, "squlearn.encoding_circuit.QiskitEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.randomencodingcircuit method)": [[23, "squlearn.encoding_circuit.RandomEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.randomlayeredencodingcircuit method)": [[24, "squlearn.encoding_circuit.RandomLayeredEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[25, "squlearn.encoding_circuit.TranspiledEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[26, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.customobservable method)": [[41, "squlearn.observables.CustomObservable.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.isinghamiltonian method)": [[42, "squlearn.observables.IsingHamiltonian.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.observable_base.observablebase method)": [[47, "squlearn.observables.observable_base.ObservableBase.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.singlepauli method)": [[43, "squlearn.observables.SinglePauli.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.singleprobability method)": [[44, "squlearn.observables.SingleProbability.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.summedpaulis method)": [[45, "squlearn.observables.SummedPaulis.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.summedprobabilities method)": [[46, "squlearn.observables.SummedProbabilities.generate_initial_parameters", false]], "get_cheb_indices() (squlearn.encoding_circuit.chebyshevpqc method)": [[10, "squlearn.encoding_circuit.ChebyshevPQC.get_cheb_indices", false]], "get_cheb_indices() (squlearn.encoding_circuit.chebyshevrx method)": [[11, "squlearn.encoding_circuit.ChebyshevRx.get_cheb_indices", false]], "get_circuit() (squlearn.encoding_circuit.chebyshevpqc method)": [[10, "squlearn.encoding_circuit.ChebyshevPQC.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.chebyshevrx method)": [[11, "squlearn.encoding_circuit.ChebyshevRx.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.chebyshevtower method)": [[12, "squlearn.encoding_circuit.ChebyshevTower.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[28, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[14, "squlearn.encoding_circuit.HighDimEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[15, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.kyriienkoencodingcircuit method)": [[16, "squlearn.encoding_circuit.KyriienkoEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[18, "squlearn.encoding_circuit.MultiControlEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.paramzfeaturemap method)": [[19, "squlearn.encoding_circuit.ParamZFeatureMap.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[20, "squlearn.encoding_circuit.PrunedEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[22, "squlearn.encoding_circuit.QiskitEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.randomencodingcircuit method)": [[23, "squlearn.encoding_circuit.RandomEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.randomlayeredencodingcircuit method)": [[24, "squlearn.encoding_circuit.RandomLayeredEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[25, "squlearn.encoding_circuit.TranspiledEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[26, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.get_circuit", false]], "get_derivative() (squlearn.encoding_circuit.encodingcircuitderivatives method)": [[13, "squlearn.encoding_circuit.EncodingCircuitDerivatives.get_derivative", false]], "get_derivative() (squlearn.observables.observable_derivatives.observablederivatives method)": [[48, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_derivative", false]], "get_estimator() (squlearn.executor method)": [[9, "squlearn.Executor.get_estimator", false]], "get_first_leaf() (squlearn.util.optree static method)": [[76, "squlearn.util.OpTree.get_first_leaf", false]], "get_lr_decay (class in squlearn.qnn)": [[59, "squlearn.qnn.get_lr_decay", false]], "get_metadata_routing() (squlearn.kernel.ml.qgpc method)": [[36, "squlearn.kernel.ml.QGPC.get_metadata_routing", false]], "get_metadata_routing() (squlearn.kernel.ml.qgpr method)": [[37, "squlearn.kernel.ml.QGPR.get_metadata_routing", false]], "get_metadata_routing() (squlearn.kernel.ml.qkrr method)": [[38, "squlearn.kernel.ml.QKRR.get_metadata_routing", false]], "get_metadata_routing() (squlearn.kernel.ml.qsvc method)": [[39, "squlearn.kernel.ml.QSVC.get_metadata_routing", false]], "get_metadata_routing() (squlearn.kernel.ml.qsvr method)": [[40, "squlearn.kernel.ml.QSVR.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qnn.base_qnn.baseqnn method)": [[58, "squlearn.qnn.base_qnn.BaseQNN.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qnn.qnnclassifier method)": [[55, "squlearn.qnn.QNNClassifier.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qnn.qnnregressor method)": [[56, "squlearn.qnn.QNNRegressor.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qrc.base_qrc.baseqrc method)": [[75, "squlearn.qrc.base_qrc.BaseQRC.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qrc.qrcclassifier method)": [[73, "squlearn.qrc.QRCClassifier.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qrc.qrcregressor method)": [[74, "squlearn.qrc.QRCRegressor.get_metadata_routing", false]], "get_num_nested_lists() (squlearn.util.optree static method)": [[76, "squlearn.util.OpTree.get_num_nested_lists", false]], "get_number_of_leafs() (squlearn.util.optree static method)": [[76, "squlearn.util.OpTree.get_number_of_leafs", false]], "get_operator() (squlearn.observables.customobservable method)": [[41, "squlearn.observables.CustomObservable.get_operator", false]], "get_operator() (squlearn.observables.isinghamiltonian method)": [[42, "squlearn.observables.IsingHamiltonian.get_operator", false]], "get_operator() (squlearn.observables.observable_base.observablebase method)": [[47, "squlearn.observables.observable_base.ObservableBase.get_operator", false]], "get_operator() (squlearn.observables.observable_derivatives.observablederivatives method)": [[48, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_operator", false]], "get_operator() (squlearn.observables.singlepauli method)": [[43, "squlearn.observables.SinglePauli.get_operator", false]], "get_operator() (squlearn.observables.singleprobability method)": [[44, "squlearn.observables.SingleProbability.get_operator", false]], "get_operator() (squlearn.observables.summedpaulis method)": [[45, "squlearn.observables.SummedPaulis.get_operator", false]], "get_operator() (squlearn.observables.summedprobabilities method)": [[46, "squlearn.observables.SummedProbabilities.get_operator", false]], "get_operator_squared() (squlearn.observables.observable_derivatives.observablederivatives method)": [[48, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_operator_squared", false]], "get_optree_from_expec() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.get_optree_from_expec", false]], "get_optree_from_string() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.get_optree_from_string", false]], "get_params() (squlearn.encoding_circuit.chebyshevpqc method)": [[10, "squlearn.encoding_circuit.ChebyshevPQC.get_params", false]], "get_params() (squlearn.encoding_circuit.chebyshevrx method)": [[11, "squlearn.encoding_circuit.ChebyshevRx.get_params", false]], "get_params() (squlearn.encoding_circuit.chebyshevtower method)": [[12, "squlearn.encoding_circuit.ChebyshevTower.get_params", false]], "get_params() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[28, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.get_params", false]], "get_params() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[14, "squlearn.encoding_circuit.HighDimEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[15, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.kyriienkoencodingcircuit method)": [[16, "squlearn.encoding_circuit.KyriienkoEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[18, "squlearn.encoding_circuit.MultiControlEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.paramzfeaturemap method)": [[19, "squlearn.encoding_circuit.ParamZFeatureMap.get_params", false]], "get_params() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[20, "squlearn.encoding_circuit.PrunedEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[22, "squlearn.encoding_circuit.QiskitEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.randomencodingcircuit method)": [[23, "squlearn.encoding_circuit.RandomEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.randomlayeredencodingcircuit method)": [[24, "squlearn.encoding_circuit.RandomLayeredEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[25, "squlearn.encoding_circuit.TranspiledEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[26, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.get_params", false]], "get_params() (squlearn.kernel.matrix.fidelitykernel method)": [[33, "squlearn.kernel.matrix.FidelityKernel.get_params", false]], "get_params() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[35, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.get_params", false]], "get_params() (squlearn.kernel.matrix.projectedquantumkernel method)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.get_params", false]], "get_params() (squlearn.kernel.ml.qgpc method)": [[36, "squlearn.kernel.ml.QGPC.get_params", false]], "get_params() (squlearn.kernel.ml.qgpr method)": [[37, "squlearn.kernel.ml.QGPR.get_params", false]], "get_params() (squlearn.kernel.ml.qkrr method)": [[38, "squlearn.kernel.ml.QKRR.get_params", false]], "get_params() (squlearn.kernel.ml.qsvc method)": [[39, "squlearn.kernel.ml.QSVC.get_params", false]], "get_params() (squlearn.kernel.ml.qsvr method)": [[40, "squlearn.kernel.ml.QSVR.get_params", false]], "get_params() (squlearn.observables.customobservable method)": [[41, "squlearn.observables.CustomObservable.get_params", false]], "get_params() (squlearn.observables.isinghamiltonian method)": [[42, "squlearn.observables.IsingHamiltonian.get_params", false]], "get_params() (squlearn.observables.observable_base.observablebase method)": [[47, "squlearn.observables.observable_base.ObservableBase.get_params", false]], "get_params() (squlearn.observables.singlepauli method)": [[43, "squlearn.observables.SinglePauli.get_params", false]], "get_params() (squlearn.observables.singleprobability method)": [[44, "squlearn.observables.SingleProbability.get_params", false]], "get_params() (squlearn.observables.summedpaulis method)": [[45, "squlearn.observables.SummedPaulis.get_params", false]], "get_params() (squlearn.observables.summedprobabilities method)": [[46, "squlearn.observables.SummedProbabilities.get_params", false]], "get_params() (squlearn.qnn.base_qnn.baseqnn method)": [[58, "squlearn.qnn.base_qnn.BaseQNN.get_params", false]], "get_params() (squlearn.qnn.lowlevel_qnn.lowlevelqnn method)": [[66, "squlearn.qnn.lowlevel_qnn.LowLevelQNN.get_params", false]], "get_params() (squlearn.qnn.lowlevel_qnn_base.lowlevelqnnbase method)": [[67, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.get_params", false]], "get_params() (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane method)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.get_params", false]], "get_params() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.get_params", false]], "get_params() (squlearn.qnn.qnnclassifier method)": [[55, "squlearn.qnn.QNNClassifier.get_params", false]], "get_params() (squlearn.qnn.qnnregressor method)": [[56, "squlearn.qnn.QNNRegressor.get_params", false]], "get_params() (squlearn.qrc.base_qrc.baseqrc method)": [[75, "squlearn.qrc.base_qrc.BaseQRC.get_params", false]], "get_params() (squlearn.qrc.qrcclassifier method)": [[73, "squlearn.qrc.QRCClassifier.get_params", false]], "get_params() (squlearn.qrc.qrcregressor method)": [[74, "squlearn.qrc.QRCRegressor.get_params", false]], "get_pauli() (squlearn.observables.customobservable method)": [[41, "squlearn.observables.CustomObservable.get_pauli", false]], "get_pauli() (squlearn.observables.isinghamiltonian method)": [[42, "squlearn.observables.IsingHamiltonian.get_pauli", false]], "get_pauli() (squlearn.observables.observable_base.observablebase method)": [[47, "squlearn.observables.observable_base.ObservableBase.get_pauli", false]], "get_pauli() (squlearn.observables.singlepauli method)": [[43, "squlearn.observables.SinglePauli.get_pauli", false]], "get_pauli() (squlearn.observables.singleprobability method)": [[44, "squlearn.observables.SingleProbability.get_pauli", false]], "get_pauli() (squlearn.observables.summedpaulis method)": [[45, "squlearn.observables.SummedPaulis.get_pauli", false]], "get_pauli() (squlearn.observables.summedprobabilities method)": [[46, "squlearn.observables.SummedProbabilities.get_pauli", false]], "get_pauli_mapped() (squlearn.observables.customobservable method)": [[41, "squlearn.observables.CustomObservable.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.isinghamiltonian method)": [[42, "squlearn.observables.IsingHamiltonian.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.observable_base.observablebase method)": [[47, "squlearn.observables.observable_base.ObservableBase.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.singlepauli method)": [[43, "squlearn.observables.SinglePauli.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.singleprobability method)": [[44, "squlearn.observables.SingleProbability.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.summedpaulis method)": [[45, "squlearn.observables.SummedPaulis.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.summedprobabilities method)": [[46, "squlearn.observables.SummedProbabilities.get_pauli_mapped", false]], "get_pennylane_circuit() (squlearn.util.pennylane.pennylanecircuit method)": [[87, "squlearn.util.pennylane.PennyLaneCircuit.get_pennylane_circuit", false]], "get_sampler() (squlearn.executor method)": [[9, "squlearn.Executor.get_sampler", false]], "get_shots() (squlearn.executor method)": [[9, "squlearn.Executor.get_shots", false]], "get_shots() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.get_shots", false]], "get_tree_depth() (squlearn.util.optree static method)": [[76, "squlearn.util.OpTree.get_tree_depth", false]], "get_variance_fac (class in squlearn.qnn)": [[60, "squlearn.qnn.get_variance_fac", false]], "gradient() (squlearn.qnn.loss.lossbase method)": [[61, "squlearn.qnn.loss.LossBase.gradient", false]], "gradient() (squlearn.qnn.loss.odeloss method)": [[62, "squlearn.qnn.loss.ODELoss.gradient", false]], "gradient() (squlearn.qnn.loss.parameterregularizationloss method)": [[63, "squlearn.qnn.loss.ParameterRegularizationLoss.gradient", false]], "gradient() (squlearn.qnn.loss.squaredloss method)": [[64, "squlearn.qnn.loss.SquaredLoss.gradient", false]], "gradient() (squlearn.qnn.loss.varianceloss method)": [[65, "squlearn.qnn.loss.VarianceLoss.gradient", false]], "gradient() (squlearn.qnn.lowlevel_qnn.lowlevelqnn method)": [[66, "squlearn.qnn.lowlevel_qnn.LowLevelQNN.gradient", false]], "gradient() (squlearn.qnn.lowlevel_qnn_base.lowlevelqnnbase method)": [[67, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.gradient", false]], "gradient() (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane method)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.gradient", false]], "gradient() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.gradient", false]], "h() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.H", false]], "hash (squlearn.util.pennylane.pennylanecircuit attribute)": [[87, "squlearn.util.pennylane.PennyLaneCircuit.hash", false]], "hash_circuit() (squlearn.util.optree static method)": [[76, "squlearn.util.OpTree.hash_circuit", false]], "hash_operator() (squlearn.util.optree static method)": [[76, "squlearn.util.OpTree.hash_operator", false]], "highdimencodingcircuit (class in squlearn.encoding_circuit)": [[14, "squlearn.encoding_circuit.HighDimEncodingCircuit", false]], "hubregtsenencodingcircuit (class in squlearn.encoding_circuit)": [[15, "squlearn.encoding_circuit.HubregtsenEncodingCircuit", false]], "i (squlearn.observables.isinghamiltonian attribute)": [[42, "squlearn.observables.IsingHamiltonian.I", false]], "i() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.I", false]], "ibmquantum (squlearn.executor attribute)": [[9, "squlearn.Executor.IBMQuantum", false]], "include_identity (squlearn.observables.summedpaulis attribute)": [[45, "squlearn.observables.SummedPaulis.include_identity", false]], "include_identity (squlearn.observables.summedprobabilities attribute)": [[46, "squlearn.observables.SummedProbabilities.include_identity", false]], "is_statevector (squlearn.executor attribute)": [[9, "squlearn.Executor.is_statevector", false]], "isinghamiltonian (class in squlearn.observables)": [[42, "squlearn.observables.IsingHamiltonian", false]], "kernellossbase (class in squlearn.kernel.loss.kernel_loss_base)": [[30, "squlearn.kernel.loss.kernel_loss_base.KernelLossBase", false]], "kernelmatrixbase (class in squlearn.kernel.matrix.kernel_matrix_base)": [[35, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase", false]], "kyriienkoencodingcircuit (class in squlearn.encoding_circuit)": [[16, "squlearn.encoding_circuit.KyriienkoEncodingCircuit", false]], "layeredencodingcircuit (class in squlearn.encoding_circuit)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit", false]], "lbfgsb (class in squlearn.optimizers)": [[50, "squlearn.optimizers.LBFGSB", false]], "log_marginal_likelihood() (squlearn.kernel.ml.qgpc method)": [[36, "squlearn.kernel.ml.QGPC.log_marginal_likelihood", false]], "lossbase (class in squlearn.qnn.loss)": [[61, "squlearn.qnn.loss.LossBase", false]], "lowlevelqnn (class in squlearn.qnn.lowlevel_qnn)": [[66, "squlearn.qnn.lowlevel_qnn.LowLevelQNN", false]], "lowlevelqnnbase (class in squlearn.qnn.lowlevel_qnn_base)": [[67, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase", false]], "lowlevelqnnpennylane (class in squlearn.qnn.lowlevel_qnn_pennylane)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane", false]], "lowlevelqnnqiskit (class in squlearn.qnn.lowlevel_qnn_qiskit)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit", false]], "measure_circuit() (squlearn.util.optree.optreemeasuredoperator method)": [[83, "squlearn.util.optree.OpTreeMeasuredOperator.measure_circuit", false]], "measurement (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.measurement", false]], "minimize() (squlearn.optimizers.adam method)": [[49, "squlearn.optimizers.Adam.minimize", false]], "minimize() (squlearn.optimizers.lbfgsb method)": [[50, "squlearn.optimizers.LBFGSB.minimize", false]], "minimize() (squlearn.optimizers.optimizer_base.optimizerbase method)": [[54, "squlearn.optimizers.optimizer_base.OptimizerBase.minimize", false]], "minimize() (squlearn.optimizers.sglbo method)": [[51, "squlearn.optimizers.SGLBO.minimize", false]], "minimize() (squlearn.optimizers.slsqp method)": [[52, "squlearn.optimizers.SLSQP.minimize", false]], "minimize() (squlearn.optimizers.spsa method)": [[53, "squlearn.optimizers.SPSA.minimize", false]], "module": [[8, "module-squlearn.encoding_circuit", false], [8, "module-squlearn.kernel.loss", false], [8, "module-squlearn.kernel.matrix", false], [8, "module-squlearn.observables", false], [8, "module-squlearn.optimizers", false], [8, "module-squlearn.qnn", false]], "multicontrolencodingcircuit (class in squlearn.encoding_circuit)": [[18, "squlearn.encoding_circuit.MultiControlEncodingCircuit", false]], "multiple_output (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.multiple_output", false]], "multiple_output (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.multiple_output", false]], "name_hyper_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.name_hyper_parameters", false]], "nll (class in squlearn.kernel.loss.negative_log_likelihood)": [[31, "squlearn.kernel.loss.negative_log_likelihood.NLL", false]], "num_features (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_features", false]], "num_features (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_features", false]], "num_features (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_features", false]], "num_hyper_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_hyper_parameters", false]], "num_operator (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_operator", false]], "num_operator (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_operator", false]], "num_operators (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[48, "squlearn.observables.observable_derivatives.ObservableDerivatives.num_operators", false]], "num_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_parameters", false]], "num_parameters (squlearn.observables.customobservable attribute)": [[41, "squlearn.observables.CustomObservable.num_parameters", false]], "num_parameters (squlearn.observables.isinghamiltonian attribute)": [[42, "squlearn.observables.IsingHamiltonian.num_parameters", false]], "num_parameters (squlearn.observables.observable_base.observablebase attribute)": [[47, "squlearn.observables.observable_base.ObservableBase.num_parameters", false]], "num_parameters (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[48, "squlearn.observables.observable_derivatives.ObservableDerivatives.num_parameters", false]], "num_parameters (squlearn.observables.singlepauli attribute)": [[43, "squlearn.observables.SinglePauli.num_parameters", false]], "num_parameters (squlearn.observables.singleprobability attribute)": [[44, "squlearn.observables.SingleProbability.num_parameters", false]], "num_parameters (squlearn.observables.summedpaulis attribute)": [[45, "squlearn.observables.SummedPaulis.num_parameters", false]], "num_parameters (squlearn.observables.summedprobabilities attribute)": [[46, "squlearn.observables.SummedProbabilities.num_parameters", false]], "num_parameters (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_parameters", false]], "num_parameters (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_parameters", false]], "num_parameters_observable (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_parameters_observable", false]], "num_parameters_observable (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_parameters_observable", false]], "num_qubits (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_qubits", false]], "num_qubits (squlearn.observables.customobservable attribute)": [[41, "squlearn.observables.CustomObservable.num_qubits", false]], "num_qubits (squlearn.observables.isinghamiltonian attribute)": [[42, "squlearn.observables.IsingHamiltonian.num_qubits", false]], "num_qubits (squlearn.observables.observable_base.observablebase attribute)": [[47, "squlearn.observables.observable_base.ObservableBase.num_qubits", false]], "num_qubits (squlearn.observables.singlepauli attribute)": [[43, "squlearn.observables.SinglePauli.num_qubits", false]], "num_qubits (squlearn.observables.singleprobability attribute)": [[44, "squlearn.observables.SingleProbability.num_qubits", false]], "num_qubits (squlearn.observables.summedpaulis attribute)": [[45, "squlearn.observables.SummedPaulis.num_qubits", false]], "num_qubits (squlearn.observables.summedprobabilities attribute)": [[46, "squlearn.observables.SummedProbabilities.num_qubits", false]], "num_qubits (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_qubits", false]], "num_qubits (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_qubits", false]], "observable_parameter_dimension (squlearn.util.pennylane.pennylanecircuit attribute)": [[87, "squlearn.util.pennylane.PennyLaneCircuit.observable_parameter_dimension", false]], "observable_parameter_names (squlearn.util.pennylane.pennylanecircuit attribute)": [[87, "squlearn.util.pennylane.PennyLaneCircuit.observable_parameter_names", false]], "observablebase (class in squlearn.observables.observable_base)": [[47, "squlearn.observables.observable_base.ObservableBase", false]], "observablederivatives (class in squlearn.observables.observable_derivatives)": [[48, "squlearn.observables.observable_derivatives.ObservableDerivatives", false]], "odeloss (class in squlearn.qnn.loss)": [[62, "squlearn.qnn.loss.ODELoss", false]], "one_state (squlearn.observables.singleprobability attribute)": [[44, "squlearn.observables.SingleProbability.one_state", false]], "one_state (squlearn.observables.summedprobabilities attribute)": [[46, "squlearn.observables.SummedProbabilities.one_state", false]], "op_str (squlearn.observables.singlepauli attribute)": [[43, "squlearn.observables.SinglePauli.op_str", false]], "op_str (squlearn.observables.summedpaulis attribute)": [[45, "squlearn.observables.SummedPaulis.op_str", false]], "operator_string (squlearn.observables.customobservable attribute)": [[41, "squlearn.observables.CustomObservable.operator_string", false]], "optimizerbase (class in squlearn.optimizers.optimizer_base)": [[54, "squlearn.optimizers.optimizer_base.OptimizerBase", false]], "optree (class in squlearn.util)": [[76, "squlearn.util.OpTree", false]], "optree.optreederivative (class in squlearn.util)": [[76, "squlearn.util.OpTree.OpTreeDerivative", false]], "optree.optreeevaluate (class in squlearn.util)": [[76, "squlearn.util.OpTree.OpTreeEvaluate", false]], "optreecircuit (class in squlearn.util.optree)": [[79, "squlearn.util.optree.OpTreeCircuit", false]], "optreecontainer (class in squlearn.util.optree)": [[80, "squlearn.util.optree.OpTreeContainer", false]], "optreeexpectationvalue (class in squlearn.util.optree)": [[81, "squlearn.util.optree.OpTreeExpectationValue", false]], "optreelist (class in squlearn.util.optree)": [[82, "squlearn.util.optree.OpTreeList", false]], "optreemeasuredoperator (class in squlearn.util.optree)": [[83, "squlearn.util.optree.OpTreeMeasuredOperator", false]], "optreeoperator (class in squlearn.util.optree)": [[84, "squlearn.util.optree.OpTreeOperator", false]], "optreesum (class in squlearn.util.optree)": [[85, "squlearn.util.optree.OpTreeSum", false]], "optreevalue (class in squlearn.util.optree)": [[86, "squlearn.util.optree.OpTreeValue", false]], "outer_kernel (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.outer_kernel", false]], "p() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.P", false]], "parameter_vector (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[48, "squlearn.observables.observable_derivatives.ObservableDerivatives.parameter_vector", false]], "parameterized (squlearn.observables.customobservable attribute)": [[41, "squlearn.observables.CustomObservable.parameterized", false]], "parameterized (squlearn.observables.singlepauli attribute)": [[43, "squlearn.observables.SinglePauli.parameterized", false]], "parameterized (squlearn.observables.singleprobability attribute)": [[44, "squlearn.observables.SingleProbability.parameterized", false]], "parameterregularizationloss (class in squlearn.qnn.loss)": [[63, "squlearn.qnn.loss.ParameterRegularizationLoss", false]], "parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.parameters", false]], "parameters (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.parameters", false]], "parameters (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.parameters", false]], "parameters_operator (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.parameters_operator", false]], "parameters_operator (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.parameters_operator", false]], "paramzfeaturemap (class in squlearn.encoding_circuit)": [[19, "squlearn.encoding_circuit.ParamZFeatureMap", false]], "partial_fit() (squlearn.qnn.qnnclassifier method)": [[55, "squlearn.qnn.QNNClassifier.partial_fit", false]], "partial_fit() (squlearn.qnn.qnnregressor method)": [[56, "squlearn.qnn.QNNRegressor.partial_fit", false]], "pennylane_circuit (squlearn.util.pennylane.pennylanecircuit attribute)": [[87, "squlearn.util.pennylane.PennyLaneCircuit.pennylane_circuit", false]], "pennylane_execute() (squlearn.executor method)": [[9, "squlearn.Executor.pennylane_execute", false]], "pennylane_execute_batched() (squlearn.executor method)": [[9, "squlearn.Executor.pennylane_execute_batched", false]], "pennylanecircuit (class in squlearn.util.pennylane)": [[87, "squlearn.util.pennylane.PennyLaneCircuit", false]], "pooling() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit.pooling", false]], "predict() (squlearn.kernel.ml.qgpc method)": [[36, "squlearn.kernel.ml.QGPC.predict", false]], "predict() (squlearn.kernel.ml.qgpr method)": [[37, "squlearn.kernel.ml.QGPR.predict", false]], "predict() (squlearn.kernel.ml.qkrr method)": [[38, "squlearn.kernel.ml.QKRR.predict", false]], "predict() (squlearn.kernel.ml.qsvc method)": [[39, "squlearn.kernel.ml.QSVC.predict", false]], "predict() (squlearn.kernel.ml.qsvr method)": [[40, "squlearn.kernel.ml.QSVR.predict", false]], "predict() (squlearn.qnn.qnnclassifier method)": [[55, "squlearn.qnn.QNNClassifier.predict", false]], "predict() (squlearn.qnn.qnnregressor method)": [[56, "squlearn.qnn.QNNRegressor.predict", false]], "predict() (squlearn.qrc.base_qrc.baseqrc method)": [[75, "squlearn.qrc.base_qrc.BaseQRC.predict", false]], "predict() (squlearn.qrc.qrcclassifier method)": [[73, "squlearn.qrc.QRCClassifier.predict", false]], "predict() (squlearn.qrc.qrcregressor method)": [[74, "squlearn.qrc.QRCRegressor.predict", false]], "predict_log_proba() (squlearn.kernel.ml.qsvc method)": [[39, "squlearn.kernel.ml.QSVC.predict_log_proba", false]], "predict_proba() (squlearn.kernel.ml.qgpc method)": [[36, "squlearn.kernel.ml.QGPC.predict_proba", false]], "predict_proba() (squlearn.kernel.ml.qsvc method)": [[39, "squlearn.kernel.ml.QSVC.predict_proba", false]], "predict_proba() (squlearn.qnn.qnnclassifier method)": [[55, "squlearn.qnn.QNNClassifier.predict_proba", false]], "projectedquantumkernel (class in squlearn.kernel.matrix)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel", false]], "prunedencodingcircuit (class in squlearn.encoding_circuit)": [[20, "squlearn.encoding_circuit.PrunedEncodingCircuit", false]], "pruning_from_qfi() (in module squlearn.encoding_circuit)": [[29, "squlearn.encoding_circuit.pruning_from_QFI", false]], "qcnnencodingcircuit (class in squlearn.encoding_circuit)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit", false]], "qcnnobservable() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit.QCNNObservable", false]], "qgpc (class in squlearn.kernel.ml)": [[36, "squlearn.kernel.ml.QGPC", false]], "qgpr (class in squlearn.kernel.ml)": [[37, "squlearn.kernel.ml.QGPR", false]], "qiskit_execute() (squlearn.executor method)": [[9, "squlearn.Executor.qiskit_execute", false]], "qiskitencodingcircuit (class in squlearn.encoding_circuit)": [[22, "squlearn.encoding_circuit.QiskitEncodingCircuit", false]], "qkrr (class in squlearn.kernel.ml)": [[38, "squlearn.kernel.ml.QKRR", false]], "qnnclassifier (class in squlearn.qnn)": [[55, "squlearn.qnn.QNNClassifier", false]], "qnnregressor (class in squlearn.qnn)": [[56, "squlearn.qnn.QNNRegressor", false]], "qpu_parallelization (squlearn.executor attribute)": [[9, "squlearn.Executor.qpu_parallelization", false]], "qrcclassifier (class in squlearn.qrc)": [[73, "squlearn.qrc.QRCClassifier", false]], "qrcregressor (class in squlearn.qrc)": [[74, "squlearn.qrc.QRCRegressor", false]], "qsvc (class in squlearn.kernel.ml)": [[39, "squlearn.kernel.ml.QSVC", false]], "qsvr (class in squlearn.kernel.ml)": [[40, "squlearn.kernel.ml.QSVR", false]], "quantum_framework (squlearn.executor attribute)": [[9, "squlearn.Executor.quantum_framework", false]], "qubit (squlearn.observables.singlepauli attribute)": [[43, "squlearn.observables.SinglePauli.qubit", false]], "qubit (squlearn.observables.singleprobability attribute)": [[44, "squlearn.observables.SingleProbability.qubit", false]], "randomencodingcircuit (class in squlearn.encoding_circuit)": [[23, "squlearn.encoding_circuit.RandomEncodingCircuit", false]], "randomlayeredencodingcircuit (class in squlearn.encoding_circuit)": [[24, "squlearn.encoding_circuit.RandomLayeredEncodingCircuit", false]], "remove() (squlearn.util.optree.optreelist method)": [[82, "squlearn.util.optree.OpTreeList.remove", false]], "remove() (squlearn.util.optree.optreesum method)": [[85, "squlearn.util.optree.OpTreeSum.remove", false]], "repeat_layers() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit.repeat_layers", false]], "reset() (squlearn.optimizers.adam method)": [[49, "squlearn.optimizers.Adam.reset", false]], "reset() (squlearn.optimizers.sglbo method)": [[51, "squlearn.optimizers.SGLBO.reset", false]], "reset_shots() (squlearn.executor method)": [[9, "squlearn.Executor.reset_shots", false]], "reset_shots() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.reset_shots", false]], "reset_shots() (squlearn.qnn.shotsfromrstd method)": [[57, "squlearn.qnn.ShotsFromRSTD.reset_shots", false]], "rx() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.Rx", false]], "rxx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.rxx_entangling", false]], "ry() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.Ry", false]], "ryy_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.ryy_entangling", false]], "rz() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.Rz", false]], "rzx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.rzx_entangling", false]], "rzz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.rzz_entangling", false]], "s() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.S", false]], "s_conjugate() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.S_conjugate", false]], "sampler (squlearn.executor attribute)": [[9, "squlearn.Executor.sampler", false]], "sampler_options (squlearn.executor attribute)": [[9, "squlearn.Executor.sampler_options", false]], "sampler_run_v1() (squlearn.executor method)": [[9, "squlearn.Executor.sampler_run_v1", false]], "sampler_run_v2() (squlearn.executor method)": [[9, "squlearn.Executor.sampler_run_v2", false]], "score() (squlearn.kernel.ml.qgpc method)": [[36, "squlearn.kernel.ml.QGPC.score", false]], "score() (squlearn.kernel.ml.qgpr method)": [[37, "squlearn.kernel.ml.QGPR.score", false]], "score() (squlearn.kernel.ml.qkrr method)": [[38, "squlearn.kernel.ml.QKRR.score", false]], "score() (squlearn.kernel.ml.qsvc method)": [[39, "squlearn.kernel.ml.QSVC.score", false]], "score() (squlearn.kernel.ml.qsvr method)": [[40, "squlearn.kernel.ml.QSVR.score", false]], "score() (squlearn.qnn.qnnclassifier method)": [[55, "squlearn.qnn.QNNClassifier.score", false]], "score() (squlearn.qnn.qnnregressor method)": [[56, "squlearn.qnn.QNNRegressor.score", false]], "score() (squlearn.qrc.qrcclassifier method)": [[73, "squlearn.qrc.QRCClassifier.score", false]], "score() (squlearn.qrc.qrcregressor method)": [[74, "squlearn.qrc.QRCRegressor.score", false]], "select_backend() (squlearn.executor method)": [[9, "squlearn.Executor.select_backend", false]], "service (squlearn.executor attribute)": [[9, "squlearn.Executor.service", false]], "session (squlearn.executor attribute)": [[9, "squlearn.Executor.session", false]], "set_backend() (squlearn.executor method)": [[9, "squlearn.Executor.set_backend", false]], "set_callback() (squlearn.optimizers.adam method)": [[49, "squlearn.optimizers.Adam.set_callback", false]], "set_callback() (squlearn.optimizers.lbfgsb method)": [[50, "squlearn.optimizers.LBFGSB.set_callback", false]], "set_callback() (squlearn.optimizers.optimizer_base.optimizerbase method)": [[54, "squlearn.optimizers.optimizer_base.OptimizerBase.set_callback", false]], "set_callback() (squlearn.optimizers.sglbo method)": [[51, "squlearn.optimizers.SGLBO.set_callback", false]], "set_callback() (squlearn.optimizers.slsqp method)": [[52, "squlearn.optimizers.SLSQP.set_callback", false]], "set_callback() (squlearn.optimizers.spsa method)": [[53, "squlearn.optimizers.SPSA.set_callback", false]], "set_executor() (squlearn.qnn.shotsfromrstd method)": [[57, "squlearn.qnn.ShotsFromRSTD.set_executor", false]], "set_fit_request() (squlearn.kernel.ml.qsvc method)": [[39, "squlearn.kernel.ml.QSVC.set_fit_request", false]], "set_fit_request() (squlearn.kernel.ml.qsvr method)": [[40, "squlearn.kernel.ml.QSVR.set_fit_request", false]], "set_fit_request() (squlearn.qnn.base_qnn.baseqnn method)": [[58, "squlearn.qnn.base_qnn.BaseQNN.set_fit_request", false]], "set_fit_request() (squlearn.qnn.qnnclassifier method)": [[55, "squlearn.qnn.QNNClassifier.set_fit_request", false]], "set_fit_request() (squlearn.qnn.qnnregressor method)": [[56, "squlearn.qnn.QNNRegressor.set_fit_request", false]], "set_map() (squlearn.observables.customobservable method)": [[41, "squlearn.observables.CustomObservable.set_map", false]], "set_map() (squlearn.observables.isinghamiltonian method)": [[42, "squlearn.observables.IsingHamiltonian.set_map", false]], "set_map() (squlearn.observables.observable_base.observablebase method)": [[47, "squlearn.observables.observable_base.ObservableBase.set_map", false]], "set_map() (squlearn.observables.singlepauli method)": [[43, "squlearn.observables.SinglePauli.set_map", false]], "set_map() (squlearn.observables.singleprobability method)": [[44, "squlearn.observables.SingleProbability.set_map", false]], "set_map() (squlearn.observables.summedpaulis method)": [[45, "squlearn.observables.SummedPaulis.set_map", false]], "set_map() (squlearn.observables.summedprobabilities method)": [[46, "squlearn.observables.SummedProbabilities.set_map", false]], "set_opt_param_op() (squlearn.qnn.loss.lossbase method)": [[61, "squlearn.qnn.loss.LossBase.set_opt_param_op", false]], "set_opt_param_op() (squlearn.qnn.loss.odeloss method)": [[62, "squlearn.qnn.loss.ODELoss.set_opt_param_op", false]], "set_opt_param_op() (squlearn.qnn.loss.parameterregularizationloss method)": [[63, "squlearn.qnn.loss.ParameterRegularizationLoss.set_opt_param_op", false]], "set_opt_param_op() (squlearn.qnn.loss.squaredloss method)": [[64, "squlearn.qnn.loss.SquaredLoss.set_opt_param_op", false]], "set_opt_param_op() (squlearn.qnn.loss.varianceloss method)": [[65, "squlearn.qnn.loss.VarianceLoss.set_opt_param_op", false]], "set_options_estimator() (squlearn.executor method)": [[9, "squlearn.Executor.set_options_estimator", false]], "set_options_sampler() (squlearn.executor method)": [[9, "squlearn.Executor.set_options_sampler", false]], "set_params() (squlearn.encoding_circuit.chebyshevpqc method)": [[10, "squlearn.encoding_circuit.ChebyshevPQC.set_params", false]], "set_params() (squlearn.encoding_circuit.chebyshevrx method)": [[11, "squlearn.encoding_circuit.ChebyshevRx.set_params", false]], "set_params() (squlearn.encoding_circuit.chebyshevtower method)": [[12, "squlearn.encoding_circuit.ChebyshevTower.set_params", false]], "set_params() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[28, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.set_params", false]], "set_params() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[14, "squlearn.encoding_circuit.HighDimEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[15, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.kyriienkoencodingcircuit method)": [[16, "squlearn.encoding_circuit.KyriienkoEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[18, "squlearn.encoding_circuit.MultiControlEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.paramzfeaturemap method)": [[19, "squlearn.encoding_circuit.ParamZFeatureMap.set_params", false]], "set_params() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[20, "squlearn.encoding_circuit.PrunedEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[21, "squlearn.encoding_circuit.QCNNEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[22, "squlearn.encoding_circuit.QiskitEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.randomencodingcircuit method)": [[23, "squlearn.encoding_circuit.RandomEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.randomlayeredencodingcircuit method)": [[24, "squlearn.encoding_circuit.RandomLayeredEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[25, "squlearn.encoding_circuit.TranspiledEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[26, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.set_params", false]], "set_params() (squlearn.kernel.matrix.fidelitykernel method)": [[33, "squlearn.kernel.matrix.FidelityKernel.set_params", false]], "set_params() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[35, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.set_params", false]], "set_params() (squlearn.kernel.matrix.projectedquantumkernel method)": [[34, "squlearn.kernel.matrix.ProjectedQuantumKernel.set_params", false]], "set_params() (squlearn.kernel.ml.qgpc method)": [[36, "squlearn.kernel.ml.QGPC.set_params", false]], "set_params() (squlearn.kernel.ml.qgpr method)": [[37, "squlearn.kernel.ml.QGPR.set_params", false]], "set_params() (squlearn.kernel.ml.qkrr method)": [[38, "squlearn.kernel.ml.QKRR.set_params", false]], "set_params() (squlearn.kernel.ml.qsvc method)": [[39, "squlearn.kernel.ml.QSVC.set_params", false]], "set_params() (squlearn.kernel.ml.qsvr method)": [[40, "squlearn.kernel.ml.QSVR.set_params", false]], "set_params() (squlearn.observables.customobservable method)": [[41, "squlearn.observables.CustomObservable.set_params", false]], "set_params() (squlearn.observables.isinghamiltonian method)": [[42, "squlearn.observables.IsingHamiltonian.set_params", false]], "set_params() (squlearn.observables.observable_base.observablebase method)": [[47, "squlearn.observables.observable_base.ObservableBase.set_params", false]], "set_params() (squlearn.observables.singlepauli method)": [[43, "squlearn.observables.SinglePauli.set_params", false]], "set_params() (squlearn.observables.singleprobability method)": [[44, "squlearn.observables.SingleProbability.set_params", false]], "set_params() (squlearn.observables.summedpaulis method)": [[45, "squlearn.observables.SummedPaulis.set_params", false]], "set_params() (squlearn.observables.summedprobabilities method)": [[46, "squlearn.observables.SummedProbabilities.set_params", false]], "set_params() (squlearn.qnn.base_qnn.baseqnn method)": [[58, "squlearn.qnn.base_qnn.BaseQNN.set_params", false]], "set_params() (squlearn.qnn.lowlevel_qnn.lowlevelqnn method)": [[66, "squlearn.qnn.lowlevel_qnn.LowLevelQNN.set_params", false]], "set_params() (squlearn.qnn.lowlevel_qnn_base.lowlevelqnnbase method)": [[67, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.set_params", false]], "set_params() (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane method)": [[68, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.set_params", false]], "set_params() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.set_params", false]], "set_params() (squlearn.qnn.qnnclassifier method)": [[55, "squlearn.qnn.QNNClassifier.set_params", false]], "set_params() (squlearn.qnn.qnnregressor method)": [[56, "squlearn.qnn.QNNRegressor.set_params", false]], "set_params() (squlearn.qrc.base_qrc.baseqrc method)": [[75, "squlearn.qrc.base_qrc.BaseQRC.set_params", false]], "set_params() (squlearn.qrc.qrcclassifier method)": [[73, "squlearn.qrc.QRCClassifier.set_params", false]], "set_params() (squlearn.qrc.qrcregressor method)": [[74, "squlearn.qrc.QRCRegressor.set_params", false]], "set_partial_fit_request() (squlearn.qnn.qnnclassifier method)": [[55, "squlearn.qnn.QNNClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (squlearn.qnn.qnnregressor method)": [[56, "squlearn.qnn.QNNRegressor.set_partial_fit_request", false]], "set_predict_request() (squlearn.kernel.ml.qgpr method)": [[37, "squlearn.kernel.ml.QGPR.set_predict_request", false]], "set_primitive_options() (squlearn.executor method)": [[9, "squlearn.Executor.set_primitive_options", false]], "set_quantum_kernel() (squlearn.kernel.loss.kernel_loss_base.kernellossbase method)": [[30, "squlearn.kernel.loss.kernel_loss_base.KernelLossBase.set_quantum_kernel", false]], "set_quantum_kernel() (squlearn.kernel.loss.negative_log_likelihood.nll method)": [[31, "squlearn.kernel.loss.negative_log_likelihood.NLL.set_quantum_kernel", false]], "set_quantum_kernel() (squlearn.kernel.loss.target_alignment.targetalignment method)": [[32, "squlearn.kernel.loss.target_alignment.TargetAlignment.set_quantum_kernel", false]], "set_score_request() (squlearn.kernel.ml.qgpc method)": [[36, "squlearn.kernel.ml.QGPC.set_score_request", false]], "set_score_request() (squlearn.kernel.ml.qgpr method)": [[37, "squlearn.kernel.ml.QGPR.set_score_request", false]], "set_score_request() (squlearn.kernel.ml.qkrr method)": [[38, "squlearn.kernel.ml.QKRR.set_score_request", false]], "set_score_request() (squlearn.kernel.ml.qsvc method)": [[39, "squlearn.kernel.ml.QSVC.set_score_request", false]], "set_score_request() (squlearn.kernel.ml.qsvr method)": [[40, "squlearn.kernel.ml.QSVR.set_score_request", false]], "set_score_request() (squlearn.qnn.qnnclassifier method)": [[55, "squlearn.qnn.QNNClassifier.set_score_request", false]], "set_score_request() (squlearn.qnn.qnnregressor method)": [[56, "squlearn.qnn.QNNRegressor.set_score_request", false]], "set_score_request() (squlearn.qrc.qrcclassifier method)": [[73, "squlearn.qrc.QRCClassifier.set_score_request", false]], "set_score_request() (squlearn.qrc.qrcregressor method)": [[74, "squlearn.qrc.QRCRegressor.set_score_request", false]], "set_seed_for_primitive() (squlearn.executor method)": [[9, "squlearn.Executor.set_seed_for_primitive", false]], "set_shots() (squlearn.executor method)": [[9, "squlearn.Executor.set_shots", false]], "set_shots() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[70, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.set_shots", false]], "set_shots_for_grad() (squlearn.qnn.shotsfromrstd method)": [[57, "squlearn.qnn.ShotsFromRSTD.set_shots_for_grad", false]], "set_shots_for_loss() (squlearn.qnn.shotsfromrstd method)": [[57, "squlearn.qnn.ShotsFromRSTD.set_shots_for_loss", false]], "sglbo (class in squlearn.optimizers)": [[51, "squlearn.optimizers.SGLBO", false]], "shots (squlearn.executor attribute)": [[9, "squlearn.Executor.shots", false]], "shotsfromrstd (class in squlearn.qnn)": [[57, "squlearn.qnn.ShotsFromRSTD", false]], "simplify() (squlearn.util.optree static method)": [[76, "squlearn.util.OpTree.simplify", false]], "singlepauli (class in squlearn.observables)": [[43, "squlearn.observables.SinglePauli", false]], "singleprobability (class in squlearn.observables)": [[44, "squlearn.observables.SingleProbability", false]], "slsqp (class in squlearn.optimizers)": [[52, "squlearn.optimizers.SLSQP", false]], "spsa (class in squlearn.optimizers)": [[53, "squlearn.optimizers.SPSA", false]], "squaredloss (class in squlearn.qnn.loss)": [[64, "squlearn.qnn.loss.SquaredLoss", false]], "squlearn.encoding_circuit": [[8, "module-squlearn.encoding_circuit", false]], "squlearn.kernel.loss": [[8, "module-squlearn.kernel.loss", false]], "squlearn.kernel.matrix": [[8, "module-squlearn.kernel.matrix", false]], "squlearn.observables": [[8, "module-squlearn.observables", false]], "squlearn.optimizers": [[8, "module-squlearn.optimizers", false]], "squlearn.qnn": [[8, "module-squlearn.qnn", false]], "step() (squlearn.optimizers.adam method)": [[49, "squlearn.optimizers.Adam.step", false]], "step() (squlearn.optimizers.sglbo method)": [[51, "squlearn.optimizers.SGLBO.step", false]], "summedpaulis (class in squlearn.observables)": [[45, "squlearn.observables.SummedPaulis", false]], "summedprobabilities (class in squlearn.observables)": [[46, "squlearn.observables.SummedProbabilities", false]], "swap() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.swap", false]], "t() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.T", false]], "t_conjugate() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.T_conjugate", false]], "targetalignment (class in squlearn.kernel.loss.target_alignment)": [[32, "squlearn.kernel.loss.target_alignment.TargetAlignment", false]], "train (class in squlearn.qnn.training)": [[71, "squlearn.qnn.training.train", false]], "train_mini_batch (class in squlearn.qnn.training)": [[72, "squlearn.qnn.training.train_mini_batch", false]], "transform_to_zbasis() (squlearn.util.optree.optreeevaluate static method)": [[76, "squlearn.util.OpTree.OpTreeEvaluate.transform_to_zbasis", false]], "transpile_to_supported_instructions() (squlearn.util.optree.optreederivative static method)": [[76, "squlearn.util.OpTree.OpTreeDerivative.transpile_to_supported_instructions", false]], "transpiledencodingcircuit (class in squlearn.encoding_circuit)": [[25, "squlearn.encoding_circuit.TranspiledEncodingCircuit", false]], "u() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.U", false]], "unset_backend() (squlearn.executor method)": [[9, "squlearn.Executor.unset_backend", false]], "value() (squlearn.qnn.loss.lossbase method)": [[61, "squlearn.qnn.loss.LossBase.value", false]], "value() (squlearn.qnn.loss.odeloss method)": [[62, "squlearn.qnn.loss.ODELoss.value", false]], "value() (squlearn.qnn.loss.parameterregularizationloss method)": [[63, "squlearn.qnn.loss.ParameterRegularizationLoss.value", false]], "value() (squlearn.qnn.loss.squaredloss method)": [[64, "squlearn.qnn.loss.SquaredLoss.value", false]], "value() (squlearn.qnn.loss.varianceloss method)": [[65, "squlearn.qnn.loss.VarianceLoss.value", false]], "variance() (squlearn.qnn.loss.lossbase method)": [[61, "squlearn.qnn.loss.LossBase.variance", false]], "variance() (squlearn.qnn.loss.odeloss method)": [[62, "squlearn.qnn.loss.ODELoss.variance", false]], "variance() (squlearn.qnn.loss.parameterregularizationloss method)": [[63, "squlearn.qnn.loss.ParameterRegularizationLoss.variance", false]], "variance() (squlearn.qnn.loss.squaredloss method)": [[64, "squlearn.qnn.loss.SquaredLoss.variance", false]], "variance() (squlearn.qnn.loss.varianceloss method)": [[65, "squlearn.qnn.loss.VarianceLoss.variance", false]], "varianceloss (class in squlearn.qnn.loss)": [[65, "squlearn.qnn.loss.VarianceLoss", false]], "x (squlearn.observables.isinghamiltonian attribute)": [[42, "squlearn.observables.IsingHamiltonian.X", false]], "x() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.X", false]], "y() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.Y", false]], "yz_cx_encodingcircuit (class in squlearn.encoding_circuit)": [[26, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit", false]], "z (squlearn.observables.isinghamiltonian attribute)": [[42, "squlearn.observables.IsingHamiltonian.Z", false]], "z() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[17, "squlearn.encoding_circuit.LayeredEncodingCircuit.Z", false]], "zz (squlearn.observables.isinghamiltonian attribute)": [[42, "squlearn.observables.IsingHamiltonian.ZZ", false]]}, "objects": {"squlearn": [[9, 0, 1, "", "Executor"], [8, 3, 0, "-", "encoding_circuit"], [8, 3, 0, "-", "observables"], [8, 3, 0, "-", "optimizers"], [8, 3, 0, "-", "qnn"]], "squlearn.Executor": [[9, 1, 1, "", "IBMQuantum"], [9, 1, 1, "", "backend"], [9, 1, 1, "", "backend_chosen"], [9, 1, 1, "", "backend_list"], [9, 1, 1, "", "backend_name"], [9, 2, 1, "", "clear_estimator_cache"], [9, 2, 1, "", "clear_sampler_cache"], [9, 2, 1, "", "close_session"], [9, 2, 1, "", "create_session"], [9, 1, 1, "", "estimator"], [9, 1, 1, "", "estimator_options"], [9, 2, 1, "", "estimator_run_v1"], [9, 2, 1, "", "estimator_run_v2"], [9, 1, 1, "", "execution"], [9, 2, 1, "", "get_estimator"], [9, 2, 1, "", "get_sampler"], [9, 2, 1, "", "get_shots"], [9, 1, 1, "", "is_statevector"], [9, 2, 1, "", "pennylane_execute"], [9, 2, 1, "", "pennylane_execute_batched"], [9, 2, 1, "", "qiskit_execute"], [9, 1, 1, "", "qpu_parallelization"], [9, 1, 1, "", "quantum_framework"], [9, 2, 1, "", "reset_shots"], [9, 1, 1, "", "sampler"], [9, 1, 1, "", "sampler_options"], [9, 2, 1, "", "sampler_run_v1"], [9, 2, 1, "", "sampler_run_v2"], [9, 2, 1, "", "select_backend"], [9, 1, 1, "", "service"], [9, 1, 1, "", "session"], [9, 2, 1, "", "set_backend"], [9, 2, 1, "", "set_options_estimator"], [9, 2, 1, "", "set_options_sampler"], [9, 2, 1, "", "set_primitive_options"], [9, 2, 1, "", "set_seed_for_primitive"], [9, 2, 1, "", "set_shots"], [9, 1, 1, "", "shots"], [9, 2, 1, "", "unset_backend"]], "squlearn.encoding_circuit": [[10, 0, 1, "", "ChebyshevPQC"], [11, 0, 1, "", "ChebyshevRx"], [12, 0, 1, "", "ChebyshevTower"], [13, 0, 1, "", "EncodingCircuitDerivatives"], [14, 0, 1, "", "HighDimEncodingCircuit"], [15, 0, 1, "", "HubregtsenEncodingCircuit"], [16, 0, 1, "", "KyriienkoEncodingCircuit"], [17, 0, 1, "", "LayeredEncodingCircuit"], [18, 0, 1, "", "MultiControlEncodingCircuit"], [19, 0, 1, "", "ParamZFeatureMap"], [20, 0, 1, "", "PrunedEncodingCircuit"], [21, 0, 1, "", "QCNNEncodingCircuit"], [22, 0, 1, "", "QiskitEncodingCircuit"], [23, 0, 1, "", "RandomEncodingCircuit"], [24, 0, 1, "", "RandomLayeredEncodingCircuit"], [25, 0, 1, "", "TranspiledEncodingCircuit"], [26, 0, 1, "", "YZ_CX_EncodingCircuit"], [27, 4, 1, "", "automated_pruning"], [29, 4, 1, "", "pruning_from_QFI"]], "squlearn.encoding_circuit.ChebyshevPQC": [[10, 2, 1, "", "draw"], [10, 2, 1, "", "generate_initial_parameters"], [10, 2, 1, "", "get_cheb_indices"], [10, 2, 1, "", "get_circuit"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ChebyshevRx": [[11, 2, 1, "", "draw"], [11, 2, 1, "", "generate_initial_parameters"], [11, 2, 1, "", "get_cheb_indices"], [11, 2, 1, "", "get_circuit"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ChebyshevTower": [[12, 2, 1, "", "draw"], [12, 2, 1, "", "generate_initial_parameters"], [12, 2, 1, "", "get_circuit"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.EncodingCircuitDerivatives": [[13, 2, 1, "", "assign_parameters"], [13, 2, 1, "", "get_derivative"]], "squlearn.encoding_circuit.HighDimEncodingCircuit": [[14, 2, 1, "", "draw"], [14, 2, 1, "", "generate_initial_parameters"], [14, 2, 1, "", "get_circuit"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.HubregtsenEncodingCircuit": [[15, 2, 1, "", "draw"], [15, 2, 1, "", "generate_initial_parameters"], [15, 2, 1, "", "get_circuit"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.KyriienkoEncodingCircuit": [[16, 2, 1, "", "draw"], [16, 2, 1, "", "generate_initial_parameters"], [16, 2, 1, "", "get_circuit"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.LayeredEncodingCircuit": [[17, 2, 1, "", "H"], [17, 2, 1, "", "I"], [17, 2, 1, "", "P"], [17, 2, 1, "", "Rx"], [17, 2, 1, "", "Ry"], [17, 2, 1, "", "Rz"], [17, 2, 1, "", "S"], [17, 2, 1, "", "S_conjugate"], [17, 2, 1, "", "T"], [17, 2, 1, "", "T_conjugate"], [17, 2, 1, "", "U"], [17, 2, 1, "", "X"], [17, 2, 1, "", "Y"], [17, 2, 1, "", "Z"], [17, 2, 1, "", "add_layer"], [17, 2, 1, "", "ch_entangling"], [17, 2, 1, "", "cp_entangling"], [17, 2, 1, "", "crx_entangling"], [17, 2, 1, "", "cry_entangling"], [17, 2, 1, "", "crz_entangling"], [17, 2, 1, "", "cu_entangling"], [17, 2, 1, "", "cx_entangling"], [17, 2, 1, "", "cy_entangling"], [17, 2, 1, "", "cz_entangling"], [17, 2, 1, "", "draw"], [17, 2, 1, "", "from_string"], [17, 2, 1, "", "generate_initial_parameters"], [17, 2, 1, "", "get_circuit"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "rxx_entangling"], [17, 2, 1, "", "ryy_entangling"], [17, 2, 1, "", "rzx_entangling"], [17, 2, 1, "", "rzz_entangling"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "swap"]], "squlearn.encoding_circuit.MultiControlEncodingCircuit": [[18, 2, 1, "", "draw"], [18, 2, 1, "", "generate_initial_parameters"], [18, 2, 1, "", "get_circuit"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ParamZFeatureMap": [[19, 2, 1, "", "draw"], [19, 2, 1, "", "generate_initial_parameters"], [19, 2, 1, "", "get_circuit"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.PrunedEncodingCircuit": [[20, 2, 1, "", "draw"], [20, 2, 1, "", "generate_initial_parameters"], [20, 2, 1, "", "get_circuit"], [20, 2, 1, "", "get_params"], [20, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.QCNNEncodingCircuit": [[21, 2, 1, "", "QCNNObservable"], [21, 2, 1, "", "build_circuit"], [21, 2, 1, "", "convolution"], [21, 2, 1, "", "default_circuit"], [21, 2, 1, "", "draw"], [21, 2, 1, "", "fully_connected"], [21, 2, 1, "", "generate_initial_parameters"], [21, 2, 1, "", "get_circuit"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "pooling"], [21, 2, 1, "", "repeat_layers"], [21, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.QiskitEncodingCircuit": [[22, 2, 1, "", "draw"], [22, 2, 1, "", "generate_initial_parameters"], [22, 2, 1, "", "get_circuit"], [22, 2, 1, "", "get_params"], [22, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.RandomEncodingCircuit": [[23, 2, 1, "", "draw"], [23, 2, 1, "", "generate_initial_parameters"], [23, 2, 1, "", "get_circuit"], [23, 2, 1, "", "get_params"], [23, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.RandomLayeredEncodingCircuit": [[24, 2, 1, "", "draw"], [24, 2, 1, "", "generate_initial_parameters"], [24, 2, 1, "", "get_circuit"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.TranspiledEncodingCircuit": [[25, 2, 1, "", "draw"], [25, 2, 1, "", "generate_initial_parameters"], [25, 2, 1, "", "get_circuit"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.YZ_CX_EncodingCircuit": [[26, 2, 1, "", "draw"], [26, 2, 1, "", "generate_initial_parameters"], [26, 2, 1, "", "get_circuit"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.encoding_circuit_base": [[28, 0, 1, "", "EncodingCircuitBase"]], "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase": [[28, 2, 1, "", "draw"], [28, 2, 1, "", "generate_initial_parameters"], [28, 2, 1, "", "get_circuit"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "set_params"]], "squlearn.kernel": [[8, 3, 0, "-", "loss"], [8, 3, 0, "-", "matrix"]], "squlearn.kernel.loss.kernel_loss_base": [[30, 0, 1, "", "KernelLossBase"]], "squlearn.kernel.loss.kernel_loss_base.KernelLossBase": [[30, 2, 1, "", "compute"], [30, 2, 1, "", "set_quantum_kernel"]], "squlearn.kernel.loss.negative_log_likelihood": [[31, 0, 1, "", "NLL"]], "squlearn.kernel.loss.negative_log_likelihood.NLL": [[31, 2, 1, "", "compute"], [31, 2, 1, "", "set_quantum_kernel"]], "squlearn.kernel.loss.target_alignment": [[32, 0, 1, "", "TargetAlignment"]], "squlearn.kernel.loss.target_alignment.TargetAlignment": [[32, 2, 1, "", "compute"], [32, 2, 1, "", "set_quantum_kernel"]], "squlearn.kernel.matrix": [[33, 0, 1, "", "FidelityKernel"], [34, 0, 1, "", "ProjectedQuantumKernel"]], "squlearn.kernel.matrix.FidelityKernel": [[33, 2, 1, "", "assign_parameters"], [33, 2, 1, "", "evaluate"], [33, 2, 1, "", "evaluate_pairwise"], [33, 2, 1, "", "evaluate_with_parameters"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "set_params"]], "squlearn.kernel.matrix.ProjectedQuantumKernel": [[34, 2, 1, "", "assign_parameters"], [34, 1, 1, "", "encoding_circuit"], [34, 2, 1, "", "evaluate"], [34, 2, 1, "", "evaluate_derivatives"], [34, 2, 1, "", "evaluate_pairwise"], [34, 2, 1, "", "evaluate_qnn"], [34, 2, 1, "", "evaluate_with_parameters"], [34, 2, 1, "", "get_params"], [34, 1, 1, "", "measurement"], [34, 1, 1, "", "name_hyper_parameters"], [34, 1, 1, "", "num_features"], [34, 1, 1, "", "num_hyper_parameters"], [34, 1, 1, "", "num_parameters"], [34, 1, 1, "", "num_qubits"], [34, 1, 1, "", "outer_kernel"], [34, 1, 1, "", "parameters"], [34, 2, 1, "", "set_params"]], "squlearn.kernel.matrix.kernel_matrix_base": [[35, 0, 1, "", "KernelMatrixBase"]], "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase": [[35, 2, 1, "", "assign_parameters"], [35, 2, 1, "", "evaluate"], [35, 2, 1, "", "evaluate_pairwise"], [35, 2, 1, "", "evaluate_with_parameters"], [35, 2, 1, "", "get_params"], [35, 2, 1, "", "set_params"]], "squlearn.kernel.ml": [[36, 0, 1, "", "QGPC"], [37, 0, 1, "", "QGPR"], [38, 0, 1, "", "QKRR"], [39, 0, 1, "", "QSVC"], [40, 0, 1, "", "QSVR"]], "squlearn.kernel.ml.QGPC": [[36, 2, 1, "", "fit"], [36, 2, 1, "", "get_metadata_routing"], [36, 2, 1, "", "get_params"], [36, 2, 1, "", "log_marginal_likelihood"], [36, 2, 1, "", "predict"], [36, 2, 1, "", "predict_proba"], [36, 2, 1, "", "score"], [36, 2, 1, "", "set_params"], [36, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QGPR": [[37, 2, 1, "", "calculate_cov_and_mean"], [37, 2, 1, "", "fit"], [37, 2, 1, "", "get_metadata_routing"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "predict"], [37, 2, 1, "", "score"], [37, 2, 1, "", "set_params"], [37, 2, 1, "", "set_predict_request"], [37, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QKRR": [[38, 2, 1, "", "fit"], [38, 2, 1, "", "get_metadata_routing"], [38, 2, 1, "", "get_params"], [38, 2, 1, "", "predict"], [38, 2, 1, "", "score"], [38, 2, 1, "", "set_params"], [38, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QSVC": [[39, 2, 1, "", "decision_function"], [39, 2, 1, "", "fit"], [39, 2, 1, "", "get_metadata_routing"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "predict"], [39, 2, 1, "", "predict_log_proba"], [39, 2, 1, "", "predict_proba"], [39, 2, 1, "", "score"], [39, 2, 1, "", "set_fit_request"], [39, 2, 1, "", "set_params"], [39, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QSVR": [[40, 2, 1, "", "fit"], [40, 2, 1, "", "get_metadata_routing"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "predict"], [40, 2, 1, "", "score"], [40, 2, 1, "", "set_fit_request"], [40, 2, 1, "", "set_params"], [40, 2, 1, "", "set_score_request"]], "squlearn.observables": [[41, 0, 1, "", "CustomObservable"], [42, 0, 1, "", "IsingHamiltonian"], [43, 0, 1, "", "SinglePauli"], [44, 0, 1, "", "SingleProbability"], [45, 0, 1, "", "SummedPaulis"], [46, 0, 1, "", "SummedProbabilities"]], "squlearn.observables.CustomObservable": [[41, 2, 1, "", "generate_initial_parameters"], [41, 2, 1, "", "get_operator"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "get_pauli"], [41, 2, 1, "", "get_pauli_mapped"], [41, 1, 1, "", "num_parameters"], [41, 1, 1, "", "num_qubits"], [41, 1, 1, "", "operator_string"], [41, 1, 1, "", "parameterized"], [41, 2, 1, "", "set_map"], [41, 2, 1, "", "set_params"]], "squlearn.observables.IsingHamiltonian": [[42, 1, 1, "", "I"], [42, 1, 1, "", "X"], [42, 1, 1, "", "Z"], [42, 1, 1, "", "ZZ"], [42, 2, 1, "", "generate_initial_parameters"], [42, 2, 1, "", "get_operator"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "get_pauli"], [42, 2, 1, "", "get_pauli_mapped"], [42, 1, 1, "", "num_parameters"], [42, 1, 1, "", "num_qubits"], [42, 2, 1, "", "set_map"], [42, 2, 1, "", "set_params"]], "squlearn.observables.SinglePauli": [[43, 2, 1, "", "generate_initial_parameters"], [43, 2, 1, "", "get_operator"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "get_pauli"], [43, 2, 1, "", "get_pauli_mapped"], [43, 1, 1, "", "num_parameters"], [43, 1, 1, "", "num_qubits"], [43, 1, 1, "", "op_str"], [43, 1, 1, "", "parameterized"], [43, 1, 1, "", "qubit"], [43, 2, 1, "", "set_map"], [43, 2, 1, "", "set_params"]], "squlearn.observables.SingleProbability": [[44, 2, 1, "", "generate_initial_parameters"], [44, 2, 1, "", "get_operator"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "get_pauli"], [44, 2, 1, "", "get_pauli_mapped"], [44, 1, 1, "", "num_parameters"], [44, 1, 1, "", "num_qubits"], [44, 1, 1, "", "one_state"], [44, 1, 1, "", "parameterized"], [44, 1, 1, "", "qubit"], [44, 2, 1, "", "set_map"], [44, 2, 1, "", "set_params"]], "squlearn.observables.SummedPaulis": [[45, 1, 1, "", "full_sum"], [45, 2, 1, "", "generate_initial_parameters"], [45, 2, 1, "", "get_operator"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "get_pauli"], [45, 2, 1, "", "get_pauli_mapped"], [45, 1, 1, "", "include_identity"], [45, 1, 1, "", "num_parameters"], [45, 1, 1, "", "num_qubits"], [45, 1, 1, "", "op_str"], [45, 2, 1, "", "set_map"], [45, 2, 1, "", "set_params"]], "squlearn.observables.SummedProbabilities": [[46, 1, 1, "", "full_sum"], [46, 2, 1, "", "generate_initial_parameters"], [46, 2, 1, "", "get_operator"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "get_pauli"], [46, 2, 1, "", "get_pauli_mapped"], [46, 1, 1, "", "include_identity"], [46, 1, 1, "", "num_parameters"], [46, 1, 1, "", "num_qubits"], [46, 1, 1, "", "one_state"], [46, 2, 1, "", "set_map"], [46, 2, 1, "", "set_params"]], "squlearn.observables.observable_base": [[47, 0, 1, "", "ObservableBase"]], "squlearn.observables.observable_base.ObservableBase": [[47, 2, 1, "", "generate_initial_parameters"], [47, 2, 1, "", "get_operator"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "get_pauli"], [47, 2, 1, "", "get_pauli_mapped"], [47, 1, 1, "", "num_parameters"], [47, 1, 1, "", "num_qubits"], [47, 2, 1, "", "set_map"], [47, 2, 1, "", "set_params"]], "squlearn.observables.observable_derivatives": [[48, 0, 1, "", "ObservableDerivatives"]], "squlearn.observables.observable_derivatives.ObservableDerivatives": [[48, 2, 1, "", "assign_parameters"], [48, 2, 1, "", "get_derivative"], [48, 2, 1, "", "get_operator"], [48, 2, 1, "", "get_operator_squared"], [48, 1, 1, "", "num_operators"], [48, 1, 1, "", "num_parameters"], [48, 1, 1, "", "parameter_vector"]], "squlearn.optimizers": [[49, 0, 1, "", "Adam"], [50, 0, 1, "", "LBFGSB"], [51, 0, 1, "", "SGLBO"], [52, 0, 1, "", "SLSQP"], [53, 0, 1, "", "SPSA"]], "squlearn.optimizers.Adam": [[49, 2, 1, "", "minimize"], [49, 2, 1, "", "reset"], [49, 2, 1, "", "set_callback"], [49, 2, 1, "", "step"]], "squlearn.optimizers.LBFGSB": [[50, 2, 1, "", "minimize"], [50, 2, 1, "", "set_callback"]], "squlearn.optimizers.SGLBO": [[51, 2, 1, "", "minimize"], [51, 2, 1, "", "reset"], [51, 2, 1, "", "set_callback"], [51, 2, 1, "", "step"]], "squlearn.optimizers.SLSQP": [[52, 2, 1, "", "minimize"], [52, 2, 1, "", "set_callback"]], "squlearn.optimizers.SPSA": [[53, 2, 1, "", "minimize"], [53, 2, 1, "", "set_callback"]], "squlearn.optimizers.optimizer_base": [[54, 0, 1, "", "OptimizerBase"]], "squlearn.optimizers.optimizer_base.OptimizerBase": [[54, 2, 1, "", "minimize"], [54, 2, 1, "", "set_callback"]], "squlearn.qnn": [[55, 0, 1, "", "QNNClassifier"], [56, 0, 1, "", "QNNRegressor"], [57, 0, 1, "", "ShotsFromRSTD"], [59, 0, 1, "", "get_lr_decay"], [60, 0, 1, "", "get_variance_fac"]], "squlearn.qnn.QNNClassifier": [[55, 2, 1, "", "fit"], [55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "partial_fit"], [55, 2, 1, "", "predict"], [55, 2, 1, "", "predict_proba"], [55, 2, 1, "", "score"], [55, 2, 1, "", "set_fit_request"], [55, 2, 1, "", "set_params"], [55, 2, 1, "", "set_partial_fit_request"], [55, 2, 1, "", "set_score_request"]], "squlearn.qnn.QNNRegressor": [[56, 2, 1, "", "fit"], [56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "partial_fit"], [56, 2, 1, "", "predict"], [56, 2, 1, "", "score"], [56, 2, 1, "", "set_fit_request"], [56, 2, 1, "", "set_params"], [56, 2, 1, "", "set_partial_fit_request"], [56, 2, 1, "", "set_score_request"]], "squlearn.qnn.ShotsFromRSTD": [[57, 2, 1, "", "reset_shots"], [57, 2, 1, "", "set_executor"], [57, 2, 1, "", "set_shots_for_grad"], [57, 2, 1, "", "set_shots_for_loss"]], "squlearn.qnn.base_qnn": [[58, 0, 1, "", "BaseQNN"]], "squlearn.qnn.base_qnn.BaseQNN": [[58, 2, 1, "", "fit"], [58, 2, 1, "", "get_metadata_routing"], [58, 2, 1, "", "get_params"], [58, 2, 1, "", "set_fit_request"], [58, 2, 1, "", "set_params"]], "squlearn.qnn.loss": [[61, 0, 1, "", "LossBase"], [62, 0, 1, "", "ODELoss"], [63, 0, 1, "", "ParameterRegularizationLoss"], [64, 0, 1, "", "SquaredLoss"], [65, 0, 1, "", "VarianceLoss"]], "squlearn.qnn.loss.LossBase": [[61, 2, 1, "", "gradient"], [61, 2, 1, "", "set_opt_param_op"], [61, 2, 1, "", "value"], [61, 2, 1, "", "variance"]], "squlearn.qnn.loss.ODELoss": [[62, 2, 1, "", "gradient"], [62, 2, 1, "", "set_opt_param_op"], [62, 2, 1, "", "value"], [62, 2, 1, "", "variance"]], "squlearn.qnn.loss.ParameterRegularizationLoss": [[63, 2, 1, "", "gradient"], [63, 2, 1, "", "set_opt_param_op"], [63, 2, 1, "", "value"], [63, 2, 1, "", "variance"]], "squlearn.qnn.loss.SquaredLoss": [[64, 2, 1, "", "gradient"], [64, 2, 1, "", "set_opt_param_op"], [64, 2, 1, "", "value"], [64, 2, 1, "", "variance"]], "squlearn.qnn.loss.VarianceLoss": [[65, 2, 1, "", "gradient"], [65, 2, 1, "", "set_opt_param_op"], [65, 2, 1, "", "value"], [65, 2, 1, "", "variance"]], "squlearn.qnn.lowlevel_qnn": [[66, 0, 1, "", "LowLevelQNN"]], "squlearn.qnn.lowlevel_qnn.LowLevelQNN": [[66, 2, 1, "", "evaluate"], [66, 2, 1, "", "get_params"], [66, 2, 1, "", "gradient"], [66, 2, 1, "", "set_params"]], "squlearn.qnn.lowlevel_qnn_base": [[67, 0, 1, "", "LowLevelQNNBase"]], "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase": [[67, 2, 1, "", "evaluate"], [67, 2, 1, "", "get_params"], [67, 2, 1, "", "gradient"], [67, 2, 1, "", "set_params"]], "squlearn.qnn.lowlevel_qnn_pennylane": [[68, 0, 1, "", "LowLevelQNNPennyLane"]], "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane": [[68, 2, 1, "", "evaluate"], [68, 1, 1, "", "features"], [68, 2, 1, "", "get_params"], [68, 2, 1, "", "gradient"], [68, 1, 1, "", "multiple_output"], [68, 1, 1, "", "num_features"], [68, 1, 1, "", "num_operator"], [68, 1, 1, "", "num_parameters"], [68, 1, 1, "", "num_parameters_observable"], [68, 1, 1, "", "num_qubits"], [68, 1, 1, "", "parameters"], [68, 1, 1, "", "parameters_operator"], [68, 2, 1, "", "set_params"]], "squlearn.qnn.lowlevel_qnn_qiskit": [[69, 0, 1, "", "Expec"], [70, 0, 1, "", "LowLevelQNNQiskit"]], "squlearn.qnn.lowlevel_qnn_qiskit.Expec": [[69, 2, 1, "", "from_parameter"], [69, 2, 1, "", "from_parameter_vector"], [69, 2, 1, "", "from_string"], [69, 2, 1, "", "from_tuple"], [69, 2, 1, "", "from_variable"]], "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit": [[70, 2, 1, "", "evaluate"], [70, 2, 1, "", "evaluate_dfdop"], [70, 2, 1, "", "evaluate_dfdopdx"], [70, 2, 1, "", "evaluate_dfdp"], [70, 2, 1, "", "evaluate_dfdpdx"], [70, 2, 1, "", "evaluate_dfdx"], [70, 2, 1, "", "evaluate_dfdxdx"], [70, 2, 1, "", "evaluate_diff_tuple"], [70, 2, 1, "", "evaluate_f"], [70, 2, 1, "", "evaluate_from_string"], [70, 2, 1, "", "evaluate_laplace"], [70, 2, 1, "", "evaluate_laplace_dop"], [70, 2, 1, "", "evaluate_laplace_dp"], [70, 2, 1, "", "evaluate_probabilities"], [70, 2, 1, "", "evaluate_var"], [70, 2, 1, "", "evaluate_variance"], [70, 1, 1, "", "features"], [70, 2, 1, "", "get_optree_from_expec"], [70, 2, 1, "", "get_optree_from_string"], [70, 2, 1, "", "get_params"], [70, 2, 1, "", "get_shots"], [70, 2, 1, "", "gradient"], [70, 1, 1, "", "multiple_output"], [70, 1, 1, "", "num_features"], [70, 1, 1, "", "num_operator"], [70, 1, 1, "", "num_parameters"], [70, 1, 1, "", "num_parameters_observable"], [70, 1, 1, "", "num_qubits"], [70, 1, 1, "", "parameters"], [70, 1, 1, "", "parameters_operator"], [70, 2, 1, "", "reset_shots"], [70, 2, 1, "", "set_params"], [70, 2, 1, "", "set_shots"]], "squlearn.qnn.training": [[71, 0, 1, "", "train"], [72, 0, 1, "", "train_mini_batch"]], "squlearn.qrc": [[73, 0, 1, "", "QRCClassifier"], [74, 0, 1, "", "QRCRegressor"]], "squlearn.qrc.QRCClassifier": [[73, 2, 1, "", "fit"], [73, 2, 1, "", "get_metadata_routing"], [73, 2, 1, "", "get_params"], [73, 2, 1, "", "predict"], [73, 2, 1, "", "score"], [73, 2, 1, "", "set_params"], [73, 2, 1, "", "set_score_request"]], "squlearn.qrc.QRCRegressor": [[74, 2, 1, "", "fit"], [74, 2, 1, "", "get_metadata_routing"], [74, 2, 1, "", "get_params"], [74, 2, 1, "", "predict"], [74, 2, 1, "", "score"], [74, 2, 1, "", "set_params"], [74, 2, 1, "", "set_score_request"]], "squlearn.qrc.base_qrc": [[75, 0, 1, "", "BaseQRC"]], "squlearn.qrc.base_qrc.BaseQRC": [[75, 2, 1, "", "fit"], [75, 2, 1, "", "get_metadata_routing"], [75, 2, 1, "", "get_params"], [75, 2, 1, "", "predict"], [75, 2, 1, "", "set_params"]], "squlearn.util": [[76, 0, 1, "", "OpTree"]], "squlearn.util.OpTree": [[76, 0, 1, "", "OpTreeDerivative"], [76, 0, 1, "", "OpTreeEvaluate"], [76, 2, 1, "", "assign_parameters"], [76, 1, 1, "", "derivative"], [76, 1, 1, "", "evaluate"], [76, 2, 1, "", "gen_expectation_tree"], [76, 2, 1, "", "get_first_leaf"], [76, 2, 1, "", "get_num_nested_lists"], [76, 2, 1, "", "get_number_of_leafs"], [76, 2, 1, "", "get_tree_depth"], [76, 2, 1, "", "hash_circuit"], [76, 2, 1, "", "hash_operator"], [76, 2, 1, "", "simplify"]], "squlearn.util.OpTree.OpTreeDerivative": [[76, 2, 1, "", "differentiate"], [76, 2, 1, "", "differentiate_v2"], [76, 2, 1, "", "transpile_to_supported_instructions"]], "squlearn.util.OpTree.OpTreeEvaluate": [[76, 2, 1, "", "evaluate_tree_with_estimator"], [76, 2, 1, "", "evaluate_tree_with_sampler"], [76, 2, 1, "", "evaluate_with_estimator"], [76, 2, 1, "", "evaluate_with_sampler"], [76, 2, 1, "", "transform_to_zbasis"]], "squlearn.util.executor": [[77, 0, 1, "", "ExecutorEstimator"], [78, 0, 1, "", "ExecutorSampler"]], "squlearn.util.optree": [[79, 0, 1, "", "OpTreeCircuit"], [80, 0, 1, "", "OpTreeContainer"], [81, 0, 1, "", "OpTreeExpectationValue"], [82, 0, 1, "", "OpTreeList"], [83, 0, 1, "", "OpTreeMeasuredOperator"], [84, 0, 1, "", "OpTreeOperator"], [85, 0, 1, "", "OpTreeSum"], [86, 0, 1, "", "OpTreeValue"]], "squlearn.util.optree.OpTreeCircuit": [[79, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeContainer": [[80, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeExpectationValue": [[81, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeList": [[82, 2, 1, "", "append"], [82, 2, 1, "", "copy"], [82, 2, 1, "", "remove"]], "squlearn.util.optree.OpTreeMeasuredOperator": [[83, 2, 1, "", "copy"], [83, 2, 1, "", "measure_circuit"]], "squlearn.util.optree.OpTreeOperator": [[84, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeSum": [[85, 2, 1, "", "append"], [85, 2, 1, "", "copy"], [85, 2, 1, "", "remove"]], "squlearn.util.optree.OpTreeValue": [[86, 2, 1, "", "copy"]], "squlearn.util.pennylane": [[87, 0, 1, "", "PennyLaneCircuit"]], "squlearn.util.pennylane.PennyLaneCircuit": [[87, 2, 1, "", "build_circuit_instructions"], [87, 2, 1, "", "build_observable_instructions"], [87, 2, 1, "", "build_pennylane_circuit"], [87, 1, 1, "", "circuit_arguments"], [87, 1, 1, "", "circuit_parameter_dimensions"], [87, 1, 1, "", "circuit_parameter_names"], [87, 2, 1, "", "draw"], [87, 2, 1, "", "get_pennylane_circuit"], [87, 1, 1, "", "hash"], [87, 1, 1, "", "observable_parameter_dimension"], [87, 1, 1, "", "observable_parameter_names"], [87, 1, 1, "", "pennylane_circuit"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"], "3": ["py", "module", "Python module"], "4": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:attribute", "2": "py:method", "3": "py:module", "4": "py:function"}, "terms": {"": [0, 1, 2, 3, 4, 6, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 34, 37, 38, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 56, 66, 67, 70, 76, 88, 89, 90, 92], "0": [0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 17, 21, 23, 24, 25, 26, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 48, 49, 51, 55, 56, 57, 58, 59, 60, 62, 63, 65, 73, 74, 75, 82, 85, 88, 89, 90, 91, 92, 93], "00": [2, 3, 34], "000": 93, "00000000e": 34, "00000009": 3, "00009": 56, "0001": 1, "001": [0, 1, 92], "00138": 37, "00262416e": [], "005": [63, 65, 92], "01": [3, 4, 34, 49, 51, 56, 74, 92, 93], "010327": 89, "01039v3": 26, "01639": [10, 57, 60, 92], "01mq22002a": 6, "01mq22003d": 6, "02": [1, 34, 56], "020475311434476e": 1, "021": 0, "02276": 33, "02276v1": [15, 32, 33, 34, 90], "023": 37, "02577578e": [], "02654557e": [], "02812614": [], "03": [3, 34], "03760543e": [], "03hy110d": 6, "04": 34, "040309": [27, 29, 88], "040504": [33, 90], "04463012e": [], "04578444": 4, "04653752e": [], "0491041": 4, "05": [1, 2, 34, 49, 56], "05495458": 4, "05745694e": [], "05751658e": [], "05927669e": [], "05x367": 17, "06": [37, 38], "06335083": 4, "06825951e": [], "07037611": 36, "07226488e": [], "07318673": 36, "07676122": 2, "08": 92, "08978477e": [], "08990": 6, "09": 2, "09696586": 36, "09746819e": [], "09754597e": 34, "09988938": 36, "0e": 38, "0x0000016f98366c20": 1, "0x0000016f9872ef20": 1, "0x0000016f9c622ec0": 1, "0x000001804d3f0a90": 0, "0x16f984110f0": 1, "0x22ca06c0a90": 3, "0x7f05dc964a40": [], "0x7f93208a7a10": 89, "1": [0, 1, 2, 3, 4, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 44, 46, 48, 49, 51, 55, 56, 57, 58, 60, 62, 73, 74, 82, 85, 88, 89, 90, 91, 92, 93], "10": [0, 1, 2, 3, 4, 6, 7, 9, 23, 24, 27, 29, 34, 37, 51, 72, 88, 89, 92, 93], "100": [1, 2, 3, 39, 40, 49, 51, 57, 73, 74, 75, 90, 92], "1000": [0, 2, 9, 73, 93], "10000": [2, 89, 92], "1007": 37, "10194367e": 34, "103": 3, "1038": 0, "10395": [16, 62], "1040x367": 88, "10478362e": [], "11": [0, 20], "11020v2": 90, "1103": [27, 29, 88], "112": 90, "1123": [92, 93], "11783785e": [], "12": [0, 1, 3, 7, 34, 90, 93], "1207": [17, 88], "12098547e": 34, "122": 33, "1234": 89, "1273": 21, "1278": 21, "13": [0, 2], "13162v3": 90, "1335": [25, 88], "1353": 93, "1374": 88, "13840528e": 34, "14": [0, 3, 16, 38], "14031946e": 34, "14300554e": [], "1458": 17, "15": [16, 20, 21], "150": 56, "15082666e": [], "15087431e": [], "15124": 93, "15554164e": [], "16": [55, 56], "161": 14, "17": [], "17192333e": 34, "17335059e": [], "17338703e": 34, "176": 3, "18": 7, "18215615e": [], "18461023e": 34, "18523855e": [], "18786411e": [], "19": [], "19024448e": [], "19145425e": 34, "19457665e": [], "19857474e": [], "1e": [1, 27, 29, 37, 38, 49, 51], "1e0": 1, "1e1": 1, "1e2": 1, "2": [0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 62, 63, 64, 70, 73, 74, 88, 89, 90, 91, 92, 93], "20": [1, 7, 51, 56, 92], "200": [0, 1, 93], "2006": [31, 37], "2011": [16, 62], "2019": [21, 33, 90], "2021": [0, 3, 14, 15, 16, 26, 32, 33, 34, 62, 90], "2022": 93, "2023": [6, 10, 57, 60, 89, 90, 92, 93], "20528491e": [], "209": 33, "2101": 90, "2105": [15, 32, 33, 34, 90], "2108": 26, "2110": 90, "21170354": 4, "212": 33, "21328096e": [], "2210": [22, 93], "22539": 0, "22563146e": 34, "22772938e": [], "22it": 2, "22x367": [17, 88], "23": [14, 37, 38, 40, 56, 74], "2306": [10, 57, 60, 92], "2311": 6, "2312": 93, "23788652e": [], "24124870e": [], "24369752e": [], "25": 89, "250": 3, "25466019e": [], "25809335e": [], "26211709e": [], "2631": [0, 34, 90], "26916778e": [], "27": 32, "27450689": [], "278": [22, 88], "28": 32, "28862046e": [], "29": [2, 3], "29771953e": [], "2_i": 13, "2d": [33, 35], "2\u03c0": [], "3": [0, 1, 2, 3, 4, 6, 7, 9, 10, 14, 17, 22, 24, 25, 33, 34, 36, 37, 38, 39, 40, 48, 51, 55, 56, 58, 73, 74, 88, 89, 90, 91, 92, 93], "30": [0, 2], "300": [73, 74], "30273302e": [], "31": [2, 3], "31069756e": [], "31519929e": [], "31728216e": [], "32": [0, 2], "32054449e": [], "32289250e": [], "32609002": 4, "33": [0, 2, 55, 56, 73, 74], "333": 93, "33866887e": [], "33x284": [22, 88], "33x367": 17, "34": [2, 7], "34620771e": [], "34922445e": [], "35": 2, "35175322e": [], "35206642e": [], "36": 2, "36306418e": [], "36702453e": [], "37": 2, "370": 88, "37039000e": [], "37111628e": [], "38": 2, "38592547e": 34, "39": [1, 2], "39076129e": [], "3e7": 9, "3f": 1, "4": [0, 1, 3, 4, 7, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 34, 38, 55, 56, 64, 68, 70, 73, 74, 88, 89, 90, 91, 92], "40": [0, 2, 17], "40829337e": [], "40881658": [], "40939215e": [], "41": 2, "41099421e": [], "41717632": 2, "41838377e": [], "42": [0, 1, 2, 17, 55, 56, 73, 74, 93], "42663813e": [], "43919796e": [], "44769518e": [], "44838134e": 34, "44x367": 88, "45": 7, "45323915e": 34, "45993522e": [], "47792952e": [], "48234872e": [], "48550": 6, "48935561": 4, "48991384e": [], "493": 38, "49548798e": 34, "5": [0, 1, 2, 3, 4, 14, 16, 23, 25, 31, 34, 38, 44, 46, 55, 56, 88, 89, 90, 91, 92], "50": [4, 23, 93], "5000": 57, "50320697e": [], "50876202": 2, "52474685e": [], "52817110e": [], "53022346e": 34, "53102793e": 34, "53443849e": 34, "538": [17, 22, 88], "53840133e": [], "54315575e": [], "55016198e": [], "556": 93, "55x1204": 22, "55x869": 93, "567": 33, "56955316e": 34, "57024715e": [], "57250595e": [], "57275520e": 34, "57360683": [], "57421533e": 34, "58": 3, "58577705e": 34, "58579355e": [], "59527467e": 34, "59778725e": 34, "5a": 16, "5b": 16, "6": [0, 1, 2, 3, 23, 24, 34, 37, 38, 49, 51, 56, 91, 92], "60": 55, "600": 89, "6014398": [], "60341061e": [], "61811182e": 34, "61918080e": [], "61x367": 92, "61x702": 93, "62067497e": [], "62352025e": [], "62364852e": [], "62373704e": 34, "63637404": [], "63879573e": [], "64": 0, "64031031e": [], "64117122e": 34, "64554501e": [], "64577632e": [], "64628971": 2, "64835895": [], "65036814e": [], "65097398e": [], "65135232": 2, "65331064e": [], "65386260e": [], "65698170e": [], "65699869e": [], "66524017": 2, "66567045": 2, "667": 88, "67845599e": [], "67it": [], "68048299e": [], "68309328e": 34, "68311685e": 34, "68335046e": [], "68358480e": [], "68517120e": 34, "68546444e": [], "68866580e": [], "69273691e": 34, "6y": 3, "7": [0, 1, 3, 7, 14, 20, 34], "70026560e": [], "71107540e": [], "71364362e": 34, "72371216e": 34, "72701897e": [], "72892165": 4, "73198175e": [], "73401498e": 34, "74835824e": 34, "75": [23, 89], "75403422": 4, "75559416e": [], "75620523e": [], "75721105e": [], "75760773e": 34, "76941136e": [], "77027772e": 34, "774x367": 20, "77950243e": 34, "7928485": [], "79894338e": [], "8": [0, 1, 7, 24, 31, 34, 49, 93], "80246877": [], "80314475": 36, "80990397e": [], "81186487e": [], "81347238e": [], "81x451": [25, 88], "82060953e": 34, "83757831e": [], "83891746e": [], "84031268e": 34, "84375660e": [], "84602697e": [], "84914015": 2, "85643716": 36, "86413536e": [], "86694741e": [], "87111837e": [], "87152953e": [], "872": 20, "88148150e": [], "88282890e": 34, "88482712e": [], "88728412e": [], "88730117e": [], "889": [17, 20, 88, 92], "89088529": 2, "89492800e": [], "89513528e": 34, "89715235e": [], "89941938e": [], "8h": 9, "9": [0, 1, 3, 6, 7, 34, 37, 49, 55, 56, 74, 93], "906x200": 88, "90757301e": [], "90761229e": [], "91728497e": [], "92": 1, "92017040e": [], "92449614e": 34, "92679992e": [], "93514152e": [], "94496047e": [], "94664274": 2, "94685078": 2, "95524371e": [], "95643135e": [], "96": 4, "96012197": 2, "96066710e": 34, "96258372": 4, "9671641791044776": 0, "97004195": 2, "97571005e": 34, "9787878787878788": 0, "98": 36, "98136648e": [], "98149636e": [], "98264805e": [], "98504697": [], "98724664e": [], "99": 49, "99597988e": 34, "999999978217105": 1, "A": [0, 2, 3, 4, 6, 9, 10, 12, 14, 17, 21, 22, 24, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 57, 58, 60, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 88, 89, 90, 92], "And": 7, "As": [3, 34, 73, 90, 93], "At": [3, 21, 90], "BY": 0, "But": 90, "By": [2, 3, 4, 6, 21, 37, 38, 39, 40, 88, 89, 90, 93], "For": [0, 1, 2, 3, 4, 6, 9, 37, 38, 39, 40, 55, 56, 74, 88, 90, 92, 93], "IN": 21, "If": [0, 2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 58, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 89, 90, 91], "In": [0, 1, 2, 3, 4, 9, 23, 36, 39, 55, 68, 70, 73, 74, 88, 90, 91, 92, 93], "Ising": [42, 48, 91], "It": [0, 9, 12, 17, 21, 23, 39, 40, 55, 56, 88, 89, 91, 92], "NOT": 62, "Near": [15, 32, 33, 34, 90], "No": 22, "On": [0, 1, 93], "One": [3, 26, 93], "THE": 21, "TO": 21, "The": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 62, 64, 66, 67, 68, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 94], "Then": 92, "There": [4, 6, 7, 62, 88, 92], "These": [0, 1, 2, 33, 39, 40, 90], "To": [0, 1, 2, 3, 4, 6, 7, 88, 90, 91, 92], "Will": [55, 56], "With": [0, 1, 22, 91, 92, 93], "_": [0, 3, 13, 62, 90], "_1": 93, "__init__": 4, "_cach": [9, 89], "_circuit_kei": 76, "_encoding_circuit": 93, "_i": [2, 42, 44, 45, 46, 65], "_initial_sampl": 4, "_j": [42, 62, 93], "_k": 90, "_m": 93, "_nestedsequ": 9, "_observable_kei": 76, "_regularize_matrix": 35, "_supportsarrai": 9, "aa": 17, "aba": [3, 16], "abelian_group": 76, "abl": 90, "abort": [9, 89], "about": [4, 9, 38, 39, 40], "abov": [0, 1, 2, 9, 14, 89, 90, 92], "abstract": [30, 35, 47, 61, 66, 67], "accept": [20, 88], "access": [2, 13, 88, 89, 90, 93], "accord": [0, 39, 40, 55, 56, 70, 88], "accordingli": [38, 89], "account": 2, "accumul": 4, "accuraci": [0, 4, 36, 39, 55, 73, 92], "accuracy_scor": 0, "achiev": [17, 34, 89, 90, 91, 92], "acq_func": 4, "acquisit": [4, 51], "across": [2, 93], "act": [21, 43, 92, 93], "action": [6, 24, 89], "activ": [21, 89], "actual": [2, 38], "ad": [2, 17, 19, 36, 37, 38, 39, 40, 55, 56, 58, 62, 73, 74, 76, 88, 91, 92], "adam": [2, 3, 56, 59, 89, 90], "adam_opt": 90, "adapt": [4, 90], "add": [0, 1, 3, 4, 17, 21, 76, 91], "add_ax": 1, "add_lay": [17, 88], "added_ob": 91, "addit": [1, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 36, 37, 38, 39, 40, 50, 52, 53, 66, 87, 89, 90, 92, 93], "addition": [0, 2, 7, 17, 21, 36, 39, 40, 42, 92], "additive_chi2": 34, "address": [], "adequ": 1, "adher": 92, "adjust": [12, 17, 23, 39, 40, 59, 60, 68, 70, 88, 89, 90, 91], "ado": 3, "adress": 21, "advanc": [], "advantag": [0, 93], "aer": [7, 89], "aer_simul": 89, "aerprovid": 89, "aersimul": 89, "affair": 6, "affect": 2, "affirm": 2, "after": [0, 3, 14, 21, 33, 34, 38, 57, 89, 90, 91, 93], "afterward": [2, 17, 93], "again": [0, 2, 14, 21, 93], "against": 89, "aim": 6, "akin": 92, "al": [0, 14, 15, 16, 32, 33, 34, 62, 90, 93], "algebra": 90, "algorithm": [0, 1, 3, 4, 7, 9, 27, 29, 34, 37, 88, 89, 90, 92, 93], "alia": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 76], "align": [2, 30, 32, 62, 90], "all": [0, 1, 2, 3, 7, 9, 17, 21, 24, 33, 34, 36, 37, 38, 40, 42, 46, 56, 62, 63, 64, 74, 76, 87, 88, 89, 90, 91, 93], "allevi": 0, "allow": [0, 1, 2, 3, 4, 13, 23, 36, 37, 38, 39, 40, 41, 42, 45, 55, 56, 58, 73, 74, 88, 89, 91, 92], "along": [6, 60, 90, 92], "alongsid": 1, "alpha": [2, 4, 10, 11, 12, 34, 38, 63, 65, 92, 93], "alpha_": 60, "alreadi": [2, 21, 55, 56, 58, 90, 93], "also": [0, 1, 2, 3, 4, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 73, 74, 76, 82, 85, 87, 88, 89, 90, 91, 92, 93], "alter": 92, "altern": [6, 12, 16, 21, 22, 73, 74, 75, 89, 92, 93], "although": 91, "alwai": [37, 38, 40, 56, 74, 89], "amazon": [9, 89], "ambigu": 90, "among": [90, 92], "an": [0, 1, 2, 3, 4, 9, 21, 22, 24, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 59, 62, 69, 70, 73, 74, 76, 77, 81, 83, 84, 86, 88, 89, 90, 92, 93], "analit": 4, "analog": [37, 38, 90, 92], "analysi": 90, "analyt": 3, "angl": [0, 24], "ani": [3, 9, 80, 89], "annot": 1, "anoth": [17, 89], "ansatz": [3, 16, 90], "answer": 3, "anymor": 21, "apach": 6, "api": 6, "appeal": 4, "appear": [10, 11, 36, 39], "append": [1, 34, 82, 85], "appli": [0, 2, 4, 17, 21, 34, 39, 40, 48, 76, 82, 83, 85, 88, 89, 90, 92, 93], "applic": [3, 6, 88, 90, 92], "approach": [4, 88, 90, 92], "appropri": [33, 89, 92], "approxim": [2, 4, 64, 90], "aqua": 6, "ar": [0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 58, 62, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 82, 85, 88, 89, 90, 91, 92, 93], "arang": [0, 2, 56, 74, 92, 93], "arbitrari": [3, 80, 88, 91], "arbitrarili": [37, 38, 40, 56, 74], "arcco": [0, 10, 11, 12, 17, 88], "arccos_x": 23, "architectur": [6, 92, 93], "arctan": [10, 11, 12, 24], "arctan_x": 23, "area": 4, "arg": [4, 9, 34, 66], "arg_": 3, "arg_tupl": 9, "argmin": 4, "argument": [9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 36, 37, 38, 39, 40, 57, 66, 87, 89, 90, 92, 93], "aris": 2, "arithmet": 88, "arn": [9, 89], "around": 10, "arrai": [1, 3, 4, 9, 27, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 55, 56, 58, 62, 73, 74, 76, 82, 89], "arrang": [12, 16], "arrow": 89, "art": 0, "articl": 37, "artif": 93, "artifici": [2, 92], "arxiv": [6, 10, 15, 16, 26, 32, 33, 34, 57, 60, 62, 90, 92, 93], "ascend": 0, "aspect": 93, "assess": 92, "assign": [0, 13, 14, 22, 33, 34, 35, 36, 48, 76], "assign_paramet": [13, 33, 34, 35, 36, 37, 48, 76], "associ": [2, 3, 17, 69, 91], "assum": [2, 37, 38, 39, 40, 90], "assur": [37, 38], "attain": [90, 92], "attempt": 90, "attribut": [35, 36, 39, 89], "auto": [0, 9, 22, 89], "auto_backend_mod": [9, 89], "autom": [6, 27, 88], "automat": [2, 7, 9, 13, 14, 22, 48, 88, 90, 92], "automated_prun": 88, "autoqml": 6, "avail": [2, 3, 4, 6, 9, 17, 22, 38, 88, 89, 90, 91, 93], "averag": [49, 51], "avoid": [2, 9, 10, 49, 89], "aw": [9, 89], "ax": [1, 17, 20, 22, 25, 88, 92, 93], "axi": [1, 10], "b": [4, 16, 17, 42, 45, 46, 50, 60, 92], "b_i": [42, 45, 46], "back": 0, "backend": [6, 9, 25, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 58, 88, 90, 91], "backend_chosen": 9, "backend_list": 9, "backend_nam": 9, "backend_noise_model": [], "background": [0, 38], "backward": 21, "bad": 0, "balanc": 4, "bar": [55, 56, 58, 89], "base": [0, 1, 2, 4, 9, 12, 19, 20, 27, 28, 33, 34, 35, 37, 47, 54, 55, 56, 58, 60, 61, 62, 66, 67, 68, 70, 73, 74, 75, 88, 89, 90, 91, 92], "base_qrc": [73, 74], "baseestim": [], "baseestimatorv1": [9, 76], "baseestimatorv2": [9, 76], "baseqnn": [55, 56], "baseqrc": [73, 74], "basesampl": [], "basesamplerv1": [9, 76], "basesamplerv2": [9, 76], "basi": [3, 10, 76, 91], "basic": 90, "basis_g": [], "batch": [9, 55, 56, 58, 72], "batch_siz": [55, 56, 58, 72, 92], "bath": 93, "bayesian": [5, 6, 7, 37, 51], "bayesopt": 4, "becaus": [0, 2, 37, 38, 39, 40, 56, 74], "becom": 0, "bee": 21, "been": [1, 2, 89, 90, 92], "befor": [2, 3, 6, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 37, 55, 56, 58, 72, 89, 91, 92], "begin": [0, 2, 3, 21, 60, 62, 92, 93], "beginn": 6, "behind": 0, "being": [0, 9, 44], "below": [9, 13, 17, 36, 89, 90], "benefici": 92, "benefit": [0, 89], "bernoulli": 3, "best": [1, 4, 9, 17, 37, 38, 40, 56, 74, 89, 93], "best_estim": 1, "best_estimator_": 1, "best_params_": 17, "best_score_": 1, "bet": [], "beta": [57, 92], "beta_1": 49, "beta_2": 49, "beta_i": 2, "better": 1, "between": [0, 4, 6, 10, 19, 24, 34, 62, 64, 88, 89, 90, 92], "beyond": [62, 90], "bfg": [4, 50, 92], "big": 13, "bigg": 34, "bigger": [21, 92], "binari": [36, 46], "bit": 21, "black": 4, "blackbox_funct": 4, "bleed": 6, "block": [3, 12, 16, 37, 92], "block_depth": 16, "block_width": 16, "blue": [4, 92, 93], "blueprintcircuit": 22, "bmatrix": 93, "bo_acq_func": 51, "bo_bound": 51, "bo_n_cal": 51, "bo_n_initial_point": 51, "bo_xi": 51, "boldsymbol": [4, 90], "bool": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 92], "both": [0, 1, 2, 6, 9, 23, 76, 88, 89, 90, 92, 93], "bound": [4, 49, 50, 51, 52, 53, 54, 57], "boundari": [0, 62], "boundary_handl": [3, 56, 62], "box": 4, "bra": [3, 44, 46, 90], "bracket": 17, "braket": [9, 89, 90], "branch": 76, "break_ti": 0, "bridg": [6, 90], "brought": 2, "broughton": [0, 34], "buffer": 9, "build": [2, 3, 6, 7, 11, 21, 87, 88, 89, 91, 92], "build_circuit": 21, "build_circuit_instruct": 87, "build_observable_instruct": 87, "build_pennylane_circuit": 87, "built": [21, 87], "byte": 9, "c": [0, 1, 3, 26, 36, 39, 40, 42, 92, 93], "c_": 93, "c_i": [42, 45], "ca": 89, "cach": [2, 9, 13, 34, 48, 55, 56, 58, 66, 67, 68, 70, 73, 74, 75, 87, 88, 89], "cache_dir": [9, 89], "cache_s": [0, 1], "calcul": [0, 1, 2, 3, 9, 34, 37, 48, 61, 62, 63, 64, 65, 76, 88, 89, 90, 91, 92, 93], "calculate_cov_and_mean": 37, "call": [0, 2, 9, 17, 21, 22, 36, 37, 38, 39, 40, 56, 74, 87, 88, 90, 92, 93], "call_limit": 9, "callabl": [9, 17, 22, 25, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 65, 82, 85, 87, 92], "callback": [49, 50, 51, 52, 53, 54, 55, 56, 58, 89], "calsif": [], "can": [0, 1, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 51, 55, 56, 58, 59, 68, 70, 73, 74, 75, 76, 80, 82, 85, 87, 88, 89, 90, 91, 92, 93], "cancel": 89, "cannot": 4, "capabl": 6, "capac": [], "care": [9, 92], "carefulli": 2, "carl": [31, 37], "carri": 93, "case": [0, 1, 2, 3, 9, 36, 37, 48, 68, 70, 76, 89, 92, 93], "catch_warn": 89, "categori": 0, "caus": 2, "cax": 1, "cbar": 1, "cbar_ax": 1, "cc": 0, "cdf": 4, "cdot": [0, 34, 62, 90, 92, 93], "ceil": 1, "cell": [0, 1, 2, 3, 92], "center": 55, "central": [9, 89, 90], "certain": [23, 93], "cf": [0, 38], "ch": [17, 23], "ch_entangl": 17, "chang": [2, 10, 12, 14, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 73, 74, 89, 91], "channel": [9, 89], "chapter": [31, 38], "charact": 41, "characterist": 92, "charg": 9, "cheaper": 93, "chebyshev": [10, 11, 12, 16, 92], "chebyshev_product": [3, 16], "chebyshev_spars": [3, 16], "chebyshev_tow": [3, 16, 56], "chebyshevpqc": [0, 2, 11, 38, 88, 89, 90, 92, 93], "chebyshevrx": [9, 25, 55, 56, 88, 89, 91], "chebyshevtow": 34, "check": [0, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75, 76, 89], "chi2": 34, "child": [75, 82, 85], "children": [82, 85], "children_list": [82, 85], "choi": 21, "choic": [0, 1, 3, 4, 33, 37, 90, 93], "choleski": [37, 38], "choos": [1, 33, 34, 93], "chose": 0, "chosen": [0, 4, 9, 10, 24, 33, 73, 74, 89, 92, 93], "christoph": [31, 37], "chunk": 1, "chunk_df": 1, "circ": 13, "circuit": [0, 1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 55, 56, 58, 62, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 79, 81, 83, 87, 89, 90, 91, 92, 93, 94], "circuit_argu": 87, "circuit_parameter_dimens": 87, "circuit_parameter_nam": 87, "circuit_tre": 76, "circular": 0, "circumv": 90, "ciruit": 23, "class": [0, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94], "class_weight": 0, "classes_": [36, 39], "classic": [0, 1, 6, 21, 34, 73, 74, 75, 88, 90, 92, 93], "classif": [8, 14, 36, 39, 40, 55, 56, 73, 74, 92], "classifi": [0, 6, 36, 39, 40, 73, 93], "classmethod": [17, 69], "cleaner": 89, "clear": 9, "clear_estimator_cach": 9, "clear_sampler_cach": 9, "clearli": 0, "clf": [0, 55, 73], "climat": 6, "clone_kernel": 36, "close": [1, 2, 9, 10, 11, 15, 18, 26, 88, 89, 92], "close_sess": [2, 9, 89], "closer": [2, 93], "closest": 0, "cloud": [], "cluster": 0, "cmap": 1, "cnot": 19, "co": 62, "code": [0, 10, 11, 12, 14, 15, 16, 18, 19, 23, 24, 26, 89, 92], "coef0": [39, 40], "coef_": 39, "coeff": [2, 42, 48, 91, 92], "coeffici": [3, 37, 38, 40, 56, 74], "collect": [1, 16, 90, 93], "color": [0, 1, 4, 93], "colorbar": 1, "colormap": 1, "column": [1, 14, 36, 39], "com": [6, 7, 37], "combin": [1, 26, 34, 55, 56, 66, 67, 68, 70, 76, 89], "come": 0, "comfort": 89, "command": [6, 7], "common": [4, 92], "commonli": [90, 92], "commun": [0, 34, 90], "commut": 76, "compar": [1, 3], "comparison": 76, "compat": [6, 87, 89], "compil": 89, "complet": 9, "complex": [0, 9, 90, 91, 93], "compon": [9, 88, 89, 92], "compos": 92, "composit": 93, "compound": 36, "comprehens": [6, 88], "compris": [0, 92], "comput": [0, 2, 6, 13, 15, 30, 31, 32, 33, 34, 35, 36, 39, 41, 66, 67, 68, 70, 73, 74, 75, 76, 88, 89, 90, 91, 92, 94], "concaten": [4, 88], "concentr": 90, "concept": 92, "conceptu": 4, "concern": 90, "concurr": 89, "condit": [37, 38, 62], "configur": [21, 89, 92, 93], "conform": 92, "cong": 21, "conjug": 17, "conjunct": 91, "connect": [2, 21, 93], "consecut": [3, 16], "consequ": [88, 89, 90], "consid": [0, 3, 6, 9, 22, 26, 27, 29, 42, 69, 89, 90], "consist": [2, 3, 10, 21, 37, 38, 40, 56, 74, 89, 90, 92], "constant": [37, 38, 40, 49, 56, 74, 92], "constraint": 4, "construct": [3, 17, 43, 88, 90, 91, 92, 93], "constructor": 9, "consult": [], "contain": [0, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 62, 63, 64, 65, 76, 80, 86, 88, 90, 91, 92], "context": [90, 91, 93], "contigu": [], "continu": 0, "contour": 4, "contourf": 93, "contrast": 93, "contribut": 88, "control": [0, 4, 10, 17, 18, 57, 71, 72, 90, 92, 93], "conv": 21, "conveni": 90, "convent": [0, 90, 93], "converg": 4, "convert": [69, 87], "convolut": 21, "coolwarm": 1, "copi": [1, 9, 36, 76, 79, 80, 81, 82, 83, 84, 85, 86, 89], "core": [0, 6], "correct": [0, 2, 62], "correctli": [0, 3, 36, 39, 55, 73], "correspond": [0, 3, 10, 11, 21, 36, 39, 62, 89, 90], "cosin": 34, "cost": [2, 3, 9, 58, 68, 70, 92], "cost_funct": 9, "costli": 2, "costoper": 92, "count": [62, 64, 91], "counter": [50, 52, 53], "counterpart": [1, 90], "coupl": [0, 3], "coupling_map": [], "covari": 37, "cover": 2, "cp": 17, "cp_entangl": 17, "creat": [0, 1, 3, 4, 9, 15, 17, 22, 24, 26, 34, 39, 42, 66, 69, 70, 77, 78, 89, 93], "create_sess": [9, 89], "creation": [17, 88, 89, 91], "credenti": [9, 89], "cross": [1, 39], "crosstalk": 89, "crucial": [88, 89, 91], "crx": [17, 23, 24], "crx_entangl": 17, "cry": [17, 23, 24], "cry_entangl": 17, "crz": [10, 17, 23, 24, 88], "crz_entangl": 17, "csr_matrix": [], "cu": 17, "cu_entangl": 17, "cube": 91, "cumul": 4, "curli": 17, "current": [4, 6, 9, 21, 49, 51, 55, 56, 58, 70, 73, 74, 75, 89, 90, 91], "custom": [2, 4, 34, 41], "customis": 4, "customiz": 6, "customobserv": [34, 91], "cv": 17, "cv_results_": 1, "cx": [14, 17, 22, 23, 24, 26, 76, 88], "cx_entangl": [17, 88], "cxamplifi": [], "cy": [17, 23, 24, 76], "cy_entangl": 17, "cycl": 14, "cycling_typ": 14, "cz": [17, 23, 24, 76], "cz_entangl": 17, "d": [3, 4, 6, 10, 21, 34, 42, 48, 57, 60, 89, 92, 93], "d_": [3, 42], "dagger": 93, "data": [2, 3, 4, 6, 14, 15, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 55, 56, 58, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 88, 90, 92, 93], "datafram": 1, "dataset": [0, 2, 17, 26, 36, 39, 55, 73, 93], "datastructur": 89, "david": [], "dd": 2, "ddot": 62, "de": 6, "deal": 90, "decai": [3, 49, 59, 60, 92], "decis": [0, 39], "decision_funct": 39, "decision_function_shap": [0, 39], "decompos": [9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28], "decomposit": [37, 38], "dedic": 92, "deep": [0, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 66, 67, 68, 70, 73, 74, 75, 93], "def": [1, 4, 17], "default": [2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 55, 56, 57, 58, 59, 60, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 85, 89, 90, 93], "default_callback": [49, 50, 51, 52, 53], "default_circuit": 21, "default_encoding_weight": 23, "default_gate_weight": 23, "defaultqubit": [9, 89], "defin": [0, 1, 3, 4, 14, 16, 17, 21, 23, 31, 32, 33, 35, 37, 38, 40, 41, 56, 69, 70, 74, 90, 92], "definit": [1, 17, 31, 32, 41, 42, 43, 44, 45, 46, 47, 90, 91], "degrad": 6, "degre": [10, 39, 40, 89, 92], "delai": 2, "delta": 13, "demand": 4, "demonstr": [0, 1, 2, 89, 92], "denot": [92, 93], "dens": [], "densiti": 90, "depend": [3, 4, 6, 9, 22, 33, 37, 38, 62, 75, 92], "depict": [0, 92], "depolar": [33, 90], "deprec": 89, "depth": [16, 76, 90, 92], "deriv": [3, 13, 34, 48, 62, 66, 67, 68, 69, 70, 76, 88], "descent": 72, "describ": [0, 3, 69, 90, 92], "design": [3, 6, 20, 21, 73, 74, 88, 90, 92], "desir": [92, 93], "detail": [2, 9, 39, 57, 60, 88, 89, 93], "detect": 76, "detect_dupl": 76, "detect_expectation_dupl": 76, "deteremin": 93, "determin": [9, 13, 14, 17, 22, 29, 37, 38, 40, 48, 55, 56, 57, 70, 74, 88, 89, 93], "dev": [7, 9, 89], "develop": 6, "deviat": [1, 37, 57, 92], "devic": [5, 6, 9, 87, 89], "device_arn": [9, 89], "df": [3, 62], "dfdx": 62, "diagon": 90, "dict": [10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 87, 92], "dictionari": [10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 55, 56, 58, 66, 67, 68, 70, 73, 74, 75, 76, 87, 89], "dictionaries_combin": 76, "dictionary_circuit": 76, "dictionary_oper": 76, "did": [1, 2], "diferenti": 62, "diff_tupl": 70, "differ": [0, 1, 2, 4, 9, 17, 21, 23, 33, 34, 39, 41, 42, 43, 44, 45, 46, 47, 49, 51, 89, 90], "differenti": [5, 6, 13, 16, 48, 56, 62, 69, 70, 76, 88], "differentiate_v2": 76, "digit": [5, 6], "dill": 7, "dim": 4, "dimens": [0, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 23, 24, 26, 28, 51, 68, 70, 87, 88, 93], "dimension": [10, 11, 12, 14, 15, 16, 18, 19, 23, 24, 26, 90, 93], "diminish": [], "dirac": 3, "direct": [0, 14], "directevalu": 68, "directli": [0, 2, 6], "directori": 9, "disabl": [1, 2, 89], "disadvantag": 0, "discret": 93, "discuss": [2, 6, 90], "displai": [0, 2, 6, 69], "dispos": 92, "disregard": [37, 38, 40, 56, 74], "distanc": [0, 34, 39, 90], "distinct": [], "distribut": [2, 3, 4, 23, 37], "divid": [4, 9, 39], "divis": 49, "divisor": 16, "dkdx": 34, "dkdxdx": 34, "dkdy": 34, "do": [0, 21, 39, 40, 89, 92, 93], "doc": 7, "document": [1, 2, 7, 39, 40, 88, 90, 92, 93], "doe": [9, 21, 89, 93], "doi": [0, 6, 27, 29, 88], "domain": [3, 4, 92], "done": [34, 90, 93], "dop": [48, 69, 91], "dopdop": [48, 69], "dot": 62, "dotproduct": 90, "doubl": 76, "down": [14, 34], "dp": [13, 48, 88], "dp0": 13, "dpdp": 13, "dpdxdx": 13, "draw": [0, 1, 2, 3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 87, 88, 92, 93], "drawback": [0, 89], "drawn": 23, "dt": 62, "dtype": 9, "dual": 6, "dual_coeff_": 38, "due": [2, 4, 89, 90, 92, 93], "duplic": [33, 76, 89], "dure": [1, 2, 10, 76, 91, 92], "dx": [3, 13, 62], "dxdp": 13, "dxdx": 13, "dxfx": 62, "dy": [3, 62], "dydt": [56, 62], "dydx": 3, "dynam": [89, 93], "dynamical_decoupl": [2, 89], "e": [0, 3, 4, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 60, 68, 70, 71, 72, 73, 74, 89, 90, 93], "each": [0, 1, 2, 4, 9, 16, 21, 36, 37, 38, 39, 40, 45, 51, 55, 56, 58, 62, 64, 68, 70, 71, 72, 73, 74, 76, 82, 85, 87, 88, 89, 90, 91, 92], "earli": 92, "earlier": [], "easi": 92, "easier": [0, 1, 2], "easili": [0, 4], "ec": 4, "ecologi": 3, "econom": 6, "ecr": 76, "edg": 6, "edgecolor": 93, "educ": 6, "effect": [0, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 90], "effici": [3, 6, 10, 15, 16, 18, 89], "effortlessli": 88, "ei": [4, 51], "eigenvalu": [27, 29], "either": [0, 9, 10, 11, 12, 13, 14, 16, 17, 24, 34, 36, 37, 38, 39, 40, 48, 55, 56, 58, 63, 87, 88, 90, 92, 93], "el3": 6, "elabor": 6, "element": [0, 3, 10, 13, 21, 62, 76, 88], "elfv": 3, "elimin": [], "els": [2, 55, 56], "emb": [34, 88], "embed": [0, 15, 32, 33, 34, 90, 92], "emphasi": [39, 40], "emploi": [2, 88, 91, 92], "empti": [9, 30], "emul": [], "en": 38, "enabl": [2, 6, 37, 88, 89, 90, 92, 93], "enable_metadata_rout": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74], "enc_circ": [4, 36, 37, 38, 90], "encapsul": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75], "enclos": 0, "encod": [0, 1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 55, 56, 58, 68, 70, 71, 72, 73, 74, 75, 89, 90, 91, 92, 93, 94], "encoding_circuit": [0, 1, 2, 3, 4, 9, 33, 34, 35, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75, 88, 89, 90, 91, 92, 93], "encoding_circuit_deriv": 13, "encoding_circuit_param": 1, "encoding_circuit_str": 17, "encoding_styl": [3, 16, 56], "encoding_weight": 23, "encodingcircuit": [20, 92, 93], "encodingcircuitbas": [9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 33, 34, 35, 55, 56, 58, 66, 67, 68, 70, 73, 74, 75], "end": [3, 6, 10, 15, 18, 21, 62, 89, 93], "end_idx": 1, "endow": 90, "enforc": [23, 24, 62], "engin": [6, 87], "enhanc": [2, 33, 89], "enrich": 90, "ensur": [1, 2, 9, 88], "ent_strategi": 17, "entail": [], "entangl": [0, 3, 10, 11, 14, 15, 16, 17, 18, 19, 21, 88, 90, 92], "entangling_g": [10, 14], "enter": 21, "entri": [66, 67, 68, 70], "enviro": 93, "environ": [0, 1, 2, 9, 89], "environment": 2, "ep": [49, 51], "epoch": [55, 56, 58, 72, 92], "epsilon": [1, 40], "eq": [3, 16, 56, 62], "equal": [1, 21, 42, 45, 46, 63, 88, 89], "equat": [5, 6, 16, 31, 32, 42, 43, 44, 45, 46, 62], "equival": 89, "era": 90, "error": [4, 5, 6, 14, 21, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 89, 92, 93], "errstat": 4, "especi": 4, "essenti": [2, 88, 89, 92], "establish": [0, 92], "estiamtor": 9, "estim": [1, 2, 9, 36, 37, 38, 39, 40, 49, 55, 56, 58, 70, 73, 74, 76, 77, 89, 90], "estimat": 1, "estimator__c": 1, "estimator__epsilon": 1, "estimator__num_lay": 1, "estimator__num_qubit": 1, "estimator_list": 1, "estimator_nam": 1, "estimator_opt": [2, 9, 89], "estimator_param": 1, "estimator_run": 9, "estimator_run_v1": [9, 89], "estimator_run_v2": [9, 89], "estimatorpub": 9, "estimatorpublik": 9, "estimatorv1": 9, "estimatorv2": 2, "et": [0, 14, 15, 16, 32, 33, 34, 62, 90, 93], "eta": [3, 62], "etc": [68, 70, 89], "euclidean": 34, "eval_gradi": 36, "evalu": [0, 1, 4, 9, 13, 27, 33, 34, 35, 36, 38, 39, 48, 49, 57, 66, 67, 68, 70, 73, 74, 75, 76, 86, 88, 89, 92, 93], "evaluate_deriv": 34, "evaluate_dfdop": 70, "evaluate_dfdopdx": 70, "evaluate_dfdp": 70, "evaluate_dfdpdx": 70, "evaluate_dfdx": 70, "evaluate_dfdxdx": 70, "evaluate_diff_tupl": 70, "evaluate_dupl": 33, "evaluate_f": 70, "evaluate_from_str": 70, "evaluate_laplac": 70, "evaluate_laplace_dop": 70, "evaluate_laplace_dp": 70, "evaluate_pairwis": [33, 34, 35], "evaluate_prob": 70, "evaluate_qnn": 34, "evaluate_tree_with_estim": 76, "evaluate_tree_with_sampl": 76, "evaluate_var": 70, "evaluate_vari": 70, "evaluate_with_estim": 76, "evaluate_with_paramet": [33, 34, 35], "evaluate_with_sampl": 76, "evan": 14, "even": 9, "evenli": 23, "eventu": 90, "ever": 90, "everi": [0, 1, 21, 23, 34], "everyth": [1, 9], "evolut": [56, 93], "evolv": 93, "exact": [3, 9, 39, 89], "exactli": [4, 21, 89], "examin": [], "exampl": [0, 2, 3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 62, 66, 67, 68, 70, 73, 74, 88, 89, 90, 91, 92, 93], "exce": 21, "except": [9, 37, 38, 40, 56, 74, 89, 90], "exchang": 4, "exclus": 90, "exec": [9, 93], "execus": 9, "execut": [1, 2, 6, 9, 70, 89], "executor": [0, 1, 2, 3, 4, 6, 17, 27, 33, 34, 35, 36, 37, 38, 39, 40, 55, 56, 57, 58, 66, 67, 68, 70, 73, 74, 75, 87, 88, 90, 92, 93, 94], "executor_backend": [], "executor_dd_trex": 2, "executor_no_mitig": 2, "executor_sampl": 2, "executor_zn": 2, "executorestim": 89, "executorsampl": 89, "exist": [4, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 88, 89], "exp": [0, 3, 34, 56, 60, 90, 93], "expec": [70, 93], "expect": [2, 4, 6, 9, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 58, 68, 69, 70, 73, 74, 75, 76, 81, 83, 89, 90, 92, 93, 94], "expectation_tre": 76, "expected_improv": 4, "expedit": 89, "expens": 4, "experi": [2, 6], "experiment": 6, "explain": 92, "explicitli": [0, 3, 89, 90, 92], "exploit": [4, 51, 90], "explor": [2, 4, 51, 92], "exponenti": [0, 90, 92, 93], "expr": 62, "express": [13, 41, 42, 43, 44, 45, 46, 47, 62, 70, 87, 90], "expsinesquar": 90, "extend": [36, 92], "extinct": 2, "extra": 62, "extract": 1, "extrapol": 89, "extrem": 93, "f": [0, 1, 2, 3, 4, 6, 37, 39, 40, 42, 62, 64, 90, 92, 93], "f_": [3, 62], "f_0": 62, "f_b": 62, "f_j": 62, "f_ref": [62, 64], "facilit": [88, 89], "fact": 90, "factor": [12, 55, 56, 58, 60, 82, 85], "factor_list": [82, 85], "factori": 66, "fail": [9, 89], "fake": [2, 88, 89], "fake_manila": 89, "fake_provid": [2, 25, 88, 89, 91], "fakeathensv2": 89, "fakebelemv2": [2, 89], "fakemanilav2": [25, 88, 89, 91], "fall": 0, "fals": [0, 1, 2, 4, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 55, 56, 58, 72, 73, 74, 76, 88, 89], "famili": [3, 90], "famou": 90, "far": 0, "fashion": 88, "fast": 90, "faster": [13, 48], "favour": 4, "fc": [4, 21], "featur": [0, 1, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 36, 37, 38, 39, 40, 56, 66, 67, 68, 70, 73, 74, 88, 90, 91, 92, 93], "feature_dimens": 22, "feature_label": [10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28], "feature_prob": 24, "feature_rang": 93, "feature_str": 17, "feature_vector": 13, "feder": 6, "feel": [6, 88], "fermi": 3, "few": 0, "fidel": [1, 4, 15, 18, 33, 34, 35, 36, 37, 38, 39, 40], "fidelity_kernel": 1, "fidelitykernel": [1, 4, 9, 34, 36, 37, 89], "field": [3, 9], "fig": [0, 1, 3, 4], "figsiz": 1, "figur": [0, 1, 16, 17, 20, 22, 25, 87, 88, 89, 90, 92, 93], "figure_qnn": 92, "file": [9, 49, 51, 89], "fill": [4, 14], "fill_between": 4, "final": [0, 3, 59, 92], "final_encod": [15, 18], "final_num_qubit": 21, "find": [0, 2, 3, 4, 90], "fine": 2, "finial": 2, "finish": 21, "finit": [9, 10, 49, 51, 57, 60, 92], "first": [2, 5, 6, 10, 11, 13, 14, 15, 18, 25, 34, 41, 48, 49, 62, 76, 88, 91, 93], "firstli": [], "fischer": [29, 89], "fisher": [27, 29, 88, 89], "fit": [0, 1, 2, 3, 4, 9, 17, 21, 33, 34, 36, 37, 38, 39, 40, 49, 51, 55, 56, 58, 73, 74, 75, 89, 90, 92, 93], "fit_transform": [0, 55, 93], "fix": [0, 3, 24, 33, 34, 35, 89, 93], "flag": [61, 62, 63, 64, 65, 76], "flat": [10, 11], "flatten": [1, 10, 11], "flexibl": 3, "float": [9, 10, 11, 12, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 73, 74, 76, 82, 85, 86, 92], "float64": [], "fm": [13, 20, 25, 34, 88, 91], "fm1": 88, "fm2": 88, "fm3": 88, "fm_deriv": [13, 88], "fmt": 1, "focu": 92, "focus": 6, "folder": [6, 89], "follow": [0, 2, 3, 6, 7, 9, 16, 17, 18, 62, 88, 89, 90, 91, 92, 93], "follw": 4, "folow": 89, "foral": 42, "forc": [39, 40], "foremost": 93, "form": [0, 1, 3, 4, 10, 19, 48, 76, 90, 92], "formal": [3, 90], "format": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 48, 49, 50, 51, 52, 53, 54, 58, 68, 70, 76, 88], "formul": 90, "forthcom": [], "found": [6, 9, 76, 88, 89, 92], "four": [0, 9, 43, 89], "fqk": [33, 36, 37, 38, 39, 40], "fqk_instanc": 90, "frac": [0, 3, 13, 31, 32, 34, 37, 38, 40, 48, 56, 57, 60, 62, 64, 74, 92], "framework": [2, 6, 9, 66, 73, 74, 89, 90], "fraunhof": 6, "free": [4, 6, 24, 88, 92], "freedom": 92, "freeli": 92, "fresh": [], "friendli": [6, 88], "from": [0, 1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 58, 69, 70, 73, 74, 75, 76, 82, 85, 87, 88, 89, 90, 91, 92, 93], "from_backend": [], "from_paramet": 69, "from_parameter_vector": 69, "from_str": [17, 69, 88], "from_tupl": 69, "from_vari": 69, "fulfil": 90, "full": [37, 42, 89], "full_regular": [1, 37], "full_sum": [45, 46], "fulli": [21, 88, 89], "fully_connect": 21, "fun": [4, 49, 50, 51, 52, 53, 54], "func": 17, "func_val": 4, "function": [0, 2, 3, 4, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "fundament": [90, 93], "further": [3, 21, 39, 92], "furthermor": [0, 17, 88, 91, 92], "futur": [88, 89], "fx": 4, "fx_i": 4, "g": [4, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 60, 68, 70, 71, 72, 73, 74, 89, 90], "gamma": [0, 34, 38, 39, 40, 90], "gao": 93, "gap": 6, "gate": [0, 2, 3, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 76, 87, 88, 92], "gate_weight": 23, "gather": [2, 4], "gaussian": [0, 1, 5, 6, 31, 36, 37, 38, 90], "gaussian_process": 36, "gaussianprocessclassifi": 36, "gen_expectation_tre": 76, "gener": [2, 3, 6, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 66, 67, 68, 70, 73, 74, 75, 76, 87, 88, 90, 92, 93], "generate_i": 1, "generate_initial_paramet": [3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 41, 42, 43, 44, 45, 46, 47, 56], "geometri": 90, "german": 6, "get": [1, 4, 9, 36, 37, 38, 39, 40, 55, 56, 58, 66, 67, 72, 73, 74, 75, 91, 92, 93], "get_backend": [9, 89], "get_cheb_indic": [10, 11], "get_circuit": [10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28], "get_deriv": [88, 91], "get_estim": [9, 89], "get_first_leaf": 76, "get_lr_decai": [3, 56, 92], "get_metadata_rout": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75], "get_num_nested_list": 76, "get_number_of_leaf": 76, "get_oper": [41, 42, 43, 44, 45, 46, 47, 48], "get_operator_squar": [48, 91], "get_optree_from_expec": 70, "get_optree_from_str": 70, "get_param": [10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 66, 67, 68, 70, 73, 74, 75], "get_pauli": [41, 42, 43, 44, 45, 46, 47], "get_pauli_map": [41, 42, 43, 44, 45, 46, 47], "get_pennylane_circuit": 87, "get_sampl": [9, 89], "get_shot": [9, 70], "get_tree_depth": 76, "get_variance_fac": 92, "getter": [9, 70], "git": [6, 7], "github": [0, 1, 6, 7], "give": 90, "given": [3, 4, 9, 14, 17, 24, 31, 32, 34, 36, 37, 38, 39, 40, 49, 50, 51, 52, 53, 54, 55, 56, 58, 62, 66, 67, 68, 70, 71, 73, 74, 75, 76, 83, 90, 92], "global": 4, "gmail": 6, "go": [0, 1, 93], "goe": 14, "good": [1, 88], "gp": [36, 37, 90], "gpr": 4, "grad": [13, 49, 50, 51, 52, 53, 54], "grad_from_list": 88, "grad_from_str": 88, "grad_from_tupl": 88, "gradient": [13, 36, 49, 50, 51, 52, 53, 54, 57, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 76, 88, 89, 91], "gram": 37, "grant": [6, 90], "graph": 89, "graphic": 93, "green": 93, "grid": 4, "grid_search": [1, 17], "gridsearch": 23, "gridsearchcv": [1, 17], "gridsearchcvifittedgridsearchcv": 1, "ground": [1, 71, 72], "ground_truth": [62, 64, 71, 72], "group": [6, 17, 76, 89, 91], "growth": 3, "gt": [0, 1, 3], "guess": [49, 50, 51, 52, 53, 54], "guid": [6, 9, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75, 90, 92], "guidanc": 2, "guidelin": [6, 90, 93], "h": [13, 17, 23, 24, 42, 43, 44, 45, 46, 76, 88, 90], "h2giga": 6, "ha": [0, 1, 2, 3, 9, 27, 28, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 61, 62, 63, 64, 65, 71, 72, 73, 74, 87, 90, 92], "hadamard": 12, "hadamard_start": 12, "hagel\u00fcken": 6, "hamiltonian": [42, 48, 91], "handl": [0, 6, 9, 62, 87, 89], "handwritten": [5, 6], "happen": 4, "hardwar": [0, 2, 3, 10, 15, 16, 18, 89, 92], "harsh": [36, 39, 55, 73], "hash": [76, 87, 89], "hash_circuit": 76, "hash_oper": 76, "hashabl": 87, "hat": [2, 3, 14, 34, 42, 43, 44, 45, 46, 48, 91, 92], "haug": 26, "have": [0, 1, 2, 17, 21, 23, 39, 76, 88, 89, 90, 92, 93], "havlicek": 33, "hea": [3, 16, 56], "heat": 1, "heat_map_data": 1, "heatmap": 1, "help": 0, "helper": 0, "henc": 89, "here": [0, 1, 2, 3, 4, 21, 39, 40, 89, 92, 93], "hessian": [13, 88, 91], "hhl": 90, "hid": 93, "hidden": [0, 93], "high": [0, 4, 6, 9, 14, 89], "highdim": 14, "higher": [39, 40, 66, 67, 68, 70, 88, 91, 92], "highlight": [0, 1], "highlight_row": 0, "hilbert": [0, 33, 34, 90, 93], "hint": 0, "hire": [10, 11, 12, 14, 15, 16, 18, 19, 23, 24, 26, 92], "hold": [1, 69, 90], "homogen": 62, "hood": [2, 3], "horizont": 16, "hour": 3, "how": [0, 1, 2, 4, 14, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75, 89, 90, 92, 93], "howev": [0, 2, 88, 89, 92], "hqaa": 9, "html": [0, 1], "http": [0, 6, 7, 27, 29, 37, 38, 88], "huang": [0, 34, 90], "hub": 89, "hubregtsen": [15, 20, 32, 33, 34, 88, 90], "hubregtsenencodingcircuit": [4, 13, 20, 36, 37, 39, 40, 73, 74, 88, 93], "hy": [0, 34], "hybrid": 92, "hyper": [10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 68, 70, 73, 74, 75, 92], "hyperparamet": [4, 5, 6, 17, 31, 34, 36, 37, 38], "hyperplan": [0, 39], "hz": 18, "i": [0, 1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 60, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 76, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "ibm": [5, 6, 7, 9], "ibm_brisban": [9, 89], "ibm_kyoto": [], "ibm_nairobi": [], "ibm_quantum": [9, 89], "ibm_strasbourg": 2, "ibmprovid": 89, "ibmq_qasm_simul": 89, "ibmquantum": 9, "idea": [0, 21, 90], "ideal": [2, 3, 9, 90], "ident": [13, 42, 45, 46, 48, 76], "identifi": [17, 24, 76, 89], "idl": 2, "ignor": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 89], "ii": [2, 42, 91], "iii": [48, 91], "iiib": 16, "iiii": [3, 92], "iiiii": 91, "iiiiz": 91, "iiiz": [3, 92], "iiizi": 91, "iiz": [48, 91], "iizi": [3, 92], "ij": [0, 13, 42], "illustr": [90, 92], "iloc": 1, "imag": 0, "immedi": 90, "imp": 4, "impact": 1, "imperfect": 2, "implement": [0, 2, 3, 4, 16, 17, 29, 33, 37, 38, 42, 44, 46, 48, 49, 50, 51, 52, 53, 55, 56, 61, 62, 63, 68, 70, 73, 74, 75, 76, 89, 90, 92, 93], "impli": 89, "implicitli": 90, "import": [4, 9, 13, 17, 20, 22, 25, 34, 36, 37, 38, 39, 40, 42, 48, 55, 56, 73, 74, 88, 89, 90, 91, 92, 93], "impos": 4, "improv": [0, 4, 36, 37, 38], "includ": [0, 1, 2, 3, 6, 9, 24, 45, 46, 55, 56, 58, 66, 67, 68, 70, 73, 74, 75, 89], "include_ident": [3, 45, 46, 56], "increas": [2, 50, 52, 53, 89, 90, 92], "incur": 2, "independ": [3, 62, 90], "index": [1, 12, 14, 41, 76, 82, 85], "indic": [0, 4, 10, 11, 14, 20, 29, 82, 85, 88, 89], "individu": [1, 36, 88], "industri": 4, "inf": 4, "infer": [2, 92, 93], "infinit": 90, "influenc": [37, 38, 40, 56, 74, 92], "inform": [0, 3, 4, 9, 14, 27, 29, 36, 37, 38, 39, 40, 48, 55, 56, 58, 73, 74, 75, 76, 88, 89, 90, 92, 93], "infrastructur": [], "ingo": 89, "ingredi": 92, "inher": [2, 90], "inherit": 36, "init": 0, "initi": [1, 2, 3, 4, 9, 10, 11, 21, 33, 34, 35, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 70, 71, 72, 73, 74, 75, 87, 90, 91, 92, 93], "initial_layout": [25, 88, 91], "initial_paramet": [0, 33, 34, 35, 38, 39, 40], "initial_valu": [3, 56, 62], "inlier": 40, "inner": 90, "inplac": 76, "input": [0, 2, 4, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 88, 89, 91, 92, 93], "input_expec": 70, "input_list": 21, "input_str": 70, "input_valu": [71, 72], "insert_barri": [22, 88], "insert_your_token_her": [9, 89], "insid": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74], "inspect": 2, "inspir": [21, 88, 90], "instal": [9, 89], "instanc": [1, 2, 36, 37, 38, 39, 40, 55, 56, 57, 58, 71, 72, 73, 74, 75, 77, 78, 89, 90, 92], "instead": [0, 36, 37, 38, 39, 40, 45, 46, 55, 56, 58, 73, 74, 89], "institut": 6, "instruct": [76, 87, 88, 89, 93], "int": [1, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 55, 56, 57, 58, 59, 60, 63, 65, 68, 70, 72, 73, 74, 75, 76, 82, 85, 87, 89, 92], "integr": [1, 6, 9], "intens": [], "interact": 93, "interchang": 3, "interconnect": 92, "interfac": [3, 6, 55, 56, 89], "intern": [88, 89], "interpret": 90, "interv": 0, "intrest": 4, "intric": 92, "intrigu": 0, "introduc": [2, 3, 16, 17, 89, 90, 92], "introduct": 9, "intuit": [1, 4], "invers": 93, "involv": [2, 10, 11, 62, 88, 92], "ipa": 6, "is_statevector": 9, "isinghamiltonian": [48, 56, 91], "isinst": 2, "issu": 2, "iswap": 14, "item": 80, "iter": [4, 9, 14, 49, 50, 51, 52, 53, 59, 60, 63, 65, 89, 92], "iter_decai": 59, "iter_plateau": 59, "its": [0, 1, 3, 4, 9, 13, 21, 22, 34, 36, 37, 49, 51, 68, 69, 70, 82, 85, 88, 92], "itself": [], "ix": [42, 91], "iz": [2, 91], "izi": [48, 91], "izii": [3, 92], "izz": [48, 91], "j": [6, 32, 42, 48, 62, 90, 91, 93], "jerbi": 90, "job": [9, 89], "jobv1": 9, "joint": 37, "jupyt": [0, 1, 9, 89], "just": [37, 89, 93], "k": [0, 4, 31, 33, 34, 37, 90, 93], "k_": [0, 31, 32, 34], "k_test": 37, "k_testtrain": [37, 38], "k_train": [37, 38], "keep": [2, 23, 37, 38, 40, 56, 74, 93], "kei": [66, 67, 68, 70, 76, 88, 90, 93], "kept": 76, "kernel": [4, 5, 6, 9, 15, 17, 18, 56, 73, 74, 75, 88, 89, 91, 93, 94], "kernel_": 36, "kernel_matrix": 34, "kernel_optim": 90, "kernellossbas": [], "kernelmatrixbas": [30, 31, 32, 36, 37, 38, 39, 40], "kerneloptim": 90, "kernmatrixbas": 35, "ket": [0, 3, 44, 46, 90, 93], "kevin": 38, "keyword": [9, 34, 36, 37, 38, 57, 66, 89, 92, 93], "killoran": 90, "kim": 26, "kind": [0, 42, 45, 80], "know": 4, "known": [0, 2, 3, 4, 73, 74, 90], "kreplin": [6, 10, 57, 60, 92], "krr": 38, "kta": 90, "kta_loss": 90, "kta_optim": [], "kwarg": [9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 34, 36, 37, 38, 39, 40, 49, 51, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 87], "kyriienko": [3, 16, 62], "kyriienkoencodingcircuit": [3, 56], "l": [3, 4, 31, 34, 50, 57, 62, 63, 92], "l1": 63, "l2": [2, 63], "l_": [62, 63, 65, 92], "l_2": 0, "label": [0, 1, 2, 3, 4, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 36, 38, 39, 55, 56, 58, 69, 71, 72, 73, 74, 75, 93], "label_train": 37, "labl": [39, 40], "lambda": 4, "langl": [0, 3, 33, 92, 93], "laplac": 13, "laplace_dp": 13, "laplacian": [13, 34, 70], "larg": [0, 23, 26], "larger": [1, 37, 38, 41, 42, 43, 44, 45, 46, 47, 89], "last": [2, 3, 10, 11, 14, 15, 18, 41, 93], "lastli": [0, 2], "later": [9, 92, 93], "latest": 7, "latter": [10, 36], "layer": [0, 1, 2, 3, 4, 6, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 24, 26, 36, 37, 38, 39, 40, 73, 74, 88, 92, 93], "layer_typ": 14, "layered_encoding_circuit": [17, 88], "layout": [4, 89], "lb": 4, "lbfgsb": 92, "lbrace": [90, 93], "ldot": [13, 93], "lead": [0, 90], "leaf": [76, 79, 80, 81, 83, 84, 86], "learn": [0, 1, 2, 3, 4, 6, 7, 14, 26, 31, 33, 34, 36, 37, 38, 39, 40, 49, 55, 56, 59, 73, 74, 75, 88, 89, 90, 93], "learning_r": 0, "least": [6, 21, 23, 24], "least_busi": 2, "leav": 0, "lec": 17, "left": [0, 3, 14, 21, 34, 62, 63, 64, 90, 91], "legend": [1, 2, 3, 4, 93], "len": [1, 3, 4], "length": [21, 59, 60, 62], "length_scal": 34, "lengthi": [], "less": [21, 92], "let": 0, "lett": [33, 90], "letter": 91, "level": [2, 6, 9, 34, 66, 67, 68, 70, 89], "leverag": [0, 88, 89, 93], "librari": [6, 19, 22, 88], "licens": 0, "lightin": 9, "lightn": 9, "like": [1, 3, 6, 9, 23, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 87, 89, 92, 93], "likelihood": [31, 36, 90], "limit": [0, 2, 9, 27, 93], "lincombqgt": 89, "line": [0, 90], "line2d": 0, "linear": [0, 2, 10, 17, 22, 33, 34, 37, 38, 73, 74, 75, 88, 89, 90, 91, 93], "linewidth": 3, "link": 37, "linspac": [1, 3, 4, 40, 93], "list": [9, 10, 11, 13, 17, 20, 21, 29, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 55, 56, 58, 62, 63, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 82, 85, 87, 88, 89, 90, 91, 92, 93], "literatur": 90, "ll": [1, 2], "load": [0, 1], "load_digit": 0, "load_iri": 36, "local": [2, 22, 88, 89, 90, 93], "locat": [0, 4, 92], "log": [2, 3, 9, 31, 36, 39, 49, 51, 56, 74, 89, 90], "log_fil": [2, 9, 49, 51, 89], "log_likelihood": 36, "log_likelihood_gradi": 36, "log_marginal_likelihood": 36, "logarithm": [74, 92], "logist": 3, "long": 89, "longer": 2, "loop": [1, 55, 56, 58, 90], "loss": [2, 3, 55, 56, 57, 58, 71, 72, 89, 90, 92], "loss_od": [3, 56, 62], "lossbas": [55, 56, 58, 71, 72], "lot": 92, "low": [2, 6, 9, 14, 34, 66, 67, 68, 70, 89, 92], "lower": [27, 29, 51], "lowlevelqnnbas": [66, 71, 72], "lr": [2, 3, 49, 56, 90, 92], "lr_end": 59, "lr_start": 59, "lt": [0, 1, 2, 3], "lukin": 21, "lvert": [0, 92], "m": [0, 3, 4, 6, 10, 21, 26, 34, 37, 57, 60, 89, 90, 92, 93], "m_": 93, "machin": [1, 3, 6, 7, 14, 26, 31, 33, 34, 37, 38, 73, 74, 75, 88, 89, 90, 93], "machineri": 4, "made": [4, 22], "mai": [36, 37, 38, 40, 56, 74, 89, 91, 92, 93], "main": 92, "maintain": 6, "make": [0, 1, 2, 15, 18, 38, 89], "make_blob": 55, "make_moon": [39, 73, 93], "make_regress": 17, "manag": [2, 89], "mandatori": [9, 91], "mani": [3, 88, 92], "manifold": 0, "manila": 89, "manipul": [3, 10, 88, 92], "manner": [88, 92], "manual": [2, 89, 93], "manufactur": 6, "map": [0, 1, 9, 10, 11, 12, 17, 19, 21, 22, 41, 42, 43, 44, 45, 46, 47, 89, 90, 92], "mapomat": [7, 9, 89], "mapsto": 0, "marco": [], "margin": 36, "mark": [0, 90], "marker": [4, 93], "maschin": 93, "master": 7, "match": [62, 88], "matern": 90, "mathcal": [3, 62], "mathemat": 90, "mathrm": [0, 3, 4, 90, 93], "matplotlib": [0, 1, 2, 3, 4, 56, 87, 93], "matric": [2, 27, 34, 37, 38, 39, 40, 90, 91, 92], "matrix": [0, 1, 4, 27, 29, 30, 31, 32, 36, 37, 38, 39, 40, 55, 56, 58, 74, 88, 90, 92], "max": [1, 2, 4], "max_diff": 87, "max_gat": 23, "max_it": [0, 1], "max_jobs_retri": [9, 89], "max_num_lay": 24, "max_num_qubit": 9, "max_session_tim": 9, "max_shot": [57, 92], "maxim": [0, 57, 89], "maximum": [9, 10, 11, 23, 24, 49, 51, 88, 89, 92], "maxit": [2, 3, 4, 49, 51, 56, 89, 90, 92], "maxiter_tot": [49, 51], "mean": [1, 4, 36, 37, 38, 39, 40, 55, 56, 73, 74, 92, 93], "mean_squared_error": 93, "mean_test_scor": 1, "meaning": 33, "meaningless": 39, "measument": 34, "measur": [0, 2, 3, 9, 21, 26, 34, 38, 41, 43, 44, 45, 46, 66, 67, 73, 74, 75, 76, 83, 87, 89, 90, 92, 93], "measure_circuit": 83, "measure_mitig": 2, "measure_noise_learn": 2, "mechan": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75, 90], "memori": 9, "mention": [89, 90, 93], "mere": 90, "merg": 76, "meshgrid": 93, "meta": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74], "metadata": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75], "metadata_rout": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74], "metadatarequest": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75], "method": [1, 2, 3, 4, 6, 17, 22, 29, 33, 35, 58, 62, 88, 89, 94], "metric": [0, 34, 36, 39, 55, 73, 90, 93], "might": [4, 89], "mimiz": 4, "min": [1, 2, 3, 4, 89], "min_": [4, 92], "min_gat": 23, "min_num_lay": 24, "min_num_qubit": 9, "min_obj": 4, "min_shot": [57, 92], "min_val": 4, "min_x": 4, "mini": [55, 56, 72], "minim": [4, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 71, 72, 90, 92], "minimum": [4, 9, 23, 24, 92], "ministri": 6, "minmaxscal": [0, 55, 93], "mislead": 92, "mit": [31, 37, 38], "mit_depol_nois": [33, 90], "mitig": [5, 6, 33, 89, 90, 92], "mix": 13, "ml": [0, 1, 4, 34, 55, 56], "ml_method": 34, "ml_model": [73, 74, 75, 93], "ml_model_opt": [73, 74, 75], "mlp": [73, 74, 75, 93], "mmean": [33, 90], "mode": [9, 22, 63, 89], "model": [0, 1, 2, 3, 5, 6, 9, 33, 36, 37, 38, 39, 40, 55, 56, 58, 62, 63, 64, 65, 73, 74, 75, 88, 89, 90, 92, 93], "model_select": [0, 1, 17, 39, 40, 55, 56, 73, 74, 93], "modest": 4, "modifi": [36, 73, 74, 75, 89, 92], "modul": [8, 91], "modulo": 21, "mohseni": [0, 34], "moment": 49, "monoton": 39, "moon": 73, "more": [0, 1, 2, 4, 6, 10, 23, 36, 38, 39, 40, 48, 88, 89, 90, 91, 92], "moreov": 90, "most": [37, 89, 90, 92], "mpl": [0, 1, 2, 3, 17, 20, 22, 25, 88, 92, 93], "mse": 1, "msplit": [33, 90], "mu": 4, "mu_sampl": 4, "mu_sample_opt": 4, "multi": [36, 39, 55, 73, 74, 93], "multiclass": 0, "multioutput": [37, 38, 40, 56, 74], "multioutputregressor": [37, 38, 40, 56, 74], "multipl": [10, 17, 41, 45, 48, 55, 56, 58, 62, 64, 65, 66, 67, 68, 70, 76, 91], "multiple_output": [62, 64, 65, 68, 70], "multipli": 91, "murphi": 38, "must": [3, 16, 21, 36, 37, 38, 39, 40, 43, 62, 88], "n": [0, 3, 14, 17, 21, 26, 31, 42, 62, 90, 91], "n_": [57, 92], "n_chebyshev": 12, "n_class": [36, 39], "n_col": 1, "n_compon": 0, "n_featur": [17, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74], "n_iter": 4, "n_kernel_param": 36, "n_output": [36, 37, 38, 39, 40, 55, 56, 73, 74], "n_restart": 4, "n_row": 1, "n_sampl": [0, 17, 27, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 93], "n_samples_fit": [37, 38, 40, 56, 74], "n_samples_test": [39, 40], "n_samples_train": [39, 40], "n_test": 38, "n_time": 21, "n_train": 38, "n_trials_transpil": 9, "nabla": 13, "nabla_p": 13, "nabla_x": 13, "name": [2, 9, 21, 22, 34, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 76, 87, 89], "name_hyper_paramet": 34, "nat": [0, 21, 34, 90], "nation": 89, "nativ": 90, "natur": [33, 90, 93], "nb": 16, "nbest": 17, "nbsp": [0, 1], "nbviewer": [0, 1], "ndarrai": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76], "nearest": [17, 88], "necess": [], "necessari": [4, 7, 9, 16, 21, 41, 42, 43, 44, 45, 46, 47, 91], "necessarili": [15, 18], "need": [0, 2, 3, 39, 89, 90, 91, 93], "neg": [1, 4, 31, 32, 37, 38, 40, 56, 74, 90], "neg_mean_squared_error": 1, "neglect": 65, "neighbor": [17, 88], "neq": 90, "nest": [66, 67, 68, 70, 76], "network": [3, 5, 6, 10, 21, 55, 56, 57, 58, 60, 88, 91, 93, 94], "networkx": 7, "neural": [3, 5, 6, 10, 21, 55, 56, 57, 58, 60, 88, 91, 94], "neuron": 92, "nevertheless": 92, "new": [0, 4, 9, 24, 55, 56, 58, 73, 74, 75, 89, 92], "next": [0, 2, 4, 9, 70, 92, 93], "nisq": [6, 90], "nll": [], "nll_loss": [], "nll_optim": [], "nn": [17, 88], "node": [82, 85], "nois": [4, 10, 17, 33, 39, 57, 60, 73, 89, 90, 92, 93], "noise_amplifi": [], "noise_factor": [2, 89], "noise_level": 4, "noise_model": [], "noise_std": [], "noise_v": [], "noisemodel": [], "noisi": [0, 2, 4, 14, 89, 92], "noisy_backend": [], "nomenclatur": 92, "non": [10, 17, 23, 24, 36, 93], "none": [0, 4, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 82, 85, 87, 89, 90], "nonetheless": [89, 93], "nonlinear": [3, 10, 11, 12, 16, 62, 93], "norm": [0, 4, 39], "normal": [4, 37], "normalize_i": 37, "notabl": [2, 39, 40], "notat": 3, "note": [0, 1, 2, 3, 4, 9, 36, 37, 38, 39, 40, 41, 55, 56, 58, 73, 74, 88, 89, 91, 92, 93], "notebook": [0, 1, 2, 3, 4, 9, 89], "noteworthi": [], "noth": [55, 56, 58, 90], "notic": 2, "notimplementederror": 28, "notion": 90, "now": [0, 1, 3, 92, 93], "np": [0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 55, 56, 62, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 88, 89, 92, 93], "npj": 14, "nqubit": 2, "nr_initial_point": 4, "nu": 34, "num_all_qubit": [41, 42, 43, 44, 45, 46, 47], "num_averag": [49, 51], "num_chebyshev": [12, 34], "num_combin": 1, "num_encoding_lay": [3, 16, 56], "num_estim": 1, "num_featur": [0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 26, 28, 34, 36, 37, 38, 39, 40, 56, 68, 70, 73, 74, 88, 90, 92, 93], "num_hyper_paramet": 34, "num_lat": 17, "num_lay": [0, 1, 2, 4, 10, 11, 12, 13, 14, 15, 17, 18, 19, 26, 36, 37, 38, 39, 40, 88, 90, 92, 93], "num_layer_1": 17, "num_layers_list": 1, "num_oper": [48, 68, 70, 73, 74, 75, 93], "num_paramet": [0, 2, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 68, 70], "num_parameters_observ": [68, 70], "num_physical_qubit": 91, "num_qubit": [0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 56, 68, 70, 73, 74, 88, 90, 91, 92, 93], "num_qubit_list": 1, "num_random": 2, "num_shot": [9, 70], "num_variational_lay": [3, 16, 56], "number": [0, 1, 2, 4, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 55, 56, 57, 58, 60, 63, 65, 68, 70, 72, 73, 74, 75, 76, 88, 89, 91, 92, 93], "number_of_lay": 14, "numer": [0, 3, 9, 13, 33, 34, 35, 37, 38], "numpi": [0, 1, 2, 3, 4, 7, 9, 17, 29, 33, 34, 35, 37, 38, 39, 40, 49, 50, 52, 53, 54, 56, 74, 76, 89, 92, 93], "o": [1, 2, 3, 16, 48, 62, 69, 70, 93], "o_1": 93, "o_j": 93, "o_k": 93, "o_m": 93, "ob": [21, 42, 91], "ob1": 91, "ob2": 91, "object": [0, 1, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 69, 70, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92], "obligatori": 88, "observ": [2, 3, 4, 6, 9, 21, 34, 55, 56, 66, 67, 68, 69, 70, 71, 72, 87, 89, 90, 92, 93, 94], "observable_deriv": 91, "observable_parameter_dimens": 87, "observable_parameter_nam": 87, "observablebas": [21, 34, 48, 55, 56, 58, 66, 67, 68, 70, 73, 74, 75, 91], "observablederiv": 91, "obtain": [0, 2, 3, 4, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 25, 26, 28, 36, 37, 38, 39, 40, 48, 70, 88, 89, 90, 91, 92], "occur": [2, 76], "od": [5, 6, 62], "ode_funct": 62, "ode_regressor": [3, 56], "odeloss": [3, 56], "odop": 48, "odopdop": 48, "off": [0, 4, 10, 42, 51, 76], "off_diagon": 33, "offer": [2, 6, 88, 89, 90, 92], "offset": [2, 60, 92], "often": [4, 73, 74, 88, 92], "og": 3, "omit": [39, 40], "onc": [0, 9, 21, 23, 24, 76, 89], "one": [0, 9, 15, 17, 18, 21, 36, 37, 39, 40, 43, 45, 49, 51, 55, 56, 58, 90, 93], "one_st": [44, 46], "ones": [2, 41, 42, 43, 44, 45, 46, 47, 70, 90], "onli": [0, 3, 4, 9, 13, 16, 21, 27, 33, 36, 37, 38, 39, 40, 45, 55, 56, 58, 70, 73, 74, 76, 87, 88, 90], "onto": 93, "oo": [48, 69, 70], "oodop": 48, "oodopdop": 48, "op": [2, 48, 91, 92], "op0__": [68, 70], "op1__": [68, 70], "op3": 91, "op_str": [3, 43, 45, 91], "open": 9, "oper": [2, 3, 13, 21, 34, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 81, 82, 83, 84, 85, 88, 90, 91, 92], "operation_list": [82, 85], "operator_se": [73, 74, 75], "operator_str": [41, 91], "operator_tre": 76, "operatorbas": [13, 48], "operatornam": 65, "opt": 3, "opt_kta_param": [], "opt_kta_result": [], "opt_nll_param": [], "opt_nll_result": [], "opt_param_op": [3, 55, 56, 58, 61, 62, 63, 64, 65, 71, 72], "opt_result": [], "optim": [2, 3, 5, 6, 7, 9, 10, 17, 23, 37, 55, 56, 58, 59, 62, 71, 72, 89, 90, 93], "optimal_paramet": [], "optimization_level": 9, "optimizerbas": [55, 56, 58, 71, 72], "optimizeresult": 4, "optimizerresult": [49, 50, 51, 52, 53, 54], "optimum": 4, "option": [2, 3, 4, 6, 9, 15, 16, 18, 19, 21, 22, 25, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 62, 73, 74, 75, 76, 77, 78, 82, 85, 88, 90, 91, 92, 93], "options_dict": 92, "options_estim": [9, 89], "options_sampl": [9, 89], "optre": [13, 48, 70, 88], "optree_cach": [13, 48], "optree_el": 76, "optreecircuit": [76, 81, 83], "optreederiv": 76, "optreeelementbas": [13, 48, 76, 82, 85], "optreeevalu": 76, "optreeexpectationvalu": [76, 83], "optreeleafbas": 76, "optreeleafcircuit": [76, 79, 81, 83], "optreeleafcontain": 80, "optreeleafexpectationvalu": [76, 81, 83], "optreeleafmeasuredoper": [76, 83], "optreeleafoper": [76, 81, 84], "optreeleafvalu": 86, "optreemeasuredoper": 76, "optreenodebas": [76, 82, 85], "optreeoper": [76, 81, 83], "orang": [92, 93], "order": [0, 2, 5, 6, 17, 36, 39, 48, 62, 66, 67, 68, 70, 88, 90, 91, 93], "ordinari": [5, 6, 62], "org": [0, 1, 6, 27, 29, 38, 88], "origin": [0, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 88, 89, 90], "other": [0, 3, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 89, 91, 92, 93], "otherwis": [10, 11, 28, 36, 37, 38, 39, 40, 44, 55, 56, 58, 73, 74, 89], "otim": 93, "our": [0, 2, 3, 4, 6, 93], "out": [1, 14, 89, 90, 93], "outcom": [2, 39, 92], "outer": [0, 10, 11, 90], "outer_kernel": [0, 34, 38, 90], "outerkernel": 34, "outerkernelbas": 34, "outgo": 89, "outlier": 40, "output": [0, 2, 4, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 34, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 62, 64, 65, 66, 67, 68, 70, 88, 89, 92, 93], "output_list": 21, "outsid": [], "over": [0, 2, 23, 85, 90, 92, 93], "overal": [0, 2], "overflow": 9, "overlap": 33, "overli": 0, "overwrit": 9, "overwritten": [1, 9, 28], "ovo": 39, "ovr": [0, 39], "own": [0, 9, 88], "p": [0, 2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 34, 38, 42, 48, 76, 88, 89, 90, 91, 92], "p_": 13, "p_1": 13, "p_i": [13, 63], "p_j": [13, 64], "p_lim": 27, "p_m": 13, "p_op": [48, 91], "p_times_arccos_x": 23, "p_times_arctan_x": 23, "p_times_x": 23, "p_val": 27, "packag": [6, 7, 88, 89], "page": [0, 1], "pain": 3, "panda": 1, "paper": [6, 16], "parabol": 2, "parabola": 2, "paradigm": 92, "parallel": 9, "param": [2, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 66, 67, 68, 70, 73, 74, 75], "param_estimator__num_lay": 1, "param_estimator__num_qubit": 1, "param_grid": [1, 17], "param_ini": [2, 3, 55, 56, 58, 71, 72, 73, 74, 75], "param_initi": 56, "param_ob": [66, 67, 68, 70], "param_observ": 56, "param_op": [2, 66, 67, 68, 70], "param_op_ini": [2, 3, 55, 56, 58, 71, 72, 73, 74, 75], "param_vec": [10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 25, 26, 28], "paramerer": 24, "paramet": [0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "parameter": [0, 2, 3, 10, 19, 23, 27, 33, 34, 41, 43, 44, 55, 56, 58, 66, 67, 68, 70, 88, 91, 92], "parameter_label": [10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28], "parameter_list": 63, "parameter_operator_list": 63, "parameter_se": [1, 4, 33, 34, 35, 55, 56, 58, 73, 74, 75, 90], "parameter_str": 17, "parameter_valu": [9, 30, 31, 32], "parameter_vector": [13, 48, 88, 91], "parameterel": 13, "parameterexpress": [2, 42, 48, 76, 91, 92], "parameterized_quantum_circuit": [66, 67, 68, 70], "parameters_oper": [68, 70], "parametervector": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 41, 42, 43, 44, 45, 46, 47, 48, 66, 67, 68, 70, 76, 88], "parametervectorel": [66, 67, 68, 69, 70], "parametr": [2, 24, 90, 93], "parent": [30, 39, 40, 89], "pariwisekernel": 90, "part": [1, 55, 56, 93], "partial": [13, 62, 64, 88, 90], "partial_fit": [55, 56], "particl": 90, "particular": [92, 93], "particularli": [37, 38, 39, 40], "pass": [9, 21, 22, 36, 37, 38, 39, 40, 55, 56, 58, 66, 73, 74, 89, 90, 92, 93], "pattern": [2, 17, 90], "pauli": [2, 9, 21, 34, 41, 43, 44, 45, 48, 73, 74, 75, 87, 89, 90, 91, 92], "pauliop": [45, 46, 47], "paus": 89, "pbar": [55, 56, 58], "pd": 1, "pdf": [4, 10, 11, 12, 14, 15, 16, 18, 19, 23, 24, 26, 92], "pennylan": [2, 3, 6, 7, 9, 56, 58, 68, 89], "pennylane_circuit": [9, 87], "pennylane_execut": 9, "pennylane_execute_batch": 9, "pennylanedevic": 9, "per": [1, 12, 39, 40, 49, 51], "perceptron": [73, 74, 93], "perfect": [], "perfectli": 2, "perform": [0, 1, 2, 4, 34, 36, 38, 39, 40, 49, 51, 55, 56, 58, 72, 73, 74, 88, 89, 93], "period": 34, "perplex": 0, "perspect": 38, "peter": 14, "phase": 92, "phenomena": 90, "phi": [0, 3, 4, 33, 90], "phy": [21, 33, 90], "physic": [3, 41, 42, 43, 44, 45, 46, 47, 90, 91], "pi": [1, 24, 27, 31, 34, 40], "pi_times_x": 23, "pick": [23, 93], "pictur": 0, "pin": [3, 56, 62], "pip": [6, 7, 89], "pipelin": [0, 5, 6, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74], "pipelinepipelin": 1, "pivot": 1, "pivot_t": 1, "pixel": 0, "place": [12, 17, 21, 23, 24, 88, 89], "plai": 91, "plateau": [59, 60, 92], "pleas": [0, 1, 6, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75, 88], "plot": [0, 1, 2, 3, 4, 93], "plot_data_in_feature_spac": 0, "plot_dataset": 0, "plot_it": 4, "plot_numb": 0, "plot_result": 0, "plot_surrog": 4, "plot_surrogate_acquisit": 4, "plt": [0, 1, 2, 3, 4, 56, 93], "plugin": [9, 89], "png": [10, 11, 12, 14, 15, 16, 18, 19, 23, 24, 26, 92], "poi": 51, "point": [0, 4, 34, 36, 37, 39, 40, 51, 55, 56, 58, 62, 64, 72, 90, 92], "poli": 34, "polynomi": [10, 34], "pool": 21, "popul": 3, "posit": [0, 4, 36, 37, 38, 92], "possibl": [0, 4, 9, 12, 16, 17, 34, 36, 37, 38, 39, 40, 45, 49, 51, 55, 56, 58, 63, 70, 73, 74, 75, 88, 89, 91, 92, 93], "possibli": [55, 56], "posterior": 4, "postprocessingevalu": 68, "potenti": [0, 2, 89, 93], "power": [0, 34, 90], "pp": 38, "pq": 90, "pqc": [0, 2, 33, 35, 55, 56, 58, 66, 67, 68, 70, 71, 72, 88, 90, 92, 93], "pqk": [1, 17, 36, 37, 38, 39, 40], "pqk_instanc": 90, "practic": [6, 90], "practition": 6, "pradel": 93, "pre": [4, 38, 88, 89, 93], "precis": [9, 93], "precomput": [36, 37, 38, 39, 40, 49, 51, 56, 74], "predefin": [24, 90, 91, 92], "predict": [0, 1, 2, 3, 4, 36, 37, 38, 39, 40, 55, 56, 73, 74, 75, 92, 93], "predict_log_proba": 39, "predict_proba": [36, 39, 55], "prefactor": 26, "prefer": 4, "prefix": [68, 70], "prepar": [2, 93], "preprint": [], "preprocess": [1, 3, 55, 93], "present": [2, 15], "press": [31, 37, 38], "pretrain": [2, 55, 56, 58, 92], "prevent": 2, "previou": [0, 4, 15, 18], "previous": [87, 90], "price": 4, "primari": [], "primarili": 2, "prime": 90, "primit": [9, 55, 56, 58, 70, 76, 77, 78], "primitivesv2": 89, "primtiv": 89, "principl": [89, 90, 92], "print": [0, 1, 2, 4, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 39, 40, 42, 48, 89, 91, 92, 93], "prior": [33, 34, 37, 38], "priorit": 92, "prob": 87, "probabilist": 38, "probabl": [0, 2, 4, 9, 24, 36, 39, 44, 46, 55, 70, 90], "problem": [0, 3, 4, 37, 38, 89, 90, 92], "proce": [2, 3, 4], "procedur": [33, 34, 38, 90], "proceed": 2, "process": [1, 2, 5, 6, 31, 36, 37, 38, 55, 56, 58, 89, 90, 92, 93], "processor": 14, "produc": [39, 93], "product": [0, 90], "program": [9, 88, 89, 91], "progress": [3, 89], "project": [1, 4, 5, 6, 34, 36, 37, 38, 39, 40, 88, 89, 91], "projected_kernel": 1, "projected_quantum_kernel": [0, 1], "projectedquantumkernel": [0, 1, 4, 17, 38, 39, 40], "promis": [0, 90], "properti": [0, 39, 40, 89, 90], "proport": 39, "propos": [21, 29], "propose_loc": 4, "proprietari": 88, "prospect": 90, "prototyp": 6, "provid": [6, 9, 20, 21, 36, 37, 38, 39, 40, 48, 51, 55, 56, 58, 62, 73, 74, 75, 88, 89, 90, 91, 92, 93], "prune": [20, 27, 29], "pruned_encoding_circuit": 88, "pruned_paramet": 20, "prunedencodingcircuit": [27, 88], "pruning_thresh": [27, 29], "prx": 89, "prxquantum": [27, 29, 88], "pseudo": 93, "psi": [90, 92], "pub": 9, "pull": [6, 88], "puls": 2, "pure": [90, 91], "purpos": 89, "put": [39, 40, 90], "pylab": [0, 1], "pyplot": [2, 3, 4, 56, 93], "python": [6, 7], "python3": 7, "q": [3, 90, 93], "q_kernel": [4, 36, 37], "q_kernel_pqk": 38, "qasm": [4, 89], "qasm_simul": [9, 89], "qasmsimul": 92, "qbo": 4, "qc": 89, "qcnn": 21, "qcnnobserv": 21, "qfi": [29, 89], "qfim": 88, "qgp": 4, "qgpc": 90, "qgpc_ansatz": 36, "qgpr": [1, 4, 38, 90], "qgpr_ansatz": 37, "qgpr_model": 4, "qgprqgpr": 1, "qiksit": 89, "qiskit": [1, 2, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 41, 42, 43, 44, 45, 46, 47, 53, 58, 70, 76, 87, 91, 92], "qiskit_a": 89, "qiskit_algorithm": [53, 89], "qiskit_circuit": 22, "qiskit_execut": 9, "qiskit_ibm_provid": 89, "qiskit_ibm_runtim": [2, 9, 25, 88, 89, 91], "qiskitencodingcircuit": 88, "qiskitruntimeservic": [2, 9, 89], "qkrr": [9, 17, 34, 37, 89, 90], "qkrr_pqk": 38, "qlem": [73, 74, 75], "qml": [0, 1, 6, 9, 87, 89, 90], "qnn": [3, 6, 34, 54, 88, 89, 90, 91, 93], "qnn_backend": 2, "qnn_simul": 2, "qnnclassifi": [56, 92], "qnnregressor": [2, 3, 55, 89, 92], "qnode": 87, "qpu": 9, "qpu_parallel": [9, 89], "qquad": [43, 44], "qrc_classifi": 93, "qrcclassifi": [74, 93], "qrcregressor": [73, 93], "qsikit": [9, 89], "qsvc": [0, 36, 40, 90], "qsvcifittedqsvc": 0, "qsvr": [1, 37, 38, 39, 90], "quad": 62, "quadrat": [0, 90], "quadraticextrapol": [], "qualiti": [9, 89], "quality_hqaa": 9, "quantifi": 4, "quantum": [1, 3, 5, 6, 9, 10, 14, 15, 16, 21, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 55, 56, 57, 58, 60, 62, 66, 67, 68, 70, 73, 74, 75, 91, 94], "quantum_circuit": 21, "quantum_fit": 27, "quantum_framework": 9, "quantum_info": 89, "quantum_kernel": [0, 1, 4, 17, 30, 31, 32, 34, 36, 37, 38, 39, 40, 90], "quantumcircuit": [9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 76, 79, 81, 83, 87], "quantumgaussianprocessregressor": [], "quantuminst": 70, "qubit": [0, 1, 2, 4, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 24, 26, 28, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 68, 70, 73, 74, 75, 88, 89, 90, 92, 93], "qubit1": 21, "qubit2": 21, "qubit3": 21, "qubit4": 21, "qubit_map": [41, 42, 43, 44, 45, 46, 47, 91], "queri": [36, 37], "question": [6, 39], "queu": 2, "queue": [9, 89], "quickli": 21, "quit": [1, 4], "r": [0, 4, 36, 37, 38, 39, 40, 55, 56, 73, 74, 76, 91, 93], "r2_score": [37, 38, 40, 56, 74, 93], "rais": [4, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 93], "rand": [0, 2, 34, 36, 37, 39, 40, 55, 56], "randn": 4, "random": [0, 1, 2, 4, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 73, 74, 75, 89, 92, 93], "random_circuit": 9, "random_pauli": [73, 74, 75], "random_st": [0, 4, 17, 39, 40, 55, 56, 73, 74, 93], "randomli": [2, 4, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 41, 42, 43, 44, 45, 46, 47, 73, 74, 93], "rang": [1, 4, 88], "rangl": [0, 3, 33, 92], "rangle_x": 93, "rapp": [4, 6, 37], "rasmussen": [31, 37], "rate": [2, 3, 49, 59], "rather": 2, "rationalquadrat": 90, "ravel": [4, 93], "rbf": [34, 73, 90], "rbrace": [90, 93], "rbrace_": 93, "rc": 93, "rdm": 90, "re": [0, 4, 89], "reach": [9, 14, 90], "read": [6, 36, 38, 42, 92], "readabl": 0, "reader": 4, "readi": [0, 6], "readout": [2, 93], "real": [2, 6, 9, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 89, 90, 92], "realm": 92, "reason": 90, "recent": 7, "recognit": [5, 6], "recommend": [14, 37, 89], "rect": 1, "recurs": 76, "red": [1, 4, 93], "reduc": [2, 21, 89, 90, 92], "reduct": [10, 57, 60], "redund": [15, 18, 20, 27, 29, 88, 89], "ref": [3, 31, 33, 34, 37, 38, 57, 60, 62, 90, 92, 93], "ref_valu": 3, "refer": [2, 3, 6, 10, 14, 15, 16, 21, 26, 31, 32, 33, 34, 37, 38, 57, 60, 62, 71, 72, 73, 74, 88, 89, 90, 92, 93], "reflect": 90, "reg": [56, 74, 92], "regard": [3, 6], "regardless": 88, "regener": 24, "region": 0, "regist": [2, 93], "regress": [0, 1, 4, 8, 37, 38, 39, 40, 55, 56, 62, 64, 65, 73, 74, 92], "regressor": [6, 37, 38, 40, 56, 74], "regular": [1, 3, 6, 31, 33, 34, 35, 37, 38, 39, 40, 49, 55, 56, 60, 63, 89, 90], "reiniti": [55, 56, 58], "rel": [57, 92], "relat": 93, "relev": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74], "reli": [1, 90], "remain": [21, 89], "rememb": 89, "remot": 89, "remov": [20, 37, 76, 82, 85, 88, 89], "render": [0, 1, 4], "rep": [9, 22, 88, 93], "repeat": [0, 10, 15, 17, 18, 21, 92, 93], "repeat_lay": 21, "repeatedli": [21, 92], "repetit": [14, 17], "replac": [0, 39, 40, 48], "replic": 0, "report": 37, "repres": [0, 1, 3, 4, 79, 80, 81, 82, 83, 84, 86, 90, 92], "represent": [0, 1, 4, 36, 62, 90], "reprint": 0, "reproduc": [24, 89, 90], "request": [6, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 88], "requir": [1, 2, 3, 6, 7, 9, 36, 39, 55, 62, 73, 89, 92], "rerun": [0, 1], "rescal": [4, 26, 32, 39, 40], "rescale_class_label": 32, "research": 6, "resembl": 92, "reservoir": [6, 73, 74, 75, 94], "reset": [9, 49, 51, 57, 70], "reset_opt": [], "reset_options_estim": [], "reset_options_sampl": [], "reset_shot": [9, 57, 70], "reshap": [1, 2, 3, 4, 34, 38, 93], "residu": [37, 38, 40, 56, 74], "resili": [2, 89], "resilience_level": 89, "resolut": 0, "resourc": 2, "respect": [0, 13, 16, 33, 34, 36, 37, 38, 62, 69, 70, 88, 90, 91, 92, 93], "respons": [9, 89], "rest": 36, "restart": [4, 9, 14, 60, 89], "restor": 90, "restrict": 90, "resubmit": 89, "result": [0, 2, 4, 9, 34, 36, 37, 38, 39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 66, 67, 68, 70, 73, 74, 75, 76, 88, 89, 90, 91, 92], "result_cach": [], "results_df": 1, "retain": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74], "retri": 9, "retriev": [], "return": [1, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 87, 88, 89], "return_cov": 37, "return_std": [4, 37], "return_x_i": [0, 36], "reupload": 15, "reuqir": 89, "rev": [33, 90], "reveal": 90, "revers": [37, 41], "review": 3, "rho": [90, 93], "rho_": 93, "rho_0": 93, "rho_0u": 93, "rich": 90, "ridg": [38, 74, 90], "ridge_regress": 38, "right": [0, 3, 34, 62, 63, 64, 90, 91], "rise": 90, "rkh": 90, "rnd": 4, "ro": 4, "role": 91, "root": [], "rotat": [0, 10, 12, 15, 16, 17, 18], "rotation_g": [12, 16], "roth": [4, 6, 10, 37, 57, 60, 92], "rout": [9, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75, 89], "routin": [2, 9, 88, 90], "row": [0, 14], "rstd": [57, 92], "rstd_bound": [57, 92], "rule": [13, 88, 92], "run": [2, 4, 6, 7, 9, 41, 42, 43, 44, 45, 46, 47, 49, 51, 59, 89, 91, 93], "run_input": 9, "run_optim": 4, "runtim": [2, 7, 9, 89], "rvert": 92, "rvert_2": 0, "rx": [10, 11, 12, 16, 17, 18, 23, 24, 76, 88], "rxx": [17, 23], "rxx_entangl": 17, "ry": [12, 16, 17, 18, 22, 23, 24, 26, 76, 88], "ryi": [17, 23], "ryy_entangl": 17, "rz": [12, 16, 17, 18, 23, 24, 26, 76, 88], "rzx": [17, 23], "rzx_entangl": 17, "rzz": [10, 17, 23], "rzz_entangl": 17, "s41467": 0, "s42484": 37, "s_conjug": 17, "sake": 0, "same": [1, 2, 9, 17, 21, 24, 36, 42, 45, 46, 48, 50, 52, 53, 62, 64, 71, 72, 76, 88, 89, 90], "sampl": [0, 1, 2, 4, 9, 10, 36, 37, 38, 39, 40, 55, 56, 57, 60, 73, 74, 92], "sample_test": 37, "sample_train": 37, "sample_weight": [36, 37, 38, 39, 40, 55, 56, 73, 74], "sampler": [9, 55, 56, 58, 70, 76, 78, 89], "sampler_opt": [2, 9, 89], "sampler_run": [], "sampler_run_v1": [9, 89], "sampler_run_v2": [9, 89], "samplerv1": 9, "samplerv2": 2, "samples": 93, "satisfi": 92, "save_account": 89, "saw": 14, "sc": 17, "scalar": 0, "scale": [1, 12, 37, 90, 93], "scaler": [0, 1, 93], "scatter": [1, 4, 93], "scenario": [2, 4], "schemat": 90, "scheme": [3, 92], "schmidt": 90, "schnabel": 6, "schuld": [33, 90], "sci": 93, "scientif": 3, "scikit": [0, 1, 4, 6, 7, 34, 36, 37, 38, 39, 40, 55, 56, 90], "scipi": [4, 7, 37, 38, 50, 52, 92], "score": [0, 1, 36, 37, 38, 39, 40, 55, 56, 73, 74, 93], "sdg": 76, "seaborn": 1, "seamless": 6, "seamlessli": [1, 9], "search": [17, 23, 51], "second": [9, 17, 25, 41, 48, 49, 70, 76, 88, 91, 92], "section": [1, 16, 92], "see": [0, 13, 16, 35, 36, 37, 38, 39, 40, 48, 55, 56, 57, 58, 60, 73, 74, 89, 90, 92, 93], "seed": [1, 2, 3, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 73, 74, 75, 89], "seen": [3, 90, 92], "select": [0, 2, 4, 9, 20, 24, 92], "select_backend": 9, "self": [3, 4, 26, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74], "sensit": 1, "separ": [0, 9, 17, 39], "sequenc": [2, 49, 50, 51, 52, 53, 54, 92], "sequence_typ": [2, 89], "serv": 6, "servic": [2, 9, 89], "session": [2, 9, 89], "set": [3, 4, 6, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 88, 90, 91, 92, 93], "set_backend": 9, "set_callback": [49, 50, 51, 52, 53, 54], "set_config": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74], "set_executor": 57, "set_fit_request": [39, 40, 55, 56, 58], "set_map": [41, 42, 43, 44, 45, 46, 47, 91], "set_opt": 89, "set_opt_param_op": [61, 62, 63, 64, 65], "set_options_estim": 9, "set_options_sampl": 9, "set_param": [10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 58, 66, 67, 68, 70, 73, 74, 75], "set_partial_fit_request": [55, 56], "set_predict_request": 37, "set_primitive_opt": 9, "set_quantum_kernel": [30, 31, 32], "set_qubit_map": 91, "set_score_request": [36, 37, 38, 39, 40, 55, 56, 73, 74], "set_seed_for_primit": 9, "set_shot": [9, 70, 89], "set_shots_for_grad": 57, "set_shots_for_loss": 57, "set_titl": 1, "set_xlabel": 1, "set_ylabel": 1, "setup": 2, "sever": [0, 6, 7, 88, 90, 91, 92, 93], "sgd": [55, 56, 58, 72, 92], "sgdmixin": [55, 56, 58], "shape": [0, 2, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 93], "share": [0, 2], "share_param": 21, "shift": [13, 16, 88, 92], "shot": [2, 4, 9, 57, 70, 71, 72, 89], "shot_control": [55, 56, 58, 71, 72, 92], "shotcontrolbas": [55, 56, 58, 71, 72], "shots_per_random": 2, "shotsfromrstd": 92, "should": [2, 21, 35, 36, 37, 38, 39, 40, 51, 55, 56, 58, 73, 74, 90, 92], "show": [0, 1, 2, 4, 36, 89, 90, 92, 93], "shown": [1, 14, 90, 92], "shrink": [0, 1], "shuffl": [55, 56, 58, 72, 92], "side": 0, "sigma": [4, 31, 37], "sigma_0": 34, "sigma_f": [64, 92], "sigma_l": [57, 92], "sigmai": 31, "sigmoid": [34, 60], "significantli": [89, 92], "similar": [0, 2, 9, 17, 41, 89, 90, 93], "similarli": 1, "simpl": [2, 11, 17, 73, 74, 90], "simplefilt": 89, "simplest": 90, "simpli": [2, 21, 91], "simplifi": [76, 92], "simul": [0, 4, 6, 9, 89, 92], "simultan": 89, "sin": [1, 4, 34, 40, 56, 93], "sinc": [0, 24, 36, 39, 55, 63, 65, 73, 89, 93], "singl": [0, 2, 21, 23, 24, 26, 43, 44, 45, 46, 48, 73, 74, 75, 82, 85, 91, 93], "single_pauli": [73, 74, 75], "size": [0, 4, 17, 20, 22, 25, 49, 51, 71, 72, 88, 90, 92, 93], "skip": 49, "skip_fun": 49, "sklean": 34, "sklearn": [0, 1, 17, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75, 93], "slack": 1, "slight": [], "slightli": 39, "slsqp": [55, 56, 90], "small": [39, 49, 89, 90], "smaller": 92, "smallest": [9, 89], "smooth": 2, "sn": 1, "sne": 0, "so": [0, 21, 24, 39, 90, 93], "solut": [3, 17, 37, 38, 88, 90], "solv": [0, 4, 5, 6, 16, 33, 34, 37, 38, 62, 90, 92], "solvabl": [0, 37, 38], "solver": [3, 56], "some": [0, 4, 17, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 90, 93], "sometim": 92, "somewhat": 92, "sophist": [4, 88], "sort": [36, 39], "sourc": [10, 11, 12, 14, 15, 16, 18, 19, 23, 24, 26, 92], "sp": [3, 56, 62], "space": [0, 24, 33, 34, 38, 51, 90, 93], "spars": [37, 38, 39, 40, 55, 56, 58], "sparsepauli": 87, "sparsepauliop": [2, 9, 41, 42, 43, 44, 45, 46, 47, 48, 76, 81, 83, 84, 87, 91, 92], "sparsevectorstatefn": 70, "speak": 90, "special": [3, 6], "specif": [0, 1, 9, 39, 40, 66, 92], "specifi": [2, 9, 13, 17, 25, 27, 34, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 58, 87, 88, 89, 90, 92, 93], "speed": [9, 89], "speed_hqaa": 9, "split": 90, "split_pauli": 48, "sprasepauliop": [41, 42, 43, 44, 45, 46, 47], "springer": 37, "spsa": 92, "sqrt": [1, 32, 34, 92], "squar": [2, 37, 38, 40, 48, 56, 62, 64, 74, 91, 92, 93], "squared_ob": 91, "squaredloss": [2, 55, 56, 89, 92], "squlearn": [0, 1, 2, 3, 4, 7, 88, 89, 90, 91, 92, 93], "ssh": 6, "stabil": [37, 38], "stack": 12, "stage": 92, "stai": 21, "standard": [1, 4, 37, 39, 40, 57, 90, 92], "standardscal": 1, "standardscalerstandardscal": 1, "start": [0, 4, 10, 12, 14, 59, 93], "start_idx": 1, "stat": 4, "state": [0, 3, 33, 41, 44, 46, 49, 51, 73, 74, 87, 88, 90, 92, 93], "statefn": [41, 42, 43, 44, 45, 46, 47], "statevector": [9, 89], "statevector_simul": [9, 89], "statevectorsimul": 1, "static": 76, "stem": [], "step": [0, 1, 2, 4, 38, 49, 51, 71, 72, 93], "stick": [3, 93], "stochast": 92, "store": [0, 37, 38, 39, 40, 70, 88], "str": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 49, 51, 55, 56, 58, 62, 63, 66, 67, 68, 69, 70, 73, 74, 75, 76, 87], "straightforward": [88, 90], "strateg": 4, "strategi": [2, 6, 17, 73, 74, 75], "strength": [31, 37, 38, 55, 56], "string": [9, 21, 34, 41, 45, 69, 70, 87, 88, 89, 91], "strong": 93, "stronger": [37, 38], "structr": [], "structur": [3, 4, 17, 21, 48, 69, 70, 76, 88, 89, 92, 93], "studi": 90, "style": 16, "sub": [9, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 89], "subject": [90, 92, 93], "sublist": 21, "submit": 6, "subplot": 1, "subsequ": [4, 90, 92], "subset": [36, 39, 55, 73], "substanti": 89, "success": [2, 88, 93], "suffer": 90, "suggest": 2, "suit": 89, "suitabl": [1, 3, 89, 92], "sum": [37, 38, 40, 41, 42, 45, 46, 48, 56, 74, 76, 85, 88, 91, 93], "sum_": [32, 42, 62, 90], "sum_i": [2, 13, 42, 45, 46, 63, 64, 65], "sum_j": [62, 64], "sum_k": [90, 92], "summar": 89, "summat": [2, 45, 85, 92], "summedpauli": [2, 3, 48, 55, 56, 89, 91, 92], "superposit": 90, "supervis": [33, 90], "suppli": [17, 21, 34, 41, 55, 56, 58, 76, 88, 91], "support": [1, 2, 6, 36, 37, 38, 39, 40, 43, 58, 73, 76, 89, 90, 91, 93], "supported_g": 76, "suppress": [2, 89], "surrog": [5, 6], "surrogate_model": 4, "surround": 93, "suzuki": 93, "sv1": [9, 89], "svc": [39, 40], "svm": [0, 39, 40, 90], "svr": 40, "swap": [10, 17], "switch": [2, 10, 42, 89, 90], "sx": 76, "symbf": [90, 93], "symbol": [3, 56, 62], "symbols_involved_in_od": [3, 56, 62], "sympi": [3, 56, 62], "symrm": 93, "synthet": 1, "system": [9, 33, 34, 37, 38, 41, 42, 43, 44, 45, 46, 47, 73, 74, 89], "t": [0, 15, 17, 26, 31, 32, 33, 34, 36, 37, 38, 39, 40, 55, 56, 62, 73, 74, 76, 90, 91], "t_conjug": 17, "ta": 32, "tabl": 13, "tag": 3, "tailor": 92, "take": [0, 3, 9, 88, 89, 92, 93], "taken": [4, 31, 32, 49], "tanh": 4, "target": [9, 30, 32, 36, 37, 38, 90, 92], "targetalign": 90, "task": [0, 1, 73, 74, 90, 93], "tc": 17, "tdg": 76, "techniqu": [0, 2, 6, 33, 34, 90], "tempor": 93, "term": [3, 12, 15, 32, 33, 34, 42, 62, 76, 90, 92], "termin": [2, 49, 51], "test": [0, 1, 2, 33, 34, 35, 36, 37, 38, 39, 40, 55, 56, 73, 74, 90, 93], "test_scor": 1, "test_siz": [0, 55, 56, 73, 74, 93], "text": [0, 4, 34, 43, 44, 57, 63, 92], "th": 90, "than": [2, 34, 39, 41, 42, 43, 44, 45, 46, 47, 89, 92], "thank": 6, "thei": [0, 6, 9, 36, 39, 40, 55, 56, 88, 89, 90, 92], "them": [0, 17, 23, 89, 90, 92], "theoret": 38, "theori": 90, "thereaft": 89, "therebi": 2, "therefor": [0, 89, 90, 92], "theta": [0, 3, 31, 32, 36, 43, 62, 90, 92], "theta_i": 62, "thi": [0, 1, 2, 3, 4, 6, 9, 13, 17, 19, 20, 21, 23, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 58, 62, 63, 64, 65, 73, 74, 75, 76, 87, 88, 89, 90, 91, 92, 93], "those": 39, "though": 2, "three": [0, 10, 34], "threshold": [27, 29, 33, 34, 90, 92], "through": [1, 2, 4, 6, 9, 17, 89, 90, 92, 93], "throughout": 89, "throw": 21, "thrown": [14, 28], "thu": [0, 2, 89, 90, 92], "tight_layout": 1, "tikhonov": [33, 34, 90], "tild": 93, "time": [0, 2, 9, 10, 17, 21, 39, 76, 89, 90, 93], "titl": [0, 1, 2, 3, 4, 93], "to_dict_fn": 70, "togeth": [12, 91, 92], "token": [2, 9, 89], "tol": [0, 1, 3, 49, 51, 56], "toler": [49, 51], "tool": [6, 9, 89], "toolset": [], "top": [6, 93], "total": [0, 3, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 56, 74, 88, 92], "tower": [10, 11, 12, 16], "tqdm": [7, 55, 56, 58], "tr": [90, 93], "trace": 90, "trade": [4, 51], "tradit": [1, 92], "train": [0, 1, 3, 8, 10, 15, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 55, 56, 58, 88, 89, 91, 92], "train_test_split": [0, 39, 40, 55, 56, 73, 74, 93], "trainabl": [0, 10, 13, 22, 24, 33, 34, 35, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 70, 88, 90, 91, 92], "transfer": 0, "transform": [0, 2, 39, 76, 93], "transform_to_zbasi": 76, "translat": [], "transmit": 93, "transpil": [9, 25, 76, 89, 91], "transpile_func": 25, "transpile_to_supported_instruct": 76, "transpiledencodingcircuit": 91, "treat": [1, 4], "tree": 76, "treinish": 89, "tri": [23, 93], "trial": [3, 9, 62], "trick": [0, 90], "trigger": 89, "trivial": 90, "troubl": 21, "true": [0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 88, 89, 91, 92, 93], "trust": [0, 1], "truth": [1, 71, 72], "try": [0, 1], "tsne": 0, "tune": 2, "tupel": 51, "tupl": [9, 13, 27, 34, 41, 45, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 76, 87, 88, 91], "turn": 76, "tutori": [1, 2, 3, 6], "twelv": 0, "twirl": 2, "two": [0, 1, 10, 16, 24, 34, 37, 41, 88, 89, 90, 92], "twoloc": [22, 88], "type": [9, 13, 16, 24, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 66, 67, 68, 70, 73, 74, 75, 76, 82, 83, 85, 87, 90, 92], "typic": [4, 9, 34, 92], "u": [0, 1, 3, 4, 17, 37, 38, 40, 56, 74, 92, 93], "u_": [3, 90], "u_0": [3, 62], "u_i": 92, "u_r": 93, "ub": 4, "ucb": 51, "um_": 32, "unabl": [0, 1], "uncertainti": 4, "unchang": [36, 37, 38, 39, 40, 55, 56, 58, 73, 74], "under": [0, 2, 3, 6], "underli": [36, 37, 38, 39, 40], "understand": [0, 1], "uniform": [2, 4], "uniform_averag": [37, 38, 40, 56, 74], "union": [9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 58, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 83, 87], "uniqu": 1, "uniquli": 23, "unit": [37, 89], "unitari": [3, 93], "unknown": 4, "unless": 89, "unncessari": 89, "unnecessari": 9, "unset": [9, 89], "unset_backend": [9, 89], "until": [9, 21, 92], "untouch": 76, "untrain": 90, "unus": 9, "up": [3, 4, 14, 69, 89, 90, 92], "upcom": 92, "updat": [3, 4, 9, 36, 37, 38, 39, 40, 49, 51, 55, 56, 58, 73, 74, 89, 92], "upload": 0, "upon": [2, 89], "upper": 51, "us": [0, 1, 3, 5, 6, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 88, 89, 90, 91, 92, 93], "usag": 2, "use_hqaa": 9, "useful": 7, "user": [6, 9, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 75, 88, 89, 90, 92, 93], "usual": [20, 74, 89, 93], "util": [0, 2, 4, 9, 13, 17, 34, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 88, 90, 91, 92], "v": [1, 3, 37, 38, 40, 56, 60, 74, 93], "v1": [9, 89], "v2": [9, 89], "val": 69, "valid": [1, 9, 35, 39, 51], "valu": [0, 1, 2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 83, 86, 88, 89, 90, 92, 93, 94], "value_dict": [61, 62, 63, 64, 65], "valueerror": 4, "var": [63, 65, 69], "var_i": 63, "vari": 1, "variabl": [1, 2, 3, 17, 62, 89], "variable_str": 17, "varianc": [4, 37, 55, 56, 58, 60, 61, 62, 63, 64, 65, 70, 91], "variance_factor": [63, 65], "variant": 1, "variat": [16, 30, 31, 32], "variational_arrang": [3, 16, 56], "varieti": 89, "variou": [0, 2, 6, 9, 89], "varphi": 4, "vdot": 93, "vec": [62, 93], "vector": [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 66, 67, 68, 70, 73, 82, 88, 90, 93], "verbos": [0, 1, 9, 27], "veri": [0, 17, 39, 93], "versa": [89, 90], "version": [6, 9, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 89], "versu": 36, "vert": 0, "vertic": 16, "via": [2, 6, 9, 10, 13, 36, 37, 38, 39, 40, 89, 91, 93], "vice": [89, 90], "view": [0, 90], "visual": [0, 1, 2, 87], "vmax": 1, "vmin": 1, "vstack": 4, "w": [36, 37, 38, 39, 40, 55, 56, 73, 74, 76, 91, 93], "w_i": 64, "wa": [6, 9, 21, 93], "wai": [2, 89, 90], "wait": 9, "wait_restart": [9, 89], "want": [0, 1, 88, 89], "warn": [4, 89], "wave": [0, 69, 91], "wave_funct": 69, "we": [0, 1, 2, 3, 4, 65, 88, 89, 90, 92, 93], "websit": 0, "weigh": 89, "weight": [2, 23, 36, 37, 38, 39, 40, 55, 56, 58, 62, 63, 64, 65, 71, 72, 73, 74, 93], "weiji": 93, "well": [0, 6, 17, 71, 72, 89, 90, 92], "were": 0, "what": 4, "when": [2, 4, 7, 9, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 56, 74, 88, 89, 90, 91, 92], "whenev": [41, 42, 43, 44, 45, 46, 47], "where": [0, 1, 3, 4, 9, 10, 11, 17, 21, 24, 36, 37, 38, 39, 40, 42, 56, 57, 62, 74, 88, 89, 90, 92, 93], "wherea": [9, 92], "whether": [4, 9, 21, 32, 37, 38, 73, 74, 75, 92], "which": [0, 1, 2, 3, 6, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 58, 66, 70, 73, 76, 88, 89, 90, 91, 92, 93], "while": [4, 17, 21, 92], "whose": [3, 90], "wide": [0, 88], "width": 16, "wiki": 38, "wikipedia": 38, "william": [31, 37], "willmann": 6, "wire": [9, 87, 89], "within": [2, 17, 21, 37, 90], "without": [0, 3, 88, 90], "won": [55, 56], "word": 87, "work": [0, 2, 4, 6, 9, 21, 36, 37, 38, 39, 40, 55, 56, 58, 66, 67, 68, 70, 73, 74, 75, 76, 90, 93], "workflow": [0, 1, 90], "world": [], "wors": [37, 38, 40, 56, 74], "worth": [2, 89, 92], "would": [0, 3, 37, 38, 40, 56, 74], "wrap": [33, 50, 52, 77, 78, 90, 92], "wrapper": [8, 22, 37, 38, 39, 40, 50, 52, 53, 88, 92], "write": 3, "written": 3, "wrt": [66, 67, 68, 70], "www": 6, "x": [0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 49, 51, 55, 56, 58, 62, 66, 67, 68, 70, 73, 74, 75, 76, 88, 90, 91, 92, 93], "x0": [4, 49, 50, 51, 52, 53, 54], "x27": [0, 1], "x_": 13, "x_0": [3, 62], "x_1": 13, "x_highlight": 0, "x_i": [0, 4, 13, 32, 34, 62, 64, 92], "x_iter": 4, "x_j": [0, 13, 32, 34], "x_lim": 27, "x_n": 13, "x_next": 4, "x_numer": 3, "x_plot": 4, "x_rang": 0, "x_sampl": 4, "x_test": [0, 1, 39, 40, 55, 56, 73, 74, 92, 93], "x_train": [0, 1, 2, 9, 38, 39, 40, 55, 56, 73, 74, 89, 90, 92, 93], "x_tsne": 0, "x_val": 27, "xi": [4, 42], "xiong": 93, "xixi": 91, "xlabel": [1, 3, 4, 93], "xp": 13, "xpxm": [2, 89], "xx": [41, 93], "xxxx": 34, "xyz": [0, 34, 38, 90], "y": [0, 1, 2, 3, 4, 10, 17, 21, 23, 24, 31, 33, 34, 35, 36, 37, 38, 39, 40, 43, 45, 55, 56, 58, 62, 73, 74, 75, 76, 88, 90, 91, 93], "y_conv": 4, "y_cov": 37, "y_highlight": 0, "y_i": 32, "y_init": 4, "y_j": 32, "y_mean": 37, "y_next": 4, "y_plot": 4, "y_pred": [0, 1, 4, 37, 38, 39, 40, 55, 56, 73, 74, 92, 93], "y_pred_pqk": 38, "y_sampl": 4, "y_std": 37, "y_test": [0, 1, 39, 40, 55, 56, 73, 74, 93], "y_train": [0, 1, 2, 9, 38, 39, 40, 55, 56, 73, 74, 89, 90, 92, 93], "y_true": [37, 38, 40, 56, 74], "yet": [0, 89], "yield": 92, "ylabel": [1, 3, 4, 93], "you": [0, 2, 6, 9, 36, 37, 38, 39, 40, 55, 56, 58, 73, 74, 88, 90, 92], "your": [2, 4, 6, 89, 92], "yy": 93, "yyyi": 34, "yz": 26, "yz_cx_encodingcircuit": 1, "z": [0, 2, 3, 4, 17, 19, 21, 23, 24, 34, 41, 42, 43, 44, 45, 46, 56, 76, 88, 90, 91, 92, 93], "z_i": 43, "zero": [3, 37, 42, 49, 63, 90, 91], "zfeaturemap": [19, 21], "zi": [2, 41, 91], "zigzag": 2, "zii": [48, 91], "ziii": [3, 92], "ziiii": 91, "ziz": [48, 91], "zizz": 91, "zne": 89, "zne_mitig": [2, 89], "zy": 91, "zz": [41, 42, 56, 91], "zzfeaturemap": 22, "zzi": [48, 91], "zzzz": 34, "\u03b8": [], "\u03b8p": 22, "\u03c3i": []}, "titles": ["Handwritten Digit Recognition with Projected Quantum Kernels", "Hyperparameter Optimization and Pipelines", "Error Mitigation for Quantum Neural Networks on IBM Quantum Devices", "Solving a First-order Ordinary Differential Equation (ODE)", "Bayesian Optimization using a Quantum Gaussian Process Surrogate Model", "Examples", "Welcome to the sQUlearn documentation!", "Installation", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn</span></code>.Executor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevPQC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevRx", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevTower", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.EncodingCircuitDerivatives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.HighDimEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.HubregtsenEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.KyriienkoEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.LayeredEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.MultiControlEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ParamZFeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.PrunedEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.QCNNEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.QiskitEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.RandomEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.RandomLayeredEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.TranspiledEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.YZ_CX_EncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.automated_pruning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit.encoding_circuit_base</span></code>.EncodingCircuitBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.pruning_from_QFI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.loss.kernel_loss_base</span></code>.KernelLossBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.loss.negative_log_likelihood</span></code>.NLL", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.loss.target_alignment</span></code>.TargetAlignment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix</span></code>.FidelityKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix</span></code>.ProjectedQuantumKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix.kernel_matrix_base</span></code>.KernelMatrixBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QGPC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QGPR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QKRR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.CustomObservable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.IsingHamiltonian", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SinglePauli", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SingleProbability", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SummedPaulis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SummedProbabilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables.observable_base</span></code>.ObservableBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables.observable_derivatives</span></code>.ObservableDerivatives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.Adam", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.LBFGSB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SGLBO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SLSQP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SPSA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers.optimizer_base</span></code>.OptimizerBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.QNNClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.QNNRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.ShotsFromRSTD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.base_qnn</span></code>.BaseQNN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.get_lr_decay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.get_variance_fac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.LossBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.ODELoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.ParameterRegularizationLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.SquaredLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.VarianceLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn</span></code>.LowLevelQNN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn_base</span></code>.LowLevelQNNBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn_pennylane</span></code>.LowLevelQNNPennyLane", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn_qiskit</span></code>.Expec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn_qiskit</span></code>.LowLevelQNNQiskit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.training</span></code>.train", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.training</span></code>.train_mini_batch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qrc</span></code>.QRCClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qrc</span></code>.QRCRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qrc.base_qrc</span></code>.BaseQRC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util</span></code>.OpTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.executor</span></code>.ExecutorEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.executor</span></code>.ExecutorSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeContainer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeExpectationValue", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeList", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeMeasuredOperator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeOperator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeSum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeValue", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.pennylane</span></code>.PennyLaneCircuit", "Quantum Encoding Circuits", "The Executor Class", "Quantum Kernel Methods", "Observables for expectation values", "Quantum Neural Networks", "Quantum Reservoir Computing", "User Guide"], "titleterms": {"In": 89, "The": [0, 89], "acknowledg": 6, "adam": [49, 92], "adjust": 92, "analysi": 1, "api": 8, "ar": [13, 34, 48], "assess": 2, "attribut": [9, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 68, 70, 87], "automat": 89, "automated_prun": 27, "backend": [2, 89], "base": 8, "base_qnn": 58, "base_qrc": 75, "baseqnn": 58, "baseqrc": 75, "batch": 92, "bayesian": 4, "bleed": 7, "chebyshevpqc": 10, "chebyshevrx": 11, "chebyshevtow": 12, "circuit": [8, 88], "cite": 6, "class": [8, 89], "classif": [0, 90, 93], "classifi": 8, "combin": 88, "comput": 93, "configur": 2, "contact": 6, "content": 6, "contribut": 6, "core": 8, "creat": 88, "custom": [88, 91], "customobserv": 41, "data": [0, 1, 8], "decoupl": 2, "definit": 0, "depend": 7, "deriv": 91, "descent": 92, "design": 8, "develop": 7, "devic": 2, "differ": 88, "differenti": 3, "digit": 0, "dimension": 0, "document": 6, "dotproduct": 34, "dynam": [2, 92], "edg": 7, "emploi": 90, "encod": [8, 88], "encoding_circuit": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "encoding_circuit_bas": 28, "encodingcircuitbas": 28, "encodingcircuitderiv": [13, 88], "equat": 3, "error": 2, "evalu": [2, 90], "exampl": [5, 6], "execut": 8, "executor": [9, 77, 78, 89], "executorestim": 77, "executorsampl": 78, "expec": 69, "expect": 91, "expsinesquar": 34, "extrapol": 2, "factor": 92, "featur": 89, "fidel": 90, "fidelitykernel": [33, 90], "first": 3, "follow": 34, "fqk": 90, "free": 2, "gate": 17, "gaussian": [4, 34], "gener": 1, "get_deriv": [13, 48], "get_lr_decai": 59, "get_variance_fac": 60, "gradient": 92, "grid": 1, "guid": 94, "handwritten": 0, "high": [90, 92, 93], "highdimencodingcircuit": 14, "hubregtsenencodingcircuit": 15, "hyperparamet": 1, "ibm": [2, 89], "implement": [8, 34, 88, 91], "import": [0, 1, 2, 3], "initi": 89, "instal": [6, 7], "interfac": 8, "introduct": [], "isinghamiltonian": 42, "kei": 89, "kernel": [0, 1, 8, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 90], "kernel_loss_bas": 30, "kernel_matrix_bas": 35, "kernel_optim": [], "kernel_optimization_bas": [], "kernellossbas": 30, "kernelmatrixbas": 35, "kerneloptim": [], "kerneloptimizerbas": [], "kyriienkoencodingcircuit": 16, "layeredencodingcircuit": [17, 88], "lbfgsb": 50, "learn": 92, "level": [90, 92, 93], "librari": [1, 2, 3], "licens": 6, "literatur": [], "loss": [30, 31, 32, 61, 62, 63, 64, 65], "lossbas": 61, "lowlevel_qnn": 66, "lowlevel_qnn_bas": 67, "lowlevel_qnn_pennylan": 68, "lowlevel_qnn_qiskit": [69, 70], "lowlevelqnn": 66, "lowlevelqnnbas": 67, "lowlevelqnnpennylan": 68, "lowlevelqnnqiskit": 70, "m3": [], "machin": 0, "map": 91, "matern": 34, "matrix": [33, 34, 35], "max": 0, "method": [0, 9, 13, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 68, 70, 73, 74, 87, 90, 92, 93], "min": 0, "mini": 92, "mitig": 2, "ml": [36, 37, 38, 39, 40], "model": 4, "multicontrolencodingcircuit": 18, "negative_log_likelihood": 31, "network": [2, 92], "neural": [2, 92], "nll": 31, "nois": 2, "observ": [41, 42, 43, 44, 45, 46, 47, 48, 91], "observable_bas": 47, "observable_deriv": 48, "observablebas": 47, "observablederiv": 48, "od": 3, "odeloss": 62, "onli": 89, "oper": 8, "optim": [1, 4, 8, 49, 50, 51, 52, 53, 54, 92], "optimizer_bas": 54, "optimizerbas": 54, "option": [7, 89], "optre": [8, 76, 79, 80, 81, 82, 83, 84, 85, 86], "optreecircuit": 79, "optreecontain": 80, "optreeexpectationvalu": 81, "optreelist": 82, "optreemeasuredoper": 83, "optreeoper": 84, "optreesum": 85, "optreevalu": 86, "order": 3, "ordinari": 3, "outer": 34, "overview": [2, 89], "pairwisekernel": 34, "parallel": 89, "parameterregularizationloss": 63, "paramzfeaturemap": 19, "pennylan": [8, 87], "pennylanecircuit": 87, "pipelin": 1, "pqk": 90, "preprocess": 0, "prerequisit": [6, 7], "primit": [2, 89], "process": 4, "project": [0, 90], "projectedquantumkernel": [34, 90], "prune": 88, "prunedencodingcircuit": 20, "pruning_from_qfi": 29, "qcnnencodingcircuit": 21, "qgpc": 36, "qgpr": 37, "qiskit": [88, 89], "qiskitencodingcircuit": 22, "qkrr": 38, "qml": 8, "qnn": [2, 8, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 92], "qnnclassifi": 55, "qnnregressor": 56, "qpu": 89, "qrc": [73, 74, 75, 93], "qrcclassifi": 73, "qrcregressor": 74, "qsvc": 39, "qsvr": 40, "quantum": [0, 2, 4, 8, 88, 89, 90, 92, 93], "qubit": [17, 91], "randomencodingcircuit": 23, "randomlayeredencodingcircuit": 24, "rate": 92, "rationalquadrat": 34, "real": 91, "recogn": [13, 48], "recognit": 0, "reduct": [0, 92], "refer": 8, "regress": [90, 93], "regressor": 8, "regular": 92, "releas": [6, 7], "represent": 17, "reservoir": 93, "result": [1, 93], "retrain": [], "routin": 89, "run": 1, "sampler": 2, "scale": 0, "schedul": 92, "search": 1, "select": 89, "set": [0, 1, 2, 89], "setup": 93, "sglbo": 51, "shot": 92, "shotsfromrstd": 57, "simul": 2, "singl": 17, "singlepauli": 43, "singleprob": 44, "slsqp": [52, 92], "solv": 3, "split": 0, "spsa": 53, "squaredloss": 64, "squlearn": [6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "stabl": [6, 7], "string": [13, 17, 48], "structur": 8, "summari": 1, "summedpauli": 45, "summedprob": 46, "support": 0, "surrog": 4, "target_align": 32, "targetalign": 32, "tool": 8, "train": [2, 71, 72, 90, 93], "train_mini_batch": 72, "transpil": 88, "transpiledencodingcircuit": [25, 88], "trex": 2, "two": 17, "up": [1, 2], "us": [2, 4], "user": 94, "util": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89], "valu": 91, "varianc": 92, "varianceloss": 65, "vector": 0, "version": 7, "via": [88, 90], "welcom": 6, "without": 2, "wrap": 88, "your": 88, "yz_cx_encodingcircuit": 26, "zero": 2, "zne": 2}})