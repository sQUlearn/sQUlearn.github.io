Search.setIndex({"docnames": ["examples/example_kernel_grid_search", "examples/example_kernel_mnist", "examples/examples_index", "index", "install/install", "modules/classes", "modules/generated/squlearn.Executor", "modules/generated/squlearn.expectation_operator.CustomExpectationOperator", "modules/generated/squlearn.expectation_operator.IsingHamiltonian", "modules/generated/squlearn.expectation_operator.SinglePauli", "modules/generated/squlearn.expectation_operator.SingleProbability", "modules/generated/squlearn.expectation_operator.SummedPaulis", "modules/generated/squlearn.expectation_operator.SummedProbabilities", "modules/generated/squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase", "modules/generated/squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives", "modules/generated/squlearn.feature_map.ChebPQC", "modules/generated/squlearn.feature_map.ChebRx", "modules/generated/squlearn.feature_map.ChebyshevTower", "modules/generated/squlearn.feature_map.FeatureMapDerivatives", "modules/generated/squlearn.feature_map.HZCRxCRyCRz", "modules/generated/squlearn.feature_map.HighDimFeatureMap", "modules/generated/squlearn.feature_map.LayeredFeatureMap", "modules/generated/squlearn.feature_map.ParamZFeatureMap", "modules/generated/squlearn.feature_map.PrunedFeatureMap", "modules/generated/squlearn.feature_map.QEKFeatureMap", "modules/generated/squlearn.feature_map.QiskitFeatureMap", "modules/generated/squlearn.feature_map.QiskitZFeatureMap", "modules/generated/squlearn.feature_map.TranspiledFeatureMap", "modules/generated/squlearn.feature_map.YZ_CX_FeatureMap", "modules/generated/squlearn.feature_map.automated_pruning", "modules/generated/squlearn.feature_map.feature_map_base.FeatureMapBase", "modules/generated/squlearn.feature_map.pruning_from_QFI", "modules/generated/squlearn.kernel.matrix.FidelityKernel", "modules/generated/squlearn.kernel.matrix.ProjectedQuantumKernel", "modules/generated/squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase", "modules/generated/squlearn.kernel.ml.QGPC", "modules/generated/squlearn.kernel.ml.QGPR", "modules/generated/squlearn.kernel.ml.QKRR", "modules/generated/squlearn.kernel.ml.QSVC", "modules/generated/squlearn.kernel.ml.QSVR", "modules/generated/squlearn.kernel.optimization.kernel_loss_base.KernelLossBase", "modules/generated/squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase", "modules/generated/squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer", "modules/generated/squlearn.kernel.optimization.negative_log_likelihood.NLL", "modules/generated/squlearn.kernel.optimization.target_alignment.TargetAlignment", "modules/generated/squlearn.optimizers.optimizer_base.OptimizerBase", "modules/generated/squlearn.qnn.QNNClassifier", "modules/generated/squlearn.qnn.QNNRegressor", "modules/generated/squlearn.qnn.base_qnn.BaseQNN", "modules/generated/squlearn.qnn.loss.LossBase", "modules/generated/squlearn.qnn.loss.ParameterRegularizationLoss", "modules/generated/squlearn.qnn.loss.SquaredLoss", "modules/generated/squlearn.qnn.loss.VarianceLoss", "modules/generated/squlearn.qnn.qnn.Expec", "modules/generated/squlearn.qnn.qnn.QNN", "user_guide/executor", "user_guide/feature_maps", "user_guide/kernel_methods", "user_guide/operators", "user_guide/user_guide_index"], "filenames": ["examples\\example_kernel_grid_search.nblink", "examples\\example_kernel_mnist.nblink", "examples\\examples_index.rst", "index.rst", "install\\install.rst", "modules\\classes.rst", "modules\\generated\\squlearn.Executor.rst", "modules\\generated\\squlearn.expectation_operator.CustomExpectationOperator.rst", "modules\\generated\\squlearn.expectation_operator.IsingHamiltonian.rst", "modules\\generated\\squlearn.expectation_operator.SinglePauli.rst", "modules\\generated\\squlearn.expectation_operator.SingleProbability.rst", "modules\\generated\\squlearn.expectation_operator.SummedPaulis.rst", "modules\\generated\\squlearn.expectation_operator.SummedProbabilities.rst", "modules\\generated\\squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase.rst", "modules\\generated\\squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives.rst", "modules\\generated\\squlearn.feature_map.ChebPQC.rst", "modules\\generated\\squlearn.feature_map.ChebRx.rst", "modules\\generated\\squlearn.feature_map.ChebyshevTower.rst", "modules\\generated\\squlearn.feature_map.FeatureMapDerivatives.rst", "modules\\generated\\squlearn.feature_map.HZCRxCRyCRz.rst", "modules\\generated\\squlearn.feature_map.HighDimFeatureMap.rst", "modules\\generated\\squlearn.feature_map.LayeredFeatureMap.rst", "modules\\generated\\squlearn.feature_map.ParamZFeatureMap.rst", "modules\\generated\\squlearn.feature_map.PrunedFeatureMap.rst", "modules\\generated\\squlearn.feature_map.QEKFeatureMap.rst", "modules\\generated\\squlearn.feature_map.QiskitFeatureMap.rst", "modules\\generated\\squlearn.feature_map.QiskitZFeatureMap.rst", "modules\\generated\\squlearn.feature_map.TranspiledFeatureMap.rst", "modules\\generated\\squlearn.feature_map.YZ_CX_FeatureMap.rst", "modules\\generated\\squlearn.feature_map.automated_pruning.rst", "modules\\generated\\squlearn.feature_map.feature_map_base.FeatureMapBase.rst", "modules\\generated\\squlearn.feature_map.pruning_from_QFI.rst", "modules\\generated\\squlearn.kernel.matrix.FidelityKernel.rst", "modules\\generated\\squlearn.kernel.matrix.ProjectedQuantumKernel.rst", "modules\\generated\\squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.rst", "modules\\generated\\squlearn.kernel.ml.QGPC.rst", "modules\\generated\\squlearn.kernel.ml.QGPR.rst", "modules\\generated\\squlearn.kernel.ml.QKRR.rst", "modules\\generated\\squlearn.kernel.ml.QSVC.rst", "modules\\generated\\squlearn.kernel.ml.QSVR.rst", "modules\\generated\\squlearn.kernel.optimization.kernel_loss_base.KernelLossBase.rst", "modules\\generated\\squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase.rst", "modules\\generated\\squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer.rst", "modules\\generated\\squlearn.kernel.optimization.negative_log_likelihood.NLL.rst", "modules\\generated\\squlearn.kernel.optimization.target_alignment.TargetAlignment.rst", "modules\\generated\\squlearn.optimizers.optimizer_base.OptimizerBase.rst", "modules\\generated\\squlearn.qnn.QNNClassifier.rst", "modules\\generated\\squlearn.qnn.QNNRegressor.rst", "modules\\generated\\squlearn.qnn.base_qnn.BaseQNN.rst", "modules\\generated\\squlearn.qnn.loss.LossBase.rst", "modules\\generated\\squlearn.qnn.loss.ParameterRegularizationLoss.rst", "modules\\generated\\squlearn.qnn.loss.SquaredLoss.rst", "modules\\generated\\squlearn.qnn.loss.VarianceLoss.rst", "modules\\generated\\squlearn.qnn.qnn.Expec.rst", "modules\\generated\\squlearn.qnn.qnn.QNN.rst", "user_guide\\executor.rst", "user_guide\\feature_maps.rst", "user_guide\\kernel_methods.rst", "user_guide\\operators.rst", "user_guide\\user_guide_index.rst"], "titles": ["Hyperparamter Optimization and Pipelines", "Handwritten Digit Recognition with Projected Quantum Kernels", "Examples", "Welcome to sQUlearn\u2019s documentation!", "Installation", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn</span></code>.Executor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.expectation_operator</span></code>.CustomExpectationOperator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.expectation_operator</span></code>.IsingHamiltonian", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.expectation_operator</span></code>.SinglePauli", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.expectation_operator</span></code>.SingleProbability", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.expectation_operator</span></code>.SummedPaulis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.expectation_operator</span></code>.SummedProbabilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.expectation_operator.expectation_operator_base</span></code>.ExpectationOperatorBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.expectation_operator.expectation_operator_derivatives</span></code>.ExpectationOperatorDerivatives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.ChebPQC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.ChebRx", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.ChebyshevTower", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.FeatureMapDerivatives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.HZCRxCRyCRz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.HighDimFeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.LayeredFeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.ParamZFeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.PrunedFeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.QEKFeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.QiskitFeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.QiskitZFeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.TranspiledFeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.YZ_CX_FeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.automated_pruning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map.feature_map_base</span></code>.FeatureMapBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.feature_map</span></code>.pruning_from_QFI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix</span></code>.FidelityKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix</span></code>.ProjectedQuantumKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix.kernel_matrix_base</span></code>.KernelMatrixBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QGPC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QGPR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QKRR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.kernel_loss_base</span></code>.KernelLossBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.kernel_optimization_base</span></code>.KernelOptimizerBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.kernel_optimizer</span></code>.KernelOptimizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.negative_log_likelihood</span></code>.NLL", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.target_alignment</span></code>.TargetAlignment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers.optimizer_base</span></code>.OptimizerBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.QNNClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.QNNRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.base_qnn</span></code>.BaseQNN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.LossBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.ParameterRegularizationLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.SquaredLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.VarianceLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.qnn</span></code>.Expec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.qnn</span></code>.QNN", "The Executor Class", "Quantum Feature Maps", "Quantum Kernel Methods", "Operators for expectation values", "User Guide"], "terms": {"thi": [0, 1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 21, 23, 32, 33, 35, 36, 37, 38, 39, 42, 43, 44, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58], "tutori": [0, 3], "demonstr": [0, 1], "how": [0, 1, 20, 35, 55, 57], "integr": [0, 3], "quantum": [0, 2, 3, 6, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 54, 55, 58, 59], "machin": [0, 2, 3, 4, 32, 33, 36, 37, 43, 56, 57], "learn": [0, 1, 3, 4, 32, 33, 35, 36, 37, 38, 39, 43, 46, 47, 56, 57], "algorithm": [0, 1, 3, 29, 31, 33, 36, 55, 56, 57], "specif": [0, 1, 6, 38, 39], "method": [0, 2, 3, 25, 31, 32, 34, 48, 55, 56, 59], "from": [0, 1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 53, 54, 55, 56, 57, 58], "squlearn": [0, 1, 4, 55, 56, 57, 58], "tradit": [0, 3], "workflow": [0, 1, 57], "scikit": [0, 3, 4, 33, 35, 36, 37, 38, 39, 46, 47, 57], "we": [0, 1, 56, 57], "ll": 0, "go": [0, 1], "through": [0, 6, 21, 55, 57], "preprocess": [0, 2, 46], "model": [0, 1, 3, 32, 36, 37, 46, 47, 48, 50, 51, 52, 56, 57], "definit": [0, 2, 7, 8, 9, 10, 11, 12, 13, 21, 43, 44, 57, 58], "hyperparamet": [0, 33, 36, 37, 43], "us": [0, 1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 53, 54, 55, 56, 57, 58], "gridsearchcv": 0, "The": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 35, 36, 37, 38, 39, 42, 43, 44, 46, 47, 51, 54, 56, 57, 58, 59], "object": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 53, 54, 55, 56], "i": [0, 1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58], "highlight": [0, 1], "can": [0, 1, 3, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 32, 33, 36, 37, 38, 39, 42, 43, 44, 46, 47, 48, 54, 55, 56, 57, 58], "seamlessli": [0, 3, 6], "alongsid": 0, "classic": [0, 1, 33, 56, 57], "In": [0, 1, 6, 54, 55, 56, 57, 58], "initi": [0, 6, 32, 33, 34, 41, 42, 46, 47, 48, 54, 57, 59], "cell": [0, 1], "ar": [0, 1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 54, 55, 56, 57, 58], "all": [0, 1, 3, 6, 8, 12, 21, 32, 33, 50, 51, 55, 56, 57, 58], "requir": [0, 3, 4, 6, 55], "like": [0, 35, 55], "support": [0, 2, 3, 9, 35, 36, 37, 38, 39, 57, 58], "vector": [0, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 56, 57], "regress": [0, 1, 3, 5, 36, 37, 38, 39, 46, 47, 51, 52], "qsvr": [0, 36, 37, 38, 57], "gaussian": [0, 1, 3, 35, 36, 37, 43, 57], "process": [0, 3, 35, 36, 37, 43, 57], "qgpr": [0, 37, 57], "For": [0, 1, 46, 47, 56, 57], "task": [0, 1, 57], "scale": [0, 2, 17, 36, 57], "reli": [0, 57], "1": [0, 1, 4, 6, 10, 12, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 32, 33, 35, 36, 37, 39, 42, 43, 44, 47, 56, 57, 58], "matplotlib": [0, 1], "pylab": [0, 1], "plt": [0, 1], "numpi": [0, 1, 4, 6, 21, 31, 32, 33, 34, 38, 39, 47, 49, 50, 51, 52, 57], "np": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 51, 54, 56, 57], "panda": 0, "pd": 0, "seaborn": 0, "sn": 0, "sklearn": [0, 1, 35, 38, 39, 46, 47], "model_select": [0, 1, 38, 39, 46, 47], "standardscal": 0, "executor": [0, 1, 3, 29, 32, 33, 34, 35, 36, 37, 38, 39, 42, 46, 47, 48, 54, 56, 57, 59], "feature_map": [0, 1, 32, 33, 34, 35, 36, 37, 38, 39, 42, 46, 47, 48, 56, 57, 58], "yz_cx_featuremap": 0, "matrix": [0, 1, 29, 31, 35, 36, 37, 38, 39, 42, 43, 44, 56, 57], "fidelitykernel": [0, 33, 35, 36, 42], "projectedquantumkernel": [0, 1, 37, 38, 39], "ml": [0, 1, 33, 46, 47], "here": [0, 1, 38, 39], "synthet": 0, "sampl": [0, 1, 37], "train": [0, 1, 3, 15, 32, 33, 34, 36, 37, 43, 44, 46, 47, 56, 58, 59], "where": [0, 1, 6, 8, 15, 16, 21, 36, 56, 57], "perform": [0, 1, 33, 37, 46, 47, 48, 56], "also": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 55, 56, 57, 58], "creat": [0, 1, 3, 6, 8, 21, 24, 25, 28, 33, 53, 54, 55, 58, 59], "hold": [0, 40, 53, 57], "out": [0, 20, 55, 57], "test": [0, 1, 32, 33, 34, 36, 38, 39, 57], "which": [0, 1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 37, 41, 54, 55, 56, 57, 58], "score": [0, 1, 35, 38, 39], "best": 0, "estim": [0, 6, 55, 57], "2": [0, 1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 46, 47, 50, 51, 54, 55, 56, 57, 58], "def": [0, 21], "generate_i": 0, "x": [0, 1, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 37, 38, 39, 41, 42, 46, 47, 48, 54, 56, 57, 58], "u": [0, 1, 21], "pi": [0, 29, 33, 39], "return": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "sin": [0, 33, 39], "random": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 42, 46, 47, 48], "seed": [0, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 46, 47, 48], "42": [0, 1, 4, 46, 47], "defin": [0, 1, 20, 21, 32, 34, 41, 43, 44, 53, 54, 57], "linspac": [0, 39], "100": [0, 38, 39, 57], "y": [0, 1, 9, 11, 15, 21, 32, 33, 34, 35, 36, 38, 39, 41, 42, 43, 46, 47, 48, 56, 57, 58], "x_train": [0, 1, 36, 37, 38, 39, 42, 46, 47, 57], "choic": [0, 1, 32, 36, 57], "20": [0, 42], "y_train": [0, 1, 36, 37, 38, 39, 42, 46, 47, 57], "x_test": [0, 1, 36, 37, 38, 39, 46, 47], "y_test": [0, 1, 38, 39, 46, 47], "figur": [0, 1, 55], "figsiz": 0, "10": [0, 1, 6, 20, 29, 31, 33, 55, 56], "5": [0, 1, 4, 10, 12, 20, 33, 37, 43, 46, 47, 57], "plot": [0, 1], "label": [0, 1, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 37, 41, 42, 43, 44, 46, 47, 48, 53], "ground": 0, "truth": 0, "o": [0, 14, 53, 54], "v": 0, "legend": 0, "lt": [0, 1], "0x1ccd24cc160": 0, "gt": [0, 1], "want": [0, 1, 55], "compar": 0, "two": [0, 1, 7, 15, 33, 36, 56, 57], "qml": [0, 1, 3, 57], "same": [0, 8, 11, 12, 14, 21, 51, 55, 56, 57], "featur": [0, 1, 3, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 41, 46, 47, 48, 54, 57, 58, 59], "map": [0, 1, 3, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 39, 41, 46, 47, 48, 54, 57, 58, 59], "variant": 0, "calcul": [0, 1, 14, 33, 36, 49, 50, 51, 52, 56, 57, 58], "fidel": [0, 3, 19, 24, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44], "project": [0, 2, 3, 33, 35, 36, 37, 38, 39, 43, 44, 55, 56, 58], "init": [0, 1], "paramet": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58], "These": [0, 1, 32, 38, 39, 57], "vari": 0, "dure": [0, 15, 58], "instanc": [0, 6, 29, 32, 36, 37, 46, 47, 48, 55, 57], "initialz": 0, "statevector": 0, "simul": [0, 1, 3, 6, 55], "3": [0, 1, 4, 14, 15, 20, 21, 25, 27, 32, 37, 38, 56, 57, 58], "num_qubit": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 54, 56, 57, 58], "4": [0, 1, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 37, 43, 46, 47, 54, 56, 57, 58], "num_featur": [0, 1, 15, 16, 17, 18, 19, 20, 21, 22, 24, 28, 30, 33, 35, 36, 37, 38, 39, 42, 56, 57], "num_lay": [0, 1, 15, 16, 17, 18, 19, 20, 21, 22, 24, 28, 35, 36, 37, 38, 39, 42, 56, 57], "statevector_simul": [0, 1, 6, 33, 35, 36, 37, 38, 39, 42, 46, 47, 55, 56, 57], "fidelity_kernel": 0, "parameter_se": [0, 32, 33, 34, 46, 47, 48, 57], "0": [0, 1, 4, 10, 12, 15, 16, 17, 18, 20, 27, 28, 32, 33, 34, 35, 37, 38, 39, 42, 43, 46, 47, 50, 52, 55, 56, 57, 58], "projected_kernel": 0, "draw": [0, 1, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 56], "q_0": 0, "ry": [0, 17, 19, 21, 25, 28, 56], "p": [0, 1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 33, 37, 56, 57], "rz": [0, 17, 19, 21, 28, 56], "q_1": 0, "q_2": 0, "q_3": 0, "6": [0, 1, 4, 36, 37], "7": [0, 1, 23], "8": [0, 1, 43], "9": [0, 1, 3, 4, 46, 47], "11": [0, 1, 23], "12": [0, 1, 4, 33, 57], "13": [0, 1], "14": [0, 1, 37], "15": [0, 23], "section": 0, "both": [0, 1, 6, 55, 56, 57], "abov": [0, 1, 20, 55, 57], "includ": [0, 3, 6, 11, 12, 46, 47, 48, 54, 55, 56], "number": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 46, 47, 48, 50, 52, 54, 55, 56, 58], "qubit": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 24, 26, 28, 30, 33, 37, 38, 39, 56, 57, 58], "layer": [0, 1, 3, 15, 16, 17, 19, 20, 21, 22, 24, 26, 28, 37, 38, 39, 56], "num_qubit_list": 0, "num_layers_list": 0, "feature_map_param": 0, "estimator__num_qubit": 0, "estimator__num_lay": 0, "estimator_list": 0, "quantum_kernel": [0, 1, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 57], "full_regular": [0, 36], "fals": [0, 1, 7, 9, 10, 11, 12, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 36, 48, 55, 56], "param_grid": 0, "estimator_param": 0, "copi": [0, 55], "append": [0, 33], "To": [0, 1, 3, 4, 56, 57, 58], "ensur": [0, 3, 56], "each": [0, 1, 11, 46, 47, 48, 51, 54, 56, 57, 58], "ha": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 26, 29, 30, 38, 39, 49, 50, 51, 52, 57], "mean": [0, 36], "standard": [0, 3, 36, 38, 39, 55, 57], "deviat": [0, 36], "make": [0, 1, 19, 24, 37], "easier": [0, 1], "part": [0, 46, 47], "cross": 0, "valid": [0, 34], "an": [0, 1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 25, 33, 53, 54, 55, 56, 57, 58], "overwritten": [0, 6, 30], "scaler": [0, 1], "now": [0, 1], "everyth": [0, 6], "execut": [0, 3, 6, 54, 55], "fit": [0, 1, 32, 33, 35, 36, 37, 38, 39, 46, 47, 48], "evalu": [0, 1, 6, 7, 14, 18, 29, 32, 33, 34, 54, 55, 56, 58, 59], "everi": [0, 1, 33], "combin": [0, 28, 33, 46, 47, 54, 59], "choos": [0, 32, 33], "case": [0, 1, 6, 14, 36, 54, 55], "base": [0, 1, 3, 6, 13, 17, 23, 29, 30, 32, 33, 34, 36, 45, 46, 47, 48, 49, 56, 57, 58], "grid_search": 0, "neg_mean_squared_error": 0, "reshap": [0, 33, 37], "step": [0, 1, 37], "39": 0, "0x000001ccd34e0160": 0, "estimat": 0, "c": [0, 1, 8, 28], "cache_s": [0, 1], "200": [0, 1], "epsilon": 0, "max_it": [0, 1], "projected_quantum_kernel": [0, 1], "0x000001ccd24cc610": 0, "shrink": [0, 1], "true": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58], "tol": [0, 1], "001": [0, 1], "verbos": [0, 1, 29], "visual": [0, 1], "differ": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 21, 32, 33, 55, 57, 59], "heatmap": 0, "repres": [0, 1, 57], "color": [0, 1], "neg": [0, 43, 44, 57], "mse": 0, "larger": [0, 7, 8, 9, 10, 11, 12, 13, 36, 37], "better": 0, "allow": [0, 1, 3, 7, 8, 11, 18, 55, 56], "intuit": 0, "understand": [0, 1], "impact": 0, "extract": 0, "datafram": 0, "results_df": 0, "cv_results_": 0, "uniqu": 0, "per": [0, 17], "num_combin": 0, "len": 0, "num_estim": 0, "subplot": 0, "n_row": 0, "int": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 46, 47, 50, 52, 54], "ceil": 0, "sqrt": [0, 33, 44], "n_col": 0, "fig": [0, 1], "ax": 0, "flatten": [0, 15, 16], "axi": [0, 15], "arrai": [0, 3, 6, 7, 8, 9, 10, 11, 12, 13, 29, 32, 33, 34, 35], "index": [0, 7, 17, 20], "min": [0, 2, 55], "max": [0, 2], "colormap": 0, "vmin": 0, "vmax": 0, "mean_test_scor": 0, "estimator_nam": 0, "pqk": [0, 35, 36, 37, 38, 39, 40, 43, 44], "loop": [0, 57], "chunk": 0, "rang": [0, 56], "start_idx": 0, "end_idx": 0, "chunk_df": 0, "iloc": 0, "pivot": 0, "get": [0, 6, 46, 47, 48, 58], "form": [0, 1, 14, 15, 22, 57], "suitabl": 0, "heatmap_data": 0, "pivot_t": 0, "param_estimator__num_qubit": 0, "column": [0, 20], "param_estimator__num_lay": 0, "valu": [0, 1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59], "cbar": 0, "disabl": [0, 55], "individu": [0, 56], "colorbar": 0, "annot": 0, "fmt": 0, "3f": 0, "cmap": 0, "coolwarm": 0, "set_titl": 0, "f": [0, 1, 8, 36, 38, 39, 51, 57], "set_xlabel": 0, "set_ylabel": 0, "add": [0, 1, 21], "cbar_ax": 0, "add_ax": 0, "92": 0, "02": 0, "collect": [0, 3, 57], "cax": 0, "tight_layout": 0, "rect": 0, "show": [0, 1, 35, 55, 57], "user": [0, 3, 6, 35, 37, 56, 57], "mcr": 0, "appdata": 0, "local": [0, 25, 56, 57], "temp": 0, "ipykernel_20080": 0, "629527406": 0, "py": 0, "47": 0, "userwarn": 0, "compat": [0, 55], "so": [0, 1, 57], "might": 0, "incorrect": 0, "its": [0, 1, 18, 25, 35, 36, 53, 54, 56], "predict": [0, 1, 35, 36, 37, 46, 47], "shown": [0, 20, 57], "best_estim": 0, "best_estimator_": 0, "test_scor": 0, "print": [0, 1, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 39, 58], "y_pred": [0, 1, 46, 47], "scatter": 0, "red": 0, "xlabel": 0, "ylabel": 0, "titl": [0, 1], "999999978217105": 0, "note": [0, 1, 7, 36, 55, 56, 57, 58], "did": 0, "quit": 0, "good": [0, 56], "counterpart": [0, 57], "sensit": 0, "addit": [0, 6, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 38, 39, 56, 57], "have": [0, 1, 21, 54, 56, 57], "been": [0, 57], "regular": [0, 32, 33, 34, 36, 37, 43, 46, 47, 50, 55, 57], "slack": 0, "variabl": [0, 21], "treat": 0, "equal": [0, 8, 11, 12, 26, 56], "estimator__c": 0, "1e0": 0, "1e1": 0, "1e2": 0, "estimator__epsilon": 0, "1e": [0, 29, 31, 37], "best_score_": 0, "0204753114345332e": 0, "05": 0, "0001": 0, "0x000001ccd3782250": 0, "With": [0, 1, 25], "more": [0, 1, 3, 14, 15, 35, 37, 56, 58], "adequ": 0, "similarli": [0, 55], "notebook": 1, "imag": 1, "classifi": [1, 3], "comput": [1, 3, 7, 14, 18, 32, 33, 34, 40, 43, 44, 54, 55, 56, 57, 58], "promis": [1, 57], "advantag": 1, "over": [1, 57], "convent": [1, 57], "becaus": [1, 38, 39], "thei": [1, 6, 38, 39, 46, 47, 55, 56, 57], "exponenti": [1, 57], "larg": 1, "state": [1, 7, 10, 12, 32, 56, 57], "space": [1, 32, 33, 57], "howev": [1, 55, 56], "size": [1, 57], "disadvantag": 1, "back": 1, "after": [1, 20, 32, 33, 55, 57], "being": [1, 10], "hilbert": [1, 32, 33, 57], "order": [1, 14, 21, 54, 57, 58], "take": [1, 6, 56], "benefit": [1, 55], "without": [1, 56, 57], "drawback": 1, "": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 33, 36, 37, 41, 47, 54, 57], "implement": [1, 3, 8, 10, 12, 14, 21, 31, 32, 36, 37, 40, 46, 47, 49, 50, 57, 59], "qsvc": [1, 35, 39, 57], "well": [1, 57], "known": [1, 57], "easili": 1, "solvabl": [1, 36, 37], "appli": [1, 14, 21, 33, 38, 39, 56, 57], "solv": [1, 32, 33, 36, 37, 57, 58], "kind": [1, 8, 11], "transfer": 1, "complex": [1, 57, 58], "pipelin": [1, 2, 3, 37], "let": 1, "start": [1, 3, 15, 17, 20, 41], "off": [1, 8, 15], "do": [1, 38, 39, 55], "some": [1, 6, 21, 57], "helper": 1, "function": [1, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "line": [1, 57], "line2d": 1, "dataset": [1, 35, 38, 46], "load_digit": 1, "manifold": 1, "tsne": 1, "metric": [1, 33, 57], "accuracy_scor": 1, "train_test_split": [1, 38, 39, 46, 47], "minmaxscal": [1, 46], "chebpqc": [1, 37, 56, 57], "hidden": 1, "websit": 1, "sake": 1, "readabl": 1, "If": [1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 53, 54, 55, 57], "you": [1, 3, 56, 57], "replic": 1, "code": [1, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 56], "pleas": [1, 3, 56], "see": [1, 14, 18, 34, 35, 38, 39, 55, 57], "origin": [1, 56, 57], "mnist": 1, "exampl": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 35, 36, 37, 38, 39, 42, 46, 47, 54, 55, 56, 57, 58], "compris": 1, "pictur": 1, "28": [1, 44], "time": [1, 6, 15, 21, 55, 57], "pixel": 1, "contain": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 50, 51, 52, 56, 57], "one": [1, 6, 9, 11, 19, 21, 24, 36, 57], "singl": [1, 9, 10, 11, 12, 14, 28, 58], "accord": [1, 46, 47, 56], "numer": [1, 18, 32, 33, 34, 36, 37], "depict": 1, "load": 1, "file": [1, 6, 55], "displai": [1, 3, 53], "return_x_i": [1, 35], "input": [1, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 42, 46, 47, 48, 53, 54, 55, 56, 58], "store": [1, 54], "row": [1, 20], "dimens": [1, 15, 16, 17, 19, 20, 21, 22, 24, 28, 30, 56], "64": 1, "left": [1, 20, 33, 50, 51, 57, 58], "right": [1, 33, 50, 51, 57, 58], "class": [1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59], "between": [1, 15, 22, 26, 33, 51, 55, 56, 57], "continu": 1, "plot_dataset": 1, "need": [1, 3, 57, 58], "coupl": 1, "art": 1, "limit": [1, 29], "them": [1, 21, 57], "hardwar": [1, 15, 19, 24], "onli": [1, 6, 11, 18, 29, 32, 36, 46, 47, 54, 55, 57, 58], "possibl": [1, 6, 11, 17, 21, 33, 37, 38, 39, 46, 47, 50, 55, 56, 58], "few": 1, "handl": [1, 3, 6, 55], "our": [1, 3], "would": 1, "result": [1, 2, 6, 14, 36, 37, 42, 54, 55, 56, 57], "either": [1, 6, 14, 15, 17, 18, 20, 21, 33, 35, 36, 37, 38, 39, 40, 43, 44, 50, 56, 57], "veri": [1, 21], "wide": [1, 56], "yet": 1, "deep": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 54], "noisi": 1, "circuit": [1, 3, 6, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 46, 47, 48, 54, 55, 56, 57], "therefor": [1, 57], "t": [1, 21, 32, 33, 43, 44, 46, 47, 57], "sne": 1, "leav": 1, "x_tsne": 1, "n_compon": 1, "learning_r": 1, "auto": [1, 25], "perplex": 1, "40": 1, "fit_transform": [1, 46], "next": [1, 6, 54], "interv": 1, "improv": [1, 36, 37], "overli": 1, "consid": [1, 3, 8, 25, 28, 29, 31, 53, 57], "x_scale": 1, "transform": 1, "hint": 1, "rerun": 1, "view": [1, 57], "respect": [1, 18, 32, 33, 36, 37, 40, 41, 53, 54, 56, 57, 58], "posit": [1, 36, 37], "arang": [1, 47], "1000": [1, 6, 55], "shape": [1, 35, 36, 37], "replac": [1, 14, 38, 39], "plot_numb": 1, "plot_data_in_feature_spac": 1, "highlight_row": 1, "clearli": 1, "cluster": 1, "new": [1, 6, 46, 47, 48, 55], "locat": 1, "mark": [1, 57], "lastli": [1, 3], "select": [1, 23], "n": [1, 8, 20, 21, 43, 57], "n_sampl": [1, 29, 36, 37, 38], "test_siz": [1, 46, 47], "33": [1, 46, 47], "random_st": [1, 38, 39, 46, 47], "power": [1, 33, 57], "techniqu": [1, 32, 33, 57], "variou": [1, 3, 6, 55], "problem": [1, 36, 37, 57], "core": [1, 3], "idea": [1, 57], "behind": 1, "high": [1, 3, 6, 20, 55, 59], "becom": 1, "separ": [1, 6, 21], "phi": [1, 32, 57], "It": [1, 3, 6, 17, 21, 38, 39, 46, 47, 55, 56], "hyperplan": 1, "similar": [1, 6, 7, 21, 57], "point": [1, 33, 36, 46, 47, 48, 51, 57], "scalar": 1, "product": [1, 57], "langl": [1, 32], "rangl": [1, 32], "trick": [1, 57], "directli": [1, 3], "explicitli": [1, 57], "leverag": [1, 3, 55, 56], "parameter": [1, 7, 9, 10, 15, 22, 29, 32, 33, 46, 47, 48, 54, 56, 58], "pqc": [1, 32, 34, 46, 47, 48, 54, 56, 57], "ket": [1, 10, 12, 57], "potenti": [1, 3], "cf": [1, 37, 57], "encod": [1, 15, 16, 17, 19, 21, 24, 57], "obtain": [1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 36, 37, 38, 39, 54, 55, 56, 57, 59], "measur": [1, 6, 7, 8, 9, 10, 11, 12, 13, 33, 37, 57], "wave": [1, 53, 58], "k": [1, 32, 33, 36, 43, 57], "vert": 1, "text": [1, 9, 10, 33, 50], "sever": [1, 3, 56, 57], "element": [1, 15, 18], "overal": 1, "quadrat": [1, 57], "instead": [1, 11, 12, 55], "intrigu": 1, "properti": [1, 55, 57], "effect": [1, 57], "far": 1, "other": [1, 55, 58], "thu": [1, 55, 57], "bad": 1, "allevi": 1, "come": 1, "onc": 1, "lead": [1, 57], "linear": [1, 3, 15, 21, 25, 32, 33, 36, 37, 56, 57], "reprint": 1, "huang": [1, 33, 57], "hy": [1, 33], "broughton": [1, 33], "m": [1, 33, 36, 57], "mohseni": [1, 33], "et": [1, 32, 33, 44, 57], "al": [1, 32, 33, 44, 57], "nat": [1, 33, 57], "commun": [1, 33, 57], "2631": [1, 33, 57], "2021": [1, 32, 33, 44, 57], "http": [1, 3, 4, 15, 20, 24, 28, 29, 31, 36, 37, 38, 39, 56], "doi": [1, 20, 29, 31, 56], "org": [1, 15, 20, 24, 28, 29, 31, 36, 37, 38, 39, 56], "1038": 1, "s41467": 1, "021": 1, "22539": 1, "licens": 1, "under": 1, "cc": 1, "BY": 1, "four": [1, 9], "three": [1, 15, 33], "rotat": [1, 15, 17, 19, 21, 24], "mathrm": [1, 57], "r": 1, "_": [1, 18, 57], "trainabl": [1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 25, 32, 33, 34, 41, 49, 50, 51, 52, 56, 57], "arcco": [1, 21, 56], "angl": 1, "follow": [1, 3, 4, 19, 21, 55, 56, 57, 58], "circular": 1, "entangl": [1, 15, 16, 19, 20, 21, 22, 24, 56, 57], "control": [1, 15, 19, 21, 57], "z": [1, 7, 8, 9, 10, 11, 12, 21, 22, 33, 47, 56, 57, 58], "gate": [1, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 56], "enclos": 1, "output": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 33, 46, 47, 48, 51, 52, 54, 56], "mpl": [1, 56], "sinc": [1, 55], "twelv": 1, "repeat": [1, 15, 19, 21, 24, 26], "ascend": 1, "call": [1, 6, 21, 25, 37, 38, 39, 56, 57], "re": [1, 55], "upload": 1, "own": [1, 56], "32": 1, "direct": [1, 20], "embed": [1, 32, 33, 44, 57], "furthermor": [1, 21, 56], "outer": [1, 15, 16, 57], "e": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 43, 54, 55, 57], "k_": [1, 33, 43, 44], "ij": [1, 8, 18], "exp": [1, 33, 57], "gamma": [1, 33, 37, 38, 39, 57], "lvert": 1, "theta": [1, 9, 57], "x_i": [1, 18, 33, 44, 51], "x_j": [1, 18, 33, 44], "rvert_2": 1, "cdot": [1, 33, 57], "correspond": [1, 6, 15, 16, 55, 57], "l_2": 1, "norm": 1, "fix": [1, 32, 33, 34], "again": [1, 20], "mapsto": 1, "xyz": [1, 33, 37, 57], "outer_kernel": [1, 33, 37, 57], "initial_paramet": [1, 32, 33, 34, 37, 38, 39, 41, 42], "rand": [1, 33, 35, 36, 38, 39, 42, 46, 47], "num_paramet": [1, 7, 8, 9, 10, 11, 12, 13, 14, 33, 35, 36, 38, 39, 42], "readi": 1, "svm": [1, 38, 39, 57], "A": [1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 17, 20, 21, 25, 26, 37, 46, 47, 48, 54, 55, 57], "work": [1, 54, 57], "find": [1, 41, 57], "categori": 1, "chosen": [1, 15, 32], "maxim": 1, "distanc": [1, 33, 57], "closest": 1, "help": 1, "decis": 1, "boundari": 1, "establish": 1, "side": 1, "fall": 1, "break_ti": 1, "class_weight": 1, "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 45, 46, 47, 48, 50, 51, 54, 57], "decision_function_shap": 1, "x27": 1, "ovr": 1, "probabl": [1, 10, 12, 46, 54, 57], "0x00000246a682b550": 1, "jupyt": 1, "environ": [1, 3, 6, 55], "html": [1, 38, 39], "represent": [1, 57], "trust": 1, "On": 1, "github": [1, 3, 4], "unabl": 1, "render": 1, "try": 1, "page": 1, "nbviewer": 1, "qsvcqsvc": 1, "check": [1, 46, 47, 55], "accuraci": 1, "9402985074626866": 1, "9545454545454546": 1, "describ": [1, 18, 53, 57], "share": 1, "correctli": 1, "multiclass": 1, "frac": [1, 14, 18, 33, 43, 44], "correct": 1, "total": [1, 7, 8, 9, 10, 11, 12, 13, 14, 56], "previou": [1, 19, 24], "inform": [1, 14, 29, 31, 38, 39, 55, 56, 57], "were": 1, "addition": [1, 4, 8], "background": [1, 37], "indic": [1, 6, 15, 16, 20, 23, 31, 55, 56], "region": 1, "assign": [1, 14, 18, 20, 25, 32, 33, 34, 57], "plot_result": 1, "clf": [1, 46], "x_highlight": 1, "y_highlight": 1, "x_rang": 1, "resolut": 1, "30": 1, "final": 1, "chose": 1, "begin": 1, "handwritten": [2, 3], "digit": [2, 3], "recognit": [2, 3], "kernel": [2, 3, 19, 24, 56, 58, 59], "import": [2, 6, 8, 14, 18, 21, 23, 25, 27, 33, 35, 36, 37, 38, 39, 42, 46, 47, 55, 56, 57, 58], "data": [2, 20, 26, 28, 29, 32, 33, 34, 36, 37, 41, 42, 43, 44, 46, 47, 48, 51, 53, 54, 56, 57], "dimension": [2, 15, 16, 17, 19, 20, 22, 24, 28, 57], "reduct": 2, "split": [2, 57], "set": [2, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59], "classif": [2, 5, 20, 35, 38, 39, 46, 47], "hyperparamt": [2, 3], "optim": [2, 3, 15, 36, 46, 47, 48, 55, 57], "summari": 2, "librari": [2, 25, 56], "gener": [2, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 38, 39, 46, 47, 48, 54, 56, 57], "up": [2, 20, 53, 55, 57], "grid": 2, "search": 2, "run": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 41, 42, 55, 58], "analysi": [2, 57], "novel": 3, "python": [3, 4], "packag": [3, 4, 55, 56], "introduc": [3, 57], "capabl": 3, "via": [3, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 55, 58, 59], "level": [3, 6, 55, 59], "low": [3, 6, 20, 55], "design": [3, 23, 56, 57], "approach": [3, 56, 57], "ridg": [3, 37, 57], "neural": [3, 46, 47, 48, 56, 58], "network": [3, 46, 47, 48, 56, 58], "qnn": [3, 33, 45, 56, 57, 58], "engin": 3, "facilit": [3, 56], "effici": [3, 15, 19, 24], "gradient": [3, 18, 49, 50, 51, 52, 55], "autom": [3, 29, 56], "non": [3, 15, 21], "parametr": [3, 57], "further": 3, "custom": [3, 7, 33, 58, 59], "enhanc": [3, 32], "flexibl": 3, "outcom": 3, "meet": 3, "latter": [3, 15], "tool": 3, "wise": 3, "string": [3, 6, 7, 11, 33, 53, 54, 55, 56, 58], "encourag": 3, "innov": 3, "beyond": [3, 57], "backend": [3, 6, 7, 8, 9, 10, 11, 12, 13, 27, 32, 55, 56, 57, 58], "ibm": [3, 4, 6, 55], "session": [3, 6, 55], "manag": [3, 55], "resourc": 3, "access": [3, 18, 55, 56, 57, 58], "experiment": 3, "least": 3, "version": 3, "command": [3, 4], "pip": [3, 4], "altern": [3, 17, 25, 56], "git": [3, 4], "ssh": 3, "com": [3, 4], "There": [3, 56], "elabor": 3, "avail": [3, 25, 56, 57, 58], "folder": [3, 55], "beginn": 3, "found": [3, 6, 14, 18, 56], "thank": 3, "read": [3, 8, 35, 37], "guidelin": [3, 57], "befor": [3, 6, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 36, 46, 47, 48, 55], "submit": 3, "pull": [3, 56], "request": [3, 36, 56], "apach": 3, "maintain": 3, "group": [3, 21, 55, 58], "fraunhof": 3, "institut": 3, "manufactur": 3, "ipa": 3, "www": 3, "de": 3, "bleed": 3, "edg": 3, "develop": 3, "guid": [3, 6, 35, 37, 57], "oper": [3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 33, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59], "expect": [3, 7, 8, 9, 10, 11, 12, 13, 14, 33, 46, 47, 48, 53, 54, 57, 59], "api": 3, "refer": [3, 15, 20, 24, 28, 32, 33, 36, 37, 43, 44, 55, 56, 59], "regressor": 3, "recent": 4, "python3": 4, "necessari": [4, 6, 7, 8, 9, 10, 11, 12, 13, 55], "17": 4, "scipi": [4, 36, 37], "qiskit": [4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 57, 58, 59], "aer": [4, 6, 55], "runtim": [4, 6, 55], "dill": 4, "automat": [4, 6, 14, 18, 20, 25, 55, 56], "when": [4, 6, 7, 8, 9, 10, 11, 12, 13, 36, 55, 56, 57, 58], "latest": 4, "master": 4, "modul": [5, 38, 39], "union": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 46, 47, 49, 50, 51, 52, 53, 54], "str": [6, 7, 8, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 50, 53, 54], "quantuminst": [6, 29, 54], "qiskitruntimeservic": [6, 55], "baseestim": 6, "basesampl": 6, "option": [6, 7, 8, 10, 11, 12, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 41, 42, 46, 47, 48, 50, 56, 57, 59], "options_estim": [6, 55], "options_sampl": [6, 55], "log_fil": [6, 55], "cach": [6, 14, 18, 54, 55, 56], "bool": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 47, 48, 49, 50, 51, 52, 54], "cache_dir": [6, 55], "_cach": [6, 55], "max_session_tim": 6, "8h": 6, "max_jobs_retri": [6, 55], "wait_restart": [6, 55], "job": [6, 55], "system": [6, 7, 8, 9, 10, 11, 12, 13, 32, 33, 36, 37, 55], "central": [6, 55, 57], "compon": [6, 55, 56], "respons": [6, 55], "util": [6, 18, 33, 56, 57, 59], "primit": [6, 32, 54, 57, 59], "sub": [6, 55], "program": [6, 55, 56, 58], "care": 6, "about": [6, 37, 38, 39], "restart": [6, 20, 55], "fail": [6, 55], "specifi": [6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 21, 27, 29, 33, 34, 36, 37, 40, 46, 47, 55, 56, 57], "detail": [6, 56, 57], "introduct": 6, "qasm_simul": [6, 55], "servic": [6, 55], "provid": [6, 14, 23, 27, 35, 36, 37, 38, 39, 43, 44, 46, 47, 48, 55, 56, 57, 58], "sampler": [6, 55], "default": [6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 46, 47, 48, 50, 53, 54, 55, 57], "statevectorsimul": 6, "mandatori": [6, 58], "name": [6, 25, 33, 55], "log": [6, 43, 44, 47, 55, 57], "empti": [6, 40, 41], "whether": [6, 36, 37, 44], "directori": 6, "maximum": [6, 55, 56], "retri": 6, "until": 6, "abort": [6, 55], "wait": 6, "second": [6, 7, 14, 21, 27, 54], "type": [6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 33, 36, 37, 42, 43, 44, 46, 47, 48, 50, 57], "get_estim": [6, 55], "estimator_run": [6, 55], "get_sampl": [6, 55], "quantum_inst": 6, "shot": [6, 54, 55], "qsikit": [6, 55], "qiskit_ibm_runtim": [6, 55], "ideal": [6, 57], "exec": 6, "set_shot": [6, 54], "channel": [6, 55], "ibm_quantum": [6, 55], "token": [6, 55], "insert_your_token_her": [6, 55], "get_backend": [6, 55], "ibm_nairobi": [6, 55], "normal": [6, 36], "random_circuit": 6, "decompos": [6, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30], "rep": [6, 25, 26, 56], "backend_run": 6, "run_input": 6, "routin": [6, 56, 57, 59], "given": [6, 20, 21, 33, 43, 44, 54, 57], "typic": [6, 33], "argument": [6, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 37, 38, 39, 55, 57], "pass": [6, 25, 57], "clear_estimator_cach": 6, "clear": 6, "avoid": [6, 15, 55], "memori": 6, "overflow": 6, "clear_sampler_cach": 6, "close_sess": 6, "close": [6, 15, 16, 19, 24, 56], "current": [6, 46, 47, 48, 54, 56, 57, 58], "create_sess": [6, 55], "observ": [6, 57], "parameter_valu": [6, 43, 44], "kwarg": [6, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 33, 35, 36, 37, 38, 39, 46, 47, 48, 49, 50, 51, 52], "ani": [6, 35, 36, 37, 38, 39, 46, 47, 48, 55], "jobv1": 6, "overwrit": 6, "get_shot": [6, 54], "getter": [6, 54], "opflow_exec": 6, "opflow": [6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 54, 56], "operatorbas": [6, 14, 18], "ndarrai": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54], "structur": [6, 14, 21, 53, 54, 55, 56], "detect": 6, "opflow_executor": 6, "reset_shot": [6, 54], "reset": [6, 54], "wa": 6, "sampler_run": [6, 55], "num_shot": [6, 54], "operator_str": [7, 58], "list": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 21, 23, 31, 33, 46, 47, 48, 50, 54, 56, 57], "tupl": [7, 11, 14, 18, 29, 49, 50, 51, 52, 53, 54, 56, 58], "suppli": [7, 21, 26, 33, 56, 58], "pauli": [7, 9, 10, 11, 14, 33, 55, 57, 58], "g": [7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 54, 55, 57], "zi": 7, "revers": [7, 36], "first": [7, 14, 15, 16, 18, 19, 20, 24, 27, 33, 55, 58], "last": [7, 15, 16, 19, 20, 24], "charact": 7, "multipl": [7, 11, 14, 15, 46, 47, 48, 51, 52, 54], "sum": [7, 8, 11, 12, 14, 56, 58], "zz": [7, 8, 47], "xx": 7, "generate_initial_paramet": [7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30], "ones": [7, 8, 9, 10, 11, 12, 13, 54, 57], "randomli": [7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30], "get_oper": [7, 8, 9, 10, 11, 12, 13], "parametervector": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30], "statefn": [7, 8, 9, 10, 11, 12, 13, 14], "express": [7, 8, 9, 10, 11, 12, 13, 18, 54], "get_param": [7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 54], "dict": [7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 49, 50, 51, 52, 53, 54], "hyper": [7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 46, 47, 48, 54], "dictionari": [7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 54], "get_pauli": [7, 8, 9, 10, 11, 12, 13], "pauliop": [7, 8, 9, 10, 11, 12, 13], "get_pauli_map": [7, 8, 9, 10, 11, 12, 13], "previous": [7, 8, 9, 10, 11, 12, 13, 57], "set_map": [7, 8, 9, 10, 11, 12, 13, 58], "physic": [7, 8, 9, 10, 11, 12, 13, 57, 58], "qubit_map": [7, 8, 9, 10, 11, 12, 13, 58], "num_all_qubit": [7, 8, 9, 10, 11, 12, 13, 58], "whenev": [7, 8, 9, 10, 11, 12, 13], "real": [7, 8, 9, 10, 11, 12, 13, 32, 33, 55, 57], "than": [7, 8, 9, 10, 11, 12, 13, 33], "set_param": [7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 54], "param": [7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 54], "Ising": [8, 14, 58], "hamiltonian": [8, 14, 58], "equat": [8, 9, 10, 11, 12, 43, 44], "full": [8, 36], "hat": [8, 9, 10, 11, 12, 14, 20, 33, 58], "h": [8, 9, 10, 11, 12, 18, 21, 56, 57], "sum_i": [8, 11, 12, 18, 50, 51, 52], "b_i": [8, 11, 12], "_i": [8, 10, 11, 12, 52], "c_i": [8, 11], "sum_": [8, 44, 57], "j": [8, 44, 57], "d_": 8, "_j": 8, "switch": [8, 15, 57], "term": [8, 17, 32, 33, 44, 57], "ident": [8, 11, 12, 14, 18], "zero": [8, 36, 57, 58], "foral": 8, "b": [8, 11, 12, 21], "d": [8, 14, 33], "op_str": [9, 11, 58], "z_i": 9, "qquad": [9, 10], "act": 9, "must": [9, 35, 36, 37, 38, 39, 43, 44, 56], "one_st": [10, 12], "bra": [10, 12, 57], "otherwis": [10, 15, 16, 30], "full_sum": [11, 12], "include_ident": [11, 12], "summat": 11, "binari": 12, "abstract": [13, 49], "expectationoperatorbas": [14, 33, 46, 47, 54, 58], "opflow_cach": [14, 18, 54], "deriv": [14, 18, 53, 54, 56, 59], "differenti": [14, 18, 53, 54, 56], "squar": [14, 51, 58], "faster": [14, 18], "oo": [14, 53, 54], "dop": [14, 53, 58], "odop": 14, "dp": [14, 18, 56], "dopdop": [14, 53], "odopdop": 14, "oodop": 14, "oodopdop": 14, "isinghamiltonian": [14, 47, 58], "op": [14, 58], "summedpauli": [14, 46, 58], "get_operator_squar": [14, 58], "parameter_vector": [14, 18, 56, 58], "num_oper": 14, "assign_paramet": [14, 18, 32, 33, 34, 35, 36, 42, 57], "get_derivation_from_str": [14, 18], "input_str": [14, 18, 54], "abbrevi": [14, 18], "tabl": [14, 18], "determin": [14, 18, 20, 21, 25, 31, 46, 47, 54, 56], "format": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 48, 54, 56], "get_differentiation_from_tupl": [14, 18], "diff_tupl": [14, 18, 54], "parameterexpress": 14, "build": [14, 16, 55, 56, 58], "entangling_g": [15, 20], "crz": [15, 21, 56], "alpha": [15, 16, 17, 33, 37, 50, 52], "float": [15, 16, 17, 26, 28, 29, 31, 32, 33, 34, 36, 37, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54], "chebyshev": [15, 16, 17], "arxiv": [15, 24, 28, 32, 33, 36, 44, 57], "ab": [15, 28], "2306": 15, "01639": 15, "consist": [15, 57], "basi": [15, 58], "chang": [15, 17, 20, 33, 58], "around": 15, "end": [15, 19, 24], "polynomi": [15, 33], "rx": [15, 16, 17, 19, 21, 56], "degre": [15, 38, 39], "rzz": [15, 21], "sourc": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 56], "png": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 56], "hire": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 56], "pdf": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 56], "swap": [15, 21], "manipul": [15, 56], "feature_label": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30], "parameter_label": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30], "quantumcircuit": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30], "get_cheb_indic": [15, 16], "involv": [15, 16, 56], "flat": [15, 16], "get_circuit": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30], "param_vec": [15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30], "simpl": [16, 21], "num_chebyshev": [17, 33], "rotation_g": 17, "hadamard_start": 17, "arrang": 17, "block": 17, "tower": 17, "factor": [17, 46, 47, 48], "adjust": [17, 54, 55, 56, 57], "n_chebyshev": 17, "hadamard": [17, 26], "stack": 17, "togeth": [17, 58], "place": [17, 21], "featuremapbas": [18, 23, 27, 29, 32, 33, 34, 46, 47, 54], "shift": [18, 56], "rule": [18, 56], "below": [18, 21, 35, 55, 57], "parameterel": 18, "feature_vector": 18, "dx": 18, "nabla_x": 18, "big": 18, "partial": [18, 57], "x_1": 18, "ldot": 18, "x_n": 18, "nabla_p": 18, "p_1": 18, "p_m": 18, "dxdx": 18, "hessian": [18, 58], "x_": 18, "dpdxdx": 18, "laplac": 18, "delta": 18, "nabla": 18, "2_i": 18, "laplace_dp": 18, "laplacian": [18, 33, 54], "circ": 18, "dpdp": 18, "p_": 18, "p_i": [18, 50], "p_j": 18, "dxdp": 18, "mix": 18, "xp": 18, "qekfeaturemap": [18, 23, 35, 36, 38, 39, 42, 56], "fm": [18, 23, 27, 33, 56, 58], "fm_deriv": [18, 56], "grad": [18, 45], "dp0": 18, "document": [18, 56, 57], "final_encod": [19, 24], "hz": 19, "redund": [19, 23, 24, 29, 31, 55, 56], "necessarili": [19, 24], "cycl": 20, "cycling_typ": 20, "saw": 20, "layer_typ": 20, "iswap": 20, "1103": [20, 29, 31, 56], "physreva": 20, "106": 20, "042431": 20, "23": 20, "highdim": 20, "reach": [20, 57], "fill": 20, "recommend": [20, 36, 54, 55], "goe": 20, "down": [20, 33], "number_of_lay": 20, "repetit": [20, 21], "error": [20, 55], "thrown": [20, 30], "iter": [20, 50, 52], "cx": [20, 21, 25, 28, 56], "feature_str": 21, "parameter_str": 21, "creation": [21, 55, 56], "ad": [21, 22, 56, 58], "associ": [21, 53], "while": 21, "pattern": [21, 57], "nearest": [21, 56], "neighbor": [21, 56], "nn": [21, 56], "aa": 21, "cx_entangl": [21, 56], "func": 21, "layered_feature_map": [21, 56], "add_lay": [21, 56], "anoth": 21, "achiev": [21, 33, 55, 58], "from_str": [21, 53, 56], "strategi": 21, "within": [21, 57], "curli": 21, "bracket": 21, "sc": 21, "s_conjug": 21, "tc": 21, "t_conjug": 21, "ch": 21, "ch_entangl": 21, "cy": 21, "cy_entangl": 21, "cz": 21, "cz_entangl": 21, "cp": 21, "cp_entangl": 21, "crx": 21, "crx_entangl": 21, "cry": 21, "cry_entangl": 21, "crz_entangl": 21, "rxx": 21, "rxx_entangl": 21, "ryi": 21, "ryy_entangl": 21, "rzz_entangl": 21, "rzx": 21, "rzx_entangl": 21, "cu": 21, "cu_entangl": 21, "identifi": 21, "variable_str": 21, "callabl": [21, 25, 26, 27, 46, 47, 50, 52], "conjug": 21, "ent_strategi": 21, "classmethod": [21, 53], "feature_map_str": 21, "construct": [21, 56, 57, 58], "num_lat": 21, "zfeaturemap": [22, 26], "cnot": 22, "pruned_paramet": 23, "prune": [23, 29, 31, 59], "accept": [23, 56], "usual": [23, 55], "qek": [23, 24, 56], "featuremap": 23, "remov": [23, 36, 56], "present": 24, "2105": [24, 32, 33, 44, 57], "02276v1": [24, 32, 33, 44, 57], "qiskit_circuit": 25, "blueprintcircuit": 25, "mode": [25, 50], "\u03b8p": 25, "wrapper": [25, 26, 36, 37, 38, 39, 56], "twoloc": [25, 56], "insert_barri": [25, 26, 56], "made": 25, "zzfeaturemap": 25, "feature_dimens": 25, "depend": [25, 32, 36, 37], "No": [25, 55], "data_map_func": 26, "minimum": [26, 41], "overrid": 26, "self_product": 26, "barrier": 26, "insert": 26, "evolut": 26, "instruct": [26, 56], "transpile_func": 27, "transpil": [27, 55, 58, 59], "chebrx": [27, 46, 47, 56, 58], "fake_provid": [27, 56, 58], "fakemanilav2": [27, 56, 58], "initial_layout": [27, 56, 58], "yz": 28, "2108": 28, "01039v3": 28, "One": 28, "prefactor": 28, "rescal": [28, 44], "pruning_thresh": [29, 31], "x_lim": 29, "p_lim": 29, "x_val": 29, "p_val": 29, "prunedfeaturemap": [29, 56], "prxquantum": [29, 31, 56], "040309": [29, 31, 56], "quantum_fit": 29, "qi": 29, "fisher": [29, 31, 55, 56], "matric": [29, 33, 57], "threshold": [29, 31, 32, 33, 57], "eigenvalu": [29, 31], "lower": [29, 31], "notimplementederror": 30, "qfi": [31, 55], "fischer": [31, 55], "propos": 31, "evaluate_dupl": 32, "off_diagon": 32, "mit_depol_nois": [32, 57], "overlap": 32, "wrap": [32, 57, 59], "appropri": 32, "duplic": 32, "mitig": [32, 55, 57], "depolar": [32, 57], "nois": [32, 38, 57], "msplit": [32, 57], "mmean": [32, 57], "ref": [32, 33, 36, 37, 43, 57], "meaning": 32, "fqk": [32, 35, 36, 37, 38, 39, 40, 43, 44], "tikhonov": [32, 33, 57], "prior": [32, 33, 36, 37], "procedur": [32, 33, 57], "havlicek": 32, "supervis": [32, 57], "natur": [32, 57], "567": 32, "209": 32, "212": 32, "2019": [32, 57], "schuld": [32, 57], "phy": [32, 57], "rev": [32, 57], "lett": [32, 57], "122": 32, "040504": [32, 57], "02276": 32, "hubregtsen": [32, 33, 44, 57], "Near": [32, 33, 44, 57], "2d": [32, 34], "evaluate_pairwis": [32, 33, 34], "evaluate_with_paramet": [32, 33, 34], "outerkernelbas": 33, "emb": [33, 56], "done": [33, 57], "expectation_oper": [33, 46, 47, 58], "As": [33, 57], "outerkernel": 33, "num_hyper_paramet": 33, "name_hyper_paramet": 33, "euclidean": 33, "keyword": [33, 37, 38, 39], "arg": [33, 35, 36, 37, 38, 39, 46, 47, 48], "nu": 33, "bigg": 33, "l": [33, 43, 50], "length_scal": 33, "period": 33, "sigma_0": 33, "additive_chi2": 33, "chi2": 33, "poli": 33, "rbf": [33, 57], "sigmoid": 33, "cosin": 33, "sklean": 33, "chebyshevtow": 33, "kernel_matrix": 33, "customexpectationoper": [33, 58], "qkrr": [33, 36, 57], "measument": 33, "zzzz": 33, "yyyi": 33, "xxxx": 33, "ml_method": 33, "evaluate_qnn": 33, "should": [34, 57], "attribut": [34, 55], "kernmatrixbas": 34, "_regularize_matrix": 34, "extend": 35, "gaussian_process": 35, "gaussianprocessclassifi": 35, "inherit": 35, "kernelmatrixbas": [35, 36, 37, 38, 39, 40, 43, 44], "gp": [35, 36, 57], "load_iri": 35, "fmap": [35, 36, 37, 42, 57], "q_kernel": [35, 36, 42], "qgpc_ansatz": 35, "98": 35, "predict_proba": [35, 46], "85643716": 35, "07037611": 35, "07318673": 35, "80314475": 35, "09988938": 35, "09696586": 35, "analog": [36, 37, 57], "sigma": [36, 42, 43, 57], "strength": [36, 37, 43, 46, 47], "condit": [36, 37], "assur": [36, 37], "stronger": [36, 37], "normalize_i": 36, "target": [36, 37, 44, 57], "unit": 36, "varianc": [36, 46, 47, 48, 50, 52, 54, 58], "report": 36, "enabl": [36, 55, 56], "gram": 36, "carl": [36, 43], "rasmussen": [36, 43], "christoph": [36, 43], "william": [36, 43], "mit": [36, 37, 43], "press": [36, 37, 43], "2006": [36, 43], "rapp": 36, "roth": 36, "bayesian": 36, "2304": 36, "12923": 36, "qgpr_ansatz": 36, "sample_train": 36, "label_train": 36, "sample_test": 36, "calculate_cov_and_mean": 36, "covari": 36, "just": 36, "n_featur": [36, 37], "quantumgaussianprocessregressor": 36, "self": [36, 37, 40], "return_std": 36, "return_cov": 36, "solut": [36, 37, 56, 57], "choleski": [36, 37], "decomposit": [36, 37], "stabil": [36, 37], "most": [36, 55, 57], "distribut": 36, "queri": 36, "y_std": 36, "y_cov": 36, "joint": 36, "y_mean": 36, "krr": 37, "theoret": 37, "0e": 37, "underli": [37, 38, 39], "kevin": 37, "murphi": 37, "probabilist": 37, "perspect": 37, "chapter": [37, 43], "pp": 37, "493": 37, "en": 37, "wikipedia": 37, "wiki": 37, "ridge_regress": 37, "q_kernel_pqk": 37, "qkrr_pqk": 37, "y_pred_pqk": 37, "pre": [37, 55, 56], "accordingli": 37, "actual": [37, 40, 41], "itself": [37, 40], "svc": [38, 39], "stabl": [38, 39], "omit": [38, 39, 55], "coef0": [38, 39], "make_moon": 38, "svr": 39, "parent": [40, 41, 55], "loss": [40, 41, 42, 43, 44, 46, 47, 57], "kernellossbas": [41, 42], "optimizerbas": [41, 42, 46, 47], "sequenc": [41, 42, 43, 44], "guess": 41, "run_optim": [41, 42, 57], "variat": [42, 43, 44], "minim": [42, 45, 46, 47, 57], "adam": [42, 57], "nll": [42, 57], "maxit": [42, 57], "lr": [42, 57], "nll_loss": [42, 57], "noise_std": 42, "opt_result": 42, "optimal_paramet": 42, "optimizeresult": 42, "likelihood": [43, 44, 57], "\u03b8": [43, 44], "taken": [43, 44], "\u03c3i": 43, "2\u03c0": 43, "align": [44, 57], "27": 44, "ta": 44, "y_i": 44, "y_j": 44, "rescale_class_label": 44, "fun": 45, "x0": 45, "bound": 45, "optimizerresult": 45, "interfac": [46, 47, 55], "possibli": [46, 47], "mini": [46, 47], "batch": [46, 47, 48], "lossbas": [46, 47], "param_ini": [46, 47, 48], "param_op_ini": [46, 47, 48], "batch_siz": [46, 47, 48], "Will": [46, 47], "sgdmixin": [46, 47, 48], "epoch": [46, 47, 48], "sgd": [46, 47, 48], "shuffl": [46, 47, 48], "opt_param_op": [46, 47, 48, 49, 50, 51, 52], "els": [46, 47], "qnnregressor": 46, "squaredloss": [46, 47], "slsqp": [46, 47, 57], "make_blob": 46, "60": 46, "center": 46, "16": [46, 47], "weight": [46, 47, 48, 50, 51, 52], "reiniti": [46, 47, 48], "partial_fit": [46, 47], "updat": [46, 47, 48], "won": [46, 47], "baseqnn": [46, 47], "qnnclassifi": 47, "01": 47, "reg": 47, "cost": 48, "value_dict": [49, 50, 51, 52], "set_opt_param_op": [49, 50, 51, 52], "flag": [49, 50, 51, 52], "005": [50, 52], "l2": 50, "parameter_list": 50, "parameter_operator_list": 50, "l1": 50, "variance_factor": [50, 52], "l_": [50, 52], "var": [50, 52, 53], "var_i": 50, "ground_truth": 51, "w_i": 51, "f_ref": 51, "count": [51, 58], "multiple_output": [51, 52], "operatornam": 52, "wave_funct": 53, "parametervectorel": 53, "from_paramet": 53, "val": 53, "convert": [53, 56], "from_tupl": 53, "from_vari": 53, "result_cach": 54, "param_op": 54, "nest": 54, "what": 54, "kei": [54, 56, 57, 59], "entri": 54, "evaluate_dfdop": 54, "evaluate_dfdopdx": 54, "evaluate_dfdp": 54, "evaluate_dfdpdx": 54, "evaluate_dfdx": 54, "evaluate_dfdxdx": 54, "evaluate_diff_tupl": 54, "evaluate_f": 54, "evaluate_from_str": 54, "evaluate_laplac": 54, "evaluate_laplace_dop": 54, "evaluate_laplace_dp": 54, "evaluate_prob": 54, "sparsevectorstatefn": 54, "to_dict_fn": 54, "evaluate_var": 54, "evaluate_vari": 54, "get_opflow_from_expec": 54, "input_expec": 54, "expec": 54, "get_opflow_from_str": 54, "prefix": 54, "op0__": 54, "op1__": 54, "etc": [54, 55], "varieti": 55, "comfort": 55, "summar": 55, "ingo": 55, "arrow": 55, "outgo": 55, "remot": 55, "hash": 55, "exist": [55, 56], "doe": 55, "cancel": 55, "resubmit": 55, "paus": 55, "action": 55, "ca": 55, "modifi": 55, "mention": [55, 57], "rout": 55, "fulli": [55, 56], "framework": [55, 57], "wai": [55, 57], "fake": [55, 56], "principl": [55, 58], "long": 55, "configur": 55, "vice": [55, 57], "versa": [55, 57], "optimization_level": 55, "resilience_level": 55, "zne": 55, "upon": 55, "deprec": 55, "futur": [55, 56], "qiskit_ibm_provid": 55, "ibmprovid": 55, "save_account": 55, "hub": 55, "ibmq_qasm_simul": 55, "600": 55, "lincombqgt": 55, "quantum_info": 55, "intial": 55, "intern": [55, 56], "5000": 55, "set_opt": 55, "mani": 56, "crucial": [56, 58], "obligatori": 56, "offer": [56, 57], "sophist": 56, "arbitrari": [56, 58], "feel": 56, "free": 56, "contribut": 56, "match": 56, "success": 56, "concaten": 56, "consequ": [56, 57], "fm1": 56, "fm2": 56, "fm3": 56, "qiskitfeaturemap": 56, "friendli": 56, "effortlessli": 56, "applic": [56, 57], "comprehens": 56, "manner": 56, "regardless": 56, "fashion": 56, "inspir": [56, 57], "qfim": 56, "automated_prun": 56, "pruned_feature_map": 56, "often": [56, 58], "essenti": 56, "straightforward": [56, 57], "firstli": 56, "get_deriv": [56, 58], "grad_from_str": 56, "grad_from_tupl": 56, "By": [56, 57], "emploi": [56, 58, 59], "among": 57, "due": 57, "fact": 57, "formal": 57, "rich": 57, "mathemat": 57, "theori": 57, "studi": 57, "reproduc": 57, "rkh": 57, "attain": 57, "trivial": 57, "infinit": 57, "endow": 57, "inner": 57, "ever": 57, "braket": 57, "reduc": 57, "illustr": 57, "interpret": 57, "fundament": 57, "formul": 57, "whose": 57, "exploit": 57, "inher": 57, "mechan": 57, "phenomena": 57, "superposit": 57, "prospect": 57, "abl": 57, "deal": 57, "increas": 57, "psi": 57, "boldsymbol": 57, "u_": 57, "discuss": 57, "ansatz": 57, "bridg": 57, "But": 57, "densiti": 57, "rho": 57, "enrich": 57, "schmidt": 57, "practic": 57, "reveal": 57, "famou": 57, "commonli": 57, "nisq": 57, "era": 57, "fast": 57, "algebra": 57, "hhl": 57, "basic": 57, "notion": 57, "mere": 57, "subsequ": 57, "conveni": 57, "independ": 57, "adapt": 57, "qgpc": 57, "depth": 57, "literatur": 57, "noth": 57, "alreadi": 57, "implicitli": 57, "predefin": 57, "reason": 57, "nativ": 57, "geometri": 57, "q": 57, "prime": 57, "tr": 57, "pure": 57, "immedi": 57, "restrict": 57, "small": 57, "fqk_instanc": 57, "exclus": 57, "along": 57, "diagon": 57, "fulfil": 57, "attempt": 57, "restor": 57, "suffer": 57, "concentr": 57, "untrain": 57, "circumv": 57, "famili": 57, "approxim": 57, "simplest": 57, "particl": 57, "rdm": 57, "pq": 57, "sum_k": 57, "lbrace": 57, "rbrace": 57, "_k": 57, "neq": 57, "trace": 57, "except": 57, "th": 57, "seen": 57, "ambigu": 57, "concern": 57, "put": 57, "eventu": 57, "reflect": 57, "matern": 57, "expsinesquar": 57, "rationalquadrat": 57, "dotproduct": 57, "pariwisekernel": 57, "speak": 57, "pqk_instanc": 57, "moreov": 57, "At": 57, "kernel_optim": 57, "kerneloptim": 57, "assum": 57, "targetalign": 57, "adam_opt": 57, "kta": 57, "kta_loss": 57, "kta_optim": 57, "opt_kta_result": 57, "retriev": 57, "opt_kta_param": 57, "noise_v": 57, "bet": 57, "nll_optim": 57, "opt_nll_result": 57, "opt_nll_param": 57, "2101": 57, "11020v2": 57, "killoran": 57, "112": 57, "jerbi": 57, "2110": 57, "13162v3": 57, "2023": 57, "plai": 58, "role": 58, "conjunct": 58, "context": 58, "standalon": 58, "multipli": 58, "your": [58, 59], "op1": 58, "ix": 58, "op2": 58, "zy": 58, "total_op": 58, "mai": 58, "issu": 58, "logic": 58, "set_qubit_map": 58, "transpiledfeaturemap": [58, 59], "expectationoperatorderiv": 58, "higher": 58, "cube": 58, "op3": 58, "overview": 59, "layeredfeaturemap": 59, "featuremapderiv": 59}, "objects": {"squlearn": [[6, 0, 1, "", "Executor"], [5, 3, 0, "-", "expectation_operator"], [5, 3, 0, "-", "feature_map"], [5, 3, 0, "-", "qnn"]], "squlearn.Executor": [[6, 1, 1, "", "backend"], [6, 2, 1, "", "backend_run"], [6, 2, 1, "", "clear_estimator_cache"], [6, 2, 1, "", "clear_sampler_cache"], [6, 2, 1, "", "close_session"], [6, 2, 1, "", "create_session"], [6, 1, 1, "", "estimator"], [6, 2, 1, "", "estimator_run"], [6, 1, 1, "", "execution"], [6, 2, 1, "", "get_estimator"], [6, 2, 1, "", "get_sampler"], [6, 2, 1, "", "get_shots"], [6, 2, 1, "", "opflow_exec"], [6, 2, 1, "", "opflow_executor"], [6, 1, 1, "", "quantum_instance"], [6, 2, 1, "", "reset_shots"], [6, 1, 1, "", "sampler"], [6, 2, 1, "", "sampler_run"], [6, 1, 1, "", "service"], [6, 1, 1, "", "session"], [6, 2, 1, "", "set_shots"], [6, 1, 1, "", "shots"]], "squlearn.expectation_operator": [[7, 0, 1, "", "CustomExpectationOperator"], [8, 0, 1, "", "IsingHamiltonian"], [9, 0, 1, "", "SinglePauli"], [10, 0, 1, "", "SingleProbability"], [11, 0, 1, "", "SummedPaulis"], [12, 0, 1, "", "SummedProbabilities"]], "squlearn.expectation_operator.CustomExpectationOperator": [[7, 2, 1, "", "generate_initial_parameters"], [7, 2, 1, "", "get_operator"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "get_pauli"], [7, 2, 1, "", "get_pauli_mapped"], [7, 1, 1, "", "num_parameters"], [7, 1, 1, "", "num_qubits"], [7, 1, 1, "", "operator_string"], [7, 1, 1, "", "parameterized"], [7, 2, 1, "", "set_map"], [7, 2, 1, "", "set_params"]], "squlearn.expectation_operator.IsingHamiltonian": [[8, 1, 1, "", "I"], [8, 1, 1, "", "X"], [8, 1, 1, "", "Z"], [8, 1, 1, "", "ZZ"], [8, 2, 1, "", "generate_initial_parameters"], [8, 2, 1, "", "get_operator"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "get_pauli"], [8, 2, 1, "", "get_pauli_mapped"], [8, 1, 1, "", "num_parameters"], [8, 1, 1, "", "num_qubits"], [8, 2, 1, "", "set_map"], [8, 2, 1, "", "set_params"]], "squlearn.expectation_operator.SinglePauli": [[9, 2, 1, "", "generate_initial_parameters"], [9, 2, 1, "", "get_operator"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "get_pauli"], [9, 2, 1, "", "get_pauli_mapped"], [9, 1, 1, "", "num_parameters"], [9, 1, 1, "", "num_qubits"], [9, 1, 1, "", "op_str"], [9, 1, 1, "", "parameterized"], [9, 1, 1, "", "qubit"], [9, 2, 1, "", "set_map"], [9, 2, 1, "", "set_params"]], "squlearn.expectation_operator.SingleProbability": [[10, 2, 1, "", "generate_initial_parameters"], [10, 2, 1, "", "get_operator"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "get_pauli"], [10, 2, 1, "", "get_pauli_mapped"], [10, 1, 1, "", "num_parameters"], [10, 1, 1, "", "num_qubits"], [10, 1, 1, "", "one_state"], [10, 1, 1, "", "parameterized"], [10, 1, 1, "", "qubit"], [10, 2, 1, "", "set_map"], [10, 2, 1, "", "set_params"]], "squlearn.expectation_operator.SummedPaulis": [[11, 1, 1, "", "full_sum"], [11, 2, 1, "", "generate_initial_parameters"], [11, 2, 1, "", "get_operator"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "get_pauli"], [11, 2, 1, "", "get_pauli_mapped"], [11, 1, 1, "", "include_identity"], [11, 1, 1, "", "num_parameters"], [11, 1, 1, "", "num_qubits"], [11, 1, 1, "", "op_str"], [11, 2, 1, "", "set_map"], [11, 2, 1, "", "set_params"]], "squlearn.expectation_operator.SummedProbabilities": [[12, 1, 1, "", "full_sum"], [12, 2, 1, "", "generate_initial_parameters"], [12, 2, 1, "", "get_operator"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "get_pauli"], [12, 2, 1, "", "get_pauli_mapped"], [12, 1, 1, "", "include_identity"], [12, 1, 1, "", "num_parameters"], [12, 1, 1, "", "num_qubits"], [12, 1, 1, "", "one_state"], [12, 2, 1, "", "set_map"], [12, 2, 1, "", "set_params"]], "squlearn.expectation_operator.expectation_operator_base": [[13, 0, 1, "", "ExpectationOperatorBase"]], "squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase": [[13, 2, 1, "", "generate_initial_parameters"], [13, 2, 1, "", "get_operator"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "get_pauli"], [13, 2, 1, "", "get_pauli_mapped"], [13, 1, 1, "", "num_parameters"], [13, 1, 1, "", "num_qubits"], [13, 2, 1, "", "set_map"], [13, 2, 1, "", "set_params"]], "squlearn.expectation_operator.expectation_operator_derivatives": [[14, 0, 1, "", "ExpectationOperatorDerivatives"]], "squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives": [[14, 2, 1, "", "assign_parameters"], [14, 2, 1, "", "get_derivation_from_string"], [14, 2, 1, "", "get_derivative"], [14, 2, 1, "", "get_differentiation_from_tuple"], [14, 2, 1, "", "get_operator_squared"], [14, 1, 1, "", "num_operators"], [14, 1, 1, "", "num_parameters"], [14, 1, 1, "", "parameter_vector"]], "squlearn.feature_map": [[15, 0, 1, "", "ChebPQC"], [16, 0, 1, "", "ChebRx"], [17, 0, 1, "", "ChebyshevTower"], [18, 0, 1, "", "FeatureMapDerivatives"], [19, 0, 1, "", "HZCRxCRyCRz"], [20, 0, 1, "", "HighDimFeatureMap"], [21, 0, 1, "", "LayeredFeatureMap"], [22, 0, 1, "", "ParamZFeatureMap"], [23, 0, 1, "", "PrunedFeatureMap"], [24, 0, 1, "", "QEKFeatureMap"], [25, 0, 1, "", "QiskitFeatureMap"], [26, 0, 1, "", "QiskitZFeatureMap"], [27, 0, 1, "", "TranspiledFeatureMap"], [28, 0, 1, "", "YZ_CX_FeatureMap"], [29, 4, 1, "", "automated_pruning"], [31, 4, 1, "", "pruning_from_QFI"]], "squlearn.feature_map.ChebPQC": [[15, 2, 1, "", "draw"], [15, 2, 1, "", "generate_initial_parameters"], [15, 2, 1, "", "get_cheb_indices"], [15, 2, 1, "", "get_circuit"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "set_params"]], "squlearn.feature_map.ChebRx": [[16, 2, 1, "", "draw"], [16, 2, 1, "", "generate_initial_parameters"], [16, 2, 1, "", "get_cheb_indices"], [16, 2, 1, "", "get_circuit"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "set_params"]], "squlearn.feature_map.ChebyshevTower": [[17, 2, 1, "", "draw"], [17, 2, 1, "", "generate_initial_parameters"], [17, 2, 1, "", "get_circuit"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "set_params"]], "squlearn.feature_map.FeatureMapDerivatives": [[18, 2, 1, "", "assign_parameters"], [18, 2, 1, "", "get_derivation_from_string"], [18, 2, 1, "", "get_derivative"], [18, 2, 1, "", "get_differentiation_from_tuple"]], "squlearn.feature_map.HZCRxCRyCRz": [[19, 2, 1, "", "draw"], [19, 2, 1, "", "generate_initial_parameters"], [19, 2, 1, "", "get_circuit"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "set_params"]], "squlearn.feature_map.HighDimFeatureMap": [[20, 2, 1, "", "draw"], [20, 2, 1, "", "generate_initial_parameters"], [20, 2, 1, "", "get_circuit"], [20, 2, 1, "", "get_params"], [20, 2, 1, "", "set_params"]], "squlearn.feature_map.LayeredFeatureMap": [[21, 2, 1, "", "H"], [21, 2, 1, "", "I"], [21, 2, 1, "", "P"], [21, 2, 1, "", "Rx"], [21, 2, 1, "", "Ry"], [21, 2, 1, "", "Rz"], [21, 2, 1, "", "S"], [21, 2, 1, "", "S_conjugate"], [21, 2, 1, "", "T"], [21, 2, 1, "", "T_conjugate"], [21, 2, 1, "", "U"], [21, 2, 1, "", "X"], [21, 2, 1, "", "Y"], [21, 2, 1, "", "Z"], [21, 2, 1, "", "add_layer"], [21, 2, 1, "", "ch_entangling"], [21, 2, 1, "", "cp_entangling"], [21, 2, 1, "", "crx_entangling"], [21, 2, 1, "", "cry_entangling"], [21, 2, 1, "", "crz_entangling"], [21, 2, 1, "", "cu_entangling"], [21, 2, 1, "", "cx_entangling"], [21, 2, 1, "", "cy_entangling"], [21, 2, 1, "", "cz_entangling"], [21, 2, 1, "", "draw"], [21, 2, 1, "", "from_string"], [21, 2, 1, "", "generate_initial_parameters"], [21, 2, 1, "", "get_circuit"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "rxx_entangling"], [21, 2, 1, "", "ryy_entangling"], [21, 2, 1, "", "rzx_entangling"], [21, 2, 1, "", "rzz_entangling"], [21, 2, 1, "", "set_params"], [21, 2, 1, "", "swap"]], "squlearn.feature_map.ParamZFeatureMap": [[22, 2, 1, "", "draw"], [22, 2, 1, "", "generate_initial_parameters"], [22, 2, 1, "", "get_circuit"], [22, 2, 1, "", "get_params"], [22, 2, 1, "", "set_params"]], "squlearn.feature_map.PrunedFeatureMap": [[23, 2, 1, "", "draw"], [23, 2, 1, "", "generate_initial_parameters"], [23, 2, 1, "", "get_circuit"], [23, 2, 1, "", "get_params"], [23, 2, 1, "", "set_params"]], "squlearn.feature_map.QEKFeatureMap": [[24, 2, 1, "", "draw"], [24, 2, 1, "", "generate_initial_parameters"], [24, 2, 1, "", "get_circuit"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "set_params"]], "squlearn.feature_map.QiskitFeatureMap": [[25, 2, 1, "", "draw"], [25, 2, 1, "", "generate_initial_parameters"], [25, 2, 1, "", "get_circuit"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "set_params"]], "squlearn.feature_map.QiskitZFeatureMap": [[26, 2, 1, "", "draw"], [26, 2, 1, "", "generate_initial_parameters"], [26, 2, 1, "", "get_circuit"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "set_params"]], "squlearn.feature_map.TranspiledFeatureMap": [[27, 2, 1, "", "draw"], [27, 2, 1, "", "generate_initial_parameters"], [27, 2, 1, "", "get_circuit"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "set_params"]], "squlearn.feature_map.YZ_CX_FeatureMap": [[28, 2, 1, "", "draw"], [28, 2, 1, "", "generate_initial_parameters"], [28, 2, 1, "", "get_circuit"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "set_params"]], "squlearn.feature_map.feature_map_base": [[30, 0, 1, "", "FeatureMapBase"]], "squlearn.feature_map.feature_map_base.FeatureMapBase": [[30, 2, 1, "", "draw"], [30, 2, 1, "", "generate_initial_parameters"], [30, 2, 1, "", "get_circuit"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "set_params"]], "squlearn.kernel": [[5, 3, 0, "-", "matrix"], [5, 3, 0, "-", "optimization"]], "squlearn.kernel.matrix": [[32, 0, 1, "", "FidelityKernel"], [33, 0, 1, "", "ProjectedQuantumKernel"]], "squlearn.kernel.matrix.FidelityKernel": [[32, 2, 1, "", "assign_parameters"], [32, 2, 1, "", "evaluate"], [32, 2, 1, "", "evaluate_pairwise"], [32, 2, 1, "", "evaluate_with_parameters"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "set_params"]], "squlearn.kernel.matrix.ProjectedQuantumKernel": [[33, 2, 1, "", "assign_parameters"], [33, 2, 1, "", "evaluate"], [33, 2, 1, "", "evaluate_pairwise"], [33, 2, 1, "", "evaluate_qnn"], [33, 2, 1, "", "evaluate_with_parameters"], [33, 1, 1, "", "feature_map"], [33, 2, 1, "", "get_params"], [33, 1, 1, "", "measurement"], [33, 1, 1, "", "name_hyper_parameters"], [33, 1, 1, "", "num_features"], [33, 1, 1, "", "num_hyper_parameters"], [33, 1, 1, "", "num_parameters"], [33, 1, 1, "", "num_qubits"], [33, 1, 1, "", "outer_kernel"], [33, 1, 1, "", "parameters"], [33, 2, 1, "", "set_params"]], "squlearn.kernel.matrix.kernel_matrix_base": [[34, 0, 1, "", "KernelMatrixBase"]], "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase": [[34, 2, 1, "", "assign_parameters"], [34, 2, 1, "", "evaluate"], [34, 2, 1, "", "evaluate_pairwise"], [34, 2, 1, "", "evaluate_with_parameters"], [34, 2, 1, "", "get_params"], [34, 2, 1, "", "set_params"]], "squlearn.kernel.ml": [[35, 0, 1, "", "QGPC"], [36, 0, 1, "", "QGPR"], [37, 0, 1, "", "QKRR"], [38, 0, 1, "", "QSVC"], [39, 0, 1, "", "QSVR"]], "squlearn.kernel.ml.QGPC": [[35, 2, 1, "", "get_params"], [35, 2, 1, "", "set_params"]], "squlearn.kernel.ml.QGPR": [[36, 2, 1, "", "calculate_cov_and_mean"], [36, 2, 1, "", "fit"], [36, 2, 1, "", "get_params"], [36, 2, 1, "", "predict"], [36, 2, 1, "", "set_params"]], "squlearn.kernel.ml.QKRR": [[37, 2, 1, "", "fit"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "predict"], [37, 2, 1, "", "set_params"]], "squlearn.kernel.ml.QSVC": [[38, 2, 1, "", "get_params"], [38, 2, 1, "", "set_params"]], "squlearn.kernel.ml.QSVR": [[39, 2, 1, "", "get_params"], [39, 2, 1, "", "set_params"]], "squlearn.kernel.optimization.kernel_loss_base": [[40, 0, 1, "", "KernelLossBase"]], "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase": [[40, 2, 1, "", "compute"]], "squlearn.kernel.optimization.kernel_optimization_base": [[41, 0, 1, "", "KernelOptimizerBase"]], "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase": [[41, 2, 1, "", "run_optimization"]], "squlearn.kernel.optimization.kernel_optimizer": [[42, 0, 1, "", "KernelOptimizer"]], "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer": [[42, 2, 1, "", "run_optimization"]], "squlearn.kernel.optimization.negative_log_likelihood": [[43, 0, 1, "", "NLL"]], "squlearn.kernel.optimization.negative_log_likelihood.NLL": [[43, 2, 1, "", "compute"]], "squlearn.kernel.optimization.target_alignment": [[44, 0, 1, "", "TargetAlignment"]], "squlearn.kernel.optimization.target_alignment.TargetAlignment": [[44, 2, 1, "", "compute"]], "squlearn.optimizers.optimizer_base": [[45, 0, 1, "", "OptimizerBase"]], "squlearn.optimizers.optimizer_base.OptimizerBase": [[45, 2, 1, "", "minimize"]], "squlearn.qnn": [[46, 0, 1, "", "QNNClassifier"], [47, 0, 1, "", "QNNRegressor"]], "squlearn.qnn.QNNClassifier": [[46, 2, 1, "", "fit"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "partial_fit"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "predict_proba"], [46, 2, 1, "", "set_params"]], "squlearn.qnn.QNNRegressor": [[47, 2, 1, "", "fit"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "partial_fit"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "set_params"]], "squlearn.qnn.base_qnn": [[48, 0, 1, "", "BaseQNN"]], "squlearn.qnn.base_qnn.BaseQNN": [[48, 2, 1, "", "fit"], [48, 2, 1, "", "get_params"], [48, 2, 1, "", "set_params"]], "squlearn.qnn.loss": [[49, 0, 1, "", "LossBase"], [50, 0, 1, "", "ParameterRegularizationLoss"], [51, 0, 1, "", "SquaredLoss"], [52, 0, 1, "", "VarianceLoss"]], "squlearn.qnn.loss.LossBase": [[49, 2, 1, "", "gradient"], [49, 2, 1, "", "set_opt_param_op"], [49, 2, 1, "", "value"]], "squlearn.qnn.loss.ParameterRegularizationLoss": [[50, 2, 1, "", "gradient"], [50, 2, 1, "", "set_opt_param_op"], [50, 2, 1, "", "value"]], "squlearn.qnn.loss.SquaredLoss": [[51, 2, 1, "", "gradient"], [51, 2, 1, "", "set_opt_param_op"], [51, 2, 1, "", "value"]], "squlearn.qnn.loss.VarianceLoss": [[52, 2, 1, "", "gradient"], [52, 2, 1, "", "set_opt_param_op"], [52, 2, 1, "", "value"]], "squlearn.qnn.qnn": [[53, 0, 1, "", "Expec"], [54, 0, 1, "", "QNN"]], "squlearn.qnn.qnn.Expec": [[53, 2, 1, "", "from_parameter"], [53, 2, 1, "", "from_string"], [53, 2, 1, "", "from_tuple"], [53, 2, 1, "", "from_variable"]], "squlearn.qnn.qnn.QNN": [[54, 2, 1, "", "evaluate"], [54, 2, 1, "", "evaluate_dfdop"], [54, 2, 1, "", "evaluate_dfdopdx"], [54, 2, 1, "", "evaluate_dfdp"], [54, 2, 1, "", "evaluate_dfdpdx"], [54, 2, 1, "", "evaluate_dfdx"], [54, 2, 1, "", "evaluate_dfdxdx"], [54, 2, 1, "", "evaluate_diff_tuple"], [54, 2, 1, "", "evaluate_f"], [54, 2, 1, "", "evaluate_from_string"], [54, 2, 1, "", "evaluate_laplace"], [54, 2, 1, "", "evaluate_laplace_dop"], [54, 2, 1, "", "evaluate_laplace_dp"], [54, 2, 1, "", "evaluate_probabilities"], [54, 2, 1, "", "evaluate_var"], [54, 2, 1, "", "evaluate_variance"], [54, 2, 1, "", "get_opflow_from_expec"], [54, 2, 1, "", "get_opflow_from_string"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "get_shots"], [54, 2, 1, "", "reset_shots"], [54, 2, 1, "", "set_params"], [54, 2, 1, "", "set_shots"]]}, "objtypes": {"0": "py:class", "1": "py:attribute", "2": "py:method", "3": "py:module", "4": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"], "3": ["py", "module", "Python module"], "4": ["py", "function", "Python function"]}, "titleterms": {"hyperparamt": 0, "optim": [0, 40, 41, 42, 43, 44, 45], "pipelin": 0, "summari": 0, "import": [0, 1], "librari": 0, "gener": 0, "data": [0, 1], "set": [0, 1, 55], "up": 0, "kernel": [0, 1, 5, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 57], "grid": 0, "search": 0, "run": 0, "result": 0, "analysi": 0, "handwritten": 1, "digit": 1, "recognit": 1, "project": [1, 57], "quantum": [1, 5, 56, 57], "definit": 1, "The": [1, 55], "preprocess": 1, "dimension": 1, "reduct": 1, "min": 1, "max": 1, "scale": 1, "split": 1, "classif": [1, 57], "method": [1, 6, 14, 18, 33, 35, 36, 37, 38, 39, 42, 43, 44, 46, 47, 57], "support": 1, "vector": 1, "machin": 1, "exampl": [2, 3], "welcom": 3, "squlearn": [3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "": 3, "document": 3, "0": 3, "3": 3, "prerequisit": [3, 4], "instal": [3, 4], "stabl": [3, 4], "releas": [3, 4], "contribut": 3, "licens": 3, "imprint": 3, "content": 3, "bleed": 4, "edg": 4, "version": 4, "develop": 4, "api": 5, "refer": [5, 57], "qml": 5, "regressor": 5, "classifi": 5, "circuit": 5, "design": 5, "featur": [5, 55, 56], "map": [5, 56], "tool": 5, "oper": [5, 58], "execut": 5, "core": 5, "qnn": [5, 46, 47, 48, 49, 50, 51, 52, 53, 54], "base": 5, "class": [5, 55], "executor": [6, 55], "attribut": [6, 7, 8, 9, 10, 11, 12, 13, 14, 33], "expectation_oper": [7, 8, 9, 10, 11, 12, 13, 14], "customexpectationoper": 7, "isinghamiltonian": 8, "singlepauli": 9, "singleprob": 10, "summedpauli": 11, "summedprob": 12, "expectation_operator_bas": 13, "expectationoperatorbas": 13, "expectation_operator_deriv": 14, "expectationoperatorderiv": 14, "string": [14, 18, 21], "ar": [14, 18, 33], "recogn": [14, 18], "get_deriv": [14, 18], "feature_map": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "chebpqc": 15, "chebrx": 16, "chebyshevtow": 17, "featuremapderiv": [18, 56], "hzcrxcrycrz": 19, "highdimfeaturemap": 20, "layeredfeaturemap": [21, 56], "singl": 21, "qubit": 21, "gate": 21, "represent": 21, "two": 21, "paramzfeaturemap": 22, "prunedfeaturemap": 23, "qekfeaturemap": 24, "qiskitfeaturemap": 25, "qiskitzfeaturemap": 26, "transpiledfeaturemap": [27, 56], "yz_cx_featuremap": 28, "automated_prun": 29, "feature_map_bas": 30, "featuremapbas": 30, "pruning_from_qfi": 31, "matrix": [32, 33, 34], "fidelitykernel": [32, 57], "projectedquantumkernel": [33, 57], "outer": 33, "implement": [33, 56, 58], "follow": 33, "gaussian": 33, "matern": 33, "expsinesquar": 33, "rationalquadrat": 33, "dotproduct": 33, "pairwisekernel": 33, "kernel_matrix_bas": 34, "kernelmatrixbas": 34, "ml": [35, 36, 37, 38, 39], "qgpc": 35, "qgpr": 36, "qkrr": 37, "qsvc": 38, "qsvr": 39, "kernel_loss_bas": 40, "kernellossbas": 40, "kernel_optimization_bas": 41, "kerneloptimizerbas": 41, "kernel_optim": 42, "kerneloptim": 42, "negative_log_likelihood": 43, "nll": 43, "target_align": 44, "targetalign": 44, "optimizer_bas": 45, "optimizerbas": 45, "qnnclassifi": 46, "qnnregressor": 47, "base_qnn": 48, "baseqnn": 48, "loss": [49, 50, 51, 52], "lossbas": 49, "parameterregularizationloss": 50, "squaredloss": 51, "varianceloss": 52, "expec": 53, "overview": 55, "kei": 55, "initi": 55, "util": 55, "primit": 55, "qiskit": [55, 56], "routin": 55, "option": 55, "combin": 56, "wrap": 56, "creat": 56, "your": 56, "custom": 56, "via": [56, 57], "prune": 56, "differ": 56, "transpil": 56, "high": 57, "level": 57, "emploi": 57, "regress": 57, "evalu": 57, "fidel": 57, "fqk": 57, "pqk": 57, "train": 57, "expect": 58, "valu": 58, "obtain": 58, "deriv": 58, "user": 59, "guid": 59}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"Hyperparamter Optimization and Pipelines": [[0, "Hyperparamter-Optimization-and-Pipelines"]], "Summary": [[0, "Summary"]], "Importing Libraries": [[0, "Importing-Libraries"]], "Generating Data": [[0, "Generating-Data"]], "Setting up the kernels": [[0, "Setting-up-the-kernels"]], "Setting up the grid search": [[0, "Setting-up-the-grid-search"]], "Running Grid Search": [[0, "Running-Grid-Search"]], "Results Analysis": [[0, "Results-Analysis"]], "Handwritten Digit Recognition with Projected Quantum Kernels": [[1, "Handwritten-Digit-Recognition-with-Projected-Quantum-Kernels"]], "Imports and Definitions": [[1, "Imports-and-Definitions"]], "The Data": [[1, "The-Data"]], "Preprocessing": [[1, "Preprocessing"]], "Dimensionality Reduction": [[1, "Dimensionality-Reduction"]], "Min Max Scaling": [[1, "Min-Max-Scaling"]], "Split Data sets": [[1, "Split-Data-sets"]], "Classification": [[1, "Classification"], [57, "classification"]], "Quantum Kernel Methods": [[1, "Quantum-Kernel-Methods"], [57, "quantum-kernel-methods"]], "Quantum Kernels": [[1, "Quantum-Kernels"]], "Projected Quantum Kernel": [[1, "Projected-Quantum-Kernel"]], "Support Vector Machine": [[1, "Support-Vector-Machine"]], "Examples": [[2, "examples"], [3, "examples"]], "Welcome to sQUlearn\u2019s documentation!": [[3, "welcome-to-squlearn-s-documentation"]], "sQUlearn 0.3.0": [[3, "squlearn-0-3-0"]], "Prerequisites": [[3, "prerequisites"], [4, "prerequisites"]], "Installation": [[3, "installation"], [4, "installation"]], "Stable Release": [[3, "stable-release"], [4, "stable-release"]], "Contribution": [[3, "contribution"]], "License": [[3, "license"]], "Imprint": [[3, "imprint"]], "Contents:": [[3, null]], "Bleeding-edge version": [[4, "bleeding-edge-version"]], "Development version": [[4, "development-version"]], "API Reference": [[5, "api-reference"]], "QML Regressors": [[5, "qml-regressors"]], "QML Classifiers": [[5, "qml-classifiers"]], "Circuit Design": [[5, "circuit-design"]], "Feature Maps": [[5, "module-squlearn.feature_map"]], "Feature Map Tools": [[5, "feature-map-tools"]], "Operators": [[5, "operators"]], "Operator Tools": [[5, "operator-tools"]], "Execution Tools": [[5, "execution-tools"]], "Core": [[5, "core"]], "Quantum Kernel Core": [[5, "module-squlearn.kernel.matrix"]], "QNN Core": [[5, "module-squlearn.qnn"]], "Base Classes": [[5, "base-classes"]], "squlearn.Executor": [[6, "squlearn-executor"]], "Attributes:": [[6, "attributes"], [7, "attributes"], [8, "attributes"], [9, "attributes"], [10, "attributes"], [11, "attributes"], [11, "id1"], [12, "attributes"], [13, "attributes"], [14, "attributes"], [33, "attributes"]], "Methods:": [[6, "methods"], [33, "methods"], [35, "methods"], [36, "methods"], [37, "methods"], [38, "methods"], [39, "methods"], [42, "methods"], [43, "methods"], [44, "methods"], [46, "methods"], [47, "methods"]], "squlearn.expectation_operator.CustomExpectationOperator": [[7, "squlearn-expectation-operator-customexpectationoperator"]], "squlearn.expectation_operator.IsingHamiltonian": [[8, "squlearn-expectation-operator-isinghamiltonian"]], "squlearn.expectation_operator.SinglePauli": [[9, "squlearn-expectation-operator-singlepauli"]], "squlearn.expectation_operator.SingleProbability": [[10, "squlearn-expectation-operator-singleprobability"]], "squlearn.expectation_operator.SummedPaulis": [[11, "squlearn-expectation-operator-summedpaulis"]], "squlearn.expectation_operator.SummedProbabilities": [[12, "squlearn-expectation-operator-summedprobabilities"]], "squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase": [[13, "squlearn-expectation-operator-expectation-operator-base-expectationoperatorbase"]], "squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives": [[14, "squlearn-expectation-operator-expectation-operator-derivatives-expectationoperatorderivatives"]], "Strings that are recognized by the get_derivative() method": [[14, "id1"], [18, "id1"]], "squlearn.feature_map.ChebPQC": [[15, "squlearn-feature-map-chebpqc"]], "squlearn.feature_map.ChebRx": [[16, "squlearn-feature-map-chebrx"]], "squlearn.feature_map.ChebyshevTower": [[17, "squlearn-feature-map-chebyshevtower"]], "squlearn.feature_map.FeatureMapDerivatives": [[18, "squlearn-feature-map-featuremapderivatives"]], "squlearn.feature_map.HZCRxCRyCRz": [[19, "squlearn-feature-map-hzcrxcrycrz"]], "squlearn.feature_map.HighDimFeatureMap": [[20, "squlearn-feature-map-highdimfeaturemap"]], "squlearn.feature_map.LayeredFeatureMap": [[21, "squlearn-feature-map-layeredfeaturemap"]], "Single qubit gates and their string representation": [[21, "id1"]], "Two qubit gates and their string representation": [[21, "id2"]], "squlearn.feature_map.ParamZFeatureMap": [[22, "squlearn-feature-map-paramzfeaturemap"]], "squlearn.feature_map.PrunedFeatureMap": [[23, "squlearn-feature-map-prunedfeaturemap"]], "squlearn.feature_map.QEKFeatureMap": [[24, "squlearn-feature-map-qekfeaturemap"]], "squlearn.feature_map.QiskitFeatureMap": [[25, "squlearn-feature-map-qiskitfeaturemap"]], "squlearn.feature_map.QiskitZFeatureMap": [[26, "squlearn-feature-map-qiskitzfeaturemap"]], "squlearn.feature_map.TranspiledFeatureMap": [[27, "squlearn-feature-map-transpiledfeaturemap"]], "squlearn.feature_map.YZ_CX_FeatureMap": [[28, "squlearn-feature-map-yz-cx-featuremap"]], "squlearn.feature_map.automated_pruning": [[29, "squlearn-feature-map-automated-pruning"]], "squlearn.feature_map.feature_map_base.FeatureMapBase": [[30, "squlearn-feature-map-feature-map-base-featuremapbase"]], "squlearn.feature_map.pruning_from_QFI": [[31, "squlearn-feature-map-pruning-from-qfi"]], "squlearn.kernel.matrix.FidelityKernel": [[32, "squlearn-kernel-matrix-fidelitykernel"]], "squlearn.kernel.matrix.ProjectedQuantumKernel": [[33, "squlearn-kernel-matrix-projectedquantumkernel"]], "Outer Kernels are implemented as follows:": [[33, "outer-kernels-are-implemented-as-follows"]], "Gaussian:": [[33, "gaussian"]], "Matern:": [[33, "matern"]], "ExpSineSquared:": [[33, "expsinesquared"]], "RationalQuadratic:": [[33, "rationalquadratic"]], "DotProduct:": [[33, "dotproduct"]], "PairwiseKernel:": [[33, "pairwisekernel"]], "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase": [[34, "squlearn-kernel-matrix-kernel-matrix-base-kernelmatrixbase"]], "squlearn.kernel.ml.QGPC": [[35, "squlearn-kernel-ml-qgpc"]], "squlearn.kernel.ml.QGPR": [[36, "squlearn-kernel-ml-qgpr"]], "squlearn.kernel.ml.QKRR": [[37, "squlearn-kernel-ml-qkrr"]], "squlearn.kernel.ml.QSVC": [[38, "squlearn-kernel-ml-qsvc"]], "squlearn.kernel.ml.QSVR": [[39, "squlearn-kernel-ml-qsvr"]], "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase": [[40, "squlearn-kernel-optimization-kernel-loss-base-kernellossbase"]], "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase": [[41, "squlearn-kernel-optimization-kernel-optimization-base-kerneloptimizerbase"]], "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer": [[42, "squlearn-kernel-optimization-kernel-optimizer-kerneloptimizer"]], "squlearn.kernel.optimization.negative_log_likelihood.NLL": [[43, "squlearn-kernel-optimization-negative-log-likelihood-nll"]], "squlearn.kernel.optimization.target_alignment.TargetAlignment": [[44, "squlearn-kernel-optimization-target-alignment-targetalignment"]], "squlearn.optimizers.optimizer_base.OptimizerBase": [[45, "squlearn-optimizers-optimizer-base-optimizerbase"]], "squlearn.qnn.QNNClassifier": [[46, "squlearn-qnn-qnnclassifier"]], "squlearn.qnn.QNNRegressor": [[47, "squlearn-qnn-qnnregressor"]], "squlearn.qnn.base_qnn.BaseQNN": [[48, "squlearn-qnn-base-qnn-baseqnn"]], "squlearn.qnn.loss.LossBase": [[49, "squlearn-qnn-loss-lossbase"]], "squlearn.qnn.loss.ParameterRegularizationLoss": [[50, "squlearn-qnn-loss-parameterregularizationloss"]], "squlearn.qnn.loss.SquaredLoss": [[51, "squlearn-qnn-loss-squaredloss"]], "squlearn.qnn.loss.VarianceLoss": [[52, "squlearn-qnn-loss-varianceloss"]], "squlearn.qnn.qnn.Expec": [[53, "squlearn-qnn-qnn-expec"]], "squlearn.qnn.qnn.QNN": [[54, "squlearn-qnn-qnn-qnn"]], "The Executor Class": [[55, "the-executor-class"]], "Overview": [[55, "overview"]], "Key Features of the Executor": [[55, "key-features-of-the-executor"]], "Initialization of the Executor class": [[55, "initialization-of-the-executor-class"]], "Utilizing Executor Primitives in Qiskit Routines": [[55, "utilizing-executor-primitives-in-qiskit-routines"]], "Setting Options for Primitives": [[55, "setting-options-for-primitives"]], "Quantum Feature Maps": [[56, "quantum-feature-maps"]], "Implemented Quantum Feature Maps": [[56, "implemented-quantum-feature-maps"]], "Combining Quantum Feature Maps": [[56, "combining-quantum-feature-maps"]], "Wrapping Qiskit Feature Maps": [[56, "wrapping-qiskit-feature-maps"]], "Create your custom Feature Map via LayeredFeatureMap": [[56, "create-your-custom-feature-map-via-layeredfeaturemap"]], "Pruning of Quantum Feature Maps": [[56, "pruning-of-quantum-feature-maps"]], "Different Quantum Feature Maps via FeatureMapDerivatives": [[56, "different-quantum-feature-maps-via-featuremapderivatives"]], "Transpile Quantum Feature Maps via TranspiledFeatureMap": [[56, "transpile-quantum-feature-maps-via-transpiledfeaturemap"]], "High-Level methods that employ quantum kernels": [[57, "high-level-methods-that-employ-quantum-kernels"]], "Regression": [[57, "regression"]], "Methods to evaluate quantum kernels": [[57, "methods-to-evaluate-quantum-kernels"]], "Fidelity Quantum Kernel (FQK) via FidelityKernel": [[57, "fidelity-quantum-kernel-fqk-via-fidelitykernel"]], "Projected Quantum Kernel (PQK) via ProjectedQuantumKernel": [[57, "projected-quantum-kernel-pqk-via-projectedquantumkernel"]], "Training of quantum kernels": [[57, "training-of-quantum-kernels"]], "References": [[57, "references"]], "Operators for expectation values": [[58, "operators-for-expectation-values"]], "Implemented expectation operators.": [[58, "implemented-expectation-operators"]], "Obtained derivatives of the expectation values": [[58, "obtained-derivatives-of-the-expectation-values"]], "User Guide": [[59, "user-guide"]]}, "indexentries": {"module": [[5, "module-squlearn.expectation_operator"], [5, "module-squlearn.feature_map"], [5, "module-squlearn.kernel.matrix"], [5, "module-squlearn.kernel.optimization"], [5, "module-squlearn.qnn"]], "squlearn.expectation_operator": [[5, "module-squlearn.expectation_operator"]], "squlearn.feature_map": [[5, "module-squlearn.feature_map"]], "squlearn.kernel.matrix": [[5, "module-squlearn.kernel.matrix"]], "squlearn.kernel.optimization": [[5, "module-squlearn.kernel.optimization"]], "squlearn.qnn": [[5, "module-squlearn.qnn"]], "executor (class in squlearn)": [[6, "squlearn.Executor"]], "backend (squlearn.executor attribute)": [[6, "squlearn.Executor.backend"]], "backend_run() (squlearn.executor method)": [[6, "squlearn.Executor.backend_run"]], "clear_estimator_cache() (squlearn.executor method)": [[6, "squlearn.Executor.clear_estimator_cache"]], "clear_sampler_cache() (squlearn.executor method)": [[6, "squlearn.Executor.clear_sampler_cache"]], "close_session() (squlearn.executor method)": [[6, "squlearn.Executor.close_session"]], "create_session() (squlearn.executor method)": [[6, "squlearn.Executor.create_session"]], "estimator (squlearn.executor attribute)": [[6, "squlearn.Executor.estimator"]], "estimator_run() (squlearn.executor method)": [[6, "squlearn.Executor.estimator_run"]], "execution (squlearn.executor attribute)": [[6, "squlearn.Executor.execution"]], "get_estimator() (squlearn.executor method)": [[6, "squlearn.Executor.get_estimator"]], "get_sampler() (squlearn.executor method)": [[6, "squlearn.Executor.get_sampler"]], "get_shots() (squlearn.executor method)": [[6, "squlearn.Executor.get_shots"]], "opflow_exec() (squlearn.executor method)": [[6, "squlearn.Executor.opflow_exec"]], "opflow_executor() (squlearn.executor method)": [[6, "squlearn.Executor.opflow_executor"]], "quantum_instance (squlearn.executor attribute)": [[6, "squlearn.Executor.quantum_instance"]], "reset_shots() (squlearn.executor method)": [[6, "squlearn.Executor.reset_shots"]], "sampler (squlearn.executor attribute)": [[6, "squlearn.Executor.sampler"]], "sampler_run() (squlearn.executor method)": [[6, "squlearn.Executor.sampler_run"]], "service (squlearn.executor attribute)": [[6, "squlearn.Executor.service"]], "session (squlearn.executor attribute)": [[6, "squlearn.Executor.session"]], "set_shots() (squlearn.executor method)": [[6, "squlearn.Executor.set_shots"]], "shots (squlearn.executor attribute)": [[6, "squlearn.Executor.shots"]], "customexpectationoperator (class in squlearn.expectation_operator)": [[7, "squlearn.expectation_operator.CustomExpectationOperator"]], "generate_initial_parameters() (squlearn.expectation_operator.customexpectationoperator method)": [[7, "squlearn.expectation_operator.CustomExpectationOperator.generate_initial_parameters"]], "get_operator() (squlearn.expectation_operator.customexpectationoperator method)": [[7, "squlearn.expectation_operator.CustomExpectationOperator.get_operator"]], "get_params() (squlearn.expectation_operator.customexpectationoperator method)": [[7, "squlearn.expectation_operator.CustomExpectationOperator.get_params"]], "get_pauli() (squlearn.expectation_operator.customexpectationoperator method)": [[7, "squlearn.expectation_operator.CustomExpectationOperator.get_pauli"]], "get_pauli_mapped() (squlearn.expectation_operator.customexpectationoperator method)": [[7, "squlearn.expectation_operator.CustomExpectationOperator.get_pauli_mapped"]], "num_parameters (squlearn.expectation_operator.customexpectationoperator attribute)": [[7, "squlearn.expectation_operator.CustomExpectationOperator.num_parameters"]], "num_qubits (squlearn.expectation_operator.customexpectationoperator attribute)": [[7, "squlearn.expectation_operator.CustomExpectationOperator.num_qubits"]], "operator_string (squlearn.expectation_operator.customexpectationoperator attribute)": [[7, "squlearn.expectation_operator.CustomExpectationOperator.operator_string"]], "parameterized (squlearn.expectation_operator.customexpectationoperator attribute)": [[7, "squlearn.expectation_operator.CustomExpectationOperator.parameterized"]], "set_map() (squlearn.expectation_operator.customexpectationoperator method)": [[7, "squlearn.expectation_operator.CustomExpectationOperator.set_map"]], "set_params() (squlearn.expectation_operator.customexpectationoperator method)": [[7, "squlearn.expectation_operator.CustomExpectationOperator.set_params"]], "i (squlearn.expectation_operator.isinghamiltonian attribute)": [[8, "squlearn.expectation_operator.IsingHamiltonian.I"]], "isinghamiltonian (class in squlearn.expectation_operator)": [[8, "squlearn.expectation_operator.IsingHamiltonian"]], "x (squlearn.expectation_operator.isinghamiltonian attribute)": [[8, "squlearn.expectation_operator.IsingHamiltonian.X"]], "z (squlearn.expectation_operator.isinghamiltonian attribute)": [[8, "squlearn.expectation_operator.IsingHamiltonian.Z"]], "zz (squlearn.expectation_operator.isinghamiltonian attribute)": [[8, "squlearn.expectation_operator.IsingHamiltonian.ZZ"]], "generate_initial_parameters() (squlearn.expectation_operator.isinghamiltonian method)": [[8, "squlearn.expectation_operator.IsingHamiltonian.generate_initial_parameters"]], "get_operator() (squlearn.expectation_operator.isinghamiltonian method)": [[8, "squlearn.expectation_operator.IsingHamiltonian.get_operator"]], "get_params() (squlearn.expectation_operator.isinghamiltonian method)": [[8, "squlearn.expectation_operator.IsingHamiltonian.get_params"]], "get_pauli() (squlearn.expectation_operator.isinghamiltonian method)": [[8, "squlearn.expectation_operator.IsingHamiltonian.get_pauli"]], "get_pauli_mapped() (squlearn.expectation_operator.isinghamiltonian method)": [[8, "squlearn.expectation_operator.IsingHamiltonian.get_pauli_mapped"]], "num_parameters (squlearn.expectation_operator.isinghamiltonian attribute)": [[8, "squlearn.expectation_operator.IsingHamiltonian.num_parameters"]], "num_qubits (squlearn.expectation_operator.isinghamiltonian attribute)": [[8, "squlearn.expectation_operator.IsingHamiltonian.num_qubits"]], "set_map() (squlearn.expectation_operator.isinghamiltonian method)": [[8, "squlearn.expectation_operator.IsingHamiltonian.set_map"]], "set_params() (squlearn.expectation_operator.isinghamiltonian method)": [[8, "squlearn.expectation_operator.IsingHamiltonian.set_params"]], "singlepauli (class in squlearn.expectation_operator)": [[9, "squlearn.expectation_operator.SinglePauli"]], "generate_initial_parameters() (squlearn.expectation_operator.singlepauli method)": [[9, "squlearn.expectation_operator.SinglePauli.generate_initial_parameters"]], "get_operator() (squlearn.expectation_operator.singlepauli method)": [[9, "squlearn.expectation_operator.SinglePauli.get_operator"]], "get_params() (squlearn.expectation_operator.singlepauli method)": [[9, "squlearn.expectation_operator.SinglePauli.get_params"]], "get_pauli() (squlearn.expectation_operator.singlepauli method)": [[9, "squlearn.expectation_operator.SinglePauli.get_pauli"]], "get_pauli_mapped() (squlearn.expectation_operator.singlepauli method)": [[9, "squlearn.expectation_operator.SinglePauli.get_pauli_mapped"]], "num_parameters (squlearn.expectation_operator.singlepauli attribute)": [[9, "squlearn.expectation_operator.SinglePauli.num_parameters"]], "num_qubits (squlearn.expectation_operator.singlepauli attribute)": [[9, "squlearn.expectation_operator.SinglePauli.num_qubits"]], "op_str (squlearn.expectation_operator.singlepauli attribute)": [[9, "squlearn.expectation_operator.SinglePauli.op_str"]], "parameterized (squlearn.expectation_operator.singlepauli attribute)": [[9, "squlearn.expectation_operator.SinglePauli.parameterized"]], "qubit (squlearn.expectation_operator.singlepauli attribute)": [[9, "squlearn.expectation_operator.SinglePauli.qubit"]], "set_map() (squlearn.expectation_operator.singlepauli method)": [[9, "squlearn.expectation_operator.SinglePauli.set_map"]], "set_params() (squlearn.expectation_operator.singlepauli method)": [[9, "squlearn.expectation_operator.SinglePauli.set_params"]], "singleprobability (class in squlearn.expectation_operator)": [[10, "squlearn.expectation_operator.SingleProbability"]], "generate_initial_parameters() (squlearn.expectation_operator.singleprobability method)": [[10, "squlearn.expectation_operator.SingleProbability.generate_initial_parameters"]], "get_operator() (squlearn.expectation_operator.singleprobability method)": [[10, "squlearn.expectation_operator.SingleProbability.get_operator"]], "get_params() (squlearn.expectation_operator.singleprobability method)": [[10, "squlearn.expectation_operator.SingleProbability.get_params"]], "get_pauli() (squlearn.expectation_operator.singleprobability method)": [[10, "squlearn.expectation_operator.SingleProbability.get_pauli"]], "get_pauli_mapped() (squlearn.expectation_operator.singleprobability method)": [[10, "squlearn.expectation_operator.SingleProbability.get_pauli_mapped"]], "num_parameters (squlearn.expectation_operator.singleprobability attribute)": [[10, "squlearn.expectation_operator.SingleProbability.num_parameters"]], "num_qubits (squlearn.expectation_operator.singleprobability attribute)": [[10, "squlearn.expectation_operator.SingleProbability.num_qubits"]], "one_state (squlearn.expectation_operator.singleprobability attribute)": [[10, "squlearn.expectation_operator.SingleProbability.one_state"]], "parameterized (squlearn.expectation_operator.singleprobability attribute)": [[10, "squlearn.expectation_operator.SingleProbability.parameterized"]], "qubit (squlearn.expectation_operator.singleprobability attribute)": [[10, "squlearn.expectation_operator.SingleProbability.qubit"]], "set_map() (squlearn.expectation_operator.singleprobability method)": [[10, "squlearn.expectation_operator.SingleProbability.set_map"]], "set_params() (squlearn.expectation_operator.singleprobability method)": [[10, "squlearn.expectation_operator.SingleProbability.set_params"]], "summedpaulis (class in squlearn.expectation_operator)": [[11, "squlearn.expectation_operator.SummedPaulis"]], "full_sum (squlearn.expectation_operator.summedpaulis attribute)": [[11, "squlearn.expectation_operator.SummedPaulis.full_sum"]], "generate_initial_parameters() (squlearn.expectation_operator.summedpaulis method)": [[11, "squlearn.expectation_operator.SummedPaulis.generate_initial_parameters"]], "get_operator() (squlearn.expectation_operator.summedpaulis method)": [[11, "squlearn.expectation_operator.SummedPaulis.get_operator"]], "get_params() (squlearn.expectation_operator.summedpaulis method)": [[11, "squlearn.expectation_operator.SummedPaulis.get_params"]], "get_pauli() (squlearn.expectation_operator.summedpaulis method)": [[11, "squlearn.expectation_operator.SummedPaulis.get_pauli"]], "get_pauli_mapped() (squlearn.expectation_operator.summedpaulis method)": [[11, "squlearn.expectation_operator.SummedPaulis.get_pauli_mapped"]], "include_identity (squlearn.expectation_operator.summedpaulis attribute)": [[11, "squlearn.expectation_operator.SummedPaulis.include_identity"]], "num_parameters (squlearn.expectation_operator.summedpaulis attribute)": [[11, "squlearn.expectation_operator.SummedPaulis.num_parameters"]], "num_qubits (squlearn.expectation_operator.summedpaulis attribute)": [[11, "squlearn.expectation_operator.SummedPaulis.num_qubits"]], "op_str (squlearn.expectation_operator.summedpaulis attribute)": [[11, "squlearn.expectation_operator.SummedPaulis.op_str"]], "set_map() (squlearn.expectation_operator.summedpaulis method)": [[11, "squlearn.expectation_operator.SummedPaulis.set_map"]], "set_params() (squlearn.expectation_operator.summedpaulis method)": [[11, "squlearn.expectation_operator.SummedPaulis.set_params"]], "summedprobabilities (class in squlearn.expectation_operator)": [[12, "squlearn.expectation_operator.SummedProbabilities"]], "full_sum (squlearn.expectation_operator.summedprobabilities attribute)": [[12, "squlearn.expectation_operator.SummedProbabilities.full_sum"]], "generate_initial_parameters() (squlearn.expectation_operator.summedprobabilities method)": [[12, "squlearn.expectation_operator.SummedProbabilities.generate_initial_parameters"]], "get_operator() (squlearn.expectation_operator.summedprobabilities method)": [[12, "squlearn.expectation_operator.SummedProbabilities.get_operator"]], "get_params() (squlearn.expectation_operator.summedprobabilities method)": [[12, "squlearn.expectation_operator.SummedProbabilities.get_params"]], "get_pauli() (squlearn.expectation_operator.summedprobabilities method)": [[12, "squlearn.expectation_operator.SummedProbabilities.get_pauli"]], "get_pauli_mapped() (squlearn.expectation_operator.summedprobabilities method)": [[12, "squlearn.expectation_operator.SummedProbabilities.get_pauli_mapped"]], "include_identity (squlearn.expectation_operator.summedprobabilities attribute)": [[12, "squlearn.expectation_operator.SummedProbabilities.include_identity"]], "num_parameters (squlearn.expectation_operator.summedprobabilities attribute)": [[12, "squlearn.expectation_operator.SummedProbabilities.num_parameters"]], "num_qubits (squlearn.expectation_operator.summedprobabilities attribute)": [[12, "squlearn.expectation_operator.SummedProbabilities.num_qubits"]], "one_state (squlearn.expectation_operator.summedprobabilities attribute)": [[12, "squlearn.expectation_operator.SummedProbabilities.one_state"]], "set_map() (squlearn.expectation_operator.summedprobabilities method)": [[12, "squlearn.expectation_operator.SummedProbabilities.set_map"]], "set_params() (squlearn.expectation_operator.summedprobabilities method)": [[12, "squlearn.expectation_operator.SummedProbabilities.set_params"]], "expectationoperatorbase (class in squlearn.expectation_operator.expectation_operator_base)": [[13, "squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase"]], "generate_initial_parameters() (squlearn.expectation_operator.expectation_operator_base.expectationoperatorbase method)": [[13, "squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase.generate_initial_parameters"]], "get_operator() (squlearn.expectation_operator.expectation_operator_base.expectationoperatorbase method)": [[13, "squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase.get_operator"]], "get_params() (squlearn.expectation_operator.expectation_operator_base.expectationoperatorbase method)": [[13, "squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase.get_params"]], "get_pauli() (squlearn.expectation_operator.expectation_operator_base.expectationoperatorbase method)": [[13, "squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase.get_pauli"]], "get_pauli_mapped() (squlearn.expectation_operator.expectation_operator_base.expectationoperatorbase method)": [[13, "squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase.get_pauli_mapped"]], "num_parameters (squlearn.expectation_operator.expectation_operator_base.expectationoperatorbase attribute)": [[13, "squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase.num_parameters"]], "num_qubits (squlearn.expectation_operator.expectation_operator_base.expectationoperatorbase attribute)": [[13, "squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase.num_qubits"]], "set_map() (squlearn.expectation_operator.expectation_operator_base.expectationoperatorbase method)": [[13, "squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase.set_map"]], "set_params() (squlearn.expectation_operator.expectation_operator_base.expectationoperatorbase method)": [[13, "squlearn.expectation_operator.expectation_operator_base.ExpectationOperatorBase.set_params"]], "expectationoperatorderivatives (class in squlearn.expectation_operator.expectation_operator_derivatives)": [[14, "squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives"]], "assign_parameters() (squlearn.expectation_operator.expectation_operator_derivatives.expectationoperatorderivatives method)": [[14, "squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives.assign_parameters"]], "get_derivation_from_string() (squlearn.expectation_operator.expectation_operator_derivatives.expectationoperatorderivatives method)": [[14, "squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives.get_derivation_from_string"]], "get_derivative() (squlearn.expectation_operator.expectation_operator_derivatives.expectationoperatorderivatives method)": [[14, "squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives.get_derivative"]], "get_differentiation_from_tuple() (squlearn.expectation_operator.expectation_operator_derivatives.expectationoperatorderivatives method)": [[14, "squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives.get_differentiation_from_tuple"]], "get_operator_squared() (squlearn.expectation_operator.expectation_operator_derivatives.expectationoperatorderivatives method)": [[14, "squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives.get_operator_squared"]], "num_operators (squlearn.expectation_operator.expectation_operator_derivatives.expectationoperatorderivatives attribute)": [[14, "squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives.num_operators"]], "num_parameters (squlearn.expectation_operator.expectation_operator_derivatives.expectationoperatorderivatives attribute)": [[14, "squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives.num_parameters"]], "parameter_vector (squlearn.expectation_operator.expectation_operator_derivatives.expectationoperatorderivatives attribute)": [[14, "squlearn.expectation_operator.expectation_operator_derivatives.ExpectationOperatorDerivatives.parameter_vector"]], "chebpqc (class in squlearn.feature_map)": [[15, "squlearn.feature_map.ChebPQC"]], "draw() (squlearn.feature_map.chebpqc method)": [[15, "squlearn.feature_map.ChebPQC.draw"]], "generate_initial_parameters() (squlearn.feature_map.chebpqc method)": [[15, "squlearn.feature_map.ChebPQC.generate_initial_parameters"]], "get_cheb_indices() (squlearn.feature_map.chebpqc method)": [[15, "squlearn.feature_map.ChebPQC.get_cheb_indices"]], "get_circuit() (squlearn.feature_map.chebpqc method)": [[15, "squlearn.feature_map.ChebPQC.get_circuit"]], "get_params() (squlearn.feature_map.chebpqc method)": [[15, "squlearn.feature_map.ChebPQC.get_params"]], "set_params() (squlearn.feature_map.chebpqc method)": [[15, "squlearn.feature_map.ChebPQC.set_params"]], "chebrx (class in squlearn.feature_map)": [[16, "squlearn.feature_map.ChebRx"]], "draw() (squlearn.feature_map.chebrx method)": [[16, "squlearn.feature_map.ChebRx.draw"]], "generate_initial_parameters() (squlearn.feature_map.chebrx method)": [[16, "squlearn.feature_map.ChebRx.generate_initial_parameters"]], "get_cheb_indices() (squlearn.feature_map.chebrx method)": [[16, "squlearn.feature_map.ChebRx.get_cheb_indices"]], "get_circuit() (squlearn.feature_map.chebrx method)": [[16, "squlearn.feature_map.ChebRx.get_circuit"]], "get_params() (squlearn.feature_map.chebrx method)": [[16, "squlearn.feature_map.ChebRx.get_params"]], "set_params() (squlearn.feature_map.chebrx method)": [[16, "squlearn.feature_map.ChebRx.set_params"]], "chebyshevtower (class in squlearn.feature_map)": [[17, "squlearn.feature_map.ChebyshevTower"]], "draw() (squlearn.feature_map.chebyshevtower method)": [[17, "squlearn.feature_map.ChebyshevTower.draw"]], "generate_initial_parameters() (squlearn.feature_map.chebyshevtower method)": [[17, "squlearn.feature_map.ChebyshevTower.generate_initial_parameters"]], "get_circuit() (squlearn.feature_map.chebyshevtower method)": [[17, "squlearn.feature_map.ChebyshevTower.get_circuit"]], "get_params() (squlearn.feature_map.chebyshevtower method)": [[17, "squlearn.feature_map.ChebyshevTower.get_params"]], "set_params() (squlearn.feature_map.chebyshevtower method)": [[17, "squlearn.feature_map.ChebyshevTower.set_params"]], "featuremapderivatives (class in squlearn.feature_map)": [[18, "squlearn.feature_map.FeatureMapDerivatives"]], "assign_parameters() (squlearn.feature_map.featuremapderivatives method)": [[18, "squlearn.feature_map.FeatureMapDerivatives.assign_parameters"]], "get_derivation_from_string() (squlearn.feature_map.featuremapderivatives method)": [[18, "squlearn.feature_map.FeatureMapDerivatives.get_derivation_from_string"]], "get_derivative() (squlearn.feature_map.featuremapderivatives method)": [[18, "squlearn.feature_map.FeatureMapDerivatives.get_derivative"]], "get_differentiation_from_tuple() (squlearn.feature_map.featuremapderivatives method)": [[18, "squlearn.feature_map.FeatureMapDerivatives.get_differentiation_from_tuple"]], "hzcrxcrycrz (class in squlearn.feature_map)": [[19, "squlearn.feature_map.HZCRxCRyCRz"]], "draw() (squlearn.feature_map.hzcrxcrycrz method)": [[19, "squlearn.feature_map.HZCRxCRyCRz.draw"]], "generate_initial_parameters() (squlearn.feature_map.hzcrxcrycrz method)": [[19, "squlearn.feature_map.HZCRxCRyCRz.generate_initial_parameters"]], "get_circuit() (squlearn.feature_map.hzcrxcrycrz method)": [[19, "squlearn.feature_map.HZCRxCRyCRz.get_circuit"]], "get_params() (squlearn.feature_map.hzcrxcrycrz method)": [[19, "squlearn.feature_map.HZCRxCRyCRz.get_params"]], "set_params() (squlearn.feature_map.hzcrxcrycrz method)": [[19, "squlearn.feature_map.HZCRxCRyCRz.set_params"]], "highdimfeaturemap (class in squlearn.feature_map)": [[20, "squlearn.feature_map.HighDimFeatureMap"]], "draw() (squlearn.feature_map.highdimfeaturemap method)": [[20, "squlearn.feature_map.HighDimFeatureMap.draw"]], "generate_initial_parameters() (squlearn.feature_map.highdimfeaturemap method)": [[20, "squlearn.feature_map.HighDimFeatureMap.generate_initial_parameters"]], "get_circuit() (squlearn.feature_map.highdimfeaturemap method)": [[20, "squlearn.feature_map.HighDimFeatureMap.get_circuit"]], "get_params() (squlearn.feature_map.highdimfeaturemap method)": [[20, "squlearn.feature_map.HighDimFeatureMap.get_params"]], "set_params() (squlearn.feature_map.highdimfeaturemap method)": [[20, "squlearn.feature_map.HighDimFeatureMap.set_params"]], "h() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.H"]], "i() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.I"]], "layeredfeaturemap (class in squlearn.feature_map)": [[21, "squlearn.feature_map.LayeredFeatureMap"]], "p() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.P"]], "rx() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.Rx"]], "ry() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.Ry"]], "rz() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.Rz"]], "s() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.S"]], "s_conjugate() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.S_conjugate"]], "t() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.T"]], "t_conjugate() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.T_conjugate"]], "u() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.U"]], "x() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.X"]], "y() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.Y"]], "z() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.Z"]], "add_layer() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.add_layer"]], "ch_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.ch_entangling"]], "cp_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.cp_entangling"]], "crx_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.crx_entangling"]], "cry_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.cry_entangling"]], "crz_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.crz_entangling"]], "cu_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.cu_entangling"]], "cx_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.cx_entangling"]], "cy_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.cy_entangling"]], "cz_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.cz_entangling"]], "draw() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.draw"]], "from_string() (squlearn.feature_map.layeredfeaturemap class method)": [[21, "squlearn.feature_map.LayeredFeatureMap.from_string"]], "generate_initial_parameters() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.generate_initial_parameters"]], "get_circuit() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.get_circuit"]], "get_params() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.get_params"]], "rxx_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.rxx_entangling"]], "ryy_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.ryy_entangling"]], "rzx_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.rzx_entangling"]], "rzz_entangling() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.rzz_entangling"]], "set_params() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.set_params"]], "swap() (squlearn.feature_map.layeredfeaturemap method)": [[21, "squlearn.feature_map.LayeredFeatureMap.swap"]], "paramzfeaturemap (class in squlearn.feature_map)": [[22, "squlearn.feature_map.ParamZFeatureMap"]], "draw() (squlearn.feature_map.paramzfeaturemap method)": [[22, "squlearn.feature_map.ParamZFeatureMap.draw"]], "generate_initial_parameters() (squlearn.feature_map.paramzfeaturemap method)": [[22, "squlearn.feature_map.ParamZFeatureMap.generate_initial_parameters"]], "get_circuit() (squlearn.feature_map.paramzfeaturemap method)": [[22, "squlearn.feature_map.ParamZFeatureMap.get_circuit"]], "get_params() (squlearn.feature_map.paramzfeaturemap method)": [[22, "squlearn.feature_map.ParamZFeatureMap.get_params"]], "set_params() (squlearn.feature_map.paramzfeaturemap method)": [[22, "squlearn.feature_map.ParamZFeatureMap.set_params"]], "prunedfeaturemap (class in squlearn.feature_map)": [[23, "squlearn.feature_map.PrunedFeatureMap"]], "draw() (squlearn.feature_map.prunedfeaturemap method)": [[23, "squlearn.feature_map.PrunedFeatureMap.draw"]], "generate_initial_parameters() (squlearn.feature_map.prunedfeaturemap method)": [[23, "squlearn.feature_map.PrunedFeatureMap.generate_initial_parameters"]], "get_circuit() (squlearn.feature_map.prunedfeaturemap method)": [[23, "squlearn.feature_map.PrunedFeatureMap.get_circuit"]], "get_params() (squlearn.feature_map.prunedfeaturemap method)": [[23, "squlearn.feature_map.PrunedFeatureMap.get_params"]], "set_params() (squlearn.feature_map.prunedfeaturemap method)": [[23, "squlearn.feature_map.PrunedFeatureMap.set_params"]], "qekfeaturemap (class in squlearn.feature_map)": [[24, "squlearn.feature_map.QEKFeatureMap"]], "draw() (squlearn.feature_map.qekfeaturemap method)": [[24, "squlearn.feature_map.QEKFeatureMap.draw"]], "generate_initial_parameters() (squlearn.feature_map.qekfeaturemap method)": [[24, "squlearn.feature_map.QEKFeatureMap.generate_initial_parameters"]], "get_circuit() (squlearn.feature_map.qekfeaturemap method)": [[24, "squlearn.feature_map.QEKFeatureMap.get_circuit"]], "get_params() (squlearn.feature_map.qekfeaturemap method)": [[24, "squlearn.feature_map.QEKFeatureMap.get_params"]], "set_params() (squlearn.feature_map.qekfeaturemap method)": [[24, "squlearn.feature_map.QEKFeatureMap.set_params"]], "qiskitfeaturemap (class in squlearn.feature_map)": [[25, "squlearn.feature_map.QiskitFeatureMap"]], "draw() (squlearn.feature_map.qiskitfeaturemap method)": [[25, "squlearn.feature_map.QiskitFeatureMap.draw"]], "generate_initial_parameters() (squlearn.feature_map.qiskitfeaturemap method)": [[25, "squlearn.feature_map.QiskitFeatureMap.generate_initial_parameters"]], "get_circuit() (squlearn.feature_map.qiskitfeaturemap method)": [[25, "squlearn.feature_map.QiskitFeatureMap.get_circuit"]], "get_params() (squlearn.feature_map.qiskitfeaturemap method)": [[25, "squlearn.feature_map.QiskitFeatureMap.get_params"]], "set_params() (squlearn.feature_map.qiskitfeaturemap method)": [[25, "squlearn.feature_map.QiskitFeatureMap.set_params"]], "qiskitzfeaturemap (class in squlearn.feature_map)": [[26, "squlearn.feature_map.QiskitZFeatureMap"]], "draw() (squlearn.feature_map.qiskitzfeaturemap method)": [[26, "squlearn.feature_map.QiskitZFeatureMap.draw"]], "generate_initial_parameters() (squlearn.feature_map.qiskitzfeaturemap method)": [[26, "squlearn.feature_map.QiskitZFeatureMap.generate_initial_parameters"]], "get_circuit() (squlearn.feature_map.qiskitzfeaturemap method)": [[26, "squlearn.feature_map.QiskitZFeatureMap.get_circuit"]], "get_params() (squlearn.feature_map.qiskitzfeaturemap method)": [[26, "squlearn.feature_map.QiskitZFeatureMap.get_params"]], "set_params() (squlearn.feature_map.qiskitzfeaturemap method)": [[26, "squlearn.feature_map.QiskitZFeatureMap.set_params"]], "transpiledfeaturemap (class in squlearn.feature_map)": [[27, "squlearn.feature_map.TranspiledFeatureMap"]], "draw() (squlearn.feature_map.transpiledfeaturemap method)": [[27, "squlearn.feature_map.TranspiledFeatureMap.draw"]], "generate_initial_parameters() (squlearn.feature_map.transpiledfeaturemap method)": [[27, "squlearn.feature_map.TranspiledFeatureMap.generate_initial_parameters"]], "get_circuit() (squlearn.feature_map.transpiledfeaturemap method)": [[27, "squlearn.feature_map.TranspiledFeatureMap.get_circuit"]], "get_params() (squlearn.feature_map.transpiledfeaturemap method)": [[27, "squlearn.feature_map.TranspiledFeatureMap.get_params"]], "set_params() (squlearn.feature_map.transpiledfeaturemap method)": [[27, "squlearn.feature_map.TranspiledFeatureMap.set_params"]], "yz_cx_featuremap (class in squlearn.feature_map)": [[28, "squlearn.feature_map.YZ_CX_FeatureMap"]], "draw() (squlearn.feature_map.yz_cx_featuremap method)": [[28, "squlearn.feature_map.YZ_CX_FeatureMap.draw"]], "generate_initial_parameters() (squlearn.feature_map.yz_cx_featuremap method)": [[28, "squlearn.feature_map.YZ_CX_FeatureMap.generate_initial_parameters"]], "get_circuit() (squlearn.feature_map.yz_cx_featuremap method)": [[28, "squlearn.feature_map.YZ_CX_FeatureMap.get_circuit"]], "get_params() (squlearn.feature_map.yz_cx_featuremap method)": [[28, "squlearn.feature_map.YZ_CX_FeatureMap.get_params"]], "set_params() (squlearn.feature_map.yz_cx_featuremap method)": [[28, "squlearn.feature_map.YZ_CX_FeatureMap.set_params"]], "automated_pruning() (in module squlearn.feature_map)": [[29, "squlearn.feature_map.automated_pruning"]], "featuremapbase (class in squlearn.feature_map.feature_map_base)": [[30, "squlearn.feature_map.feature_map_base.FeatureMapBase"]], "draw() (squlearn.feature_map.feature_map_base.featuremapbase method)": [[30, "squlearn.feature_map.feature_map_base.FeatureMapBase.draw"]], "generate_initial_parameters() (squlearn.feature_map.feature_map_base.featuremapbase method)": [[30, "squlearn.feature_map.feature_map_base.FeatureMapBase.generate_initial_parameters"]], "get_circuit() (squlearn.feature_map.feature_map_base.featuremapbase method)": [[30, "squlearn.feature_map.feature_map_base.FeatureMapBase.get_circuit"]], "get_params() (squlearn.feature_map.feature_map_base.featuremapbase method)": [[30, "squlearn.feature_map.feature_map_base.FeatureMapBase.get_params"]], "set_params() (squlearn.feature_map.feature_map_base.featuremapbase method)": [[30, "squlearn.feature_map.feature_map_base.FeatureMapBase.set_params"]], "pruning_from_qfi() (in module squlearn.feature_map)": [[31, "squlearn.feature_map.pruning_from_QFI"]], "fidelitykernel (class in squlearn.kernel.matrix)": [[32, "squlearn.kernel.matrix.FidelityKernel"]], "assign_parameters() (squlearn.kernel.matrix.fidelitykernel method)": [[32, "squlearn.kernel.matrix.FidelityKernel.assign_parameters"]], "evaluate() (squlearn.kernel.matrix.fidelitykernel method)": [[32, "squlearn.kernel.matrix.FidelityKernel.evaluate"]], "evaluate_pairwise() (squlearn.kernel.matrix.fidelitykernel method)": [[32, "squlearn.kernel.matrix.FidelityKernel.evaluate_pairwise"]], "evaluate_with_parameters() (squlearn.kernel.matrix.fidelitykernel method)": [[32, "squlearn.kernel.matrix.FidelityKernel.evaluate_with_parameters"]], "get_params() (squlearn.kernel.matrix.fidelitykernel method)": [[32, "squlearn.kernel.matrix.FidelityKernel.get_params"]], "set_params() (squlearn.kernel.matrix.fidelitykernel method)": [[32, "squlearn.kernel.matrix.FidelityKernel.set_params"]], "projectedquantumkernel (class in squlearn.kernel.matrix)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel"]], "assign_parameters() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.assign_parameters"]], "evaluate() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate"]], "evaluate_pairwise() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_pairwise"]], "evaluate_qnn() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_qnn"]], "evaluate_with_parameters() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_with_parameters"]], "feature_map (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.feature_map"]], "get_params() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.get_params"]], "measurement (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.measurement"]], "name_hyper_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.name_hyper_parameters"]], "num_features (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_features"]], "num_hyper_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_hyper_parameters"]], "num_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_parameters"]], "num_qubits (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_qubits"]], "outer_kernel (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.outer_kernel"]], "parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.parameters"]], "set_params() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.set_params"]], "kernelmatrixbase (class in squlearn.kernel.matrix.kernel_matrix_base)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase"]], "assign_parameters() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.assign_parameters"]], "evaluate() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate"]], "evaluate_pairwise() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate_pairwise"]], "evaluate_with_parameters() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate_with_parameters"]], "get_params() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.get_params"]], "set_params() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.set_params"]], "qgpc (class in squlearn.kernel.ml)": [[35, "squlearn.kernel.ml.QGPC"]], "get_params() (squlearn.kernel.ml.qgpc method)": [[35, "squlearn.kernel.ml.QGPC.get_params"]], "set_params() (squlearn.kernel.ml.qgpc method)": [[35, "squlearn.kernel.ml.QGPC.set_params"]], "qgpr (class in squlearn.kernel.ml)": [[36, "squlearn.kernel.ml.QGPR"]], "calculate_cov_and_mean() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.calculate_cov_and_mean"]], "fit() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.fit"]], "get_params() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.get_params"]], "predict() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.predict"]], "set_params() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.set_params"]], "qkrr (class in squlearn.kernel.ml)": [[37, "squlearn.kernel.ml.QKRR"]], "fit() (squlearn.kernel.ml.qkrr method)": [[37, "squlearn.kernel.ml.QKRR.fit"]], "get_params() (squlearn.kernel.ml.qkrr method)": [[37, "squlearn.kernel.ml.QKRR.get_params"]], "predict() (squlearn.kernel.ml.qkrr method)": [[37, "squlearn.kernel.ml.QKRR.predict"]], "set_params() (squlearn.kernel.ml.qkrr method)": [[37, "squlearn.kernel.ml.QKRR.set_params"]], "qsvc (class in squlearn.kernel.ml)": [[38, "squlearn.kernel.ml.QSVC"]], "get_params() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.get_params"]], "set_params() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.set_params"]], "qsvr (class in squlearn.kernel.ml)": [[39, "squlearn.kernel.ml.QSVR"]], "get_params() (squlearn.kernel.ml.qsvr method)": [[39, "squlearn.kernel.ml.QSVR.get_params"]], "set_params() (squlearn.kernel.ml.qsvr method)": [[39, "squlearn.kernel.ml.QSVR.set_params"]], "kernellossbase (class in squlearn.kernel.optimization.kernel_loss_base)": [[40, "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase"]], "compute() (squlearn.kernel.optimization.kernel_loss_base.kernellossbase method)": [[40, "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase.compute"]], "kerneloptimizerbase (class in squlearn.kernel.optimization.kernel_optimization_base)": [[41, "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase"]], "run_optimization() (squlearn.kernel.optimization.kernel_optimization_base.kerneloptimizerbase method)": [[41, "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase.run_optimization"]], "kerneloptimizer (class in squlearn.kernel.optimization.kernel_optimizer)": [[42, "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer"]], "run_optimization() (squlearn.kernel.optimization.kernel_optimizer.kerneloptimizer method)": [[42, "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer.run_optimization"]], "nll (class in squlearn.kernel.optimization.negative_log_likelihood)": [[43, "squlearn.kernel.optimization.negative_log_likelihood.NLL"]], "compute() (squlearn.kernel.optimization.negative_log_likelihood.nll method)": [[43, "squlearn.kernel.optimization.negative_log_likelihood.NLL.compute"]], "targetalignment (class in squlearn.kernel.optimization.target_alignment)": [[44, "squlearn.kernel.optimization.target_alignment.TargetAlignment"]], "compute() (squlearn.kernel.optimization.target_alignment.targetalignment method)": [[44, "squlearn.kernel.optimization.target_alignment.TargetAlignment.compute"]], "optimizerbase (class in squlearn.optimizers.optimizer_base)": [[45, "squlearn.optimizers.optimizer_base.OptimizerBase"]], "minimize() (squlearn.optimizers.optimizer_base.optimizerbase method)": [[45, "squlearn.optimizers.optimizer_base.OptimizerBase.minimize"]], "qnnclassifier (class in squlearn.qnn)": [[46, "squlearn.qnn.QNNClassifier"]], "fit() (squlearn.qnn.qnnclassifier method)": [[46, "squlearn.qnn.QNNClassifier.fit"]], "get_params() (squlearn.qnn.qnnclassifier method)": [[46, "squlearn.qnn.QNNClassifier.get_params"]], "partial_fit() (squlearn.qnn.qnnclassifier method)": [[46, "squlearn.qnn.QNNClassifier.partial_fit"]], "predict() (squlearn.qnn.qnnclassifier method)": [[46, "squlearn.qnn.QNNClassifier.predict"]], "predict_proba() (squlearn.qnn.qnnclassifier method)": [[46, "squlearn.qnn.QNNClassifier.predict_proba"]], "set_params() (squlearn.qnn.qnnclassifier method)": [[46, "squlearn.qnn.QNNClassifier.set_params"]], "qnnregressor (class in squlearn.qnn)": [[47, "squlearn.qnn.QNNRegressor"]], "fit() (squlearn.qnn.qnnregressor method)": [[47, "squlearn.qnn.QNNRegressor.fit"]], "get_params() (squlearn.qnn.qnnregressor method)": [[47, "squlearn.qnn.QNNRegressor.get_params"]], "partial_fit() (squlearn.qnn.qnnregressor method)": [[47, "squlearn.qnn.QNNRegressor.partial_fit"]], "predict() (squlearn.qnn.qnnregressor method)": [[47, "squlearn.qnn.QNNRegressor.predict"]], "set_params() (squlearn.qnn.qnnregressor method)": [[47, "squlearn.qnn.QNNRegressor.set_params"]], "baseqnn (class in squlearn.qnn.base_qnn)": [[48, "squlearn.qnn.base_qnn.BaseQNN"]], "fit() (squlearn.qnn.base_qnn.baseqnn method)": [[48, "squlearn.qnn.base_qnn.BaseQNN.fit"]], "get_params() (squlearn.qnn.base_qnn.baseqnn method)": [[48, "squlearn.qnn.base_qnn.BaseQNN.get_params"]], "set_params() (squlearn.qnn.base_qnn.baseqnn method)": [[48, "squlearn.qnn.base_qnn.BaseQNN.set_params"]], "lossbase (class in squlearn.qnn.loss)": [[49, "squlearn.qnn.loss.LossBase"]], "gradient() (squlearn.qnn.loss.lossbase method)": [[49, "squlearn.qnn.loss.LossBase.gradient"]], "set_opt_param_op() (squlearn.qnn.loss.lossbase method)": [[49, "squlearn.qnn.loss.LossBase.set_opt_param_op"]], "value() (squlearn.qnn.loss.lossbase method)": [[49, "squlearn.qnn.loss.LossBase.value"]], "parameterregularizationloss (class in squlearn.qnn.loss)": [[50, "squlearn.qnn.loss.ParameterRegularizationLoss"]], "gradient() (squlearn.qnn.loss.parameterregularizationloss method)": [[50, "squlearn.qnn.loss.ParameterRegularizationLoss.gradient"]], "set_opt_param_op() (squlearn.qnn.loss.parameterregularizationloss method)": [[50, "squlearn.qnn.loss.ParameterRegularizationLoss.set_opt_param_op"]], "value() (squlearn.qnn.loss.parameterregularizationloss method)": [[50, "squlearn.qnn.loss.ParameterRegularizationLoss.value"]], "squaredloss (class in squlearn.qnn.loss)": [[51, "squlearn.qnn.loss.SquaredLoss"]], "gradient() (squlearn.qnn.loss.squaredloss method)": [[51, "squlearn.qnn.loss.SquaredLoss.gradient"]], "set_opt_param_op() (squlearn.qnn.loss.squaredloss method)": [[51, "squlearn.qnn.loss.SquaredLoss.set_opt_param_op"]], "value() (squlearn.qnn.loss.squaredloss method)": [[51, "squlearn.qnn.loss.SquaredLoss.value"]], "varianceloss (class in squlearn.qnn.loss)": [[52, "squlearn.qnn.loss.VarianceLoss"]], "gradient() (squlearn.qnn.loss.varianceloss method)": [[52, "squlearn.qnn.loss.VarianceLoss.gradient"]], "set_opt_param_op() (squlearn.qnn.loss.varianceloss method)": [[52, "squlearn.qnn.loss.VarianceLoss.set_opt_param_op"]], "value() (squlearn.qnn.loss.varianceloss method)": [[52, "squlearn.qnn.loss.VarianceLoss.value"]], "expec (class in squlearn.qnn.qnn)": [[53, "squlearn.qnn.qnn.Expec"]], "from_parameter() (squlearn.qnn.qnn.expec class method)": [[53, "squlearn.qnn.qnn.Expec.from_parameter"]], "from_string() (squlearn.qnn.qnn.expec class method)": [[53, "squlearn.qnn.qnn.Expec.from_string"]], "from_tuple() (squlearn.qnn.qnn.expec class method)": [[53, "squlearn.qnn.qnn.Expec.from_tuple"]], "from_variable() (squlearn.qnn.qnn.expec class method)": [[53, "squlearn.qnn.qnn.Expec.from_variable"]], "qnn (class in squlearn.qnn.qnn)": [[54, "squlearn.qnn.qnn.QNN"]], "evaluate() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate"]], "evaluate_dfdop() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_dfdop"]], "evaluate_dfdopdx() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_dfdopdx"]], "evaluate_dfdp() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_dfdp"]], "evaluate_dfdpdx() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_dfdpdx"]], "evaluate_dfdx() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_dfdx"]], "evaluate_dfdxdx() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_dfdxdx"]], "evaluate_diff_tuple() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_diff_tuple"]], "evaluate_f() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_f"]], "evaluate_from_string() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_from_string"]], "evaluate_laplace() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_laplace"]], "evaluate_laplace_dop() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_laplace_dop"]], "evaluate_laplace_dp() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_laplace_dp"]], "evaluate_probabilities() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_probabilities"]], "evaluate_var() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_var"]], "evaluate_variance() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.evaluate_variance"]], "get_opflow_from_expec() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.get_opflow_from_expec"]], "get_opflow_from_string() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.get_opflow_from_string"]], "get_params() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.get_params"]], "get_shots() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.get_shots"]], "reset_shots() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.reset_shots"]], "set_params() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.set_params"]], "set_shots() (squlearn.qnn.qnn.qnn method)": [[54, "squlearn.qnn.qnn.QNN.set_shots"]]}})