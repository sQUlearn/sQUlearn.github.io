Search.setIndex({"docnames": ["examples/example_kernel_digit_classification", "examples/example_kernel_grid_search", "examples/example_quantum_bayesian_optimization", "examples/examples_index", "index", "install/install", "modules/classes", "modules/generated/squlearn.Executor", "modules/generated/squlearn.encoding_circuit.ChebPQC", "modules/generated/squlearn.encoding_circuit.ChebRx", "modules/generated/squlearn.encoding_circuit.ChebyshevTower", "modules/generated/squlearn.encoding_circuit.EncodingCircuitDerivatives", "modules/generated/squlearn.encoding_circuit.HZCRxCRyCRz", "modules/generated/squlearn.encoding_circuit.HighDimEncodingCircuit", "modules/generated/squlearn.encoding_circuit.LayeredEncodingCircuit", "modules/generated/squlearn.encoding_circuit.ParamZEncodingCircuit", "modules/generated/squlearn.encoding_circuit.PrunedEncodingCircuit", "modules/generated/squlearn.encoding_circuit.QEKEncodingCircuit", "modules/generated/squlearn.encoding_circuit.QiskitEncodingCircuit", "modules/generated/squlearn.encoding_circuit.TranspiledEncodingCircuit", "modules/generated/squlearn.encoding_circuit.YZ_CX_EncodingCircuit", "modules/generated/squlearn.encoding_circuit.automated_pruning", "modules/generated/squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase", "modules/generated/squlearn.encoding_circuit.pruning_from_QFI", "modules/generated/squlearn.kernel.matrix.FidelityKernel", "modules/generated/squlearn.kernel.matrix.ProjectedQuantumKernel", "modules/generated/squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase", "modules/generated/squlearn.kernel.ml.QGPC", "modules/generated/squlearn.kernel.ml.QGPR", "modules/generated/squlearn.kernel.ml.QKRR", "modules/generated/squlearn.kernel.ml.QSVC", "modules/generated/squlearn.kernel.ml.QSVR", "modules/generated/squlearn.kernel.optimization.kernel_loss_base.KernelLossBase", "modules/generated/squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase", "modules/generated/squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer", "modules/generated/squlearn.kernel.optimization.negative_log_likelihood.NLL", "modules/generated/squlearn.kernel.optimization.target_alignment.TargetAlignment", "modules/generated/squlearn.observables.CustomObservable", "modules/generated/squlearn.observables.IsingHamiltonian", "modules/generated/squlearn.observables.SinglePauli", "modules/generated/squlearn.observables.SingleProbability", "modules/generated/squlearn.observables.SummedPaulis", "modules/generated/squlearn.observables.SummedProbabilities", "modules/generated/squlearn.observables.observable_base.ObservableBase", "modules/generated/squlearn.observables.observable_derivatives.ObservableDerivatives", "modules/generated/squlearn.optimizers.Adam", "modules/generated/squlearn.optimizers.LBFGSB", "modules/generated/squlearn.optimizers.SLSQP", "modules/generated/squlearn.optimizers.SPSA", "modules/generated/squlearn.optimizers.optimizer_base.OptimizerBase", "modules/generated/squlearn.qnn.QNNClassifier", "modules/generated/squlearn.qnn.QNNRegressor", "modules/generated/squlearn.qnn.base_qnn.BaseQNN", "modules/generated/squlearn.qnn.loss.LossBase", "modules/generated/squlearn.qnn.loss.ParameterRegularizationLoss", "modules/generated/squlearn.qnn.loss.SquaredLoss", "modules/generated/squlearn.qnn.loss.VarianceLoss", "modules/generated/squlearn.qnn.qnn.Expec", "modules/generated/squlearn.qnn.qnn.QNN", "modules/generated/squlearn.util.OpTree", "modules/generated/squlearn.util.optree.OpTreeCircuit", "modules/generated/squlearn.util.optree.OpTreeContainer", "modules/generated/squlearn.util.optree.OpTreeExpectationValue", "modules/generated/squlearn.util.optree.OpTreeList", "modules/generated/squlearn.util.optree.OpTreeMeasuredOperator", "modules/generated/squlearn.util.optree.OpTreeOperator", "modules/generated/squlearn.util.optree.OpTreeSum", "modules/generated/squlearn.util.optree.OpTreeValue", "user_guide/encoding_circuits", "user_guide/executor", "user_guide/kernel_methods", "user_guide/observables", "user_guide/quantum_neural_networks", "user_guide/user_guide_index"], "filenames": ["examples/example_kernel_digit_classification.nblink", "examples/example_kernel_grid_search.nblink", "examples/example_quantum_bayesian_optimization.nblink", "examples/examples_index.rst", "index.rst", "install/install.rst", "modules/classes.rst", "modules/generated/squlearn.Executor.rst", "modules/generated/squlearn.encoding_circuit.ChebPQC.rst", "modules/generated/squlearn.encoding_circuit.ChebRx.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevTower.rst", "modules/generated/squlearn.encoding_circuit.EncodingCircuitDerivatives.rst", "modules/generated/squlearn.encoding_circuit.HZCRxCRyCRz.rst", "modules/generated/squlearn.encoding_circuit.HighDimEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.LayeredEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.ParamZEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.PrunedEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.QEKEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.QiskitEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.TranspiledEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.YZ_CX_EncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.automated_pruning.rst", "modules/generated/squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.rst", "modules/generated/squlearn.encoding_circuit.pruning_from_QFI.rst", "modules/generated/squlearn.kernel.matrix.FidelityKernel.rst", "modules/generated/squlearn.kernel.matrix.ProjectedQuantumKernel.rst", "modules/generated/squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.rst", "modules/generated/squlearn.kernel.ml.QGPC.rst", "modules/generated/squlearn.kernel.ml.QGPR.rst", "modules/generated/squlearn.kernel.ml.QKRR.rst", "modules/generated/squlearn.kernel.ml.QSVC.rst", "modules/generated/squlearn.kernel.ml.QSVR.rst", "modules/generated/squlearn.kernel.optimization.kernel_loss_base.KernelLossBase.rst", "modules/generated/squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase.rst", "modules/generated/squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer.rst", "modules/generated/squlearn.kernel.optimization.negative_log_likelihood.NLL.rst", "modules/generated/squlearn.kernel.optimization.target_alignment.TargetAlignment.rst", "modules/generated/squlearn.observables.CustomObservable.rst", "modules/generated/squlearn.observables.IsingHamiltonian.rst", "modules/generated/squlearn.observables.SinglePauli.rst", "modules/generated/squlearn.observables.SingleProbability.rst", "modules/generated/squlearn.observables.SummedPaulis.rst", "modules/generated/squlearn.observables.SummedProbabilities.rst", "modules/generated/squlearn.observables.observable_base.ObservableBase.rst", "modules/generated/squlearn.observables.observable_derivatives.ObservableDerivatives.rst", "modules/generated/squlearn.optimizers.Adam.rst", "modules/generated/squlearn.optimizers.LBFGSB.rst", "modules/generated/squlearn.optimizers.SLSQP.rst", "modules/generated/squlearn.optimizers.SPSA.rst", "modules/generated/squlearn.optimizers.optimizer_base.OptimizerBase.rst", "modules/generated/squlearn.qnn.QNNClassifier.rst", "modules/generated/squlearn.qnn.QNNRegressor.rst", "modules/generated/squlearn.qnn.base_qnn.BaseQNN.rst", "modules/generated/squlearn.qnn.loss.LossBase.rst", "modules/generated/squlearn.qnn.loss.ParameterRegularizationLoss.rst", "modules/generated/squlearn.qnn.loss.SquaredLoss.rst", "modules/generated/squlearn.qnn.loss.VarianceLoss.rst", "modules/generated/squlearn.qnn.qnn.Expec.rst", "modules/generated/squlearn.qnn.qnn.QNN.rst", "modules/generated/squlearn.util.OpTree.rst", "modules/generated/squlearn.util.optree.OpTreeCircuit.rst", "modules/generated/squlearn.util.optree.OpTreeContainer.rst", "modules/generated/squlearn.util.optree.OpTreeExpectationValue.rst", "modules/generated/squlearn.util.optree.OpTreeList.rst", "modules/generated/squlearn.util.optree.OpTreeMeasuredOperator.rst", "modules/generated/squlearn.util.optree.OpTreeOperator.rst", "modules/generated/squlearn.util.optree.OpTreeSum.rst", "modules/generated/squlearn.util.optree.OpTreeValue.rst", "user_guide/encoding_circuits.rst", "user_guide/executor.rst", "user_guide/kernel_methods.rst", "user_guide/observables.rst", "user_guide/quantum_neural_networks.rst", "user_guide/user_guide_index.rst"], "titles": ["Handwritten Digit Recognition with Projected Quantum Kernels", "Hyperparameter Optimization and Pipelines", "Bayesian Optimization using a Quantum Gaussian Process Surrogate Model", "Examples", "Welcome to sQUlearn\u2019s documentation!", "Installation", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn</span></code>.Executor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebPQC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebRx", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevTower", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.EncodingCircuitDerivatives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.HZCRxCRyCRz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.HighDimEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.LayeredEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ParamZEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.PrunedEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.QEKEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.QiskitEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.TranspiledEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.YZ_CX_EncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.automated_pruning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit.encoding_circuit_base</span></code>.EncodingCircuitBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.pruning_from_QFI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix</span></code>.FidelityKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix</span></code>.ProjectedQuantumKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix.kernel_matrix_base</span></code>.KernelMatrixBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QGPC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QGPR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QKRR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.kernel_loss_base</span></code>.KernelLossBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.kernel_optimization_base</span></code>.KernelOptimizerBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.kernel_optimizer</span></code>.KernelOptimizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.negative_log_likelihood</span></code>.NLL", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.target_alignment</span></code>.TargetAlignment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.CustomObservable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.IsingHamiltonian", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SinglePauli", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SingleProbability", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SummedPaulis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SummedProbabilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables.observable_base</span></code>.ObservableBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables.observable_derivatives</span></code>.ObservableDerivatives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.Adam", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.LBFGSB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SLSQP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SPSA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers.optimizer_base</span></code>.OptimizerBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.QNNClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.QNNRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.base_qnn</span></code>.BaseQNN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.LossBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.ParameterRegularizationLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.SquaredLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.VarianceLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.qnn</span></code>.Expec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.qnn</span></code>.QNN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util</span></code>.OpTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeContainer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeExpectationValue", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeList", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeMeasuredOperator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeOperator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeSum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeValue", "Quantum Encoding Circuits", "The Executor Class", "Quantum Kernel Methods", "Observables for expectation values", "Quantum Neural Networks", "User Guide"], "terms": {"In": [0, 1, 2, 7, 27, 30, 50, 58, 68, 69, 70, 71, 72], "thi": [0, 1, 2, 4, 7, 11, 14, 16, 24, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 54, 55, 56, 59, 68, 69, 70, 71, 72], "notebook": [0, 2], "imag": 0, "ar": [0, 1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 58, 59, 63, 66, 68, 69, 70, 71, 72], "classifi": [0, 4, 27, 30, 31], "comput": [0, 4, 11, 24, 25, 26, 27, 30, 32, 35, 36, 37, 58, 59, 68, 69, 70, 71, 72], "learn": [0, 1, 2, 4, 5, 24, 25, 27, 28, 29, 30, 31, 35, 45, 50, 51, 68, 70], "promis": [0, 70], "advantag": 0, "over": [0, 66, 70, 72], "convent": [0, 70], "algorithm": [0, 1, 2, 4, 21, 23, 25, 28, 48, 68, 69, 70, 72], "becaus": [0, 28, 29, 30, 31, 51], "thei": [0, 7, 27, 30, 31, 50, 51, 68, 69, 70, 72], "can": [0, 1, 2, 4, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 24, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 50, 51, 52, 58, 59, 61, 63, 66, 68, 69, 70, 71, 72], "map": [0, 1, 10, 14, 18, 37, 38, 39, 40, 41, 42, 43, 70, 71, 72], "an": [0, 1, 2, 4, 7, 18, 25, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 57, 58, 59, 62, 64, 65, 67, 68, 69, 70, 71, 72], "exponenti": [0, 70], "larg": 0, "state": [0, 24, 37, 40, 42, 45, 68, 70, 72], "space": [0, 2, 24, 25, 29, 70], "howev": [0, 68, 69, 72], "size": [0, 2, 45, 70], "also": [0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 59, 63, 66, 68, 69, 70, 71, 72], "have": [0, 1, 14, 30, 58, 59, 68, 70, 72], "disadvantag": 0, "i": [0, 1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], "back": 0, "classic": [0, 1, 25, 68, 70, 72], "after": [0, 13, 24, 25, 29, 69, 70], "being": [0, 40], "hilbert": [0, 24, 25, 70], "order": [0, 14, 27, 30, 31, 44, 58, 68, 70, 71], "take": [0, 7, 68, 72], "benefit": [0, 69], "qml": [0, 1, 4, 70], "without": [0, 68, 70], "its": [0, 1, 2, 11, 18, 27, 28, 45, 57, 58, 63, 66, 68, 72], "drawback": 0, "make": [0, 1, 2, 12, 17, 29], "us": [0, 1, 3, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 57, 58, 59, 61, 68, 69, 70, 71, 72], "squlearn": [0, 1, 2, 5, 68, 69, 70, 71, 72], "": [0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 28, 29, 33, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 58, 59, 68, 70, 72], "implement": [0, 2, 4, 14, 23, 24, 28, 29, 32, 38, 40, 42, 44, 45, 46, 47, 48, 50, 51, 53, 54, 59, 70, 72], "qsvc": [0, 27, 31, 70], "projectedquantumkernel": [0, 1, 2, 29, 30, 31], "here": [0, 1, 2, 30, 31, 72], "well": [0, 2, 70, 72], "known": [0, 2, 70], "from": [0, 1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 57, 58, 59, 63, 66, 68, 69, 70, 71, 72], "easili": [0, 2], "solvabl": [0, 28, 29], "workflow": [0, 1, 70], "appli": [0, 2, 14, 25, 30, 31, 44, 59, 63, 64, 66, 68, 70, 72], "solv": [0, 2, 24, 25, 28, 29, 70, 71, 72], "repres": [0, 1, 60, 61, 62, 63, 64, 65, 67, 70, 72], "kind": [0, 38, 41, 61], "task": [0, 1, 70], "transfer": 0, "more": [0, 1, 2, 4, 8, 27, 29, 30, 31, 44, 68, 71, 72], "complex": [0, 70, 71], "fig": [0, 1, 2], "1": [0, 1, 2, 5, 7, 8, 9, 10, 12, 13, 14, 17, 19, 20, 21, 24, 25, 27, 28, 29, 30, 31, 34, 35, 36, 40, 42, 45, 50, 51, 52, 63, 66, 68, 70, 71, 72], "pipelin": [0, 3, 4, 27, 28, 29, 30, 31, 50, 51, 52], "let": 0, "start": [0, 2, 4, 8, 10, 13, 33], "off": [0, 2, 8, 38, 59], "do": [0, 30, 31, 69, 72], "some": [0, 2, 14, 27, 28, 29, 30, 31, 50, 51, 52, 70], "defin": [0, 1, 2, 13, 14, 24, 26, 28, 29, 31, 33, 35, 36, 37, 51, 57, 58, 70, 72], "helper": 0, "function": [0, 2, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], "matplotlib": [0, 1, 2], "pylab": [0, 1], "plt": [0, 1, 2], "line": [0, 70], "line2d": 0, "numpi": [0, 1, 2, 5, 14, 23, 24, 25, 26, 28, 29, 30, 31, 45, 46, 47, 48, 49, 51, 59, 70, 72], "np": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 55, 58, 68, 70, 72], "sklearn": [0, 1, 27, 28, 29, 30, 31, 50, 51, 52], "dataset": [0, 27, 30, 50], "load_digit": 0, "manifold": 0, "tsne": 0, "metric": [0, 25, 27, 30, 50, 70], "accuracy_scor": 0, "model_select": [0, 1, 30, 31, 50, 51], "train_test_split": [0, 30, 31, 50, 51], "minmaxscal": [0, 50], "executor": [0, 1, 2, 4, 21, 24, 25, 26, 27, 28, 29, 30, 31, 34, 50, 51, 52, 58, 68, 70, 72, 73], "encoding_circuit": [0, 1, 2, 24, 25, 26, 27, 28, 29, 30, 31, 34, 50, 51, 52, 68, 70, 71, 72], "chebpqc": [0, 29, 68, 70, 72], "ml": [0, 1, 2, 25, 50, 51], "matrix": [0, 1, 2, 21, 23, 27, 28, 29, 30, 31, 34, 35, 36, 51, 68, 70, 72], "hidden": 0, "websit": 0, "sake": 0, "readabl": 0, "If": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 57, 58, 59, 69, 70], "you": [0, 4, 27, 28, 29, 30, 31, 50, 51, 52, 68, 70, 72], "want": [0, 1, 68, 69], "replic": 0, "code": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 68, 72], "pleas": [0, 4, 27, 28, 29, 30, 31, 50, 51, 52, 68], "see": [0, 11, 26, 27, 28, 29, 30, 31, 44, 50, 51, 52, 69, 70], "origin": [0, 27, 28, 29, 30, 31, 50, 51, 52, 68, 70], "wide": [0, 68], "we": [0, 1, 2, 68, 70, 72], "util": [0, 2, 7, 11, 25, 27, 28, 29, 30, 31, 50, 51, 52, 68, 70, 72], "includ": [0, 1, 4, 7, 41, 42, 50, 51, 52, 58, 69], "scikit": [0, 1, 2, 4, 5, 25, 27, 28, 29, 30, 31, 50, 51, 70], "compris": [0, 72], "pictur": 0, "8": [0, 1, 35, 45], "time": [0, 7, 8, 14, 30, 59, 69, 70], "pixel": 0, "contain": [0, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 54, 55, 56, 59, 61, 67, 68, 70, 72], "one": [0, 7, 12, 14, 17, 27, 28, 30, 31, 39, 41, 45, 70], "singl": [0, 20, 39, 40, 41, 42, 44, 63, 66, 71], "each": [0, 1, 2, 27, 28, 29, 30, 31, 41, 50, 51, 52, 55, 58, 59, 63, 66, 68, 70, 71, 72], "accord": [0, 30, 31, 50, 51, 68], "label": [0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27, 29, 30, 31, 33, 34, 35, 36, 50, 51, 52, 57], "numer": [0, 11, 24, 25, 26, 28, 29], "depict": [0, 72], "load": 0, "displai": [0, 4, 57], "3": [0, 1, 2, 4, 5, 8, 13, 14, 18, 19, 24, 27, 28, 29, 30, 31, 44, 50, 51, 52, 68, 70, 71, 72], "x": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 38, 39, 41, 45, 50, 51, 52, 58, 59, 68, 70, 71, 72], "y": [0, 1, 2, 8, 14, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 39, 41, 50, 51, 52, 59, 68, 70, 71], "return_x_i": [0, 27], "true": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 58, 59, 68, 69, 71, 72], "input": [0, 2, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 30, 31, 34, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 57, 58, 59, 68, 69, 71, 72], "store": [0, 28, 29, 30, 31, 58, 68], "row": [0, 13], "dimens": [0, 8, 9, 10, 12, 13, 14, 15, 17, 20, 22, 68], "64": 0, "left": [0, 13, 25, 54, 55, 70, 71], "right": [0, 25, 54, 55, 70, 71], "class": [0, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73], "valu": [0, 1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 67, 68, 70, 72, 73], "between": [0, 8, 15, 25, 55, 68, 69, 70, 72], "0": [0, 1, 2, 5, 8, 9, 10, 11, 13, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 40, 42, 45, 50, 51, 52, 54, 56, 63, 66, 68, 69, 70, 71, 72], "9": [0, 1, 4, 5, 45, 50, 51], "u": [0, 1, 2, 14, 28, 29, 31, 51, 72], "continu": 0, "visual": [0, 1], "sampl": [0, 1, 2, 27, 28, 29, 30, 31, 50, 51, 72], "4": [0, 1, 2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 24, 25, 29, 35, 50, 51, 58, 68, 70, 71, 72], "plot_dataset": 0, "5": [0, 1, 2, 5, 13, 25, 29, 35, 40, 42, 50, 51, 70, 72], "To": [0, 1, 2, 4, 5, 68, 70, 71, 72], "model": [0, 1, 3, 4, 24, 27, 28, 29, 30, 31, 50, 51, 52, 54, 55, 56, 68, 70, 72], "need": [0, 4, 30, 70, 71], "perform": [0, 1, 2, 25, 27, 29, 30, 31, 45, 50, 51, 52, 68], "coupl": 0, "step": [0, 1, 2, 29, 45], "art": 0, "limit": [0, 21], "qubit": [0, 1, 2, 8, 9, 10, 12, 13, 15, 17, 20, 22, 25, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 68, 70, 71, 72], "simul": [0, 2, 4, 7, 69, 72], "them": [0, 14, 70], "hardwar": [0, 8, 12, 17, 72], "onli": [0, 2, 7, 11, 21, 24, 27, 28, 29, 30, 31, 41, 50, 51, 52, 58, 59, 68, 69, 70, 71], "possibl": [0, 2, 7, 10, 14, 25, 27, 28, 29, 30, 31, 41, 45, 50, 51, 54, 68, 69, 71, 72], "few": 0, "handl": [0, 4, 7, 69], "our": [0, 2, 4], "featur": [0, 1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 29, 30, 31, 33, 51, 58, 68, 70], "everi": [0, 1, 25], "would": [0, 28, 29, 31, 51], "result": [0, 2, 7, 27, 28, 29, 30, 34, 44, 45, 46, 47, 48, 49, 58, 59, 68, 69, 70, 72], "either": [0, 7, 8, 10, 11, 13, 14, 25, 27, 28, 29, 30, 31, 32, 35, 36, 44, 50, 51, 52, 54, 68, 70, 72], "veri": [0, 14, 30], "yet": 0, "deep": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 58], "noisi": [0, 2, 72], "circuit": [0, 1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 50, 51, 52, 58, 59, 60, 62, 64, 69, 70, 71, 72, 73], "encod": [0, 1, 2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 50, 51, 52, 58, 70, 71, 72, 73], "therefor": [0, 70, 72], "form": [0, 1, 2, 8, 15, 44, 59, 70, 72], "t": [0, 14, 24, 25, 27, 28, 29, 30, 31, 35, 36, 50, 51, 59, 70], "sne": 0, "leav": 0, "two": [0, 1, 8, 25, 28, 37, 68, 70, 72], "x_tsne": 0, "n_compon": 0, "2": [0, 1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 54, 55, 58, 68, 69, 70, 71, 72], "learning_r": 0, "auto": [0, 18], "init": 0, "random": [0, 1, 2, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 34, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 72], "perplex": 0, "40": 0, "fit_transform": [0, 50], "now": [0, 1, 72], "plot": [0, 1, 2], "hint": 0, "rerun": 0, "cell": [0, 1, 72], "view": [0, 70], "differ": [0, 1, 2, 7, 14, 24, 25, 30, 37, 38, 39, 40, 41, 42, 43, 45, 69, 70], "respect": [0, 11, 24, 25, 27, 28, 29, 32, 33, 57, 58, 68, 70, 71, 72], "posit": [0, 2, 27, 28, 29, 72], "6": [0, 1, 5, 28, 29, 45, 72], "choic": [0, 1, 2, 24, 28, 70], "arang": [0, 51, 72], "1000": [0, 7, 69], "shape": [0, 27, 28, 29, 30, 31, 50, 51], "replac": [0, 30, 31, 44], "fals": [0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27, 28, 29, 30, 31, 37, 39, 40, 41, 42, 45, 50, 51, 52, 59, 68, 69], "plot_numb": 0, "titl": [0, 1, 2], "plot_data_in_feature_spac": 0, "highlight_row": 0, "clearli": 0, "cluster": 0, "number": [0, 1, 2, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 54, 56, 58, 59, 68, 69, 71, 72], "new": [0, 7, 27, 28, 29, 30, 31, 50, 51, 52, 69, 72], "locat": [0, 2, 72], "mark": [0, 70], "lastli": [0, 4], "select": [0, 16, 72], "n": [0, 13, 14, 35, 38, 70], "train": [0, 1, 4, 8, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 50, 51, 68, 71, 72], "test": [0, 1, 24, 25, 26, 27, 28, 29, 30, 31, 50, 51, 70], "7": [0, 1, 16], "n_sampl": [0, 2, 21, 27, 28, 29, 30, 31, 50, 51], "x_train": [0, 1, 28, 29, 30, 31, 34, 50, 51, 70, 72], "x_test": [0, 1, 28, 29, 30, 31, 50, 51, 72], "y_train": [0, 1, 28, 29, 30, 31, 34, 50, 51, 70, 72], "y_test": [0, 1, 30, 31, 50, 51], "test_siz": [0, 50, 51], "33": [0, 50, 51], "random_st": [0, 2, 30, 31, 50, 51], "42": [0, 1, 5, 50, 51], "next": [0, 2, 7, 58], "interv": 0, "both": [0, 1, 7, 59, 68, 69, 70, 72], "improv": [0, 2, 27, 28, 29], "overli": 0, "consid": [0, 2, 4, 18, 20, 21, 23, 38, 57, 70], "scaler": [0, 1], "transform": [0, 30, 59], "power": [0, 25, 70], "techniqu": [0, 24, 25, 70], "variou": [0, 4, 7, 69], "problem": [0, 2, 28, 29, 70, 72], "regress": [0, 1, 2, 4, 6, 28, 29, 30, 31, 50, 51, 55, 56, 72], "exampl": [0, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 27, 28, 29, 30, 31, 34, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 58, 68, 69, 70, 71, 72], "core": [0, 4], "idea": [0, 70], "behind": 0, "high": [0, 2, 4, 7, 13, 69], "where": [0, 1, 2, 7, 8, 9, 14, 27, 28, 29, 30, 31, 38, 51, 68, 70, 72], "becom": 0, "easier": [0, 1], "separ": [0, 7, 14, 30], "figur": [0, 1, 69, 72], "abov": [0, 1, 13, 69, 70, 72], "show": [0, 1, 2, 27, 69, 70, 72], "phi": [0, 2, 24, 70], "It": [0, 4, 7, 10, 14, 30, 31, 50, 51, 68, 69, 72], "hyperplan": [0, 30], "calcul": [0, 1, 25, 28, 44, 53, 54, 55, 56, 59, 68, 70, 71, 72], "similar": [0, 7, 14, 37, 70], "point": [0, 2, 25, 27, 28, 30, 31, 50, 51, 52, 55, 70, 72], "evalu": [0, 1, 2, 7, 11, 21, 24, 25, 26, 27, 29, 30, 44, 45, 58, 59, 67, 68, 69, 71, 72], "scalar": 0, "product": [0, 70], "langl": [0, 24, 72], "rangl": [0, 24, 72], "trick": [0, 70], "allow": [0, 1, 2, 4, 11, 27, 28, 29, 30, 31, 37, 38, 41, 50, 51, 52, 68, 69, 72], "directli": [0, 4], "explicitli": [0, 70, 72], "leverag": [0, 4, 68, 69], "parameter": [0, 8, 15, 21, 24, 25, 37, 39, 40, 50, 51, 52, 58, 68, 71, 72], "pqc": [0, 24, 26, 50, 51, 52, 58, 68, 70, 72], "ket": [0, 40, 42, 70], "potenti": [0, 4], "case": [0, 1, 7, 27, 28, 44, 58, 59, 69, 72], "cf": [0, 29, 70], "obtain": [0, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27, 28, 29, 30, 31, 44, 58, 68, 69, 70, 72], "measur": [0, 7, 25, 29, 37, 39, 40, 41, 42, 59, 64, 70, 72], "wave": [0, 57, 71], "creat": [0, 1, 2, 4, 7, 14, 17, 18, 20, 25, 30, 38, 57, 58, 69, 71], "k": [0, 2, 24, 25, 28, 35, 70], "vert": 0, "text": [0, 2, 25, 39, 40, 54, 72], "ha": [0, 1, 7, 21, 22, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 53, 54, 55, 56, 70, 71, 72], "sever": [0, 4, 68, 70, 72], "For": [0, 1, 2, 28, 29, 30, 31, 50, 51, 68, 70, 72], "element": [0, 8, 11, 59, 68], "overal": 0, "quadrat": [0, 70], "demonstr": [0, 1, 72], "instead": [0, 27, 28, 29, 30, 31, 41, 42, 50, 51, 52, 69], "intrigu": 0, "properti": [0, 30, 31, 69, 70], "With": [0, 1, 18, 72], "effect": [0, 27, 28, 29, 30, 31, 50, 51, 52, 70], "all": [0, 1, 4, 7, 14, 24, 25, 27, 28, 29, 31, 38, 42, 51, 54, 55, 59, 68, 69, 70, 71], "far": 0, "other": [0, 27, 28, 29, 30, 31, 50, 51, 52, 69, 71, 72], "thu": [0, 69, 70, 72], "bad": 0, "allevi": 0, "come": 0, "onc": [0, 59], "which": [0, 1, 2, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 33, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 58, 59, 68, 69, 70, 71, 72], "lead": [0, 70], "linear": [0, 4, 8, 14, 18, 24, 25, 28, 29, 68, 70], "reprint": 0, "huang": [0, 25, 70], "hy": [0, 25], "broughton": [0, 25], "m": [0, 2, 25, 28, 70, 72], "mohseni": [0, 25], "et": [0, 24, 25, 36, 70], "al": [0, 24, 25, 36, 70], "nat": [0, 25, 70], "commun": [0, 25, 70], "12": [0, 1, 5, 25, 70], "2631": [0, 25, 70], "2021": [0, 24, 25, 36, 70], "http": [0, 4, 5, 8, 13, 17, 20, 21, 23, 28, 29, 68], "doi": [0, 13, 21, 23, 68], "org": [0, 8, 13, 17, 20, 21, 23, 28, 29, 68], "10": [0, 1, 2, 7, 13, 21, 23, 25, 68, 69, 72], "1038": 0, "s41467": 0, "021": 0, "22539": 0, "licens": 0, "under": 0, "cc": 0, "BY": 0, "four": [0, 39], "three": [0, 8, 25], "layer": [0, 1, 2, 4, 8, 9, 10, 12, 13, 14, 15, 17, 20, 27, 28, 29, 30, 31, 68, 72], "rotat": [0, 8, 10, 12, 14, 17], "mathrm": [0, 2, 70], "r": [0, 2, 27, 28, 29, 30, 31, 50, 51, 59], "_": [0, 11, 70], "trainabl": [0, 8, 11, 18, 24, 25, 26, 33, 37, 38, 39, 40, 41, 42, 43, 44, 53, 54, 55, 56, 68, 70, 72], "paramet": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72], "arcco": [0, 14, 68], "angl": 0, "follow": [0, 4, 5, 12, 14, 68, 69, 70, 71, 72], "circular": 0, "entangl": [0, 8, 9, 12, 13, 14, 15, 17, 68, 70, 72], "control": [0, 2, 8, 12, 14, 70, 72], "z": [0, 2, 14, 15, 25, 37, 38, 39, 40, 41, 42, 51, 59, 68, 70, 71, 72], "gate": [0, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 59, 68, 72], "enclos": 0, "p": [0, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 29, 44, 59, 68, 70], "num_qubit": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 34, 37, 38, 39, 40, 41, 42, 43, 44, 58, 68, 70, 71, 72], "num_featur": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 22, 25, 27, 28, 29, 30, 31, 34, 68, 70, 72], "num_lay": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 27, 28, 29, 30, 31, 34, 68, 70, 72], "draw": [0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 68, 72], "output": [0, 2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 55, 56, 58, 68, 72], "mpl": [0, 68, 72], "note": [0, 1, 2, 27, 28, 29, 30, 31, 37, 50, 51, 52, 68, 69, 70, 71, 72], "sinc": [0, 27, 30, 50, 69], "twelv": 0, "repeat": [0, 2, 8, 12, 14, 17, 72], "ascend": 0, "call": [0, 7, 14, 18, 27, 28, 29, 30, 31, 51, 68, 70, 72], "re": [0, 2, 69], "upload": 0, "own": [0, 68], "32": 0, "direct": [0, 13], "embed": [0, 24, 25, 36, 70, 72], "furthermor": [0, 14, 68, 72], "gaussian": [0, 1, 3, 4, 27, 28, 29, 35, 70], "outer": [0, 8, 9, 70], "e": [0, 2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 35, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 58, 69, 70], "k_": [0, 25, 35, 36], "ij": [0, 11, 38], "exp": [0, 25, 70], "gamma": [0, 25, 29, 30, 31, 70], "lvert": [0, 72], "theta": [0, 27, 39, 70, 72], "x_i": [0, 2, 11, 25, 36, 55, 72], "x_j": [0, 11, 25, 36], "rvert_2": 0, "cdot": [0, 25, 70, 72], "correspond": [0, 8, 9, 27, 30, 69, 70], "l_2": 0, "norm": [0, 2, 30], "fix": [0, 24, 25, 26], "again": [0, 13], "mapsto": 0, "statevector_simul": [0, 1, 2, 7, 25, 27, 28, 29, 30, 31, 34, 50, 51, 68, 69, 70, 72], "xyz": [0, 25, 29, 70], "outer_kernel": [0, 25, 29, 70], "initial_paramet": [0, 24, 25, 26, 29, 30, 31, 33, 34], "rand": [0, 25, 27, 28, 30, 31, 34, 50, 51], "num_paramet": [0, 25, 27, 28, 30, 31, 34, 37, 38, 39, 40, 41, 42, 43, 44], "readi": 0, "svm": [0, 30, 31, 70], "A": [0, 2, 4, 7, 10, 13, 14, 18, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72], "work": [0, 2, 27, 28, 29, 30, 31, 50, 51, 52, 58, 59, 70], "find": [0, 2, 33, 70], "categori": 0, "chosen": [0, 2, 8, 24], "so": [0, 1, 30, 70], "maxim": 0, "distanc": [0, 25, 30, 70], "closest": 0, "These": [0, 1, 24, 30, 31, 70], "help": 0, "decis": [0, 30], "boundari": 0, "establish": [0, 72], "base": [0, 1, 2, 4, 7, 10, 16, 21, 22, 24, 25, 26, 28, 43, 49, 50, 51, 52, 53, 68, 70, 71, 72], "side": 0, "fall": 0, "fit": [0, 1, 2, 24, 25, 27, 28, 29, 30, 31, 45, 50, 51, 52, 72], "11": [0, 1, 16], "quantum_kernel": [0, 1, 2, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 70], "c": [0, 1, 20, 27, 30, 31, 38, 72], "break_ti": 0, "cache_s": [0, 1], "200": [0, 1], "class_weight": 0, "none": [0, 2, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 58, 63, 66, 70], "decision_function_shap": [0, 30], "x27": 0, "ovr": [0, 30], "lt": [0, 1], "bound": [0, 2, 45, 46, 47, 48, 49], "projected_quantum_kernel": [0, 1], "object": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69], "0x000001ba1a541e50": 0, "gt": [0, 1], "max_it": [0, 1], "probabl": [0, 2, 27, 30, 40, 42, 50, 58, 70], "shrink": [0, 1], "tol": [0, 1, 45], "001": [0, 1], "verbos": [0, 1, 21], "jupyt": 0, "environ": [0, 4, 7, 69], "html": 0, "represent": [0, 2, 27, 70], "trust": 0, "On": 0, "github": [0, 4, 5], "unabl": 0, "render": 0, "try": 0, "page": 0, "nbviewer": 0, "qsvcqsvc": 0, "check": [0, 27, 28, 29, 30, 31, 50, 51, 52, 59, 69], "predict": [0, 1, 2, 27, 28, 29, 30, 31, 50, 51, 72], "print": [0, 1, 2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 44, 71], "f": [0, 1, 2, 28, 30, 31, 38, 55, 70, 72], "accuraci": [0, 27, 30, 50, 72], "score": [0, 1, 27, 28, 29, 30, 31, 50, 51], "9522388059701492": 0, "9696969696969697": 0, "describ": [0, 57, 70], "share": 0, "correctli": [0, 27, 30, 50], "multiclass": 0, "frac": [0, 11, 25, 28, 29, 31, 35, 36, 44, 51, 55], "correct": 0, "total": [0, 28, 29, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 68, 72], "go": [0, 1], "previou": [0, 2, 12, 17], "add": [0, 1, 2, 14, 59], "inform": [0, 2, 21, 23, 27, 28, 29, 30, 31, 44, 50, 51, 52, 59, 68, 69, 70, 72], "specif": [0, 1, 7, 30, 31, 72], "highlight": [0, 1], "were": 0, "understand": [0, 1], "how": [0, 1, 2, 13, 27, 28, 29, 30, 31, 50, 51, 52, 69, 70, 72], "addition": [0, 5, 27, 30, 31, 38, 72], "color": [0, 1, 2], "background": [0, 29], "indic": [0, 2, 7, 8, 9, 13, 16, 23, 63, 66, 68, 69], "region": 0, "assign": [0, 11, 13, 18, 24, 25, 26, 27, 44, 59, 70], "13": [0, 1], "plot_result": 0, "clf": [0, 50], "x_highlight": 0, "y_highlight": 0, "x_rang": 0, "resolut": 0, "30": 0, "final": [0, 72], "chose": 0, "begin": 0, "14": [0, 1, 29], "y_pred": [0, 1, 2, 28, 29, 30, 31, 50, 51, 72], "tutori": [1, 4], "integr": [1, 4], "quantum": [1, 3, 4, 7, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 50, 51, 52, 58, 69, 71, 73], "machin": [1, 4, 5, 24, 25, 28, 29, 35, 68, 70], "method": [1, 2, 4, 18, 23, 24, 26, 52, 68, 69, 73], "tradit": [1, 4, 72], "ll": 1, "through": [1, 2, 7, 14, 69, 70, 72], "preprocess": [1, 50], "definit": [1, 14, 35, 36, 37, 38, 39, 40, 41, 42, 43, 70, 71], "gridsearchcv": 1, "The": [1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 55, 58, 59, 60, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73], "seamlessli": [1, 4, 7], "alongsid": 1, "initi": [1, 2, 7, 24, 25, 26, 33, 34, 45, 46, 47, 48, 49, 50, 51, 52, 58, 70, 72], "requir": [1, 2, 4, 5, 7, 27, 30, 50, 69], "like": [1, 27, 28, 29, 30, 31, 50, 51, 69, 72], "support": [1, 4, 27, 28, 29, 30, 31, 39, 59, 70, 71], "vector": [1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 63, 68, 70], "qsvr": [1, 28, 29, 30, 70], "process": [1, 3, 4, 27, 28, 29, 35, 50, 51, 52, 70, 72], "qgpr": [1, 2, 29, 70], "scale": [1, 10, 28, 70], "reli": [1, 70], "panda": 1, "pd": 1, "seaborn": 1, "sn": 1, "standardscal": 1, "yz_cx_encodingcircuit": 1, "fidelitykernel": [1, 2, 25, 27, 28, 34], "synthet": 1, "hold": [1, 32, 57, 70], "out": [1, 13, 69, 70], "best": [1, 2, 28, 29, 31, 51], "estim": [1, 7, 27, 28, 29, 30, 31, 45, 50, 51, 52, 59, 69, 70], "def": [1, 2, 14], "generate_i": 1, "pi": [1, 21, 25, 31], "return": [1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 68, 69], "sin": [1, 2, 25, 31], "seed": [1, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52], "linspac": [1, 2, 31], "100": [1, 30, 31, 45, 70, 72], "20": [1, 2, 34], "figsiz": 1, "ground": 1, "truth": 1, "o": [1, 44, 57, 58], "v": [1, 28, 29, 31, 51], "legend": [1, 2], "0x1ccd24cc160": 1, "compar": 1, "same": [1, 14, 27, 38, 41, 42, 44, 46, 47, 48, 55, 59, 68, 69, 70], "variant": 1, "fidel": [1, 2, 4, 12, 17, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36], "project": [1, 2, 3, 4, 25, 27, 28, 29, 30, 31, 35, 36, 68, 69, 71], "vari": 1, "dure": [1, 8, 59, 71], "instanc": [1, 24, 27, 28, 29, 50, 51, 52, 69, 70, 72], "qiskit": [1, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 37, 38, 39, 40, 41, 42, 43, 48, 59, 70, 71, 72], "statevectorsimul": [1, 7], "fidelity_kernel": 1, "parameter_se": [1, 2, 24, 25, 26, 50, 51, 52, 70], "projected_kernel": 1, "q_0": 1, "ry": [1, 10, 12, 14, 18, 20, 59, 68], "rz": [1, 10, 12, 14, 20, 59, 68], "q_1": 1, "q_2": 1, "q_3": 1, "15": [1, 16], "section": [1, 72], "num_qubit_list": 1, "num_layers_list": 1, "encoding_circuit_param": 1, "estimator__num_qubit": 1, "estimator__num_lay": 1, "estimator_list": 1, "full_regular": [1, 28], "param_grid": 1, "estimator_param": 1, "copi": [1, 27, 30, 31, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69], "append": [1, 25, 63, 66], "ensur": [1, 4, 68], "mean": [1, 2, 27, 28, 29, 30, 31, 50, 51, 72], "standard": [1, 2, 4, 28, 30, 31, 69, 70], "deviat": [1, 28], "part": [1, 50, 51], "cross": [1, 30], "valid": [1, 26, 30], "overwritten": [1, 7, 22], "everyth": [1, 7], "execut": [1, 4, 7, 58, 69], "combin": [1, 20, 25, 50, 51, 58, 59], "choos": [1, 24, 25], "grid_search": 1, "neg_mean_squared_error": 1, "reshap": [1, 2, 25, 29], "39": 1, "0x000001ccd34e0160": 1, "estimat": 1, "epsilon": [1, 31], "0x000001ccd24cc610": 1, "heat": 1, "neg": [1, 2, 28, 29, 31, 35, 36, 51, 70], "mse": 1, "larger": [1, 28, 29, 37, 38, 39, 40, 41, 42, 43], "better": 1, "intuit": [1, 2], "impact": 1, "extract": 1, "datafram": 1, "results_df": 1, "cv_results_": 1, "uniqu": 1, "per": [1, 10, 30, 31, 45], "num_combin": 1, "len": 1, "num_estim": 1, "subplot": 1, "n_row": 1, "int": [1, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 54, 56, 58, 59, 63, 66, 72], "ceil": 1, "sqrt": [1, 25, 36], "n_col": 1, "ax": 1, "flatten": [1, 8, 9], "axi": [1, 8], "arrai": [1, 2, 4, 21, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 45, 50, 51, 59, 63], "index": [1, 10, 13, 37, 59, 63, 66], "min": [1, 2, 69], "max": [1, 2], "colormap": 1, "vmin": 1, "vmax": 1, "mean_test_scor": 1, "estimator_nam": 1, "pqk": [1, 27, 28, 29, 30, 31, 32, 35, 36], "loop": [1, 50, 51, 52, 70], "chunk": 1, "rang": [1, 2, 68], "start_idx": 1, "end_idx": 1, "chunk_df": 1, "iloc": 1, "pivot": 1, "get": [1, 2, 7, 27, 28, 29, 30, 31, 50, 51, 52, 71, 72], "suitabl": 1, "heat_map_data": 1, "pivot_t": 1, "param_estimator__num_qubit": 1, "column": [1, 13, 27, 30], "param_estimator__num_lay": 1, "cbar": 1, "disabl": [1, 69], "individu": [1, 27, 68], "colorbar": 1, "heatmap": 1, "annot": 1, "fmt": 1, "3f": 1, "cmap": 1, "coolwarm": 1, "set_titl": 1, "set_xlabel": 1, "set_ylabel": 1, "cbar_ax": 1, "add_ax": 1, "92": 1, "02": 1, "collect": [1, 4, 70], "cax": 1, "tight_layout": 1, "rect": 1, "user": [1, 4, 7, 27, 28, 29, 30, 31, 50, 51, 52, 68, 70, 72], "mcr": 1, "appdata": 1, "local": [1, 18, 68, 70], "temp": 1, "ipykernel_20080": 1, "629527406": 1, "py": 1, "47": 1, "userwarn": 1, "compat": [1, 69], "might": [1, 2], "incorrect": 1, "shown": [1, 13, 70, 72], "best_estim": 1, "best_estimator_": 1, "test_scor": 1, "scatter": [1, 2], "red": [1, 2], "xlabel": [1, 2], "ylabel": [1, 2], "999999978217105": 1, "did": 1, "quit": [1, 2], "good": [1, 68], "counterpart": [1, 70], "sensit": 1, "addit": [1, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27, 28, 29, 30, 31, 70, 72], "been": [1, 70, 72], "regular": [1, 24, 25, 26, 28, 29, 30, 31, 35, 45, 50, 51, 54, 69, 70, 72], "slack": 1, "variabl": [1, 14], "treat": [1, 2], "equal": [1, 38, 41, 42, 68], "estimator__c": 1, "1e0": 1, "1e1": 1, "1e2": 1, "estimator__epsilon": 1, "1e": [1, 21, 23, 28, 29, 45], "best_score_": 1, "0204753114345332e": 1, "05": [1, 45], "0001": 1, "0x000001ccd3782250": 1, "adequ": 1, "similarli": [1, 69], "kernel": [2, 3, 4, 12, 17, 51, 68, 71, 73], "fidelityquantumkernel": 2, "conceptu": 2, "layout": 2, "taken": [2, 35, 36, 45], "rapp": [2, 28], "roth": [2, 28, 72], "global": 2, "boldsymbol": [2, 70], "arg": [2, 25], "min_": [2, 72], "g": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 58, 69, 70], "iter": [2, 13, 45, 54, 56, 72], "guidanc": 2, "usual": [2, 16, 69], "modest": 2, "amount": 2, "attract": 2, "expens": 2, "black": 2, "box": 2, "further": [2, 4, 30, 72], "restrict": [2, 70], "regard": 2, "proxi": 2, "exploit": [2, 70], "explor": [2, 72], "trade": 2, "quantifi": 2, "acquisit": 2, "procedur": [2, 24, 25, 29, 70], "approxim": [2, 70], "increasingli": 2, "due": [2, 70, 72], "posterior": 2, "varianc": [2, 28, 50, 51, 52, 54, 56, 58, 71], "gp": [2, 27, 28, 70], "popular": 2, "common": [2, 72], "expect": [2, 4, 25, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 57, 58, 59, 62, 64, 70, 72, 73], "ei": 2, "mu": 2, "lambda": 2, "sigma": [2, 28, 34, 35, 70], "varphi": 2, "uncertainti": 2, "distribut": [2, 28], "cumul": 2, "normal": [2, 7, 28], "current": [2, 7, 45, 50, 51, 52, 58, 70, 71], "observ": [2, 4, 7, 25, 50, 51, 57, 70, 72, 73], "minimum": [2, 33], "error": [2, 13, 27, 28, 29, 30, 31, 50, 51, 52, 69, 72], "given": [2, 7, 13, 14, 25, 27, 28, 29, 30, 31, 35, 36, 45, 46, 47, 48, 49, 50, 51, 52, 58, 59, 64, 70, 72], "hyperparamet": [2, 3, 4, 25, 27, 28, 29, 35], "favour": 2, "qbo": 2, "qgp": 2, "follw": 2, "adapt": [2, 70], "structr": 2, "made": [2, 18], "17": [2, 5], "import": [2, 7, 11, 14, 16, 18, 19, 25, 27, 28, 29, 30, 31, 34, 38, 44, 50, 51, 68, 69, 70, 71, 72], "pyplot": 2, "scipi": [2, 5, 28, 29, 30, 31, 46, 47, 72], "minim": [2, 34, 45, 46, 47, 48, 49, 50, 51, 70, 72], "optimizeresult": [2, 34], "stat": 2, "skopt": 2, "bayesopt": 2, "__init__": 2, "self": [2, 27, 28, 29, 30, 31, 32, 50, 51, 52], "domain": [2, 72], "surrogate_model": 2, "nr_initial_point": 2, "x_plot": 2, "y_plot": 2, "xi": 2, "01": [2, 45, 51, 72], "plot_it": 2, "blackbox_funct": 2, "rnd": 2, "prepar": 2, "search": 2, "_initial_sampl": 2, "rv": 2, "y_init": 2, "plot_surrogate_acquisit": 2, "whether": [2, 7, 28, 29, 36, 72], "expected_improv": 2, "x_sampl": 2, "y_sampl": 2, "gpr": 2, "return_std": [2, 28], "mu_sampl": 2, "mu_sample_opt": 2, "errstat": 2, "divid": [2, 30], "warn": 2, "imp": 2, "cdf": 2, "pdf": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 68, 72], "ravel": 2, "propose_loc": 2, "dim": 2, "n_dim": 2, "min_val": 2, "inf": 2, "min_x": 2, "min_obj": 2, "optimum": 2, "n_restart": 2, "x0": [2, 45, 46, 47, 48, 49], "uniform": 2, "restart": [2, 7, 13, 69], "maxit": [2, 34, 45, 70, 72], "l": [2, 25, 35, 46, 54, 72], "bfg": [2, 46, 72], "b": [2, 14, 38, 41, 42, 46, 72], "option": [2, 7, 12, 15, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 38, 40, 41, 42, 45, 46, 47, 48, 50, 51, 52, 59, 63, 66, 68, 70, 72], "fun": [2, 45, 46, 47, 48, 49], "run_optim": [2, 33, 34, 70], "n_iter": 2, "acq_func": 2, "updat": [2, 27, 28, 29, 30, 31, 45, 50, 51, 52, 72], "exist": [2, 27, 28, 29, 30, 31, 50, 51, 52, 68, 69], "x_next": 2, "y_next": 2, "vstack": 2, "plot_surrog": 2, "argmin": 2, "func_val": 2, "x_iter": 2, "rais": [2, 27, 28, 29, 30, 31, 50, 51, 52], "valueerror": 2, "cannot": 2, "nois": [2, 24, 30, 70, 72], "free": [2, 68, 72], "marker": 2, "blue": [2, 72], "fill_between": 2, "96": 2, "alpha": [2, 8, 9, 10, 25, 29, 54, 56, 72], "y_conv": 2, "accumul": 2, "ro": 2, "converg": 2, "exchang": 2, "customis": 2, "There": [2, 4, 68, 72], "rescal": [2, 20, 30, 31, 36], "necessari": [2, 5, 7, 37, 38, 39, 40, 41, 42, 43, 69], "depend": [2, 18, 24, 28, 29, 72], "data": [2, 13, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 50, 51, 52, 55, 57, 58, 68, 70, 72], "custom": [2, 4, 25, 37, 71], "avail": [2, 4, 18, 29, 68, 70, 71], "analit": 2, "know": 2, "your": [2, 71, 72], "mimiz": 2, "exactli": 2, "what": [2, 58], "happen": 2, "18": 2, "noise_level": 2, "tanh": 2, "randn": 2, "contour": 2, "50": 2, "fx": 2, "unknown": 2, "fill": [2, 13], "concaten": [2, 68], "fx_i": 2, "fc": 2, "ec": 2, "grid": 2, "19": 2, "qekencodingcircuit": [2, 11, 16, 27, 28, 30, 31, 34, 68], "set": [2, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 68, 70, 72], "up": [2, 13, 57, 69, 70], "enc_circ": [2, 27, 28, 29, 34, 70], "q_kernel": [2, 27, 28, 34], "qgpr_model": 2, "strateg": 2, "run": [2, 4, 5, 7, 33, 34, 37, 38, 39, 40, 41, 42, 43, 45, 69, 71], "while": [2, 14, 72], "especi": 2, "when": [2, 5, 7, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 51, 68, 69, 70, 71, 72], "shot": [2, 7, 58, 69, 72], "qasm": 2, "89749677": 2, "98507347": 2, "28272872": 2, "17951355": 2, "30425291": 2, "93148822": 2, "76589419": 2, "89953538": 2, "23313222": 2, "32414859": 2, "sophist": [2, 68], "price": 2, "industri": 2, "machineri": 2, "intrest": 2, "reader": 2, "about": [2, 7, 29, 30, 31], "pre": [2, 29, 68, 69], "handwritten": [3, 4], "digit": [3, 4], "recognit": [3, 4], "optim": [3, 4, 8, 28, 50, 51, 52, 69, 70], "bayesian": [3, 4, 28], "surrog": [3, 4], "novel": 4, "python": [4, 5], "packag": [4, 5, 68, 69], "introduc": [4, 70, 72], "capabl": 4, "via": [4, 7, 8, 11, 27, 28, 29, 30, 31, 69, 71], "level": [4, 7, 69], "low": [4, 7, 13, 69, 72], "design": [4, 16, 68, 70, 72], "approach": [4, 68, 70, 72], "ridg": [4, 29, 70], "neural": [4, 50, 51, 52, 68, 71, 73], "network": [4, 50, 51, 52, 68, 71, 73], "qnn": [4, 25, 49, 68, 70, 71], "engin": 4, "facilit": [4, 68], "effici": [4, 8, 12, 17], "gradient": [4, 11, 27, 45, 46, 47, 48, 49, 53, 54, 55, 56, 59, 68, 69], "autom": [4, 21, 68], "non": [4, 8, 14, 27], "parametr": [4, 70], "enhanc": [4, 24], "flexibl": 4, "outcom": [4, 30, 72], "meet": 4, "latter": [4, 8, 27], "tool": 4, "wise": 4, "string": [4, 7, 25, 37, 41, 57, 58, 68, 69, 71], "encourag": 4, "innov": 4, "beyond": [4, 70], "backend": [4, 7, 19, 24, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 68, 69, 70, 71], "ibm": [4, 5, 7, 69], "session": [4, 7, 69], "manag": [4, 69], "resourc": 4, "access": [4, 11, 68, 69, 70, 71], "experiment": 4, "least": 4, "version": [4, 27, 28, 29, 30, 31, 50, 51, 52], "command": [4, 5], "pip": [4, 5], "altern": [4, 10, 18, 72], "git": [4, 5], "ssh": 4, "com": [4, 5], "elabor": 4, "folder": [4, 69], "beginn": 4, "found": [4, 7, 59, 68, 72], "thank": 4, "read": [4, 27, 29, 38, 72], "guidelin": [4, 70], "befor": [4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 28, 50, 51, 52, 69, 72], "submit": 4, "pull": [4, 68], "request": [4, 27, 28, 29, 30, 31, 50, 51, 52, 68], "apach": 4, "maintain": 4, "group": [4, 14, 59, 69, 71], "fraunhof": 4, "institut": 4, "manufactur": 4, "ipa": 4, "www": 4, "de": 4, "bleed": 4, "edg": 4, "develop": 4, "guid": [4, 7, 27, 28, 29, 30, 31, 50, 51, 52, 70, 72], "api": 4, "refer": [4, 8, 13, 17, 20, 24, 25, 28, 29, 35, 36, 68, 69, 72], "regressor": [4, 28, 29, 31, 51], "recent": 5, "python3": 5, "aer": [5, 7, 69], "runtim": [5, 7, 69], "dill": 5, "automat": [5, 7, 11, 13, 18, 44, 68, 69], "latest": 5, "master": 5, "modul": [6, 71], "classif": [6, 13, 27, 30, 31, 50, 51, 72], "wrapper": [6, 18, 28, 29, 30, 31, 46, 47, 48, 68, 72], "str": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 41, 44, 45, 50, 51, 52, 54, 57, 58, 59], "qiskitruntimeservic": [7, 69], "baseestim": [7, 59], "basesampl": [7, 59], "options_estim": [7, 69], "options_sampl": [7, 69], "log_fil": [7, 45, 69], "cach": [7, 11, 44, 58, 68, 69], "bool": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 58, 59, 72], "cache_dir": [7, 69], "_cach": [7, 69], "max_session_tim": 7, "8h": 7, "max_jobs_retri": [7, 69], "wait_restart": [7, 69], "job": [7, 69], "system": [7, 24, 25, 28, 29, 37, 38, 39, 40, 41, 42, 43, 69], "central": [7, 69, 70], "compon": [7, 68, 69, 72], "respons": [7, 69], "primit": [7, 24, 58, 59, 70], "sub": [7, 27, 28, 29, 30, 31, 50, 51, 52, 69], "program": [7, 68, 69, 71], "care": 7, "fail": [7, 69], "specifi": [7, 11, 14, 19, 21, 25, 26, 28, 29, 32, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 68, 69, 70, 72], "detail": [7, 30, 68, 70], "introduct": 7, "union": [7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 57, 58, 59, 62, 64], "qasm_simul": [7, 69], "servic": [7, 69], "provid": [7, 16, 19, 27, 28, 29, 30, 31, 35, 36, 44, 50, 51, 52, 68, 69, 70, 71], "sampler": [7, 59, 69], "default": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 50, 51, 52, 54, 57, 58, 59, 63, 66, 69, 70], "mandatori": [7, 71], "name": [7, 18, 25, 27, 28, 29, 30, 31, 50, 51, 52, 59, 69], "log": [7, 27, 30, 35, 36, 45, 51, 69, 70], "file": [7, 45, 69], "empti": [7, 32, 33], "directori": 7, "maximum": [7, 45, 68, 69], "retri": 7, "until": [7, 72], "abort": [7, 69], "wait": 7, "second": [7, 14, 19, 37, 44, 45, 58, 59, 68, 72], "type": [7, 11, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 59, 63, 64, 66, 70, 72], "get_estim": [7, 69], "estimator_run": [7, 69], "get_sampl": [7, 69], "qsikit": [7, 69], "qiskit_ibm_runtim": [7, 69], "ideal": [7, 70], "exec": 7, "set_shot": [7, 58], "channel": [7, 69], "ibm_quantum": [7, 69], "token": [7, 69], "insert_your_token_her": [7, 69], "get_backend": [7, 69], "ibm_nairobi": [7, 69], "random_circuit": 7, "decompos": [7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22], "rep": [7, 18, 68], "backend_run": 7, "run_input": 7, "routin": [7, 68, 70], "typic": [7, 25, 72], "argument": [7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 27, 28, 29, 30, 31, 69, 70, 72], "pass": [7, 18, 27, 28, 29, 30, 31, 50, 51, 52, 70, 72], "clear_estimator_cach": 7, "clear": 7, "avoid": [7, 8, 45, 69], "memori": 7, "overflow": 7, "clear_sampler_cach": 7, "close_sess": 7, "close": [7, 8, 9, 12, 17, 68, 72], "create_sess": [7, 69], "parameter_valu": [7, 35, 36], "kwarg": [7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 27, 28, 29, 30, 31, 45, 50, 51, 52, 53, 54, 55, 56], "ani": [7, 61, 69], "jobv1": 7, "overwrit": 7, "get_shot": [7, 58], "getter": [7, 58], "optree_executor": 7, "optre": [7, 11, 44, 58, 68], "reset_shot": [7, 58], "reset": [7, 45, 58], "wa": 7, "sampler_run": [7, 69], "num_shot": [7, 58], "entangling_g": [8, 13], "crz": [8, 14, 68], "float": [8, 9, 10, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 45, 50, 51, 52, 53, 54, 55, 56, 58, 59, 63, 66, 67, 72], "chebyshev": [8, 9, 10, 72], "arxiv": [8, 17, 20, 24, 25, 28, 36, 70, 72], "ab": [8, 20], "2306": [8, 72], "01639": [8, 72], "consist": [8, 28, 29, 31, 51, 70, 72], "basi": [8, 59, 71], "chang": [8, 10, 13, 25, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 71], "around": 8, "end": [8, 12, 17], "polynomi": [8, 25], "rx": [8, 9, 10, 12, 14, 59, 68], "degre": [8, 30, 31, 72], "rzz": [8, 14], "multipl": [8, 37, 41, 44, 50, 51, 52, 55, 56, 58, 59], "dimension": [8, 9, 10, 12, 13, 15, 17, 20, 70], "sourc": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 68, 72], "png": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 68, 72], "hire": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 68, 72], "first": [8, 9, 11, 12, 13, 17, 19, 25, 37, 44, 45, 59, 68, 69, 71], "last": [8, 9, 12, 13, 17, 37], "switch": [8, 38, 70], "swap": [8, 14], "manipul": [8, 68, 72], "feature_label": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22], "parameter_label": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22], "quantumcircuit": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 59, 60, 62, 64], "format": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 44, 45, 46, 47, 48, 49, 52, 58, 59, 68], "generate_initial_paramet": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 37, 38, 39, 40, 41, 42, 43], "ndarrai": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59], "gener": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 58, 59, 68, 70], "randomli": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 37, 38, 39, 40, 41, 42, 43], "get_cheb_indic": [8, 9], "involv": [8, 9, 68, 72], "flat": [8, 9], "list": [8, 9, 11, 14, 16, 23, 25, 27, 28, 29, 31, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 54, 58, 59, 63, 66, 68, 70], "otherwis": [8, 9, 22, 27, 28, 29, 30, 31, 40, 50, 51, 52], "get_circuit": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22], "parametervector": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 37, 38, 39, 40, 41, 42, 43, 44, 59, 68], "param_vec": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22], "get_param": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 58], "dict": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 72], "hyper": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 30, 31, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 58, 72], "dictionari": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 45, 50, 51, 52, 58, 59], "set_param": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 58], "param": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 50, 51, 52, 58], "simpl": [9, 14], "build": [9, 68, 69, 71, 72], "num_chebyshev": [10, 25], "rotation_g": 10, "hadamard_start": 10, "arrang": 10, "block": [10, 28, 72], "tower": 10, "term": [10, 24, 25, 36, 38, 59, 70, 72], "factor": [10, 50, 51, 52, 63, 66, 72], "adjust": [10, 30, 31, 58, 68, 69, 70, 72], "n_chebyshev": 10, "hadamard": 10, "stack": 10, "togeth": [10, 71], "place": [10, 14, 68], "encodingcircuitbas": [11, 16, 19, 21, 24, 25, 26, 50, 51, 52, 58], "optree_cach": [11, 44, 58], "differenti": [11, 44, 57, 58, 59, 68], "deriv": [11, 44, 57, 58, 59, 68], "shift": [11, 68, 72], "rule": [11, 68, 72], "tabl": 11, "below": [11, 14, 27, 69, 70], "parameterel": 11, "feature_vector": 11, "parameter_vector": [11, 44, 68, 71], "ident": [11, 38, 41, 42, 44, 59], "oper": [11, 25, 37, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 68, 70, 71, 72], "dx": 11, "nabla_x": 11, "big": 11, "partial": [11, 55, 68, 70], "x_1": 11, "ldot": 11, "x_n": 11, "dp": [11, 44, 68], "nabla_p": 11, "p_1": 11, "p_m": 11, "dxdx": 11, "hessian": [11, 68, 71], "h": [11, 14, 38, 39, 40, 41, 42, 59, 68, 70], "x_": 11, "dpdxdx": 11, "laplac": 11, "delta": 11, "nabla": 11, "sum_i": [11, 38, 41, 42, 54, 55, 56], "2_i": 11, "laplace_dp": 11, "laplacian": [11, 25, 58], "circ": 11, "dpdp": 11, "p_": 11, "p_i": [11, 54], "p_j": [11, 55], "dxdp": 11, "mix": 11, "xp": 11, "fm": [11, 16, 19, 25, 68, 71], "fm_deriv": [11, 68], "grad": [11, 45, 46, 47, 48, 49], "dp0": 11, "express": [11, 37, 38, 39, 40, 41, 42, 43, 58], "faster": [11, 44], "assign_paramet": [11, 24, 25, 26, 27, 28, 34, 44, 59, 70], "optreeelementbas": [11, 44, 59, 63, 66], "operatorbas": [11, 44], "tupl": [11, 21, 37, 41, 44, 53, 54, 55, 56, 57, 58, 59, 68, 71], "determin": [11, 13, 14, 18, 23, 28, 29, 31, 44, 50, 51, 58, 68], "final_encod": [12, 17], "hz": 12, "redund": [12, 16, 17, 21, 23, 68, 69], "necessarili": [12, 17], "cycl": 13, "cycling_typ": 13, "saw": 13, "layer_typ": 13, "iswap": 13, "1103": [13, 21, 23, 68], "physreva": 13, "106": 13, "042431": 13, "23": [13, 28, 29, 31, 51], "highdim": 13, "reach": [13, 70], "recommend": [13, 28, 58, 69], "hat": [13, 25, 38, 39, 40, 41, 42, 44, 71, 72], "goe": 13, "down": [13, 25], "number_of_lay": 13, "repetit": [13, 14], "thrown": [13, 22], "cx": [13, 14, 18, 20, 59, 68], "feature_str": 14, "parameter_str": 14, "creation": [14, 68, 69], "ad": [14, 15, 59, 68, 71, 72], "associ": [14, 57], "pattern": [14, 70], "suppli": [14, 25, 37, 59, 68, 71], "nearest": [14, 68], "neighbor": [14, 68], "nn": [14, 68], "aa": 14, "cx_entangl": [14, 68], "func": 14, "layered_encoding_circuit": [14, 68], "add_lay": [14, 68], "anoth": 14, "achiev": [14, 25, 69, 71], "from_str": [14, 57, 68], "strategi": 14, "within": [14, 28, 70], "curli": 14, "bracket": 14, "sc": 14, "s_conjug": 14, "tc": 14, "t_conjug": 14, "ch": 14, "ch_entangl": 14, "cy": [14, 59], "cy_entangl": 14, "cz": [14, 59], "cz_entangl": 14, "cp": 14, "cp_entangl": 14, "crx": 14, "crx_entangl": 14, "cry": 14, "cry_entangl": 14, "crz_entangl": 14, "rxx": 14, "rxx_entangl": 14, "ryi": 14, "ryy_entangl": 14, "rzz_entangl": 14, "rzx": 14, "rzx_entangl": 14, "cu": 14, "cu_entangl": 14, "identifi": [14, 59], "variable_str": 14, "callabl": [14, 18, 19, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 63, 66, 72], "conjug": 14, "structur": [14, 44, 57, 58, 59, 68, 69, 72], "ent_strategi": 14, "classmethod": [14, 57], "encoding_circuit_str": 14, "construct": [14, 39, 68, 70, 71, 72], "num_lat": 14, "zencodingcircuit": 15, "cnot": 15, "pruned_paramet": 16, "prune": [16, 21, 23], "accept": [16, 68], "qek": [16, 17, 68], "encodingcircuit": [16, 72], "remov": [16, 28, 59, 63, 66, 68], "present": 17, "2105": [17, 24, 25, 36, 70], "02276v1": [17, 24, 25, 36, 70], "qiskit_circuit": 18, "blueprintcircuit": 18, "mode": [18, 54], "\u03b8p": 18, "librari": [18, 68], "twoloc": [18, 68], "insert_barri": [18, 68], "zzencodingcircuit": 18, "feature_dimens": 18, "No": [18, 69], "transpile_func": 19, "transpil": [19, 59, 69, 71], "chebrx": [19, 50, 51, 68, 71], "fake_provid": [19, 68, 71], "fakemanilav2": [19, 68, 71], "initial_layout": [19, 68, 71], "yz": 20, "2108": 20, "01039v3": 20, "One": 20, "prefactor": 20, "pruning_thresh": [21, 23], "x_lim": 21, "p_lim": 21, "x_val": 21, "p_val": 21, "prunedencodingcircuit": [21, 68], "prxquantum": [21, 23, 68], "040309": [21, 23, 68], "quantum_fit": 21, "fisher": [21, 23, 68, 69], "matric": [21, 25, 28, 29, 30, 31, 70, 72], "threshold": [21, 23, 24, 25, 70], "eigenvalu": [21, 23], "lower": [21, 23], "notimplementederror": 22, "qfi": [23, 69], "fischer": [23, 69], "propos": 23, "evaluate_dupl": 24, "off_diagon": 24, "mit_depol_nois": [24, 70], "overlap": 24, "wrap": [24, 46, 47, 70, 72], "appropri": [24, 72], "duplic": [24, 59], "mitig": [24, 69, 70, 72], "depolar": [24, 70], "msplit": [24, 70], "mmean": [24, 70], "ref": [24, 25, 28, 29, 35, 70], "meaning": 24, "fqk": [24, 27, 28, 29, 30, 31, 32, 35, 36], "real": [24, 25, 28, 29, 30, 31, 37, 38, 39, 40, 41, 42, 43, 69, 70, 72], "tikhonov": [24, 25, 70], "prior": [24, 25, 28, 29], "havlicek": 24, "supervis": [24, 70], "natur": [24, 70], "567": 24, "209": 24, "212": 24, "2019": [24, 70], "schuld": [24, 70], "phy": [24, 70], "rev": [24, 70], "lett": [24, 70], "122": 24, "040504": [24, 70], "02276": 24, "hubregtsen": [24, 25, 36, 70], "Near": [24, 25, 36, 70], "2d": [24, 26], "evaluate_pairwis": [24, 25, 26], "evaluate_with_paramet": [24, 25, 26], "observablebas": [25, 44, 50, 51, 52, 58, 71], "outerkernelbas": 25, "emb": [25, 68], "than": [25, 30, 37, 38, 39, 40, 41, 42, 43], "done": [25, 70], "pauli": [25, 37, 39, 40, 41, 44, 69, 70, 71, 72], "As": [25, 70], "outerkernel": 25, "num_hyper_paramet": 25, "name_hyper_paramet": 25, "d": [25, 38, 44, 72], "euclidean": 25, "keyword": [25, 27, 28, 29, 72], "nu": 25, "bigg": 25, "length_scal": 25, "period": 25, "sigma_0": 25, "additive_chi2": 25, "chi2": 25, "poli": 25, "rbf": [25, 70], "sigmoid": 25, "cosin": 25, "sklean": 25, "chebyshevtow": 25, "kernel_matrix": 25, "customobserv": [25, 71], "qkrr": [25, 28, 70], "measument": 25, "zzzz": 25, "yyyi": 25, "xxxx": 25, "ml_method": 25, "evaluate_qnn": 25, "should": [26, 27, 28, 29, 30, 31, 50, 51, 52, 70], "attribut": [26, 27, 30, 69], "kernmatrixbas": 26, "_regularize_matrix": 26, "kernelmatrixbas": [27, 28, 29, 30, 31, 32, 35, 36], "extend": [27, 72], "gaussian_process": 27, "gaussianprocessclassifi": 27, "inherit": 27, "must": [27, 28, 29, 30, 31, 35, 36, 39, 68], "underli": [27, 28, 29, 30, 31], "load_iri": 27, "qgpc_ansatz": 27, "98": 27, "predict_proba": [27, 30, 50], "85643716": 27, "07037611": 27, "07318673": 27, "80314475": 27, "09988938": 27, "09696586": 27, "n_featur": [27, 28, 29, 30, 31, 50, 51], "target": [27, 28, 29, 30, 31, 36, 70, 72], "binari": [27, 42], "get_metadata_rout": [27, 28, 29, 30, 31, 50, 51, 52], "metadata": [27, 28, 29, 30, 31, 50, 51, 52], "rout": [27, 28, 29, 30, 31, 50, 51, 52, 69], "mechan": [27, 28, 29, 30, 31, 50, 51, 52, 70], "metadatarequest": [27, 28, 29, 30, 31, 50, 51, 52], "encapsul": [27, 28, 29, 30, 31, 50, 51, 52], "log_marginal_likelihood": 27, "eval_gradi": 27, "clone_kernel": 27, "margin": 27, "likelihood": [27, 35, 36, 70], "multi": [27, 30, 50], "versu": 27, "rest": 27, "n_kernel_param": 27, "mai": [27, 28, 29, 30, 31, 51, 71, 72], "compound": 27, "precomput": [27, 28, 29, 30, 31, 45, 51], "kernel_": 27, "modifi": [27, 69, 72], "log_likelihood": 27, "log_likelihood_gradi": 27, "queri": [27, 28], "classes_": [27, 30], "sort": [27, 30], "appear": [27, 30], "n_class": [27, 30], "sample_weight": [27, 28, 29, 30, 31, 50, 51], "subset": [27, 30, 50], "harsh": [27, 30, 50], "n_output": [27, 28, 29, 30, 31, 50, 51], "weight": [27, 28, 29, 30, 31, 50, 51, 52, 54, 55, 56], "w": [27, 28, 29, 30, 31, 50, 51, 59], "set_score_request": [27, 28, 29, 30, 31, 50, 51], "unchang": [27, 28, 29, 30, 31, 50, 51, 52], "relev": [27, 28, 29, 30, 31, 50, 51, 52], "enable_metadata_rout": [27, 28, 29, 30, 31, 50, 51, 52], "set_config": [27, 28, 29, 30, 31, 50, 51, 52], "ignor": [27, 28, 29, 30, 31, 50, 51, 52], "meta": [27, 28, 29, 30, 31, 50, 51, 52], "alia": [27, 28, 29, 30, 31, 50, 51, 52, 59], "metadata_rout": [27, 28, 29, 30, 31, 50, 51, 52], "retain": [27, 28, 29, 30, 31, 50, 51, 52], "insid": [27, 28, 29, 30, 31, 50, 51, 52], "06": [28, 29], "normalize_i": 28, "analog": [28, 29, 70, 72], "By": [28, 29, 30, 31, 68, 70], "assum": [28, 29, 30, 31, 70], "gram": 28, "particularli": [28, 29, 30, 31], "strength": [28, 29, 35, 50, 51], "condit": [28, 29], "assur": [28, 29], "stronger": [28, 29], "unit": 28, "zero": [28, 38, 45, 70, 71], "revers": [28, 37], "report": 28, "enabl": [28, 68, 69, 72], "full": [28, 38], "carl": [28, 35], "rasmussen": [28, 35], "christoph": [28, 35], "william": [28, 35], "mit": [28, 29, 35], "press": [28, 29, 35], "2006": [28, 35], "2304": 28, "12923": 28, "qgpr_ansatz": 28, "sample_train": 28, "label_train": 28, "sample_test": 28, "calculate_cov_and_mean": 28, "covari": 28, "just": 28, "quantumgaussianprocessregressor": 28, "return_cov": 28, "solut": [28, 29, 68, 70], "choleski": [28, 29], "decomposit": [28, 29], "stabil": [28, 29], "most": [28, 69, 70, 72], "k_train": [28, 29], "k_testtrain": [28, 29], "k_test": 28, "y_std": 28, "y_cov": 28, "joint": 28, "y_mean": 28, "coeffici": [28, 29, 31, 51], "residu": [28, 29, 31, 51], "sum": [28, 29, 31, 37, 38, 41, 42, 44, 51, 59, 66, 68, 71], "squar": [28, 29, 31, 44, 51, 55, 71, 72], "y_true": [28, 29, 31, 51], "arbitrarili": [28, 29, 31, 51], "wors": [28, 29, 31, 51], "constant": [28, 29, 31, 45, 51, 72], "alwai": [28, 29, 31, 51], "disregard": [28, 29, 31, 51], "n_samples_fit": [28, 29, 31, 51], "multioutput": [28, 29, 31, 51], "uniform_averag": [28, 29, 31, 51], "keep": [28, 29, 31, 51], "r2_score": [28, 29, 31, 51], "influenc": [28, 29, 31, 51, 72], "except": [28, 29, 31, 51, 70], "multioutputregressor": [28, 29, 31, 51], "set_fit_request": [28, 29, 30, 31, 50, 51, 52], "set_predict_request": [28, 29], "krr": 29, "theoret": 29, "0e": 29, "dual_coeff_": 29, "n_train": 29, "n_test": 29, "kevin": 29, "murphi": 29, "probabilist": 29, "perspect": 29, "chapter": [29, 35], "pp": 29, "493": 29, "en": 29, "wikipedia": 29, "wiki": 29, "ridge_regress": 29, "q_kernel_pqk": 29, "qkrr_pqk": 29, "y_pred_pqk": 29, "accordingli": 29, "actual": [29, 32, 33], "itself": [29, 32], "svc": [30, 31], "parent": [30, 31, 32, 33, 69], "document": [30, 31, 68, 70, 72], "omit": [30, 31, 69], "coef0": [30, 31], "notabl": [30, 31], "make_moon": 30, "decision_funct": 30, "ovo": 30, "proport": 30, "exact": 30, "coef_": 30, "question": 30, "monoton": 30, "spars": [30, 31], "higher": [30, 31, 68, 71], "forc": [30, 31], "put": [30, 31, 70], "emphasi": [30, 31], "contigu": [30, 31], "float64": [30, 31], "csr_matrix": [30, 31], "dens": [30, 31], "n_samples_test": [30, 31], "n_samples_train": [30, 31], "predict_log_proba": 30, "slightli": 30, "those": 30, "produc": 30, "meaningless": 30, "small": [30, 45, 70], "svr": 31, "inlier": 31, "outlier": 31, "loss": [32, 33, 34, 35, 36, 50, 51, 52, 70, 72], "kernellossbas": [33, 34], "optimizerbas": [33, 34, 50, 51, 52], "sequenc": [33, 34, 35, 36, 45, 46, 47, 48, 49, 72], "guess": [33, 45, 46, 47, 48, 49], "variat": [34, 35, 36], "adam": [34, 70], "nll": [34, 70], "lr": [34, 45, 70], "nll_loss": [34, 70], "noise_std": 34, "opt_result": 34, "optimal_paramet": 34, "\u03b8": [35, 36], "equat": [35, 36, 38, 39, 40, 41, 42], "\u03c3i": 35, "2\u03c0": 35, "align": [36, 70], "27": 36, "28": 36, "ta": 36, "sum_": [36, 38, 70], "j": [36, 38, 70], "y_i": 36, "y_j": 36, "rescale_class_label": 36, "operator_str": [37, 71], "zi": 37, "charact": 37, "zz": [37, 38, 51], "xx": 37, "ones": [37, 38, 39, 40, 41, 42, 43, 58, 70], "get_oper": [37, 38, 39, 40, 41, 42, 43], "sparsepauliop": [37, 38, 39, 40, 41, 42, 43, 59, 62, 64, 65], "statefn": [37, 38, 39, 40, 41, 42, 43], "get_pauli": [37, 38, 39, 40, 41, 42, 43], "get_pauli_map": [37, 38, 39, 40, 41, 42, 43], "physic": [37, 38, 39, 40, 41, 42, 43, 70, 71], "set_map": [37, 38, 39, 40, 41, 42, 43, 71], "sprasepauliop": [37, 38, 39, 40, 41, 42, 43], "qubit_map": [37, 38, 39, 40, 41, 42, 43, 71], "num_all_qubit": [37, 38, 39, 40, 41, 42, 43, 71], "whenev": [37, 38, 39, 40, 41, 42, 43], "Ising": [38, 44, 71], "hamiltonian": [38, 44, 71], "b_i": [38, 41, 42], "_i": [38, 40, 41, 42, 56], "c_i": [38, 41], "d_": 38, "_j": 38, "foral": 38, "op_str": [39, 41, 71], "z_i": 39, "qquad": [39, 40], "act": [39, 72], "one_st": [40, 42], "bra": [40, 42, 70], "full_sum": [41, 42], "include_ident": [41, 42], "summat": [41, 66, 72], "pauliop": [41, 42, 43], "abstract": [43, 53], "oo": [44, 57, 58], "dop": [44, 57, 71], "odop": 44, "dopdop": [44, 57], "odopdop": 44, "oodop": 44, "oodopdop": 44, "isinghamiltonian": [44, 51, 71], "op": [44, 71, 72], "summedpauli": [44, 50, 71, 72], "get_operator_squar": [44, 71], "num_oper": 44, "callback": [45, 46, 47, 48, 49, 50, 51, 52], "default_callback": [45, 46, 47, 48], "toler": 45, "termin": 45, "rate": 45, "beta_1": 45, "decai": 45, "moment": 45, "beta_2": 45, "99": 45, "divis": 45, "num_averag": 45, "averag": 45, "maxiter_tot": 45, "skip_fun": 45, "skip": 45, "ep": 45, "finit": [45, 72], "optimizerresult": [45, 46, 47, 48, 49], "set_callback": [45, 46, 47, 48, 49], "lossbas": [50, 51, 52], "param_ini": [50, 51, 52], "param_op_ini": [50, 51, 52], "batch_siz": [50, 51, 52, 72], "epoch": [50, 51, 52, 72], "shuffl": [50, 51, 52, 72], "opt_param_op": [50, 51, 52, 53, 54, 55, 56], "pbar": [50, 51, 52], "interfac": [50, 51, 69], "possibli": [50, 51], "mini": [50, 51], "batch": [50, 51, 52], "Will": [50, 51], "sgdmixin": [50, 51, 52], "sgd": [50, 51, 52, 72], "els": [50, 51], "tqdm": [50, 51, 52], "bar": [50, 51, 52], "qnnregressor": [50, 72], "squaredloss": [50, 51, 72], "slsqp": [50, 51, 70], "make_blob": 50, "60": 50, "center": 50, "16": [50, 51], "reiniti": [50, 51, 52], "partial_fit": [50, 51], "won": [50, 51], "baseqnn": [50, 51], "set_partial_fit_request": [50, 51], "qnnclassifi": [51, 72], "reg": [51, 72], "shot_adjust": 52, "shot_adjusting_opt": 52, "cost": [52, 72], "value_dict": [53, 54, 55, 56], "set_opt_param_op": [53, 54, 55, 56], "flag": [53, 54, 55, 56, 59], "005": [54, 56], "l2": 54, "parameter_list": 54, "parameter_operator_list": 54, "l1": 54, "variance_factor": [54, 56], "l_": [54, 56, 72], "var": [54, 56, 57], "var_i": 54, "ground_truth": 55, "sum_j": 55, "w_i": 55, "f_ref": 55, "count": [55, 71], "multiple_output": [55, 56], "operatornam": 56, "wave_funct": 57, "parametervectorel": 57, "from_paramet": 57, "val": 57, "convert": 57, "from_tupl": 57, "from_vari": 57, "result_cach": 58, "param_op": 58, "nest": 58, "kei": [58, 59, 68, 70], "entri": 58, "evaluate_dfdop": 58, "evaluate_dfdopdx": 58, "evaluate_dfdp": 58, "evaluate_dfdpdx": 58, "evaluate_dfdx": 58, "evaluate_dfdxdx": 58, "evaluate_diff_tupl": 58, "diff_tupl": 58, "evaluate_f": 58, "evaluate_from_str": 58, "input_str": 58, "evaluate_laplac": 58, "evaluate_laplace_dop": 58, "evaluate_laplace_dp": 58, "evaluate_prob": 58, "quantuminst": 58, "sparsevectorstatefn": 58, "to_dict_fn": 58, "evaluate_var": 58, "evaluate_vari": 58, "get_optree_from_expec": 58, "input_expec": 58, "expec": 58, "get_optree_from_str": 58, "prefix": 58, "op0__": 58, "op1__": 58, "etc": [58, 69], "static": 59, "optreederiv": 59, "optreenodebas": [59, 63, 66], "optreecircuit": [59, 62, 64], "optreeoper": [59, 62, 64], "parameterexpress": 59, "optreeleafcircuit": [59, 60, 62, 64], "differentiate_v2": 59, "recurs": 59, "transpile_to_supported_instruct": 59, "supported_g": 59, "ecr": 59, "sdg": 59, "sx": 59, "tdg": 59, "instruct": [59, 68], "optreeevalu": 59, "evaluate_tree_with_estim": 59, "expectation_tre": 59, "optreeexpectationvalu": [59, 64], "detect_dupl": 59, "tree": 59, "occur": 59, "turn": 59, "optreeleafexpectationvalu": [59, 62, 64], "detect_expectation_dupl": 59, "detect": 59, "evaluate_tree_with_sampl": 59, "evaluate_with_estim": 59, "dictionary_circuit": 59, "dictionary_oper": 59, "dictionaries_combin": 59, "optreeleafoper": [59, 62, 65], "evaluate_with_sampl": 59, "optreemeasuredoper": 59, "optreeleafmeasuredoper": [59, 64], "transform_to_zbasi": 59, "optree_el": 59, "abelian_group": 59, "commut": 59, "inplac": 59, "gen_expectation_tre": 59, "circuit_tre": 59, "operator_tre": 59, "leaf": [59, 60, 61, 62, 64, 65, 67], "get_first_leaf": 59, "optreeleafbas": 59, "get_num_nested_list": 59, "depth": [59, 70, 72], "get_number_of_leaf": 59, "get_tree_depth": 59, "hash_circuit": 59, "hash": [59, 69], "_circuit_kei": 59, "comparison": 59, "hash_oper": 59, "_observable_kei": 59, "simplifi": [59, 72], "kept": 59, "untouch": 59, "merg": 59, "doubl": 59, "branch": 59, "item": 61, "arbitrari": [61, 68, 71], "optreeleafcontain": 61, "children_list": [63, 66], "factor_list": [63, 66], "operation_list": [63, 66], "node": [63, 66], "children": [63, 66], "child": [63, 66], "measure_circuit": 64, "optreeleafvalu": 67, "mani": [68, 72], "crucial": [68, 71], "obligatori": 68, "offer": [68, 70, 72], "fulli": [68, 69], "feel": 68, "contribut": 68, "match": 68, "success": 68, "consequ": [68, 70], "fm1": 68, "fm2": 68, "fm3": 68, "qiskitencodingcircuit": 68, "friendli": 68, "effortlessli": 68, "applic": [68, 70, 72], "comprehens": 68, "manner": [68, 72], "regardless": 68, "fashion": 68, "inspir": [68, 70], "qfim": 68, "automated_prun": 68, "pruned_encoding_circuit": 68, "often": [68, 71, 72], "essenti": [68, 72], "straightforward": [68, 70], "futur": [68, 69], "get_deriv": [68, 71], "proprietari": 68, "arithmet": 68, "grad_from_str": 68, "grad_from_tupl": 68, "grad_from_list": 68, "intern": [68, 69], "emploi": [68, 71, 72], "fake": [68, 69], "varieti": 69, "comfort": 69, "summar": 69, "ingo": 69, "arrow": 69, "outgo": 69, "remot": 69, "doe": 69, "cancel": 69, "resubmit": 69, "paus": 69, "action": 69, "ca": 69, "mention": [69, 70], "framework": [69, 70], "wai": [69, 70], "principl": [69, 71, 72], "long": 69, "configur": [69, 72], "vice": [69, 70], "versa": [69, 70], "optimization_level": 69, "resilience_level": 69, "zne": 69, "upon": 69, "deprec": 69, "qiskit_ibm_provid": 69, "ibmprovid": 69, "save_account": 69, "hub": 69, "ibmq_qasm_simul": 69, "600": 69, "lincombqgt": 69, "quantum_info": 69, "intial": 69, "5000": 69, "set_opt": 69, "among": [70, 72], "fact": 70, "formal": 70, "rich": 70, "mathemat": 70, "theori": 70, "studi": 70, "reproduc": 70, "rkh": 70, "attain": [70, 72], "trivial": 70, "infinit": 70, "endow": 70, "inner": 70, "ever": 70, "braket": 70, "reduc": 70, "illustr": [70, 72], "interpret": 70, "fundament": 70, "formul": 70, "whose": 70, "inher": 70, "phenomena": 70, "superposit": 70, "prospect": 70, "abl": 70, "deal": 70, "increas": 70, "psi": [70, 72], "u_": 70, "discuss": 70, "ansatz": 70, "bridg": 70, "But": 70, "densiti": 70, "rho": 70, "enrich": 70, "schmidt": 70, "practic": 70, "reveal": 70, "analysi": 70, "famou": 70, "commonli": [70, 72], "nisq": 70, "era": 70, "fast": 70, "algebra": 70, "hhl": 70, "basic": 70, "notion": 70, "mere": 70, "subsequ": [70, 72], "conveni": 70, "independ": 70, "qgpc": 70, "literatur": 70, "noth": 70, "alreadi": 70, "implicitli": 70, "predefin": [70, 72], "reason": 70, "nativ": 70, "geometri": 70, "q": 70, "prime": 70, "tr": 70, "pure": 70, "immedi": 70, "fqk_instanc": 70, "exclus": 70, "along": [70, 72], "diagon": 70, "fulfil": 70, "attempt": 70, "restor": 70, "suffer": 70, "concentr": 70, "untrain": 70, "circumv": 70, "famili": 70, "simplest": 70, "particl": 70, "rdm": 70, "pq": 70, "sum_k": [70, 72], "lbrace": 70, "rbrace": 70, "_k": 70, "neq": 70, "trace": 70, "th": 70, "seen": [70, 72], "ambigu": 70, "concern": 70, "eventu": 70, "reflect": 70, "matern": 70, "expsinesquar": 70, "rationalquadrat": 70, "dotproduct": 70, "pariwisekernel": 70, "speak": 70, "pqk_instanc": 70, "moreov": 70, "At": 70, "kernel_optim": 70, "kerneloptim": 70, "previous": 70, "split": 70, "targetalign": 70, "adam_opt": 70, "kta": 70, "kta_loss": 70, "kta_optim": 70, "opt_kta_result": 70, "retriev": 70, "opt_kta_param": 70, "noise_v": 70, "bet": 70, "nll_optim": 70, "opt_nll_result": 70, "opt_nll_param": 70, "2101": 70, "11020v2": 70, "killoran": 70, "112": 70, "jerbi": 70, "2110": 70, "13162v3": 70, "2023": [70, 72], "plai": 71, "role": 71, "conjunct": 71, "context": 71, "standalon": 71, "multipli": 71, "op1": 71, "ix": 71, "op2": 71, "zy": 71, "total_op": 71, "issu": 71, "logic": 71, "set_qubit_map": 71, "transpiledencodingcircuit": 71, "observablederiv": 71, "cube": 71, "op3": 71, "concept": 72, "artifici": 72, "realm": 72, "adher": 72, "akin": 72, "neuron": 72, "somewhat": 72, "mislead": 72, "conform": 72, "paradigm": 72, "nevertheless": 72, "resembl": 72, "explain": 72, "nomenclatur": 72, "orang": 72, "hybrid": 72, "scheme": 72, "architectur": 72, "freedom": 72, "denot": 72, "u_i": 72, "tailor": 72, "characterist": 72, "wherea": 72, "alter": 72, "intric": 72, "interconnect": 72, "repeatedli": 72, "rvert": 72, "freeli": 72, "worth": 72, "phase": 72, "assess": 72, "desir": 72, "stochast": 72, "stage": 72, "compos": 72, "main": 72, "dedic": 72, "costoper": 72, "upcom": 72, "dispos": 72, "ingredi": 72, "particular": 72, "offset": 72, "easi": 72, "infer": 72, "lot": 72, "lbfgsb": 72, "spsa": 72, "bigger": 72, "options_dict": 72, "pretrain": 72, "qasmsimul": 72, "subject": 72, "sigma_f": 72, "logarithm": 72, "yield": 72, "dynam": 72, "satisfi": 72, "less": 72, "kreplin": 72}, "objects": {"squlearn": [[7, 0, 1, "", "Executor"], [6, 3, 0, "-", "encoding_circuit"], [6, 3, 0, "-", "observables"], [6, 3, 0, "-", "optimizers"], [6, 3, 0, "-", "qnn"]], "squlearn.Executor": [[7, 1, 1, "", "backend"], [7, 2, 1, "", "backend_run"], [7, 2, 1, "", "clear_estimator_cache"], [7, 2, 1, "", "clear_sampler_cache"], [7, 2, 1, "", "close_session"], [7, 2, 1, "", "create_session"], [7, 1, 1, "", "estimator"], [7, 2, 1, "", "estimator_run"], [7, 1, 1, "", "execution"], [7, 2, 1, "", "get_estimator"], [7, 2, 1, "", "get_sampler"], [7, 2, 1, "", "get_shots"], [7, 2, 1, "", "optree_executor"], [7, 2, 1, "", "reset_shots"], [7, 1, 1, "", "sampler"], [7, 2, 1, "", "sampler_run"], [7, 1, 1, "", "service"], [7, 1, 1, "", "session"], [7, 2, 1, "", "set_shots"], [7, 1, 1, "", "shots"]], "squlearn.encoding_circuit": [[8, 0, 1, "", "ChebPQC"], [9, 0, 1, "", "ChebRx"], [10, 0, 1, "", "ChebyshevTower"], [11, 0, 1, "", "EncodingCircuitDerivatives"], [12, 0, 1, "", "HZCRxCRyCRz"], [13, 0, 1, "", "HighDimEncodingCircuit"], [14, 0, 1, "", "LayeredEncodingCircuit"], [15, 0, 1, "", "ParamZEncodingCircuit"], [16, 0, 1, "", "PrunedEncodingCircuit"], [17, 0, 1, "", "QEKEncodingCircuit"], [18, 0, 1, "", "QiskitEncodingCircuit"], [19, 0, 1, "", "TranspiledEncodingCircuit"], [20, 0, 1, "", "YZ_CX_EncodingCircuit"], [21, 4, 1, "", "automated_pruning"], [23, 4, 1, "", "pruning_from_QFI"]], "squlearn.encoding_circuit.ChebPQC": [[8, 2, 1, "", "draw"], [8, 2, 1, "", "generate_initial_parameters"], [8, 2, 1, "", "get_cheb_indices"], [8, 2, 1, "", "get_circuit"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ChebRx": [[9, 2, 1, "", "draw"], [9, 2, 1, "", "generate_initial_parameters"], [9, 2, 1, "", "get_cheb_indices"], [9, 2, 1, "", "get_circuit"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ChebyshevTower": [[10, 2, 1, "", "draw"], [10, 2, 1, "", "generate_initial_parameters"], [10, 2, 1, "", "get_circuit"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.EncodingCircuitDerivatives": [[11, 2, 1, "", "assign_parameters"], [11, 2, 1, "", "get_derivative"]], "squlearn.encoding_circuit.HZCRxCRyCRz": [[12, 2, 1, "", "draw"], [12, 2, 1, "", "generate_initial_parameters"], [12, 2, 1, "", "get_circuit"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.HighDimEncodingCircuit": [[13, 2, 1, "", "draw"], [13, 2, 1, "", "generate_initial_parameters"], [13, 2, 1, "", "get_circuit"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.LayeredEncodingCircuit": [[14, 2, 1, "", "H"], [14, 2, 1, "", "I"], [14, 2, 1, "", "P"], [14, 2, 1, "", "Rx"], [14, 2, 1, "", "Ry"], [14, 2, 1, "", "Rz"], [14, 2, 1, "", "S"], [14, 2, 1, "", "S_conjugate"], [14, 2, 1, "", "T"], [14, 2, 1, "", "T_conjugate"], [14, 2, 1, "", "U"], [14, 2, 1, "", "X"], [14, 2, 1, "", "Y"], [14, 2, 1, "", "Z"], [14, 2, 1, "", "add_layer"], [14, 2, 1, "", "ch_entangling"], [14, 2, 1, "", "cp_entangling"], [14, 2, 1, "", "crx_entangling"], [14, 2, 1, "", "cry_entangling"], [14, 2, 1, "", "crz_entangling"], [14, 2, 1, "", "cu_entangling"], [14, 2, 1, "", "cx_entangling"], [14, 2, 1, "", "cy_entangling"], [14, 2, 1, "", "cz_entangling"], [14, 2, 1, "", "draw"], [14, 2, 1, "", "from_string"], [14, 2, 1, "", "generate_initial_parameters"], [14, 2, 1, "", "get_circuit"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "rxx_entangling"], [14, 2, 1, "", "ryy_entangling"], [14, 2, 1, "", "rzx_entangling"], [14, 2, 1, "", "rzz_entangling"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "swap"]], "squlearn.encoding_circuit.ParamZEncodingCircuit": [[15, 2, 1, "", "draw"], [15, 2, 1, "", "generate_initial_parameters"], [15, 2, 1, "", "get_circuit"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.PrunedEncodingCircuit": [[16, 2, 1, "", "draw"], [16, 2, 1, "", "generate_initial_parameters"], [16, 2, 1, "", "get_circuit"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.QEKEncodingCircuit": [[17, 2, 1, "", "draw"], [17, 2, 1, "", "generate_initial_parameters"], [17, 2, 1, "", "get_circuit"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.QiskitEncodingCircuit": [[18, 2, 1, "", "draw"], [18, 2, 1, "", "generate_initial_parameters"], [18, 2, 1, "", "get_circuit"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.TranspiledEncodingCircuit": [[19, 2, 1, "", "draw"], [19, 2, 1, "", "generate_initial_parameters"], [19, 2, 1, "", "get_circuit"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.YZ_CX_EncodingCircuit": [[20, 2, 1, "", "draw"], [20, 2, 1, "", "generate_initial_parameters"], [20, 2, 1, "", "get_circuit"], [20, 2, 1, "", "get_params"], [20, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.encoding_circuit_base": [[22, 0, 1, "", "EncodingCircuitBase"]], "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase": [[22, 2, 1, "", "draw"], [22, 2, 1, "", "generate_initial_parameters"], [22, 2, 1, "", "get_circuit"], [22, 2, 1, "", "get_params"], [22, 2, 1, "", "set_params"]], "squlearn.kernel": [[6, 3, 0, "-", "matrix"], [6, 3, 0, "-", "optimization"]], "squlearn.kernel.matrix": [[24, 0, 1, "", "FidelityKernel"], [25, 0, 1, "", "ProjectedQuantumKernel"]], "squlearn.kernel.matrix.FidelityKernel": [[24, 2, 1, "", "assign_parameters"], [24, 2, 1, "", "evaluate"], [24, 2, 1, "", "evaluate_pairwise"], [24, 2, 1, "", "evaluate_with_parameters"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "set_params"]], "squlearn.kernel.matrix.ProjectedQuantumKernel": [[25, 2, 1, "", "assign_parameters"], [25, 1, 1, "", "encoding_circuit"], [25, 2, 1, "", "evaluate"], [25, 2, 1, "", "evaluate_pairwise"], [25, 2, 1, "", "evaluate_qnn"], [25, 2, 1, "", "evaluate_with_parameters"], [25, 2, 1, "", "get_params"], [25, 1, 1, "", "measurement"], [25, 1, 1, "", "name_hyper_parameters"], [25, 1, 1, "", "num_features"], [25, 1, 1, "", "num_hyper_parameters"], [25, 1, 1, "", "num_parameters"], [25, 1, 1, "", "num_qubits"], [25, 1, 1, "", "outer_kernel"], [25, 1, 1, "", "parameters"], [25, 2, 1, "", "set_params"]], "squlearn.kernel.matrix.kernel_matrix_base": [[26, 0, 1, "", "KernelMatrixBase"]], "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase": [[26, 2, 1, "", "assign_parameters"], [26, 2, 1, "", "evaluate"], [26, 2, 1, "", "evaluate_pairwise"], [26, 2, 1, "", "evaluate_with_parameters"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "set_params"]], "squlearn.kernel.ml": [[27, 0, 1, "", "QGPC"], [28, 0, 1, "", "QGPR"], [29, 0, 1, "", "QKRR"], [30, 0, 1, "", "QSVC"], [31, 0, 1, "", "QSVR"]], "squlearn.kernel.ml.QGPC": [[27, 2, 1, "", "fit"], [27, 2, 1, "", "get_metadata_routing"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "log_marginal_likelihood"], [27, 2, 1, "", "predict"], [27, 2, 1, "", "predict_proba"], [27, 2, 1, "", "score"], [27, 2, 1, "", "set_params"], [27, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QGPR": [[28, 2, 1, "", "calculate_cov_and_mean"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "get_metadata_routing"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "score"], [28, 2, 1, "", "set_fit_request"], [28, 2, 1, "", "set_params"], [28, 2, 1, "", "set_predict_request"], [28, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QKRR": [[29, 2, 1, "", "fit"], [29, 2, 1, "", "get_metadata_routing"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "predict"], [29, 2, 1, "", "score"], [29, 2, 1, "", "set_fit_request"], [29, 2, 1, "", "set_params"], [29, 2, 1, "", "set_predict_request"], [29, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QSVC": [[30, 2, 1, "", "decision_function"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "get_metadata_routing"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "predict_log_proba"], [30, 2, 1, "", "predict_proba"], [30, 2, 1, "", "score"], [30, 2, 1, "", "set_fit_request"], [30, 2, 1, "", "set_params"], [30, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QSVR": [[31, 2, 1, "", "fit"], [31, 2, 1, "", "get_metadata_routing"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "score"], [31, 2, 1, "", "set_fit_request"], [31, 2, 1, "", "set_params"], [31, 2, 1, "", "set_score_request"]], "squlearn.kernel.optimization.kernel_loss_base": [[32, 0, 1, "", "KernelLossBase"]], "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase": [[32, 2, 1, "", "compute"]], "squlearn.kernel.optimization.kernel_optimization_base": [[33, 0, 1, "", "KernelOptimizerBase"]], "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase": [[33, 2, 1, "", "run_optimization"]], "squlearn.kernel.optimization.kernel_optimizer": [[34, 0, 1, "", "KernelOptimizer"]], "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer": [[34, 2, 1, "", "run_optimization"]], "squlearn.kernel.optimization.negative_log_likelihood": [[35, 0, 1, "", "NLL"]], "squlearn.kernel.optimization.negative_log_likelihood.NLL": [[35, 2, 1, "", "compute"]], "squlearn.kernel.optimization.target_alignment": [[36, 0, 1, "", "TargetAlignment"]], "squlearn.kernel.optimization.target_alignment.TargetAlignment": [[36, 2, 1, "", "compute"]], "squlearn.observables": [[37, 0, 1, "", "CustomObservable"], [38, 0, 1, "", "IsingHamiltonian"], [39, 0, 1, "", "SinglePauli"], [40, 0, 1, "", "SingleProbability"], [41, 0, 1, "", "SummedPaulis"], [42, 0, 1, "", "SummedProbabilities"]], "squlearn.observables.CustomObservable": [[37, 2, 1, "", "generate_initial_parameters"], [37, 2, 1, "", "get_operator"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "get_pauli"], [37, 2, 1, "", "get_pauli_mapped"], [37, 1, 1, "", "num_parameters"], [37, 1, 1, "", "num_qubits"], [37, 1, 1, "", "operator_string"], [37, 1, 1, "", "parameterized"], [37, 2, 1, "", "set_map"], [37, 2, 1, "", "set_params"]], "squlearn.observables.IsingHamiltonian": [[38, 1, 1, "", "I"], [38, 1, 1, "", "X"], [38, 1, 1, "", "Z"], [38, 1, 1, "", "ZZ"], [38, 2, 1, "", "generate_initial_parameters"], [38, 2, 1, "", "get_operator"], [38, 2, 1, "", "get_params"], [38, 2, 1, "", "get_pauli"], [38, 2, 1, "", "get_pauli_mapped"], [38, 1, 1, "", "num_parameters"], [38, 1, 1, "", "num_qubits"], [38, 2, 1, "", "set_map"], [38, 2, 1, "", "set_params"]], "squlearn.observables.SinglePauli": [[39, 2, 1, "", "generate_initial_parameters"], [39, 2, 1, "", "get_operator"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "get_pauli"], [39, 2, 1, "", "get_pauli_mapped"], [39, 1, 1, "", "num_parameters"], [39, 1, 1, "", "num_qubits"], [39, 1, 1, "", "op_str"], [39, 1, 1, "", "parameterized"], [39, 1, 1, "", "qubit"], [39, 2, 1, "", "set_map"], [39, 2, 1, "", "set_params"]], "squlearn.observables.SingleProbability": [[40, 2, 1, "", "generate_initial_parameters"], [40, 2, 1, "", "get_operator"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "get_pauli"], [40, 2, 1, "", "get_pauli_mapped"], [40, 1, 1, "", "num_parameters"], [40, 1, 1, "", "num_qubits"], [40, 1, 1, "", "one_state"], [40, 1, 1, "", "parameterized"], [40, 1, 1, "", "qubit"], [40, 2, 1, "", "set_map"], [40, 2, 1, "", "set_params"]], "squlearn.observables.SummedPaulis": [[41, 1, 1, "", "full_sum"], [41, 2, 1, "", "generate_initial_parameters"], [41, 2, 1, "", "get_operator"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "get_pauli"], [41, 2, 1, "", "get_pauli_mapped"], [41, 1, 1, "", "include_identity"], [41, 1, 1, "", "num_parameters"], [41, 1, 1, "", "num_qubits"], [41, 1, 1, "", "op_str"], [41, 2, 1, "", "set_map"], [41, 2, 1, "", "set_params"]], "squlearn.observables.SummedProbabilities": [[42, 1, 1, "", "full_sum"], [42, 2, 1, "", "generate_initial_parameters"], [42, 2, 1, "", "get_operator"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "get_pauli"], [42, 2, 1, "", "get_pauli_mapped"], [42, 1, 1, "", "include_identity"], [42, 1, 1, "", "num_parameters"], [42, 1, 1, "", "num_qubits"], [42, 1, 1, "", "one_state"], [42, 2, 1, "", "set_map"], [42, 2, 1, "", "set_params"]], "squlearn.observables.observable_base": [[43, 0, 1, "", "ObservableBase"]], "squlearn.observables.observable_base.ObservableBase": [[43, 2, 1, "", "generate_initial_parameters"], [43, 2, 1, "", "get_operator"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "get_pauli"], [43, 2, 1, "", "get_pauli_mapped"], [43, 1, 1, "", "num_parameters"], [43, 1, 1, "", "num_qubits"], [43, 2, 1, "", "set_map"], [43, 2, 1, "", "set_params"]], "squlearn.observables.observable_derivatives": [[44, 0, 1, "", "ObservableDerivatives"]], "squlearn.observables.observable_derivatives.ObservableDerivatives": [[44, 2, 1, "", "assign_parameters"], [44, 2, 1, "", "get_derivative"], [44, 2, 1, "", "get_operator_squared"], [44, 1, 1, "", "num_operators"], [44, 1, 1, "", "num_parameters"], [44, 1, 1, "", "parameter_vector"]], "squlearn.optimizers": [[45, 0, 1, "", "Adam"], [46, 0, 1, "", "LBFGSB"], [47, 0, 1, "", "SLSQP"], [48, 0, 1, "", "SPSA"]], "squlearn.optimizers.Adam": [[45, 2, 1, "", "minimize"], [45, 2, 1, "", "reset"], [45, 2, 1, "", "set_callback"], [45, 2, 1, "", "step"]], "squlearn.optimizers.LBFGSB": [[46, 2, 1, "", "minimize"], [46, 2, 1, "", "set_callback"]], "squlearn.optimizers.SLSQP": [[47, 2, 1, "", "minimize"], [47, 2, 1, "", "set_callback"]], "squlearn.optimizers.SPSA": [[48, 2, 1, "", "minimize"], [48, 2, 1, "", "set_callback"]], "squlearn.optimizers.optimizer_base": [[49, 0, 1, "", "OptimizerBase"]], "squlearn.optimizers.optimizer_base.OptimizerBase": [[49, 2, 1, "", "minimize"], [49, 2, 1, "", "set_callback"]], "squlearn.qnn": [[50, 0, 1, "", "QNNClassifier"], [51, 0, 1, "", "QNNRegressor"]], "squlearn.qnn.QNNClassifier": [[50, 2, 1, "", "fit"], [50, 2, 1, "", "get_metadata_routing"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "partial_fit"], [50, 2, 1, "", "predict"], [50, 2, 1, "", "predict_proba"], [50, 2, 1, "", "score"], [50, 2, 1, "", "set_fit_request"], [50, 2, 1, "", "set_params"], [50, 2, 1, "", "set_partial_fit_request"], [50, 2, 1, "", "set_score_request"]], "squlearn.qnn.QNNRegressor": [[51, 2, 1, "", "fit"], [51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "partial_fit"], [51, 2, 1, "", "predict"], [51, 2, 1, "", "score"], [51, 2, 1, "", "set_fit_request"], [51, 2, 1, "", "set_params"], [51, 2, 1, "", "set_partial_fit_request"], [51, 2, 1, "", "set_score_request"]], "squlearn.qnn.base_qnn": [[52, 0, 1, "", "BaseQNN"]], "squlearn.qnn.base_qnn.BaseQNN": [[52, 2, 1, "", "fit"], [52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "set_fit_request"], [52, 2, 1, "", "set_params"]], "squlearn.qnn.loss": [[53, 0, 1, "", "LossBase"], [54, 0, 1, "", "ParameterRegularizationLoss"], [55, 0, 1, "", "SquaredLoss"], [56, 0, 1, "", "VarianceLoss"]], "squlearn.qnn.loss.LossBase": [[53, 2, 1, "", "gradient"], [53, 2, 1, "", "set_opt_param_op"], [53, 2, 1, "", "value"]], "squlearn.qnn.loss.ParameterRegularizationLoss": [[54, 2, 1, "", "gradient"], [54, 2, 1, "", "set_opt_param_op"], [54, 2, 1, "", "value"]], "squlearn.qnn.loss.SquaredLoss": [[55, 2, 1, "", "gradient"], [55, 2, 1, "", "set_opt_param_op"], [55, 2, 1, "", "value"]], "squlearn.qnn.loss.VarianceLoss": [[56, 2, 1, "", "gradient"], [56, 2, 1, "", "set_opt_param_op"], [56, 2, 1, "", "value"]], "squlearn.qnn.qnn": [[57, 0, 1, "", "Expec"], [58, 0, 1, "", "QNN"]], "squlearn.qnn.qnn.Expec": [[57, 2, 1, "", "from_parameter"], [57, 2, 1, "", "from_string"], [57, 2, 1, "", "from_tuple"], [57, 2, 1, "", "from_variable"]], "squlearn.qnn.qnn.QNN": [[58, 2, 1, "", "evaluate"], [58, 2, 1, "", "evaluate_dfdop"], [58, 2, 1, "", "evaluate_dfdopdx"], [58, 2, 1, "", "evaluate_dfdp"], [58, 2, 1, "", "evaluate_dfdpdx"], [58, 2, 1, "", "evaluate_dfdx"], [58, 2, 1, "", "evaluate_dfdxdx"], [58, 2, 1, "", "evaluate_diff_tuple"], [58, 2, 1, "", "evaluate_f"], [58, 2, 1, "", "evaluate_from_string"], [58, 2, 1, "", "evaluate_laplace"], [58, 2, 1, "", "evaluate_laplace_dop"], [58, 2, 1, "", "evaluate_laplace_dp"], [58, 2, 1, "", "evaluate_probabilities"], [58, 2, 1, "", "evaluate_var"], [58, 2, 1, "", "evaluate_variance"], [58, 2, 1, "", "get_optree_from_expec"], [58, 2, 1, "", "get_optree_from_string"], [58, 2, 1, "", "get_params"], [58, 2, 1, "", "get_shots"], [58, 2, 1, "", "reset_shots"], [58, 2, 1, "", "set_params"], [58, 2, 1, "", "set_shots"]], "squlearn.util": [[59, 0, 1, "", "OpTree"]], "squlearn.util.OpTree": [[59, 0, 1, "", "OpTreeDerivative"], [59, 0, 1, "", "OpTreeEvaluate"], [59, 2, 1, "", "assign_parameters"], [59, 1, 1, "", "derivative"], [59, 1, 1, "", "evaluate"], [59, 2, 1, "", "gen_expectation_tree"], [59, 2, 1, "", "get_first_leaf"], [59, 2, 1, "", "get_num_nested_lists"], [59, 2, 1, "", "get_number_of_leafs"], [59, 2, 1, "", "get_tree_depth"], [59, 2, 1, "", "hash_circuit"], [59, 2, 1, "", "hash_operator"], [59, 2, 1, "", "simplify"]], "squlearn.util.OpTree.OpTreeDerivative": [[59, 2, 1, "", "differentiate"], [59, 2, 1, "", "differentiate_v2"], [59, 2, 1, "", "transpile_to_supported_instructions"]], "squlearn.util.OpTree.OpTreeEvaluate": [[59, 2, 1, "", "evaluate_tree_with_estimator"], [59, 2, 1, "", "evaluate_tree_with_sampler"], [59, 2, 1, "", "evaluate_with_estimator"], [59, 2, 1, "", "evaluate_with_sampler"], [59, 2, 1, "", "transform_to_zbasis"]], "squlearn.util.optree": [[60, 0, 1, "", "OpTreeCircuit"], [61, 0, 1, "", "OpTreeContainer"], [62, 0, 1, "", "OpTreeExpectationValue"], [63, 0, 1, "", "OpTreeList"], [64, 0, 1, "", "OpTreeMeasuredOperator"], [65, 0, 1, "", "OpTreeOperator"], [66, 0, 1, "", "OpTreeSum"], [67, 0, 1, "", "OpTreeValue"]], "squlearn.util.optree.OpTreeCircuit": [[60, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeContainer": [[61, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeExpectationValue": [[62, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeList": [[63, 2, 1, "", "append"], [63, 2, 1, "", "copy"], [63, 2, 1, "", "remove"]], "squlearn.util.optree.OpTreeMeasuredOperator": [[64, 2, 1, "", "copy"], [64, 2, 1, "", "measure_circuit"]], "squlearn.util.optree.OpTreeOperator": [[65, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeSum": [[66, 2, 1, "", "append"], [66, 2, 1, "", "copy"], [66, 2, 1, "", "remove"]], "squlearn.util.optree.OpTreeValue": [[67, 2, 1, "", "copy"]]}, "objtypes": {"0": "py:class", "1": "py:attribute", "2": "py:method", "3": "py:module", "4": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"], "3": ["py", "module", "Python module"], "4": ["py", "function", "Python function"]}, "titleterms": {"handwritten": 0, "digit": 0, "recognit": 0, "project": [0, 70], "quantum": [0, 2, 6, 68, 70, 72], "kernel": [0, 1, 6, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 70], "import": [0, 1], "definit": 0, "The": [0, 69], "data": [0, 1, 6], "preprocess": 0, "dimension": 0, "reduct": [0, 72], "split": 0, "set": [0, 1, 69], "min": 0, "max": 0, "scale": 0, "classif": [0, 70], "method": [0, 7, 11, 25, 27, 28, 29, 30, 31, 34, 35, 36, 44, 50, 51, 70, 72], "support": 0, "vector": 0, "machin": 0, "hyperparamet": 1, "optim": [1, 2, 6, 32, 33, 34, 35, 36, 45, 46, 47, 48, 49, 72], "pipelin": 1, "summari": 1, "librari": 1, "gener": 1, "up": 1, "grid": 1, "search": 1, "run": 1, "result": 1, "analysi": 1, "bayesian": 2, "us": 2, "gaussian": [2, 25], "process": 2, "surrog": 2, "model": 2, "exampl": [3, 4], "welcom": 4, "squlearn": [4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "": 4, "document": 4, "0": 4, "4": 4, "prerequisit": [4, 5], "instal": [4, 5], "stabl": [4, 5], "releas": [4, 5], "contribut": 4, "licens": 4, "imprint": 4, "content": 4, "bleed": 5, "edg": 5, "version": 5, "develop": 5, "api": 6, "refer": [6, 70], "qml": 6, "regressor": 6, "classifi": 6, "circuit": [6, 68], "design": 6, "encod": [6, 68], "tool": 6, "oper": 6, "execut": 6, "core": 6, "qnn": [6, 50, 51, 52, 53, 54, 55, 56, 57, 58, 72], "implement": [6, 25, 68, 71], "optre": [6, 59, 60, 61, 62, 63, 64, 65, 66, 67], "structur": 6, "base": 6, "class": [6, 69], "executor": [7, 69], "attribut": [7, 25, 29, 37, 38, 39, 40, 41, 42, 43, 44], "encoding_circuit": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "chebpqc": 8, "chebrx": 9, "chebyshevtow": 10, "encodingcircuitderiv": [11, 68], "string": [11, 14, 44], "ar": [11, 25, 44], "recogn": [11, 44], "get_deriv": [11, 44], "hzcrxcrycrz": 12, "highdimencodingcircuit": 13, "layeredencodingcircuit": [14, 68], "singl": 14, "qubit": 14, "gate": 14, "represent": 14, "two": 14, "paramzencodingcircuit": 15, "prunedencodingcircuit": 16, "qekencodingcircuit": 17, "qiskitencodingcircuit": 18, "transpiledencodingcircuit": [19, 68], "yz_cx_encodingcircuit": 20, "automated_prun": 21, "encoding_circuit_bas": 22, "encodingcircuitbas": 22, "pruning_from_qfi": 23, "matrix": [24, 25, 26], "fidelitykernel": [24, 70], "projectedquantumkernel": [25, 70], "outer": 25, "follow": 25, "matern": 25, "expsinesquar": 25, "rationalquadrat": 25, "dotproduct": 25, "pairwisekernel": 25, "kernel_matrix_bas": 26, "kernelmatrixbas": 26, "ml": [27, 28, 29, 30, 31], "qgpc": 27, "qgpr": 28, "qkrr": 29, "qsvc": 30, "qsvr": 31, "kernel_loss_bas": 32, "kernellossbas": 32, "kernel_optimization_bas": 33, "kerneloptimizerbas": 33, "kernel_optim": 34, "kerneloptim": 34, "negative_log_likelihood": 35, "nll": 35, "target_align": 36, "targetalign": 36, "observ": [37, 38, 39, 40, 41, 42, 43, 44, 71], "customobserv": 37, "isinghamiltonian": 38, "singlepauli": 39, "singleprob": 40, "summedpauli": 41, "summedprob": 42, "observable_bas": 43, "observablebas": 43, "observable_deriv": 44, "observablederiv": 44, "adam": [45, 72], "lbfgsb": 46, "slsqp": [47, 72], "spsa": 48, "optimizer_bas": 49, "optimizerbas": 49, "qnnclassifi": 50, "qnnregressor": 51, "base_qnn": 52, "baseqnn": 52, "loss": [53, 54, 55, 56], "lossbas": 53, "parameterregularizationloss": 54, "squaredloss": 55, "varianceloss": 56, "expec": 57, "util": [59, 60, 61, 62, 63, 64, 65, 66, 67, 69], "optreecircuit": 60, "optreecontain": 61, "optreeexpectationvalu": 62, "optreelist": 63, "optreemeasuredoper": 64, "optreeoper": 65, "optreesum": 66, "optreevalu": 67, "combin": 68, "wrap": 68, "qiskit": [68, 69], "creat": 68, "your": 68, "custom": 68, "via": [68, 70], "prune": 68, "differ": 68, "transpil": 68, "overview": 69, "kei": 69, "featur": 69, "initi": 69, "primit": 69, "routin": 69, "option": 69, "high": [70, 72], "level": [70, 72], "emploi": 70, "regress": 70, "evalu": 70, "fidel": 70, "fqk": 70, "pqk": 70, "train": 70, "expect": 71, "valu": 71, "obtain": 71, "deriv": 71, "neural": 72, "network": 72, "mini": 72, "batch": 72, "gradient": 72, "descent": 72, "varianc": 72, "user": 73, "guid": 73}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"Handwritten Digit Recognition with Projected Quantum Kernels": [[0, "Handwritten-Digit-Recognition-with-Projected-Quantum-Kernels"]], "Imports and Definitions": [[0, "Imports-and-Definitions"]], "The Data": [[0, "The-Data"]], "Preprocessing": [[0, "Preprocessing"]], "Dimensionality Reduction": [[0, "Dimensionality-Reduction"]], "Split Data sets": [[0, "Split-Data-sets"]], "Min Max Scaling": [[0, "Min-Max-Scaling"]], "Classification": [[0, "Classification"], [70, "classification"]], "Quantum Kernel Methods": [[0, "Quantum-Kernel-Methods"], [70, "quantum-kernel-methods"]], "Quantum Kernels": [[0, "Quantum-Kernels"]], "Projected Quantum Kernel": [[0, "Projected-Quantum-Kernel"]], "Support Vector Machine": [[0, "Support-Vector-Machine"]], "Hyperparameter Optimization and Pipelines": [[1, "Hyperparameter-Optimization-and-Pipelines"]], "Summary": [[1, "Summary"]], "Importing Libraries": [[1, "Importing-Libraries"]], "Generating Data": [[1, "Generating-Data"]], "Setting up the kernels": [[1, "Setting-up-the-kernels"]], "Setting up the grid search": [[1, "Setting-up-the-grid-search"]], "Running Grid Search": [[1, "Running-Grid-Search"]], "Results Analysis": [[1, "Results-Analysis"]], "Bayesian Optimization using a Quantum Gaussian Process Surrogate Model": [[2, "Bayesian-Optimization-using-a-Quantum-Gaussian-Process-Surrogate-Model"]], "Examples": [[3, "examples"], [4, "examples"]], "Welcome to sQUlearn\u2019s documentation!": [[4, "welcome-to-squlearn-s-documentation"]], "sQUlearn 0.4.0": [[4, "squlearn-0-4-0"]], "Prerequisites": [[4, "prerequisites"], [5, "prerequisites"]], "Installation": [[4, "installation"], [5, "installation"]], "Stable Release": [[4, "stable-release"], [5, "stable-release"]], "Contribution": [[4, "contribution"]], "License": [[4, "license"]], "Imprint": [[4, "imprint"]], "Contents:": [[4, null]], "Bleeding-edge version": [[5, "bleeding-edge-version"]], "Development version": [[5, "development-version"]], "API Reference": [[6, "api-reference"]], "QML Regressors": [[6, "qml-regressors"]], "QML Classifiers": [[6, "qml-classifiers"]], "Circuit Design": [[6, "circuit-design"]], "Encoding Circuits": [[6, "module-squlearn.encoding_circuit"]], "Encoding Circuit Tools": [[6, "encoding-circuit-tools"]], "Operators": [[6, "operators"]], "Operator Tools": [[6, "operator-tools"]], "Execution Tools": [[6, "execution-tools"]], "Core": [[6, "core"]], "Quantum Kernel Core": [[6, "module-squlearn.kernel.matrix"]], "QNN Core": [[6, "module-squlearn.qnn"]], "Implemented optimizers": [[6, "module-squlearn.optimizers"]], "OpTree Data Structure": [[6, "optree-data-structure"]], "Base Classes": [[6, "base-classes"]], "squlearn.Executor": [[7, "squlearn-executor"]], "Attributes:": [[7, "attributes"], [25, "attributes"], [29, "attributes"], [37, "attributes"], [38, "attributes"], [39, "attributes"], [40, "attributes"], [41, "attributes"], [41, "id1"], [42, "attributes"], [43, "attributes"], [44, "attributes"]], "Methods:": [[7, "methods"], [25, "methods"], [27, "methods"], [28, "methods"], [29, "methods"], [30, "methods"], [31, "methods"], [34, "methods"], [35, "methods"], [36, "methods"], [50, "methods"], [51, "methods"]], "squlearn.encoding_circuit.ChebPQC": [[8, "squlearn-encoding-circuit-chebpqc"]], "squlearn.encoding_circuit.ChebRx": [[9, "squlearn-encoding-circuit-chebrx"]], "squlearn.encoding_circuit.ChebyshevTower": [[10, "squlearn-encoding-circuit-chebyshevtower"]], "squlearn.encoding_circuit.EncodingCircuitDerivatives": [[11, "squlearn-encoding-circuit-encodingcircuitderivatives"]], "Strings that are recognized by the get_derivative() method": [[11, "id1"], [44, "id1"]], "squlearn.encoding_circuit.HZCRxCRyCRz": [[12, "squlearn-encoding-circuit-hzcrxcrycrz"]], "squlearn.encoding_circuit.HighDimEncodingCircuit": [[13, "squlearn-encoding-circuit-highdimencodingcircuit"]], "squlearn.encoding_circuit.LayeredEncodingCircuit": [[14, "squlearn-encoding-circuit-layeredencodingcircuit"]], "Single qubit gates and their string representation": [[14, "id1"]], "Two qubit gates and their string representation": [[14, "id2"]], "squlearn.encoding_circuit.ParamZEncodingCircuit": [[15, "squlearn-encoding-circuit-paramzencodingcircuit"]], "squlearn.encoding_circuit.PrunedEncodingCircuit": [[16, "squlearn-encoding-circuit-prunedencodingcircuit"]], "squlearn.encoding_circuit.QEKEncodingCircuit": [[17, "squlearn-encoding-circuit-qekencodingcircuit"]], "squlearn.encoding_circuit.QiskitEncodingCircuit": [[18, "squlearn-encoding-circuit-qiskitencodingcircuit"]], "squlearn.encoding_circuit.TranspiledEncodingCircuit": [[19, "squlearn-encoding-circuit-transpiledencodingcircuit"]], "squlearn.encoding_circuit.YZ_CX_EncodingCircuit": [[20, "squlearn-encoding-circuit-yz-cx-encodingcircuit"]], "squlearn.encoding_circuit.automated_pruning": [[21, "squlearn-encoding-circuit-automated-pruning"]], "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase": [[22, "squlearn-encoding-circuit-encoding-circuit-base-encodingcircuitbase"]], "squlearn.encoding_circuit.pruning_from_QFI": [[23, "squlearn-encoding-circuit-pruning-from-qfi"]], "squlearn.kernel.matrix.FidelityKernel": [[24, "squlearn-kernel-matrix-fidelitykernel"]], "squlearn.kernel.matrix.ProjectedQuantumKernel": [[25, "squlearn-kernel-matrix-projectedquantumkernel"]], "Outer Kernels are implemented as follows:": [[25, "outer-kernels-are-implemented-as-follows"]], "Gaussian:": [[25, "gaussian"]], "Matern:": [[25, "matern"]], "ExpSineSquared:": [[25, "expsinesquared"]], "RationalQuadratic:": [[25, "rationalquadratic"]], "DotProduct:": [[25, "dotproduct"]], "PairwiseKernel:": [[25, "pairwisekernel"]], "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase": [[26, "squlearn-kernel-matrix-kernel-matrix-base-kernelmatrixbase"]], "squlearn.kernel.ml.QGPC": [[27, "squlearn-kernel-ml-qgpc"]], "squlearn.kernel.ml.QGPR": [[28, "squlearn-kernel-ml-qgpr"]], "squlearn.kernel.ml.QKRR": [[29, "squlearn-kernel-ml-qkrr"]], "squlearn.kernel.ml.QSVC": [[30, "squlearn-kernel-ml-qsvc"]], "squlearn.kernel.ml.QSVR": [[31, "squlearn-kernel-ml-qsvr"]], "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase": [[32, "squlearn-kernel-optimization-kernel-loss-base-kernellossbase"]], "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase": [[33, "squlearn-kernel-optimization-kernel-optimization-base-kerneloptimizerbase"]], "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer": [[34, "squlearn-kernel-optimization-kernel-optimizer-kerneloptimizer"]], "squlearn.kernel.optimization.negative_log_likelihood.NLL": [[35, "squlearn-kernel-optimization-negative-log-likelihood-nll"]], "squlearn.kernel.optimization.target_alignment.TargetAlignment": [[36, "squlearn-kernel-optimization-target-alignment-targetalignment"]], "squlearn.observables.CustomObservable": [[37, "squlearn-observables-customobservable"]], "squlearn.observables.IsingHamiltonian": [[38, "squlearn-observables-isinghamiltonian"]], "squlearn.observables.SinglePauli": [[39, "squlearn-observables-singlepauli"]], "squlearn.observables.SingleProbability": [[40, "squlearn-observables-singleprobability"]], "squlearn.observables.SummedPaulis": [[41, "squlearn-observables-summedpaulis"]], "squlearn.observables.SummedProbabilities": [[42, "squlearn-observables-summedprobabilities"]], "squlearn.observables.observable_base.ObservableBase": [[43, "squlearn-observables-observable-base-observablebase"]], "squlearn.observables.observable_derivatives.ObservableDerivatives": [[44, "squlearn-observables-observable-derivatives-observablederivatives"]], "squlearn.optimizers.Adam": [[45, "squlearn-optimizers-adam"]], "squlearn.optimizers.LBFGSB": [[46, "squlearn-optimizers-lbfgsb"]], "squlearn.optimizers.SLSQP": [[47, "squlearn-optimizers-slsqp"]], "squlearn.optimizers.SPSA": [[48, "squlearn-optimizers-spsa"]], "squlearn.optimizers.optimizer_base.OptimizerBase": [[49, "squlearn-optimizers-optimizer-base-optimizerbase"]], "squlearn.qnn.QNNClassifier": [[50, "squlearn-qnn-qnnclassifier"]], "squlearn.qnn.QNNRegressor": [[51, "squlearn-qnn-qnnregressor"]], "squlearn.qnn.base_qnn.BaseQNN": [[52, "squlearn-qnn-base-qnn-baseqnn"]], "squlearn.qnn.loss.LossBase": [[53, "squlearn-qnn-loss-lossbase"]], "squlearn.qnn.loss.ParameterRegularizationLoss": [[54, "squlearn-qnn-loss-parameterregularizationloss"]], "squlearn.qnn.loss.SquaredLoss": [[55, "squlearn-qnn-loss-squaredloss"]], "squlearn.qnn.loss.VarianceLoss": [[56, "squlearn-qnn-loss-varianceloss"]], "squlearn.qnn.qnn.Expec": [[57, "squlearn-qnn-qnn-expec"]], "squlearn.qnn.qnn.QNN": [[58, "squlearn-qnn-qnn-qnn"]], "squlearn.util.OpTree": [[59, "squlearn-util-optree"]], "squlearn.util.optree.OpTreeCircuit": [[60, "squlearn-util-optree-optreecircuit"]], "squlearn.util.optree.OpTreeContainer": [[61, "squlearn-util-optree-optreecontainer"]], "squlearn.util.optree.OpTreeExpectationValue": [[62, "squlearn-util-optree-optreeexpectationvalue"]], "squlearn.util.optree.OpTreeList": [[63, "squlearn-util-optree-optreelist"]], "squlearn.util.optree.OpTreeMeasuredOperator": [[64, "squlearn-util-optree-optreemeasuredoperator"]], "squlearn.util.optree.OpTreeOperator": [[65, "squlearn-util-optree-optreeoperator"]], "squlearn.util.optree.OpTreeSum": [[66, "squlearn-util-optree-optreesum"]], "squlearn.util.optree.OpTreeValue": [[67, "squlearn-util-optree-optreevalue"]], "Quantum Encoding Circuits": [[68, "quantum-encoding-circuits"]], "Implemented Quantum Encoding Circuits": [[68, "implemented-quantum-encoding-circuits"]], "Combining Quantum Encoding Circuits": [[68, "combining-quantum-encoding-circuits"]], "Wrapping Qiskit Encoding Circuits": [[68, "wrapping-qiskit-encoding-circuits"]], "Create your custom Encoding Circuit via LayeredEncodingCircuit": [[68, "create-your-custom-encoding-circuit-via-layeredencodingcircuit"]], "Pruning of Quantum Encoding Circuits": [[68, "pruning-of-quantum-encoding-circuits"]], "Different Quantum Encoding Circuits via EncodingCircuitDerivatives": [[68, "different-quantum-encoding-circuits-via-encodingcircuitderivatives"]], "Transpile Quantum Encoding Circuits via TranspiledEncodingCircuit": [[68, "transpile-quantum-encoding-circuits-via-transpiledencodingcircuit"]], "The Executor Class": [[69, "the-executor-class"]], "Overview": [[69, "overview"]], "Key Features of the Executor": [[69, "key-features-of-the-executor"]], "Initialization of the Executor class": [[69, "initialization-of-the-executor-class"]], "Utilizing Executor Primitives in Qiskit Routines": [[69, "utilizing-executor-primitives-in-qiskit-routines"]], "Setting Options for Primitives": [[69, "setting-options-for-primitives"]], "High-Level methods that employ quantum kernels": [[70, "high-level-methods-that-employ-quantum-kernels"]], "Regression": [[70, "regression"]], "Methods to evaluate quantum kernels": [[70, "methods-to-evaluate-quantum-kernels"]], "Fidelity Quantum Kernel (FQK) via FidelityKernel": [[70, "fidelity-quantum-kernel-fqk-via-fidelitykernel"]], "Projected Quantum Kernel (PQK) via ProjectedQuantumKernel": [[70, "projected-quantum-kernel-pqk-via-projectedquantumkernel"]], "Training of quantum kernels": [[70, "training-of-quantum-kernels"]], "References": [[70, "references"]], "Observables for expectation values": [[71, "observables-for-expectation-values"]], "Implemented observables.": [[71, "implemented-observables"]], "Obtained derivatives of the observable": [[71, "obtained-derivatives-of-the-observable"]], "Quantum Neural Networks": [[72, "quantum-neural-networks"]], "High-level methods for QNNs": [[72, "high-level-methods-for-qnns"]], "Optimization": [[72, "optimization"]], "SLSQP": [[72, "slsqp"]], "Mini-Batch gradient descent with Adam": [[72, "mini-batch-gradient-descent-with-adam"]], "Variance reduction": [[72, "variance-reduction"]], "User Guide": [[73, "user-guide"]]}, "indexentries": {"module": [[6, "module-squlearn.encoding_circuit"], [6, "module-squlearn.kernel.matrix"], [6, "module-squlearn.kernel.optimization"], [6, "module-squlearn.observables"], [6, "module-squlearn.optimizers"], [6, "module-squlearn.qnn"]], "squlearn.encoding_circuit": [[6, "module-squlearn.encoding_circuit"]], "squlearn.kernel.matrix": [[6, "module-squlearn.kernel.matrix"]], "squlearn.kernel.optimization": [[6, "module-squlearn.kernel.optimization"]], "squlearn.observables": [[6, "module-squlearn.observables"]], "squlearn.optimizers": [[6, "module-squlearn.optimizers"]], "squlearn.qnn": [[6, "module-squlearn.qnn"]], "executor (class in squlearn)": [[7, "squlearn.Executor"]], "backend (squlearn.executor attribute)": [[7, "squlearn.Executor.backend"]], "backend_run() (squlearn.executor method)": [[7, "squlearn.Executor.backend_run"]], "clear_estimator_cache() (squlearn.executor method)": [[7, "squlearn.Executor.clear_estimator_cache"]], "clear_sampler_cache() (squlearn.executor method)": [[7, "squlearn.Executor.clear_sampler_cache"]], "close_session() (squlearn.executor method)": [[7, "squlearn.Executor.close_session"]], "create_session() (squlearn.executor method)": [[7, "squlearn.Executor.create_session"]], "estimator (squlearn.executor attribute)": [[7, "squlearn.Executor.estimator"]], "estimator_run() (squlearn.executor method)": [[7, "squlearn.Executor.estimator_run"]], "execution (squlearn.executor attribute)": [[7, "squlearn.Executor.execution"]], "get_estimator() (squlearn.executor method)": [[7, "squlearn.Executor.get_estimator"]], "get_sampler() (squlearn.executor method)": [[7, "squlearn.Executor.get_sampler"]], "get_shots() (squlearn.executor method)": [[7, "squlearn.Executor.get_shots"]], "optree_executor() (squlearn.executor method)": [[7, "squlearn.Executor.optree_executor"]], "reset_shots() (squlearn.executor method)": [[7, "squlearn.Executor.reset_shots"]], "sampler (squlearn.executor attribute)": [[7, "squlearn.Executor.sampler"]], "sampler_run() (squlearn.executor method)": [[7, "squlearn.Executor.sampler_run"]], "service (squlearn.executor attribute)": [[7, "squlearn.Executor.service"]], "session (squlearn.executor attribute)": [[7, "squlearn.Executor.session"]], "set_shots() (squlearn.executor method)": [[7, "squlearn.Executor.set_shots"]], "shots (squlearn.executor attribute)": [[7, "squlearn.Executor.shots"]], "chebpqc (class in squlearn.encoding_circuit)": [[8, "squlearn.encoding_circuit.ChebPQC"]], "draw() (squlearn.encoding_circuit.chebpqc method)": [[8, "squlearn.encoding_circuit.ChebPQC.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.chebpqc method)": [[8, "squlearn.encoding_circuit.ChebPQC.generate_initial_parameters"]], "get_cheb_indices() (squlearn.encoding_circuit.chebpqc method)": [[8, "squlearn.encoding_circuit.ChebPQC.get_cheb_indices"]], "get_circuit() (squlearn.encoding_circuit.chebpqc method)": [[8, "squlearn.encoding_circuit.ChebPQC.get_circuit"]], "get_params() (squlearn.encoding_circuit.chebpqc method)": [[8, "squlearn.encoding_circuit.ChebPQC.get_params"]], "set_params() (squlearn.encoding_circuit.chebpqc method)": [[8, "squlearn.encoding_circuit.ChebPQC.set_params"]], "chebrx (class in squlearn.encoding_circuit)": [[9, "squlearn.encoding_circuit.ChebRx"]], "draw() (squlearn.encoding_circuit.chebrx method)": [[9, "squlearn.encoding_circuit.ChebRx.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.chebrx method)": [[9, "squlearn.encoding_circuit.ChebRx.generate_initial_parameters"]], "get_cheb_indices() (squlearn.encoding_circuit.chebrx method)": [[9, "squlearn.encoding_circuit.ChebRx.get_cheb_indices"]], "get_circuit() (squlearn.encoding_circuit.chebrx method)": [[9, "squlearn.encoding_circuit.ChebRx.get_circuit"]], "get_params() (squlearn.encoding_circuit.chebrx method)": [[9, "squlearn.encoding_circuit.ChebRx.get_params"]], "set_params() (squlearn.encoding_circuit.chebrx method)": [[9, "squlearn.encoding_circuit.ChebRx.set_params"]], "chebyshevtower (class in squlearn.encoding_circuit)": [[10, "squlearn.encoding_circuit.ChebyshevTower"]], "draw() (squlearn.encoding_circuit.chebyshevtower method)": [[10, "squlearn.encoding_circuit.ChebyshevTower.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevtower method)": [[10, "squlearn.encoding_circuit.ChebyshevTower.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.chebyshevtower method)": [[10, "squlearn.encoding_circuit.ChebyshevTower.get_circuit"]], "get_params() (squlearn.encoding_circuit.chebyshevtower method)": [[10, "squlearn.encoding_circuit.ChebyshevTower.get_params"]], "set_params() (squlearn.encoding_circuit.chebyshevtower method)": [[10, "squlearn.encoding_circuit.ChebyshevTower.set_params"]], "encodingcircuitderivatives (class in squlearn.encoding_circuit)": [[11, "squlearn.encoding_circuit.EncodingCircuitDerivatives"]], "assign_parameters() (squlearn.encoding_circuit.encodingcircuitderivatives method)": [[11, "squlearn.encoding_circuit.EncodingCircuitDerivatives.assign_parameters"]], "get_derivative() (squlearn.encoding_circuit.encodingcircuitderivatives method)": [[11, "squlearn.encoding_circuit.EncodingCircuitDerivatives.get_derivative"]], "hzcrxcrycrz (class in squlearn.encoding_circuit)": [[12, "squlearn.encoding_circuit.HZCRxCRyCRz"]], "draw() (squlearn.encoding_circuit.hzcrxcrycrz method)": [[12, "squlearn.encoding_circuit.HZCRxCRyCRz.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.hzcrxcrycrz method)": [[12, "squlearn.encoding_circuit.HZCRxCRyCRz.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.hzcrxcrycrz method)": [[12, "squlearn.encoding_circuit.HZCRxCRyCRz.get_circuit"]], "get_params() (squlearn.encoding_circuit.hzcrxcrycrz method)": [[12, "squlearn.encoding_circuit.HZCRxCRyCRz.get_params"]], "set_params() (squlearn.encoding_circuit.hzcrxcrycrz method)": [[12, "squlearn.encoding_circuit.HZCRxCRyCRz.set_params"]], "highdimencodingcircuit (class in squlearn.encoding_circuit)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit"]], "draw() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.set_params"]], "h() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.H"]], "i() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.I"]], "layeredencodingcircuit (class in squlearn.encoding_circuit)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit"]], "p() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.P"]], "rx() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.Rx"]], "ry() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.Ry"]], "rz() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.Rz"]], "s() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.S"]], "s_conjugate() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.S_conjugate"]], "t() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.T"]], "t_conjugate() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.T_conjugate"]], "u() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.U"]], "x() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.X"]], "y() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.Y"]], "z() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.Z"]], "add_layer() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.add_layer"]], "ch_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.ch_entangling"]], "cp_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.cp_entangling"]], "crx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.crx_entangling"]], "cry_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.cry_entangling"]], "crz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.crz_entangling"]], "cu_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.cu_entangling"]], "cx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.cx_entangling"]], "cy_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.cy_entangling"]], "cz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.cz_entangling"]], "draw() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.draw"]], "from_string() (squlearn.encoding_circuit.layeredencodingcircuit class method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.from_string"]], "generate_initial_parameters() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.get_params"]], "rxx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.rxx_entangling"]], "ryy_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.ryy_entangling"]], "rzx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.rzx_entangling"]], "rzz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.rzz_entangling"]], "set_params() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.set_params"]], "swap() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[14, "squlearn.encoding_circuit.LayeredEncodingCircuit.swap"]], "paramzencodingcircuit (class in squlearn.encoding_circuit)": [[15, "squlearn.encoding_circuit.ParamZEncodingCircuit"]], "draw() (squlearn.encoding_circuit.paramzencodingcircuit method)": [[15, "squlearn.encoding_circuit.ParamZEncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.paramzencodingcircuit method)": [[15, "squlearn.encoding_circuit.ParamZEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.paramzencodingcircuit method)": [[15, "squlearn.encoding_circuit.ParamZEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.paramzencodingcircuit method)": [[15, "squlearn.encoding_circuit.ParamZEncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.paramzencodingcircuit method)": [[15, "squlearn.encoding_circuit.ParamZEncodingCircuit.set_params"]], "prunedencodingcircuit (class in squlearn.encoding_circuit)": [[16, "squlearn.encoding_circuit.PrunedEncodingCircuit"]], "draw() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[16, "squlearn.encoding_circuit.PrunedEncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[16, "squlearn.encoding_circuit.PrunedEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[16, "squlearn.encoding_circuit.PrunedEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[16, "squlearn.encoding_circuit.PrunedEncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[16, "squlearn.encoding_circuit.PrunedEncodingCircuit.set_params"]], "qekencodingcircuit (class in squlearn.encoding_circuit)": [[17, "squlearn.encoding_circuit.QEKEncodingCircuit"]], "draw() (squlearn.encoding_circuit.qekencodingcircuit method)": [[17, "squlearn.encoding_circuit.QEKEncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.qekencodingcircuit method)": [[17, "squlearn.encoding_circuit.QEKEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.qekencodingcircuit method)": [[17, "squlearn.encoding_circuit.QEKEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.qekencodingcircuit method)": [[17, "squlearn.encoding_circuit.QEKEncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.qekencodingcircuit method)": [[17, "squlearn.encoding_circuit.QEKEncodingCircuit.set_params"]], "qiskitencodingcircuit (class in squlearn.encoding_circuit)": [[18, "squlearn.encoding_circuit.QiskitEncodingCircuit"]], "draw() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[18, "squlearn.encoding_circuit.QiskitEncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[18, "squlearn.encoding_circuit.QiskitEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[18, "squlearn.encoding_circuit.QiskitEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[18, "squlearn.encoding_circuit.QiskitEncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[18, "squlearn.encoding_circuit.QiskitEncodingCircuit.set_params"]], "transpiledencodingcircuit (class in squlearn.encoding_circuit)": [[19, "squlearn.encoding_circuit.TranspiledEncodingCircuit"]], "draw() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[19, "squlearn.encoding_circuit.TranspiledEncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[19, "squlearn.encoding_circuit.TranspiledEncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[19, "squlearn.encoding_circuit.TranspiledEncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[19, "squlearn.encoding_circuit.TranspiledEncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[19, "squlearn.encoding_circuit.TranspiledEncodingCircuit.set_params"]], "yz_cx_encodingcircuit (class in squlearn.encoding_circuit)": [[20, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit"]], "draw() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[20, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[20, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[20, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.get_circuit"]], "get_params() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[20, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.get_params"]], "set_params() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[20, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.set_params"]], "automated_pruning() (in module squlearn.encoding_circuit)": [[21, "squlearn.encoding_circuit.automated_pruning"]], "encodingcircuitbase (class in squlearn.encoding_circuit.encoding_circuit_base)": [[22, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase"]], "draw() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[22, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.draw"]], "generate_initial_parameters() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[22, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.generate_initial_parameters"]], "get_circuit() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[22, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.get_circuit"]], "get_params() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[22, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.get_params"]], "set_params() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[22, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.set_params"]], "pruning_from_qfi() (in module squlearn.encoding_circuit)": [[23, "squlearn.encoding_circuit.pruning_from_QFI"]], "fidelitykernel (class in squlearn.kernel.matrix)": [[24, "squlearn.kernel.matrix.FidelityKernel"]], "assign_parameters() (squlearn.kernel.matrix.fidelitykernel method)": [[24, "squlearn.kernel.matrix.FidelityKernel.assign_parameters"]], "evaluate() (squlearn.kernel.matrix.fidelitykernel method)": [[24, "squlearn.kernel.matrix.FidelityKernel.evaluate"]], "evaluate_pairwise() (squlearn.kernel.matrix.fidelitykernel method)": [[24, "squlearn.kernel.matrix.FidelityKernel.evaluate_pairwise"]], "evaluate_with_parameters() (squlearn.kernel.matrix.fidelitykernel method)": [[24, "squlearn.kernel.matrix.FidelityKernel.evaluate_with_parameters"]], "get_params() (squlearn.kernel.matrix.fidelitykernel method)": [[24, "squlearn.kernel.matrix.FidelityKernel.get_params"]], "set_params() (squlearn.kernel.matrix.fidelitykernel method)": [[24, "squlearn.kernel.matrix.FidelityKernel.set_params"]], "projectedquantumkernel (class in squlearn.kernel.matrix)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel"]], "assign_parameters() (squlearn.kernel.matrix.projectedquantumkernel method)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.assign_parameters"]], "encoding_circuit (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.encoding_circuit"]], "evaluate() (squlearn.kernel.matrix.projectedquantumkernel method)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate"]], "evaluate_pairwise() (squlearn.kernel.matrix.projectedquantumkernel method)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_pairwise"]], "evaluate_qnn() (squlearn.kernel.matrix.projectedquantumkernel method)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_qnn"]], "evaluate_with_parameters() (squlearn.kernel.matrix.projectedquantumkernel method)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_with_parameters"]], "get_params() (squlearn.kernel.matrix.projectedquantumkernel method)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.get_params"]], "measurement (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.measurement"]], "name_hyper_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.name_hyper_parameters"]], "num_features (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_features"]], "num_hyper_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_hyper_parameters"]], "num_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_parameters"]], "num_qubits (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_qubits"]], "outer_kernel (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.outer_kernel"]], "parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.parameters"]], "set_params() (squlearn.kernel.matrix.projectedquantumkernel method)": [[25, "squlearn.kernel.matrix.ProjectedQuantumKernel.set_params"]], "kernelmatrixbase (class in squlearn.kernel.matrix.kernel_matrix_base)": [[26, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase"]], "assign_parameters() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[26, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.assign_parameters"]], "evaluate() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[26, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate"]], "evaluate_pairwise() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[26, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate_pairwise"]], "evaluate_with_parameters() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[26, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate_with_parameters"]], "get_params() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[26, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.get_params"]], "set_params() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[26, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.set_params"]], "qgpc (class in squlearn.kernel.ml)": [[27, "squlearn.kernel.ml.QGPC"]], "fit() (squlearn.kernel.ml.qgpc method)": [[27, "squlearn.kernel.ml.QGPC.fit"]], "get_metadata_routing() (squlearn.kernel.ml.qgpc method)": [[27, "squlearn.kernel.ml.QGPC.get_metadata_routing"]], "get_params() (squlearn.kernel.ml.qgpc method)": [[27, "squlearn.kernel.ml.QGPC.get_params"]], "log_marginal_likelihood() (squlearn.kernel.ml.qgpc method)": [[27, "squlearn.kernel.ml.QGPC.log_marginal_likelihood"]], "predict() (squlearn.kernel.ml.qgpc method)": [[27, "squlearn.kernel.ml.QGPC.predict"]], "predict_proba() (squlearn.kernel.ml.qgpc method)": [[27, "squlearn.kernel.ml.QGPC.predict_proba"]], "score() (squlearn.kernel.ml.qgpc method)": [[27, "squlearn.kernel.ml.QGPC.score"]], "set_params() (squlearn.kernel.ml.qgpc method)": [[27, "squlearn.kernel.ml.QGPC.set_params"]], "set_score_request() (squlearn.kernel.ml.qgpc method)": [[27, "squlearn.kernel.ml.QGPC.set_score_request"]], "qgpr (class in squlearn.kernel.ml)": [[28, "squlearn.kernel.ml.QGPR"]], "calculate_cov_and_mean() (squlearn.kernel.ml.qgpr method)": [[28, "squlearn.kernel.ml.QGPR.calculate_cov_and_mean"]], "fit() (squlearn.kernel.ml.qgpr method)": [[28, "squlearn.kernel.ml.QGPR.fit"]], "get_metadata_routing() (squlearn.kernel.ml.qgpr method)": [[28, "squlearn.kernel.ml.QGPR.get_metadata_routing"]], "get_params() (squlearn.kernel.ml.qgpr method)": [[28, "squlearn.kernel.ml.QGPR.get_params"]], "predict() (squlearn.kernel.ml.qgpr method)": [[28, "squlearn.kernel.ml.QGPR.predict"]], "score() (squlearn.kernel.ml.qgpr method)": [[28, "squlearn.kernel.ml.QGPR.score"]], "set_fit_request() (squlearn.kernel.ml.qgpr method)": [[28, "squlearn.kernel.ml.QGPR.set_fit_request"]], "set_params() (squlearn.kernel.ml.qgpr method)": [[28, "squlearn.kernel.ml.QGPR.set_params"]], "set_predict_request() (squlearn.kernel.ml.qgpr method)": [[28, "squlearn.kernel.ml.QGPR.set_predict_request"]], "set_score_request() (squlearn.kernel.ml.qgpr method)": [[28, "squlearn.kernel.ml.QGPR.set_score_request"]], "qkrr (class in squlearn.kernel.ml)": [[29, "squlearn.kernel.ml.QKRR"]], "fit() (squlearn.kernel.ml.qkrr method)": [[29, "squlearn.kernel.ml.QKRR.fit"]], "get_metadata_routing() (squlearn.kernel.ml.qkrr method)": [[29, "squlearn.kernel.ml.QKRR.get_metadata_routing"]], "get_params() (squlearn.kernel.ml.qkrr method)": [[29, "squlearn.kernel.ml.QKRR.get_params"]], "predict() (squlearn.kernel.ml.qkrr method)": [[29, "squlearn.kernel.ml.QKRR.predict"]], "score() (squlearn.kernel.ml.qkrr method)": [[29, "squlearn.kernel.ml.QKRR.score"]], "set_fit_request() (squlearn.kernel.ml.qkrr method)": [[29, "squlearn.kernel.ml.QKRR.set_fit_request"]], "set_params() (squlearn.kernel.ml.qkrr method)": [[29, "squlearn.kernel.ml.QKRR.set_params"]], "set_predict_request() (squlearn.kernel.ml.qkrr method)": [[29, "squlearn.kernel.ml.QKRR.set_predict_request"]], "set_score_request() (squlearn.kernel.ml.qkrr method)": [[29, "squlearn.kernel.ml.QKRR.set_score_request"]], "qsvc (class in squlearn.kernel.ml)": [[30, "squlearn.kernel.ml.QSVC"]], "decision_function() (squlearn.kernel.ml.qsvc method)": [[30, "squlearn.kernel.ml.QSVC.decision_function"]], "fit() (squlearn.kernel.ml.qsvc method)": [[30, "squlearn.kernel.ml.QSVC.fit"]], "get_metadata_routing() (squlearn.kernel.ml.qsvc method)": [[30, "squlearn.kernel.ml.QSVC.get_metadata_routing"]], "get_params() (squlearn.kernel.ml.qsvc method)": [[30, "squlearn.kernel.ml.QSVC.get_params"]], "predict() (squlearn.kernel.ml.qsvc method)": [[30, "squlearn.kernel.ml.QSVC.predict"]], "predict_log_proba() (squlearn.kernel.ml.qsvc method)": [[30, "squlearn.kernel.ml.QSVC.predict_log_proba"]], "predict_proba() (squlearn.kernel.ml.qsvc method)": [[30, "squlearn.kernel.ml.QSVC.predict_proba"]], "score() (squlearn.kernel.ml.qsvc method)": [[30, "squlearn.kernel.ml.QSVC.score"]], "set_fit_request() (squlearn.kernel.ml.qsvc method)": [[30, "squlearn.kernel.ml.QSVC.set_fit_request"]], "set_params() (squlearn.kernel.ml.qsvc method)": [[30, "squlearn.kernel.ml.QSVC.set_params"]], "set_score_request() (squlearn.kernel.ml.qsvc method)": [[30, "squlearn.kernel.ml.QSVC.set_score_request"]], "qsvr (class in squlearn.kernel.ml)": [[31, "squlearn.kernel.ml.QSVR"]], "fit() (squlearn.kernel.ml.qsvr method)": [[31, "squlearn.kernel.ml.QSVR.fit"]], "get_metadata_routing() (squlearn.kernel.ml.qsvr method)": [[31, "squlearn.kernel.ml.QSVR.get_metadata_routing"]], "get_params() (squlearn.kernel.ml.qsvr method)": [[31, "squlearn.kernel.ml.QSVR.get_params"]], "predict() (squlearn.kernel.ml.qsvr method)": [[31, "squlearn.kernel.ml.QSVR.predict"]], "score() (squlearn.kernel.ml.qsvr method)": [[31, "squlearn.kernel.ml.QSVR.score"]], "set_fit_request() (squlearn.kernel.ml.qsvr method)": [[31, "squlearn.kernel.ml.QSVR.set_fit_request"]], "set_params() (squlearn.kernel.ml.qsvr method)": [[31, "squlearn.kernel.ml.QSVR.set_params"]], "set_score_request() (squlearn.kernel.ml.qsvr method)": [[31, "squlearn.kernel.ml.QSVR.set_score_request"]], "kernellossbase (class in squlearn.kernel.optimization.kernel_loss_base)": [[32, "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase"]], "compute() (squlearn.kernel.optimization.kernel_loss_base.kernellossbase method)": [[32, "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase.compute"]], "kerneloptimizerbase (class in squlearn.kernel.optimization.kernel_optimization_base)": [[33, "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase"]], "run_optimization() (squlearn.kernel.optimization.kernel_optimization_base.kerneloptimizerbase method)": [[33, "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase.run_optimization"]], "kerneloptimizer (class in squlearn.kernel.optimization.kernel_optimizer)": [[34, "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer"]], "run_optimization() (squlearn.kernel.optimization.kernel_optimizer.kerneloptimizer method)": [[34, "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer.run_optimization"]], "nll (class in squlearn.kernel.optimization.negative_log_likelihood)": [[35, "squlearn.kernel.optimization.negative_log_likelihood.NLL"]], "compute() (squlearn.kernel.optimization.negative_log_likelihood.nll method)": [[35, "squlearn.kernel.optimization.negative_log_likelihood.NLL.compute"]], "targetalignment (class in squlearn.kernel.optimization.target_alignment)": [[36, "squlearn.kernel.optimization.target_alignment.TargetAlignment"]], "compute() (squlearn.kernel.optimization.target_alignment.targetalignment method)": [[36, "squlearn.kernel.optimization.target_alignment.TargetAlignment.compute"]], "customobservable (class in squlearn.observables)": [[37, "squlearn.observables.CustomObservable"]], "generate_initial_parameters() (squlearn.observables.customobservable method)": [[37, "squlearn.observables.CustomObservable.generate_initial_parameters"]], "get_operator() (squlearn.observables.customobservable method)": [[37, "squlearn.observables.CustomObservable.get_operator"]], "get_params() (squlearn.observables.customobservable method)": [[37, "squlearn.observables.CustomObservable.get_params"]], "get_pauli() (squlearn.observables.customobservable method)": [[37, "squlearn.observables.CustomObservable.get_pauli"]], "get_pauli_mapped() (squlearn.observables.customobservable method)": [[37, "squlearn.observables.CustomObservable.get_pauli_mapped"]], "num_parameters (squlearn.observables.customobservable attribute)": [[37, "squlearn.observables.CustomObservable.num_parameters"]], "num_qubits (squlearn.observables.customobservable attribute)": [[37, "squlearn.observables.CustomObservable.num_qubits"]], "operator_string (squlearn.observables.customobservable attribute)": [[37, "squlearn.observables.CustomObservable.operator_string"]], "parameterized (squlearn.observables.customobservable attribute)": [[37, "squlearn.observables.CustomObservable.parameterized"]], "set_map() (squlearn.observables.customobservable method)": [[37, "squlearn.observables.CustomObservable.set_map"]], "set_params() (squlearn.observables.customobservable method)": [[37, "squlearn.observables.CustomObservable.set_params"]], "i (squlearn.observables.isinghamiltonian attribute)": [[38, "squlearn.observables.IsingHamiltonian.I"]], "isinghamiltonian (class in squlearn.observables)": [[38, "squlearn.observables.IsingHamiltonian"]], "x (squlearn.observables.isinghamiltonian attribute)": [[38, "squlearn.observables.IsingHamiltonian.X"]], "z (squlearn.observables.isinghamiltonian attribute)": [[38, "squlearn.observables.IsingHamiltonian.Z"]], "zz (squlearn.observables.isinghamiltonian attribute)": [[38, "squlearn.observables.IsingHamiltonian.ZZ"]], "generate_initial_parameters() (squlearn.observables.isinghamiltonian method)": [[38, "squlearn.observables.IsingHamiltonian.generate_initial_parameters"]], "get_operator() (squlearn.observables.isinghamiltonian method)": [[38, "squlearn.observables.IsingHamiltonian.get_operator"]], "get_params() (squlearn.observables.isinghamiltonian method)": [[38, "squlearn.observables.IsingHamiltonian.get_params"]], "get_pauli() (squlearn.observables.isinghamiltonian method)": [[38, "squlearn.observables.IsingHamiltonian.get_pauli"]], "get_pauli_mapped() (squlearn.observables.isinghamiltonian method)": [[38, "squlearn.observables.IsingHamiltonian.get_pauli_mapped"]], "num_parameters (squlearn.observables.isinghamiltonian attribute)": [[38, "squlearn.observables.IsingHamiltonian.num_parameters"]], "num_qubits (squlearn.observables.isinghamiltonian attribute)": [[38, "squlearn.observables.IsingHamiltonian.num_qubits"]], "set_map() (squlearn.observables.isinghamiltonian method)": [[38, "squlearn.observables.IsingHamiltonian.set_map"]], "set_params() (squlearn.observables.isinghamiltonian method)": [[38, "squlearn.observables.IsingHamiltonian.set_params"]], "singlepauli (class in squlearn.observables)": [[39, "squlearn.observables.SinglePauli"]], "generate_initial_parameters() (squlearn.observables.singlepauli method)": [[39, "squlearn.observables.SinglePauli.generate_initial_parameters"]], "get_operator() (squlearn.observables.singlepauli method)": [[39, "squlearn.observables.SinglePauli.get_operator"]], "get_params() (squlearn.observables.singlepauli method)": [[39, "squlearn.observables.SinglePauli.get_params"]], "get_pauli() (squlearn.observables.singlepauli method)": [[39, "squlearn.observables.SinglePauli.get_pauli"]], "get_pauli_mapped() (squlearn.observables.singlepauli method)": [[39, "squlearn.observables.SinglePauli.get_pauli_mapped"]], "num_parameters (squlearn.observables.singlepauli attribute)": [[39, "squlearn.observables.SinglePauli.num_parameters"]], "num_qubits (squlearn.observables.singlepauli attribute)": [[39, "squlearn.observables.SinglePauli.num_qubits"]], "op_str (squlearn.observables.singlepauli attribute)": [[39, "squlearn.observables.SinglePauli.op_str"]], "parameterized (squlearn.observables.singlepauli attribute)": [[39, "squlearn.observables.SinglePauli.parameterized"]], "qubit (squlearn.observables.singlepauli attribute)": [[39, "squlearn.observables.SinglePauli.qubit"]], "set_map() (squlearn.observables.singlepauli method)": [[39, "squlearn.observables.SinglePauli.set_map"]], "set_params() (squlearn.observables.singlepauli method)": [[39, "squlearn.observables.SinglePauli.set_params"]], "singleprobability (class in squlearn.observables)": [[40, "squlearn.observables.SingleProbability"]], "generate_initial_parameters() (squlearn.observables.singleprobability method)": [[40, "squlearn.observables.SingleProbability.generate_initial_parameters"]], "get_operator() (squlearn.observables.singleprobability method)": [[40, "squlearn.observables.SingleProbability.get_operator"]], "get_params() (squlearn.observables.singleprobability method)": [[40, "squlearn.observables.SingleProbability.get_params"]], "get_pauli() (squlearn.observables.singleprobability method)": [[40, "squlearn.observables.SingleProbability.get_pauli"]], "get_pauli_mapped() (squlearn.observables.singleprobability method)": [[40, "squlearn.observables.SingleProbability.get_pauli_mapped"]], "num_parameters (squlearn.observables.singleprobability attribute)": [[40, "squlearn.observables.SingleProbability.num_parameters"]], "num_qubits (squlearn.observables.singleprobability attribute)": [[40, "squlearn.observables.SingleProbability.num_qubits"]], "one_state (squlearn.observables.singleprobability attribute)": [[40, "squlearn.observables.SingleProbability.one_state"]], "parameterized (squlearn.observables.singleprobability attribute)": [[40, "squlearn.observables.SingleProbability.parameterized"]], "qubit (squlearn.observables.singleprobability attribute)": [[40, "squlearn.observables.SingleProbability.qubit"]], "set_map() (squlearn.observables.singleprobability method)": [[40, "squlearn.observables.SingleProbability.set_map"]], "set_params() (squlearn.observables.singleprobability method)": [[40, "squlearn.observables.SingleProbability.set_params"]], "summedpaulis (class in squlearn.observables)": [[41, "squlearn.observables.SummedPaulis"]], "full_sum (squlearn.observables.summedpaulis attribute)": [[41, "squlearn.observables.SummedPaulis.full_sum"]], "generate_initial_parameters() (squlearn.observables.summedpaulis method)": [[41, "squlearn.observables.SummedPaulis.generate_initial_parameters"]], "get_operator() (squlearn.observables.summedpaulis method)": [[41, "squlearn.observables.SummedPaulis.get_operator"]], "get_params() (squlearn.observables.summedpaulis method)": [[41, "squlearn.observables.SummedPaulis.get_params"]], "get_pauli() (squlearn.observables.summedpaulis method)": [[41, "squlearn.observables.SummedPaulis.get_pauli"]], "get_pauli_mapped() (squlearn.observables.summedpaulis method)": [[41, "squlearn.observables.SummedPaulis.get_pauli_mapped"]], "include_identity (squlearn.observables.summedpaulis attribute)": [[41, "squlearn.observables.SummedPaulis.include_identity"]], "num_parameters (squlearn.observables.summedpaulis attribute)": [[41, "squlearn.observables.SummedPaulis.num_parameters"]], "num_qubits (squlearn.observables.summedpaulis attribute)": [[41, "squlearn.observables.SummedPaulis.num_qubits"]], "op_str (squlearn.observables.summedpaulis attribute)": [[41, "squlearn.observables.SummedPaulis.op_str"]], "set_map() (squlearn.observables.summedpaulis method)": [[41, "squlearn.observables.SummedPaulis.set_map"]], "set_params() (squlearn.observables.summedpaulis method)": [[41, "squlearn.observables.SummedPaulis.set_params"]], "summedprobabilities (class in squlearn.observables)": [[42, "squlearn.observables.SummedProbabilities"]], "full_sum (squlearn.observables.summedprobabilities attribute)": [[42, "squlearn.observables.SummedProbabilities.full_sum"]], "generate_initial_parameters() (squlearn.observables.summedprobabilities method)": [[42, "squlearn.observables.SummedProbabilities.generate_initial_parameters"]], "get_operator() (squlearn.observables.summedprobabilities method)": [[42, "squlearn.observables.SummedProbabilities.get_operator"]], "get_params() (squlearn.observables.summedprobabilities method)": [[42, "squlearn.observables.SummedProbabilities.get_params"]], "get_pauli() (squlearn.observables.summedprobabilities method)": [[42, "squlearn.observables.SummedProbabilities.get_pauli"]], "get_pauli_mapped() (squlearn.observables.summedprobabilities method)": [[42, "squlearn.observables.SummedProbabilities.get_pauli_mapped"]], "include_identity (squlearn.observables.summedprobabilities attribute)": [[42, "squlearn.observables.SummedProbabilities.include_identity"]], "num_parameters (squlearn.observables.summedprobabilities attribute)": [[42, "squlearn.observables.SummedProbabilities.num_parameters"]], "num_qubits (squlearn.observables.summedprobabilities attribute)": [[42, "squlearn.observables.SummedProbabilities.num_qubits"]], "one_state (squlearn.observables.summedprobabilities attribute)": [[42, "squlearn.observables.SummedProbabilities.one_state"]], "set_map() (squlearn.observables.summedprobabilities method)": [[42, "squlearn.observables.SummedProbabilities.set_map"]], "set_params() (squlearn.observables.summedprobabilities method)": [[42, "squlearn.observables.SummedProbabilities.set_params"]], "observablebase (class in squlearn.observables.observable_base)": [[43, "squlearn.observables.observable_base.ObservableBase"]], "generate_initial_parameters() (squlearn.observables.observable_base.observablebase method)": [[43, "squlearn.observables.observable_base.ObservableBase.generate_initial_parameters"]], "get_operator() (squlearn.observables.observable_base.observablebase method)": [[43, "squlearn.observables.observable_base.ObservableBase.get_operator"]], "get_params() (squlearn.observables.observable_base.observablebase method)": [[43, "squlearn.observables.observable_base.ObservableBase.get_params"]], "get_pauli() (squlearn.observables.observable_base.observablebase method)": [[43, "squlearn.observables.observable_base.ObservableBase.get_pauli"]], "get_pauli_mapped() (squlearn.observables.observable_base.observablebase method)": [[43, "squlearn.observables.observable_base.ObservableBase.get_pauli_mapped"]], "num_parameters (squlearn.observables.observable_base.observablebase attribute)": [[43, "squlearn.observables.observable_base.ObservableBase.num_parameters"]], "num_qubits (squlearn.observables.observable_base.observablebase attribute)": [[43, "squlearn.observables.observable_base.ObservableBase.num_qubits"]], "set_map() (squlearn.observables.observable_base.observablebase method)": [[43, "squlearn.observables.observable_base.ObservableBase.set_map"]], "set_params() (squlearn.observables.observable_base.observablebase method)": [[43, "squlearn.observables.observable_base.ObservableBase.set_params"]], "observablederivatives (class in squlearn.observables.observable_derivatives)": [[44, "squlearn.observables.observable_derivatives.ObservableDerivatives"]], "assign_parameters() (squlearn.observables.observable_derivatives.observablederivatives method)": [[44, "squlearn.observables.observable_derivatives.ObservableDerivatives.assign_parameters"]], "get_derivative() (squlearn.observables.observable_derivatives.observablederivatives method)": [[44, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_derivative"]], "get_operator_squared() (squlearn.observables.observable_derivatives.observablederivatives method)": [[44, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_operator_squared"]], "num_operators (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[44, "squlearn.observables.observable_derivatives.ObservableDerivatives.num_operators"]], "num_parameters (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[44, "squlearn.observables.observable_derivatives.ObservableDerivatives.num_parameters"]], "parameter_vector (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[44, "squlearn.observables.observable_derivatives.ObservableDerivatives.parameter_vector"]], "adam (class in squlearn.optimizers)": [[45, "squlearn.optimizers.Adam"]], "minimize() (squlearn.optimizers.adam method)": [[45, "squlearn.optimizers.Adam.minimize"]], "reset() (squlearn.optimizers.adam method)": [[45, "squlearn.optimizers.Adam.reset"]], "set_callback() (squlearn.optimizers.adam method)": [[45, "squlearn.optimizers.Adam.set_callback"]], "step() (squlearn.optimizers.adam method)": [[45, "squlearn.optimizers.Adam.step"]], "lbfgsb (class in squlearn.optimizers)": [[46, "squlearn.optimizers.LBFGSB"]], "minimize() (squlearn.optimizers.lbfgsb method)": [[46, "squlearn.optimizers.LBFGSB.minimize"]], "set_callback() (squlearn.optimizers.lbfgsb method)": [[46, "squlearn.optimizers.LBFGSB.set_callback"]], "slsqp (class in squlearn.optimizers)": [[47, "squlearn.optimizers.SLSQP"]], "minimize() (squlearn.optimizers.slsqp method)": [[47, "squlearn.optimizers.SLSQP.minimize"]], "set_callback() (squlearn.optimizers.slsqp method)": [[47, "squlearn.optimizers.SLSQP.set_callback"]], "spsa (class in squlearn.optimizers)": [[48, "squlearn.optimizers.SPSA"]], "minimize() (squlearn.optimizers.spsa method)": [[48, "squlearn.optimizers.SPSA.minimize"]], "set_callback() (squlearn.optimizers.spsa method)": [[48, "squlearn.optimizers.SPSA.set_callback"]], "optimizerbase (class in squlearn.optimizers.optimizer_base)": [[49, "squlearn.optimizers.optimizer_base.OptimizerBase"]], "minimize() (squlearn.optimizers.optimizer_base.optimizerbase method)": [[49, "squlearn.optimizers.optimizer_base.OptimizerBase.minimize"]], "set_callback() (squlearn.optimizers.optimizer_base.optimizerbase method)": [[49, "squlearn.optimizers.optimizer_base.OptimizerBase.set_callback"]], "qnnclassifier (class in squlearn.qnn)": [[50, "squlearn.qnn.QNNClassifier"]], "fit() (squlearn.qnn.qnnclassifier method)": [[50, "squlearn.qnn.QNNClassifier.fit"]], "get_metadata_routing() (squlearn.qnn.qnnclassifier method)": [[50, "squlearn.qnn.QNNClassifier.get_metadata_routing"]], "get_params() (squlearn.qnn.qnnclassifier method)": [[50, "squlearn.qnn.QNNClassifier.get_params"]], "partial_fit() (squlearn.qnn.qnnclassifier method)": [[50, "squlearn.qnn.QNNClassifier.partial_fit"]], "predict() (squlearn.qnn.qnnclassifier method)": [[50, "squlearn.qnn.QNNClassifier.predict"]], "predict_proba() (squlearn.qnn.qnnclassifier method)": [[50, "squlearn.qnn.QNNClassifier.predict_proba"]], "score() (squlearn.qnn.qnnclassifier method)": [[50, "squlearn.qnn.QNNClassifier.score"]], "set_fit_request() (squlearn.qnn.qnnclassifier method)": [[50, "squlearn.qnn.QNNClassifier.set_fit_request"]], "set_params() (squlearn.qnn.qnnclassifier method)": [[50, "squlearn.qnn.QNNClassifier.set_params"]], "set_partial_fit_request() (squlearn.qnn.qnnclassifier method)": [[50, "squlearn.qnn.QNNClassifier.set_partial_fit_request"]], "set_score_request() (squlearn.qnn.qnnclassifier method)": [[50, "squlearn.qnn.QNNClassifier.set_score_request"]], "qnnregressor (class in squlearn.qnn)": [[51, "squlearn.qnn.QNNRegressor"]], "fit() (squlearn.qnn.qnnregressor method)": [[51, "squlearn.qnn.QNNRegressor.fit"]], "get_metadata_routing() (squlearn.qnn.qnnregressor method)": [[51, "squlearn.qnn.QNNRegressor.get_metadata_routing"]], "get_params() (squlearn.qnn.qnnregressor method)": [[51, "squlearn.qnn.QNNRegressor.get_params"]], "partial_fit() (squlearn.qnn.qnnregressor method)": [[51, "squlearn.qnn.QNNRegressor.partial_fit"]], "predict() (squlearn.qnn.qnnregressor method)": [[51, "squlearn.qnn.QNNRegressor.predict"]], "score() (squlearn.qnn.qnnregressor method)": [[51, "squlearn.qnn.QNNRegressor.score"]], "set_fit_request() (squlearn.qnn.qnnregressor method)": [[51, "squlearn.qnn.QNNRegressor.set_fit_request"]], "set_params() (squlearn.qnn.qnnregressor method)": [[51, "squlearn.qnn.QNNRegressor.set_params"]], "set_partial_fit_request() (squlearn.qnn.qnnregressor method)": [[51, "squlearn.qnn.QNNRegressor.set_partial_fit_request"]], "set_score_request() (squlearn.qnn.qnnregressor method)": [[51, "squlearn.qnn.QNNRegressor.set_score_request"]], "baseqnn (class in squlearn.qnn.base_qnn)": [[52, "squlearn.qnn.base_qnn.BaseQNN"]], "fit() (squlearn.qnn.base_qnn.baseqnn method)": [[52, "squlearn.qnn.base_qnn.BaseQNN.fit"]], "get_metadata_routing() (squlearn.qnn.base_qnn.baseqnn method)": [[52, "squlearn.qnn.base_qnn.BaseQNN.get_metadata_routing"]], "get_params() (squlearn.qnn.base_qnn.baseqnn method)": [[52, "squlearn.qnn.base_qnn.BaseQNN.get_params"]], "set_fit_request() (squlearn.qnn.base_qnn.baseqnn method)": [[52, "squlearn.qnn.base_qnn.BaseQNN.set_fit_request"]], "set_params() (squlearn.qnn.base_qnn.baseqnn method)": [[52, "squlearn.qnn.base_qnn.BaseQNN.set_params"]], "lossbase (class in squlearn.qnn.loss)": [[53, "squlearn.qnn.loss.LossBase"]], "gradient() (squlearn.qnn.loss.lossbase method)": [[53, "squlearn.qnn.loss.LossBase.gradient"]], "set_opt_param_op() (squlearn.qnn.loss.lossbase method)": [[53, "squlearn.qnn.loss.LossBase.set_opt_param_op"]], "value() (squlearn.qnn.loss.lossbase method)": [[53, "squlearn.qnn.loss.LossBase.value"]], "parameterregularizationloss (class in squlearn.qnn.loss)": [[54, "squlearn.qnn.loss.ParameterRegularizationLoss"]], "gradient() (squlearn.qnn.loss.parameterregularizationloss method)": [[54, "squlearn.qnn.loss.ParameterRegularizationLoss.gradient"]], "set_opt_param_op() (squlearn.qnn.loss.parameterregularizationloss method)": [[54, "squlearn.qnn.loss.ParameterRegularizationLoss.set_opt_param_op"]], "value() (squlearn.qnn.loss.parameterregularizationloss method)": [[54, "squlearn.qnn.loss.ParameterRegularizationLoss.value"]], "squaredloss (class in squlearn.qnn.loss)": [[55, "squlearn.qnn.loss.SquaredLoss"]], "gradient() (squlearn.qnn.loss.squaredloss method)": [[55, "squlearn.qnn.loss.SquaredLoss.gradient"]], "set_opt_param_op() (squlearn.qnn.loss.squaredloss method)": [[55, "squlearn.qnn.loss.SquaredLoss.set_opt_param_op"]], "value() (squlearn.qnn.loss.squaredloss method)": [[55, "squlearn.qnn.loss.SquaredLoss.value"]], "varianceloss (class in squlearn.qnn.loss)": [[56, "squlearn.qnn.loss.VarianceLoss"]], "gradient() (squlearn.qnn.loss.varianceloss method)": [[56, "squlearn.qnn.loss.VarianceLoss.gradient"]], "set_opt_param_op() (squlearn.qnn.loss.varianceloss method)": [[56, "squlearn.qnn.loss.VarianceLoss.set_opt_param_op"]], "value() (squlearn.qnn.loss.varianceloss method)": [[56, "squlearn.qnn.loss.VarianceLoss.value"]], "expec (class in squlearn.qnn.qnn)": [[57, "squlearn.qnn.qnn.Expec"]], "from_parameter() (squlearn.qnn.qnn.expec class method)": [[57, "squlearn.qnn.qnn.Expec.from_parameter"]], "from_string() (squlearn.qnn.qnn.expec class method)": [[57, "squlearn.qnn.qnn.Expec.from_string"]], "from_tuple() (squlearn.qnn.qnn.expec class method)": [[57, "squlearn.qnn.qnn.Expec.from_tuple"]], "from_variable() (squlearn.qnn.qnn.expec class method)": [[57, "squlearn.qnn.qnn.Expec.from_variable"]], "qnn (class in squlearn.qnn.qnn)": [[58, "squlearn.qnn.qnn.QNN"]], "evaluate() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate"]], "evaluate_dfdop() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_dfdop"]], "evaluate_dfdopdx() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_dfdopdx"]], "evaluate_dfdp() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_dfdp"]], "evaluate_dfdpdx() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_dfdpdx"]], "evaluate_dfdx() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_dfdx"]], "evaluate_dfdxdx() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_dfdxdx"]], "evaluate_diff_tuple() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_diff_tuple"]], "evaluate_f() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_f"]], "evaluate_from_string() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_from_string"]], "evaluate_laplace() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_laplace"]], "evaluate_laplace_dop() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_laplace_dop"]], "evaluate_laplace_dp() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_laplace_dp"]], "evaluate_probabilities() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_probabilities"]], "evaluate_var() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_var"]], "evaluate_variance() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.evaluate_variance"]], "get_optree_from_expec() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.get_optree_from_expec"]], "get_optree_from_string() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.get_optree_from_string"]], "get_params() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.get_params"]], "get_shots() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.get_shots"]], "reset_shots() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.reset_shots"]], "set_params() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.set_params"]], "set_shots() (squlearn.qnn.qnn.qnn method)": [[58, "squlearn.qnn.qnn.QNN.set_shots"]], "optree (class in squlearn.util)": [[59, "squlearn.util.OpTree"]], "optree.optreederivative (class in squlearn.util)": [[59, "squlearn.util.OpTree.OpTreeDerivative"]], "optree.optreeevaluate (class in squlearn.util)": [[59, "squlearn.util.OpTree.OpTreeEvaluate"]], "assign_parameters() (squlearn.util.optree static method)": [[59, "squlearn.util.OpTree.assign_parameters"]], "derivative (squlearn.util.optree attribute)": [[59, "squlearn.util.OpTree.derivative"]], "differentiate() (squlearn.util.optree.optreederivative static method)": [[59, "squlearn.util.OpTree.OpTreeDerivative.differentiate"]], "differentiate_v2() (squlearn.util.optree.optreederivative static method)": [[59, "squlearn.util.OpTree.OpTreeDerivative.differentiate_v2"]], "evaluate (squlearn.util.optree attribute)": [[59, "squlearn.util.OpTree.evaluate"]], "evaluate_tree_with_estimator() (squlearn.util.optree.optreeevaluate static method)": [[59, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_tree_with_estimator"]], "evaluate_tree_with_sampler() (squlearn.util.optree.optreeevaluate static method)": [[59, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_tree_with_sampler"]], "evaluate_with_estimator() (squlearn.util.optree.optreeevaluate static method)": [[59, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_with_estimator"]], "evaluate_with_sampler() (squlearn.util.optree.optreeevaluate static method)": [[59, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_with_sampler"]], "gen_expectation_tree() (squlearn.util.optree static method)": [[59, "squlearn.util.OpTree.gen_expectation_tree"]], "get_first_leaf() (squlearn.util.optree static method)": [[59, "squlearn.util.OpTree.get_first_leaf"]], "get_num_nested_lists() (squlearn.util.optree static method)": [[59, "squlearn.util.OpTree.get_num_nested_lists"]], "get_number_of_leafs() (squlearn.util.optree static method)": [[59, "squlearn.util.OpTree.get_number_of_leafs"]], "get_tree_depth() (squlearn.util.optree static method)": [[59, "squlearn.util.OpTree.get_tree_depth"]], "hash_circuit() (squlearn.util.optree static method)": [[59, "squlearn.util.OpTree.hash_circuit"]], "hash_operator() (squlearn.util.optree static method)": [[59, "squlearn.util.OpTree.hash_operator"]], "simplify() (squlearn.util.optree static method)": [[59, "squlearn.util.OpTree.simplify"]], "transform_to_zbasis() (squlearn.util.optree.optreeevaluate static method)": [[59, "squlearn.util.OpTree.OpTreeEvaluate.transform_to_zbasis"]], "transpile_to_supported_instructions() (squlearn.util.optree.optreederivative static method)": [[59, "squlearn.util.OpTree.OpTreeDerivative.transpile_to_supported_instructions"]], "optreecircuit (class in squlearn.util.optree)": [[60, "squlearn.util.optree.OpTreeCircuit"]], "copy() (squlearn.util.optree.optreecircuit method)": [[60, "squlearn.util.optree.OpTreeCircuit.copy"]], "optreecontainer (class in squlearn.util.optree)": [[61, "squlearn.util.optree.OpTreeContainer"]], "copy() (squlearn.util.optree.optreecontainer method)": [[61, "squlearn.util.optree.OpTreeContainer.copy"]], "optreeexpectationvalue (class in squlearn.util.optree)": [[62, "squlearn.util.optree.OpTreeExpectationValue"]], "copy() (squlearn.util.optree.optreeexpectationvalue method)": [[62, "squlearn.util.optree.OpTreeExpectationValue.copy"]], "optreelist (class in squlearn.util.optree)": [[63, "squlearn.util.optree.OpTreeList"]], "append() (squlearn.util.optree.optreelist method)": [[63, "squlearn.util.optree.OpTreeList.append"]], "copy() (squlearn.util.optree.optreelist method)": [[63, "squlearn.util.optree.OpTreeList.copy"]], "remove() (squlearn.util.optree.optreelist method)": [[63, "squlearn.util.optree.OpTreeList.remove"]], "optreemeasuredoperator (class in squlearn.util.optree)": [[64, "squlearn.util.optree.OpTreeMeasuredOperator"]], "copy() (squlearn.util.optree.optreemeasuredoperator method)": [[64, "squlearn.util.optree.OpTreeMeasuredOperator.copy"]], "measure_circuit() (squlearn.util.optree.optreemeasuredoperator method)": [[64, "squlearn.util.optree.OpTreeMeasuredOperator.measure_circuit"]], "optreeoperator (class in squlearn.util.optree)": [[65, "squlearn.util.optree.OpTreeOperator"]], "copy() (squlearn.util.optree.optreeoperator method)": [[65, "squlearn.util.optree.OpTreeOperator.copy"]], "optreesum (class in squlearn.util.optree)": [[66, "squlearn.util.optree.OpTreeSum"]], "append() (squlearn.util.optree.optreesum method)": [[66, "squlearn.util.optree.OpTreeSum.append"]], "copy() (squlearn.util.optree.optreesum method)": [[66, "squlearn.util.optree.OpTreeSum.copy"]], "remove() (squlearn.util.optree.optreesum method)": [[66, "squlearn.util.optree.OpTreeSum.remove"]], "optreevalue (class in squlearn.util.optree)": [[67, "squlearn.util.optree.OpTreeValue"]], "copy() (squlearn.util.optree.optreevalue method)": [[67, "squlearn.util.optree.OpTreeValue.copy"]]}})