Search.setIndex({"alltitles": {"API Reference": [[7, null]], "Acknowledgements": [[5, "acknowledgements"]], "Assessing the QNN on IBM Quantum Using the Sampler Primitive": [[2, "Assessing-the-QNN-on-IBM-Quantum-Using-the-Sampler-Primitive"]], "Attributes:": [[8, "attributes"], [33, "attributes"], [37, "attributes"], [40, "attributes"], [41, "attributes"], [42, "attributes"], [43, "attributes"], [44, "attributes"], [45, "attributes"], [46, "attributes"], [47, "attributes"], [67, "attributes"], [69, "attributes"], [86, "attributes"]], "Automatic backend selection (IBM Quantum only)": [[88, "automatic-backend-selection-ibm-quantum-only"]], "Base Classes": [[7, "base-classes"]], "Bayesian Optimization using a Quantum Gaussian Process Surrogate Model": [[3, null]], "Bleeding-edge version": [[6, "bleeding-edge-version"]], "Circuit Design": [[7, "circuit-design"]], "Cite sQUlearn": [[5, "cite-squlearn"]], "Classification": [[0, "Classification"], [89, "classification"]], "Combining Quantum Encoding Circuits": [[87, "combining-quantum-encoding-circuits"]], "Configuring the Quantum Neural Network (QNN)": [[2, "Configuring-the-Quantum-Neural-Network-(QNN)"]], "Contact": [[5, "contact"]], "Contents:": [[5, null]], "Contribute to sQUlearn": [[5, "contribute-to-squlearn"]], "Core": [[7, "core"]], "Create your custom Encoding Circuit via LayeredEncodingCircuit": [[87, "create-your-custom-encoding-circuit-via-layeredencodingcircuit"]], "Custom observables": [[90, "custom-observables"]], "Derivatives of the observable": [[90, "derivatives-of-the-observable"]], "Development version": [[6, "development-version"]], "Different Quantum Encoding Circuits via EncodingCircuitDerivatives": [[87, "different-quantum-encoding-circuits-via-encodingcircuitderivatives"]], "Dimensionality Reduction": [[0, "Dimensionality-Reduction"]], "DotProduct:": [[33, "dotproduct"]], "Dynamic Decoupling and TREX": [[2, "Dynamic-Decoupling-and-TREX"]], "Dynamic Decoupling and Zero-Noise Extrapolation (ZNE) for Error Mitigation": [[2, "Dynamic-Decoupling-and-Zero-Noise-Extrapolation-(ZNE)-for-Error-Mitigation"]], "Dynamically adjustments of the shots": [[91, "dynamically-adjustments-of-the-shots"]], "Encoding Circuit Tools": [[7, "encoding-circuit-tools"]], "Encoding Circuits": [[7, "module-squlearn.encoding_circuit"]], "Error Mitigation for Quantum Neural Networks on IBM Quantum Devices": [[2, null]], "Evaluating the QNN on the IBM Backend with Error Mitigation": [[2, "Evaluating-the-QNN-on-the-IBM-Backend-with-Error-Mitigation"]], "Examples": [[4, null], [5, "examples"]], "Execution Tools": [[7, "execution-tools"]], "ExpSineSquared:": [[33, "expsinesquared"]], "Fidelity Quantum Kernel (FQK) via FidelityKernel": [[89, "fidelity-quantum-kernel-fqk-via-fidelitykernel"]], "Gaussian:": [[33, "gaussian"]], "Generating Data": [[1, "Generating-Data"]], "Handwritten Digit Recognition with Projected Quantum Kernels": [[0, null]], "High-Level methods that employ quantum kernels": [[89, "high-level-methods-that-employ-quantum-kernels"]], "High-level methods for QNNs": [[91, "high-level-methods-for-qnns"]], "Hyperparameter Optimization and Pipelines": [[1, null]], "Implemented Quantum Encoding Circuits": [[87, "implemented-quantum-encoding-circuits"]], "Implemented observables.": [[90, "implemented-observables"]], "Implemented optimizers": [[7, "module-squlearn.optimizers"]], "Importing Libraries": [[1, "Importing-Libraries"]], "Imports and Definitions": [[0, "Imports-and-Definitions"]], "In-QPU parallelization (Qiskit only)": [[88, "in-qpu-parallelization-qiskit-only"]], "Initialization of the Executor class": [[88, "initialization-of-the-executor-class"]], "Install sQUlearn": [[5, "install-squlearn"]], "Installation": [[6, null]], "Installation with optional dependencies:": [[6, "installation-with-optional-dependencies"]], "Key Features of the Executor": [[88, "key-features-of-the-executor"]], "Library Imports": [[2, "Library-Imports"]], "License": [[5, "license"]], "Mapping observables to real qubits": [[90, "mapping-observables-to-real-qubits"]], "Matern:": [[33, "matern"]], "Methods to evaluate quantum kernels": [[89, "methods-to-evaluate-quantum-kernels"]], "Methods:": [[8, "methods"], [30, "methods"], [31, "methods"], [33, "methods"], [35, "methods"], [36, "methods"], [37, "methods"], [38, "methods"], [39, "methods"], [40, "methods"], [41, "methods"], [42, "methods"], [43, "methods"], [44, "methods"], [45, "methods"], [46, "methods"], [47, "methods"], [54, "methods"], [55, "methods"], [67, "methods"], [69, "methods"], [72, "methods"], [73, "methods"], [86, "methods"]], "Min Max Scaling": [[0, "Min-Max-Scaling"]], "Mini-Batch gradient descent with Adam": [[91, "mini-batch-gradient-descent-with-adam"]], "Observables for expectation values": [[90, null]], "OpTree Data Structure": [[7, "optree-data-structure"]], "Operator Tools": [[7, "operator-tools"]], "Operators": [[7, "operators"]], "Optimization": [[91, "optimization"]], "Outer Kernels are implemented as follows:": [[33, "outer-kernels-are-implemented-as-follows"]], "Overview": [[2, "Overview"], [88, "overview"]], "PairwiseKernel:": [[33, "pairwisekernel"]], "PennyLane interface": [[7, "pennylane-interface"]], "Preprocessing": [[0, "Preprocessing"]], "Prerequisites": [[5, "prerequisites"], [6, "prerequisites"]], "Projected Quantum Kernel": [[0, "Projected-Quantum-Kernel"]], "Projected Quantum Kernel (PQK) via ProjectedQuantumKernel": [[89, "projected-quantum-kernel-pqk-via-projectedquantumkernel"]], "Pruning of Quantum Encoding Circuits": [[87, "pruning-of-quantum-encoding-circuits"]], "QML Classifiers": [[7, "qml-classifiers"]], "QML Regressors": [[7, "qml-regressors"]], "QNN Core": [[7, "module-squlearn.qnn"]], "Quantum Encoding Circuits": [[87, null]], "Quantum Kernel Core": [[7, "module-squlearn.kernel.matrix"]], "Quantum Kernel Methods": [[0, "Quantum-Kernel-Methods"], [89, null]], "Quantum Kernels": [[0, "Quantum-Kernels"]], "Quantum Neural Networks": [[91, null]], "RationalQuadratic:": [[33, "rationalquadratic"]], "Regression": [[89, "regression"]], "Results Analysis": [[1, "Results-Analysis"]], "Running Grid Search": [[1, "Running-Grid-Search"]], "SLSQP": [[91, "slsqp"]], "Schedule of the learning rate of Adam": [[91, "schedule-of-the-learning-rate-of-adam"]], "Set-up of the QNN": [[2, "Set-up-of-the-QNN"]], "Setting Options for Qiskit Primitives": [[88, "setting-options-for-qiskit-primitives"]], "Setting up the grid search": [[1, "Setting-up-the-grid-search"]], "Setting up the kernels": [[1, "Setting-up-the-kernels"]], "Single qubit gates and their string representation": [[16, "id1"]], "Split Data sets": [[0, "Split-Data-sets"]], "Stable Release": [[5, "stable-release"], [6, "stable-release"]], "Strings that are recognized by the get_derivative() method": [[12, "id1"], [47, "id1"]], "Summary": [[1, "Summary"]], "Support Vector Machine": [[0, "Support-Vector-Machine"]], "The Data": [[0, "The-Data"]], "The Executor Class": [[88, null]], "Training of quantum kernels": [[89, "training-of-quantum-kernels"]], "Training of the QNN with a noise free simulator": [[2, "Training-of-the-QNN-with-a-noise-free-simulator"]], "Transpile Quantum Encoding Circuits via TranspiledEncodingCircuit": [[87, "transpile-quantum-encoding-circuits-via-transpiledencodingcircuit"]], "Two qubit gates and their string representation": [[16, "id2"]], "User Guide": [[92, null]], "Utilizing Executor Primitives in Qiskit Routines": [[88, "utilizing-executor-primitives-in-qiskit-routines"]], "Variance reduction": [[91, "variance-reduction"]], "Variance reduction with dynamic adjustment of the regularization factor": [[91, "variance-reduction-with-dynamic-adjustment-of-the-regularization-factor"]], "Welcome to the sQUlearn documentation!": [[5, null]], "Without Error Mitigation": [[2, "Without-Error-Mitigation"]], "Wrapping Qiskit Encoding Circuits": [[87, "wrapping-qiskit-encoding-circuits"]], "squlearn.Executor": [[8, null]], "squlearn.encoding_circuit.ChebyshevPQC": [[9, null]], "squlearn.encoding_circuit.ChebyshevRx": [[10, null]], "squlearn.encoding_circuit.ChebyshevTower": [[11, null]], "squlearn.encoding_circuit.EncodingCircuitDerivatives": [[12, null]], "squlearn.encoding_circuit.HighDimEncodingCircuit": [[13, null]], "squlearn.encoding_circuit.HubregtsenEncodingCircuit": [[14, null]], "squlearn.encoding_circuit.KyriienkoEncodingCircuit": [[15, null]], "squlearn.encoding_circuit.LayeredEncodingCircuit": [[16, null]], "squlearn.encoding_circuit.MultiControlEncodingCircuit": [[17, null]], "squlearn.encoding_circuit.ParamZFeatureMap": [[18, null]], "squlearn.encoding_circuit.PrunedEncodingCircuit": [[19, null]], "squlearn.encoding_circuit.QCNNEncodingCircuit": [[20, null]], "squlearn.encoding_circuit.QiskitEncodingCircuit": [[21, null]], "squlearn.encoding_circuit.RandomEncodingCircuit": [[22, null]], "squlearn.encoding_circuit.RandomLayeredEncodingCircuit": [[23, null]], "squlearn.encoding_circuit.TranspiledEncodingCircuit": [[24, null]], "squlearn.encoding_circuit.YZ_CX_EncodingCircuit": [[25, null]], "squlearn.encoding_circuit.automated_pruning": [[26, null]], "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase": [[27, null]], "squlearn.encoding_circuit.pruning_from_QFI": [[28, null]], "squlearn.kernel.loss.kernel_loss_base.KernelLossBase": [[29, null]], "squlearn.kernel.loss.negative_log_likelihood.NLL": [[30, null]], "squlearn.kernel.loss.target_alignment.TargetAlignment": [[31, null]], "squlearn.kernel.matrix.FidelityKernel": [[32, null]], "squlearn.kernel.matrix.ProjectedQuantumKernel": [[33, null]], "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase": [[34, null]], "squlearn.kernel.ml.QGPC": [[35, null]], "squlearn.kernel.ml.QGPR": [[36, null]], "squlearn.kernel.ml.QKRR": [[37, null]], "squlearn.kernel.ml.QSVC": [[38, null]], "squlearn.kernel.ml.QSVR": [[39, null]], "squlearn.observables.CustomObservable": [[40, null]], "squlearn.observables.IsingHamiltonian": [[41, null]], "squlearn.observables.SinglePauli": [[42, null]], "squlearn.observables.SingleProbability": [[43, null]], "squlearn.observables.SummedPaulis": [[44, null]], "squlearn.observables.SummedProbabilities": [[45, null]], "squlearn.observables.observable_base.ObservableBase": [[46, null]], "squlearn.observables.observable_derivatives.ObservableDerivatives": [[47, null]], "squlearn.optimizers.Adam": [[48, null]], "squlearn.optimizers.LBFGSB": [[49, null]], "squlearn.optimizers.SGLBO": [[50, null]], "squlearn.optimizers.SLSQP": [[51, null]], "squlearn.optimizers.SPSA": [[52, null]], "squlearn.optimizers.optimizer_base.OptimizerBase": [[53, null]], "squlearn.qnn.QNNClassifier": [[54, null]], "squlearn.qnn.QNNRegressor": [[55, null]], "squlearn.qnn.ShotsFromRSTD": [[56, null]], "squlearn.qnn.base_qnn.BaseQNN": [[57, null]], "squlearn.qnn.get_lr_decay": [[58, null]], "squlearn.qnn.get_variance_fac": [[59, null]], "squlearn.qnn.loss.LossBase": [[60, null]], "squlearn.qnn.loss.ODELoss": [[61, null]], "squlearn.qnn.loss.ParameterRegularizationLoss": [[62, null]], "squlearn.qnn.loss.SquaredLoss": [[63, null]], "squlearn.qnn.loss.VarianceLoss": [[64, null]], "squlearn.qnn.lowlevel_qnn.LowLevelQNN": [[65, null]], "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase": [[66, null]], "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane": [[67, null]], "squlearn.qnn.lowlevel_qnn_qiskit.Expec": [[68, null]], "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit": [[69, null]], "squlearn.qnn.training.train": [[70, null]], "squlearn.qnn.training.train_mini_batch": [[71, null]], "squlearn.qrc.QRCClassifier": [[72, null]], "squlearn.qrc.QRCRegressor": [[73, null]], "squlearn.qrc.base_qrc.BaseQRC": [[74, null]], "squlearn.util.OpTree": [[75, null]], "squlearn.util.executor.ExecutorEstimator": [[76, null]], "squlearn.util.executor.ExecutorSampler": [[77, null]], "squlearn.util.optree.OpTreeCircuit": [[78, null]], "squlearn.util.optree.OpTreeContainer": [[79, null]], "squlearn.util.optree.OpTreeExpectationValue": [[80, null]], "squlearn.util.optree.OpTreeList": [[81, null]], "squlearn.util.optree.OpTreeMeasuredOperator": [[82, null]], "squlearn.util.optree.OpTreeOperator": [[83, null]], "squlearn.util.optree.OpTreeSum": [[84, null]], "squlearn.util.optree.OpTreeValue": [[85, null]], "squlearn.util.pennylane.PennyLaneCircuit": [[86, null]]}, "docnames": ["examples/example_kernel_digit_classification", "examples/example_kernel_grid_search", "examples/example_qnn_backend_mitigation", "examples/example_quantum_bayesian_optimization", "examples/examples_index", "index", "install/install", "modules/classes", "modules/generated/squlearn.Executor", "modules/generated/squlearn.encoding_circuit.ChebyshevPQC", "modules/generated/squlearn.encoding_circuit.ChebyshevRx", "modules/generated/squlearn.encoding_circuit.ChebyshevTower", "modules/generated/squlearn.encoding_circuit.EncodingCircuitDerivatives", "modules/generated/squlearn.encoding_circuit.HighDimEncodingCircuit", "modules/generated/squlearn.encoding_circuit.HubregtsenEncodingCircuit", "modules/generated/squlearn.encoding_circuit.KyriienkoEncodingCircuit", "modules/generated/squlearn.encoding_circuit.LayeredEncodingCircuit", "modules/generated/squlearn.encoding_circuit.MultiControlEncodingCircuit", "modules/generated/squlearn.encoding_circuit.ParamZFeatureMap", "modules/generated/squlearn.encoding_circuit.PrunedEncodingCircuit", "modules/generated/squlearn.encoding_circuit.QCNNEncodingCircuit", "modules/generated/squlearn.encoding_circuit.QiskitEncodingCircuit", "modules/generated/squlearn.encoding_circuit.RandomEncodingCircuit", "modules/generated/squlearn.encoding_circuit.RandomLayeredEncodingCircuit", "modules/generated/squlearn.encoding_circuit.TranspiledEncodingCircuit", "modules/generated/squlearn.encoding_circuit.YZ_CX_EncodingCircuit", "modules/generated/squlearn.encoding_circuit.automated_pruning", "modules/generated/squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase", "modules/generated/squlearn.encoding_circuit.pruning_from_QFI", "modules/generated/squlearn.kernel.loss.kernel_loss_base.KernelLossBase", "modules/generated/squlearn.kernel.loss.negative_log_likelihood.NLL", "modules/generated/squlearn.kernel.loss.target_alignment.TargetAlignment", "modules/generated/squlearn.kernel.matrix.FidelityKernel", "modules/generated/squlearn.kernel.matrix.ProjectedQuantumKernel", "modules/generated/squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase", "modules/generated/squlearn.kernel.ml.QGPC", "modules/generated/squlearn.kernel.ml.QGPR", "modules/generated/squlearn.kernel.ml.QKRR", "modules/generated/squlearn.kernel.ml.QSVC", "modules/generated/squlearn.kernel.ml.QSVR", "modules/generated/squlearn.observables.CustomObservable", "modules/generated/squlearn.observables.IsingHamiltonian", "modules/generated/squlearn.observables.SinglePauli", "modules/generated/squlearn.observables.SingleProbability", "modules/generated/squlearn.observables.SummedPaulis", "modules/generated/squlearn.observables.SummedProbabilities", "modules/generated/squlearn.observables.observable_base.ObservableBase", "modules/generated/squlearn.observables.observable_derivatives.ObservableDerivatives", "modules/generated/squlearn.optimizers.Adam", "modules/generated/squlearn.optimizers.LBFGSB", "modules/generated/squlearn.optimizers.SGLBO", "modules/generated/squlearn.optimizers.SLSQP", "modules/generated/squlearn.optimizers.SPSA", "modules/generated/squlearn.optimizers.optimizer_base.OptimizerBase", "modules/generated/squlearn.qnn.QNNClassifier", "modules/generated/squlearn.qnn.QNNRegressor", "modules/generated/squlearn.qnn.ShotsFromRSTD", "modules/generated/squlearn.qnn.base_qnn.BaseQNN", "modules/generated/squlearn.qnn.get_lr_decay", "modules/generated/squlearn.qnn.get_variance_fac", "modules/generated/squlearn.qnn.loss.LossBase", "modules/generated/squlearn.qnn.loss.ODELoss", "modules/generated/squlearn.qnn.loss.ParameterRegularizationLoss", "modules/generated/squlearn.qnn.loss.SquaredLoss", "modules/generated/squlearn.qnn.loss.VarianceLoss", "modules/generated/squlearn.qnn.lowlevel_qnn.LowLevelQNN", "modules/generated/squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase", "modules/generated/squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane", "modules/generated/squlearn.qnn.lowlevel_qnn_qiskit.Expec", "modules/generated/squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit", "modules/generated/squlearn.qnn.training.train", "modules/generated/squlearn.qnn.training.train_mini_batch", "modules/generated/squlearn.qrc.QRCClassifier", "modules/generated/squlearn.qrc.QRCRegressor", "modules/generated/squlearn.qrc.base_qrc.BaseQRC", "modules/generated/squlearn.util.OpTree", "modules/generated/squlearn.util.executor.ExecutorEstimator", "modules/generated/squlearn.util.executor.ExecutorSampler", "modules/generated/squlearn.util.optree.OpTreeCircuit", "modules/generated/squlearn.util.optree.OpTreeContainer", "modules/generated/squlearn.util.optree.OpTreeExpectationValue", "modules/generated/squlearn.util.optree.OpTreeList", "modules/generated/squlearn.util.optree.OpTreeMeasuredOperator", "modules/generated/squlearn.util.optree.OpTreeOperator", "modules/generated/squlearn.util.optree.OpTreeSum", "modules/generated/squlearn.util.optree.OpTreeValue", "modules/generated/squlearn.util.pennylane.PennyLaneCircuit", "user_guide/encoding_circuits", "user_guide/executor", "user_guide/kernel_methods", "user_guide/observables", "user_guide/quantum_neural_networks", "user_guide/user_guide_index"], "envversion": {"nbsphinx": 4, "sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["examples/example_kernel_digit_classification.nblink", "examples/example_kernel_grid_search.nblink", "examples/example_qnn_backend_mitigation.nblink", "examples/example_quantum_bayesian_optimization.nblink", "examples/examples_index.rst", "index.rst", "install/install.rst", "modules/classes.rst", "modules/generated/squlearn.Executor.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevPQC.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevRx.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevTower.rst", "modules/generated/squlearn.encoding_circuit.EncodingCircuitDerivatives.rst", "modules/generated/squlearn.encoding_circuit.HighDimEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.HubregtsenEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.KyriienkoEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.LayeredEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.MultiControlEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.ParamZFeatureMap.rst", "modules/generated/squlearn.encoding_circuit.PrunedEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.QCNNEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.QiskitEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.RandomEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.RandomLayeredEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.TranspiledEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.YZ_CX_EncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.automated_pruning.rst", "modules/generated/squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.rst", "modules/generated/squlearn.encoding_circuit.pruning_from_QFI.rst", "modules/generated/squlearn.kernel.loss.kernel_loss_base.KernelLossBase.rst", "modules/generated/squlearn.kernel.loss.negative_log_likelihood.NLL.rst", "modules/generated/squlearn.kernel.loss.target_alignment.TargetAlignment.rst", "modules/generated/squlearn.kernel.matrix.FidelityKernel.rst", "modules/generated/squlearn.kernel.matrix.ProjectedQuantumKernel.rst", "modules/generated/squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.rst", "modules/generated/squlearn.kernel.ml.QGPC.rst", "modules/generated/squlearn.kernel.ml.QGPR.rst", "modules/generated/squlearn.kernel.ml.QKRR.rst", "modules/generated/squlearn.kernel.ml.QSVC.rst", "modules/generated/squlearn.kernel.ml.QSVR.rst", "modules/generated/squlearn.observables.CustomObservable.rst", "modules/generated/squlearn.observables.IsingHamiltonian.rst", "modules/generated/squlearn.observables.SinglePauli.rst", "modules/generated/squlearn.observables.SingleProbability.rst", "modules/generated/squlearn.observables.SummedPaulis.rst", "modules/generated/squlearn.observables.SummedProbabilities.rst", "modules/generated/squlearn.observables.observable_base.ObservableBase.rst", "modules/generated/squlearn.observables.observable_derivatives.ObservableDerivatives.rst", "modules/generated/squlearn.optimizers.Adam.rst", "modules/generated/squlearn.optimizers.LBFGSB.rst", "modules/generated/squlearn.optimizers.SGLBO.rst", "modules/generated/squlearn.optimizers.SLSQP.rst", "modules/generated/squlearn.optimizers.SPSA.rst", "modules/generated/squlearn.optimizers.optimizer_base.OptimizerBase.rst", "modules/generated/squlearn.qnn.QNNClassifier.rst", "modules/generated/squlearn.qnn.QNNRegressor.rst", "modules/generated/squlearn.qnn.ShotsFromRSTD.rst", "modules/generated/squlearn.qnn.base_qnn.BaseQNN.rst", "modules/generated/squlearn.qnn.get_lr_decay.rst", "modules/generated/squlearn.qnn.get_variance_fac.rst", "modules/generated/squlearn.qnn.loss.LossBase.rst", "modules/generated/squlearn.qnn.loss.ODELoss.rst", "modules/generated/squlearn.qnn.loss.ParameterRegularizationLoss.rst", "modules/generated/squlearn.qnn.loss.SquaredLoss.rst", "modules/generated/squlearn.qnn.loss.VarianceLoss.rst", "modules/generated/squlearn.qnn.lowlevel_qnn.LowLevelQNN.rst", "modules/generated/squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.rst", "modules/generated/squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.rst", "modules/generated/squlearn.qnn.lowlevel_qnn_qiskit.Expec.rst", "modules/generated/squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.rst", "modules/generated/squlearn.qnn.training.train.rst", "modules/generated/squlearn.qnn.training.train_mini_batch.rst", "modules/generated/squlearn.qrc.QRCClassifier.rst", "modules/generated/squlearn.qrc.QRCRegressor.rst", "modules/generated/squlearn.qrc.base_qrc.BaseQRC.rst", "modules/generated/squlearn.util.OpTree.rst", "modules/generated/squlearn.util.executor.ExecutorEstimator.rst", "modules/generated/squlearn.util.executor.ExecutorSampler.rst", "modules/generated/squlearn.util.optree.OpTreeCircuit.rst", "modules/generated/squlearn.util.optree.OpTreeContainer.rst", "modules/generated/squlearn.util.optree.OpTreeExpectationValue.rst", "modules/generated/squlearn.util.optree.OpTreeList.rst", "modules/generated/squlearn.util.optree.OpTreeMeasuredOperator.rst", "modules/generated/squlearn.util.optree.OpTreeOperator.rst", "modules/generated/squlearn.util.optree.OpTreeSum.rst", "modules/generated/squlearn.util.optree.OpTreeValue.rst", "modules/generated/squlearn.util.pennylane.PennyLaneCircuit.rst", "user_guide/encoding_circuits.rst", "user_guide/executor.rst", "user_guide/kernel_methods.rst", "user_guide/observables.rst", "user_guide/quantum_neural_networks.rst", "user_guide/user_guide_index.rst"], "indexentries": {"adam (class in squlearn.optimizers)": [[48, "squlearn.optimizers.Adam", false]], "add_layer() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.add_layer", false]], "append() (squlearn.util.optree.optreelist method)": [[81, "squlearn.util.optree.OpTreeList.append", false]], "append() (squlearn.util.optree.optreesum method)": [[84, "squlearn.util.optree.OpTreeSum.append", false]], "assign_parameters() (squlearn.encoding_circuit.encodingcircuitderivatives method)": [[12, "squlearn.encoding_circuit.EncodingCircuitDerivatives.assign_parameters", false]], "assign_parameters() (squlearn.kernel.matrix.fidelitykernel method)": [[32, "squlearn.kernel.matrix.FidelityKernel.assign_parameters", false]], "assign_parameters() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.assign_parameters", false]], "assign_parameters() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.assign_parameters", false]], "assign_parameters() (squlearn.observables.observable_derivatives.observablederivatives method)": [[47, "squlearn.observables.observable_derivatives.ObservableDerivatives.assign_parameters", false]], "assign_parameters() (squlearn.util.optree static method)": [[75, "squlearn.util.OpTree.assign_parameters", false]], "automated_pruning() (in module squlearn.encoding_circuit)": [[26, "squlearn.encoding_circuit.automated_pruning", false]], "backend (squlearn.executor attribute)": [[8, "squlearn.Executor.backend", false]], "backend_chosen (squlearn.executor attribute)": [[8, "squlearn.Executor.backend_chosen", false]], "backend_list (squlearn.executor attribute)": [[8, "squlearn.Executor.backend_list", false]], "backend_name (squlearn.executor attribute)": [[8, "squlearn.Executor.backend_name", false]], "baseqnn (class in squlearn.qnn.base_qnn)": [[57, "squlearn.qnn.base_qnn.BaseQNN", false]], "baseqrc (class in squlearn.qrc.base_qrc)": [[74, "squlearn.qrc.base_qrc.BaseQRC", false]], "build_circuit() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit.build_circuit", false]], "build_circuit_instructions() (squlearn.util.pennylane.pennylanecircuit method)": [[86, "squlearn.util.pennylane.PennyLaneCircuit.build_circuit_instructions", false]], "build_observable_instructions() (squlearn.util.pennylane.pennylanecircuit method)": [[86, "squlearn.util.pennylane.PennyLaneCircuit.build_observable_instructions", false]], "build_pennylane_circuit() (squlearn.util.pennylane.pennylanecircuit method)": [[86, "squlearn.util.pennylane.PennyLaneCircuit.build_pennylane_circuit", false]], "calculate_cov_and_mean() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.calculate_cov_and_mean", false]], "ch_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.ch_entangling", false]], "chebyshevpqc (class in squlearn.encoding_circuit)": [[9, "squlearn.encoding_circuit.ChebyshevPQC", false]], "chebyshevrx (class in squlearn.encoding_circuit)": [[10, "squlearn.encoding_circuit.ChebyshevRx", false]], "chebyshevtower (class in squlearn.encoding_circuit)": [[11, "squlearn.encoding_circuit.ChebyshevTower", false]], "circuit_arguments (squlearn.util.pennylane.pennylanecircuit attribute)": [[86, "squlearn.util.pennylane.PennyLaneCircuit.circuit_arguments", false]], "circuit_parameter_dimensions (squlearn.util.pennylane.pennylanecircuit attribute)": [[86, "squlearn.util.pennylane.PennyLaneCircuit.circuit_parameter_dimensions", false]], "circuit_parameter_names (squlearn.util.pennylane.pennylanecircuit attribute)": [[86, "squlearn.util.pennylane.PennyLaneCircuit.circuit_parameter_names", false]], "clear_estimator_cache() (squlearn.executor method)": [[8, "squlearn.Executor.clear_estimator_cache", false]], "clear_sampler_cache() (squlearn.executor method)": [[8, "squlearn.Executor.clear_sampler_cache", false]], "close_session() (squlearn.executor method)": [[8, "squlearn.Executor.close_session", false]], "compute() (squlearn.kernel.loss.kernel_loss_base.kernellossbase method)": [[29, "squlearn.kernel.loss.kernel_loss_base.KernelLossBase.compute", false]], "compute() (squlearn.kernel.loss.negative_log_likelihood.nll method)": [[30, "squlearn.kernel.loss.negative_log_likelihood.NLL.compute", false]], "compute() (squlearn.kernel.loss.target_alignment.targetalignment method)": [[31, "squlearn.kernel.loss.target_alignment.TargetAlignment.compute", false]], "convolution() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit.convolution", false]], "copy() (squlearn.util.optree.optreecircuit method)": [[78, "squlearn.util.optree.OpTreeCircuit.copy", false]], "copy() (squlearn.util.optree.optreecontainer method)": [[79, "squlearn.util.optree.OpTreeContainer.copy", false]], "copy() (squlearn.util.optree.optreeexpectationvalue method)": [[80, "squlearn.util.optree.OpTreeExpectationValue.copy", false]], "copy() (squlearn.util.optree.optreelist method)": [[81, "squlearn.util.optree.OpTreeList.copy", false]], "copy() (squlearn.util.optree.optreemeasuredoperator method)": [[82, "squlearn.util.optree.OpTreeMeasuredOperator.copy", false]], "copy() (squlearn.util.optree.optreeoperator method)": [[83, "squlearn.util.optree.OpTreeOperator.copy", false]], "copy() (squlearn.util.optree.optreesum method)": [[84, "squlearn.util.optree.OpTreeSum.copy", false]], "copy() (squlearn.util.optree.optreevalue method)": [[85, "squlearn.util.optree.OpTreeValue.copy", false]], "cp_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.cp_entangling", false]], "create_session() (squlearn.executor method)": [[8, "squlearn.Executor.create_session", false]], "crx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.crx_entangling", false]], "cry_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.cry_entangling", false]], "crz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.crz_entangling", false]], "cu_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.cu_entangling", false]], "customobservable (class in squlearn.observables)": [[40, "squlearn.observables.CustomObservable", false]], "cx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.cx_entangling", false]], "cy_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.cy_entangling", false]], "cz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.cz_entangling", false]], "decision_function() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.decision_function", false]], "default_circuit() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit.default_circuit", false]], "derivative (squlearn.util.optree attribute)": [[75, "squlearn.util.OpTree.derivative", false]], "differentiate() (squlearn.util.optree.optreederivative static method)": [[75, "squlearn.util.OpTree.OpTreeDerivative.differentiate", false]], "differentiate_v2() (squlearn.util.optree.optreederivative static method)": [[75, "squlearn.util.OpTree.OpTreeDerivative.differentiate_v2", false]], "draw() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.draw", false]], "draw() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.draw", false]], "draw() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.draw", false]], "draw() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[27, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.draw", false]], "draw() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.kyriienkoencodingcircuit method)": [[15, "squlearn.encoding_circuit.KyriienkoEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[17, "squlearn.encoding_circuit.MultiControlEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.paramzfeaturemap method)": [[18, "squlearn.encoding_circuit.ParamZFeatureMap.draw", false]], "draw() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[19, "squlearn.encoding_circuit.PrunedEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[21, "squlearn.encoding_circuit.QiskitEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.randomencodingcircuit method)": [[22, "squlearn.encoding_circuit.RandomEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.randomlayeredencodingcircuit method)": [[23, "squlearn.encoding_circuit.RandomLayeredEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[24, "squlearn.encoding_circuit.TranspiledEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[25, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.draw", false]], "draw() (squlearn.util.pennylane.pennylanecircuit method)": [[86, "squlearn.util.pennylane.PennyLaneCircuit.draw", false]], "encoding_circuit (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.encoding_circuit", false]], "encodingcircuitbase (class in squlearn.encoding_circuit.encoding_circuit_base)": [[27, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase", false]], "encodingcircuitderivatives (class in squlearn.encoding_circuit)": [[12, "squlearn.encoding_circuit.EncodingCircuitDerivatives", false]], "estimator (squlearn.executor attribute)": [[8, "squlearn.Executor.estimator", false]], "estimator_options (squlearn.executor attribute)": [[8, "squlearn.Executor.estimator_options", false]], "estimator_run_v1() (squlearn.executor method)": [[8, "squlearn.Executor.estimator_run_v1", false]], "estimator_run_v2() (squlearn.executor method)": [[8, "squlearn.Executor.estimator_run_v2", false]], "evaluate (squlearn.util.optree attribute)": [[75, "squlearn.util.OpTree.evaluate", false]], "evaluate() (squlearn.kernel.matrix.fidelitykernel method)": [[32, "squlearn.kernel.matrix.FidelityKernel.evaluate", false]], "evaluate() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate", false]], "evaluate() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate", false]], "evaluate() (squlearn.qnn.lowlevel_qnn.lowlevelqnn method)": [[65, "squlearn.qnn.lowlevel_qnn.LowLevelQNN.evaluate", false]], "evaluate() (squlearn.qnn.lowlevel_qnn_base.lowlevelqnnbase method)": [[66, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.evaluate", false]], "evaluate() (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane method)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.evaluate", false]], "evaluate() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate", false]], "evaluate_derivatives() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_derivatives", false]], "evaluate_dfdop() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdop", false]], "evaluate_dfdopdx() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdopdx", false]], "evaluate_dfdp() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdp", false]], "evaluate_dfdpdx() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdpdx", false]], "evaluate_dfdx() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdx", false]], "evaluate_dfdxdx() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdxdx", false]], "evaluate_diff_tuple() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_diff_tuple", false]], "evaluate_f() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_f", false]], "evaluate_from_string() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_from_string", false]], "evaluate_laplace() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_laplace", false]], "evaluate_laplace_dop() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_laplace_dop", false]], "evaluate_laplace_dp() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_laplace_dp", false]], "evaluate_pairwise() (squlearn.kernel.matrix.fidelitykernel method)": [[32, "squlearn.kernel.matrix.FidelityKernel.evaluate_pairwise", false]], "evaluate_pairwise() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate_pairwise", false]], "evaluate_pairwise() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_pairwise", false]], "evaluate_probabilities() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_probabilities", false]], "evaluate_qnn() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_qnn", false]], "evaluate_tree_with_estimator() (squlearn.util.optree.optreeevaluate static method)": [[75, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_tree_with_estimator", false]], "evaluate_tree_with_sampler() (squlearn.util.optree.optreeevaluate static method)": [[75, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_tree_with_sampler", false]], "evaluate_var() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_var", false]], "evaluate_variance() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_variance", false]], "evaluate_with_estimator() (squlearn.util.optree.optreeevaluate static method)": [[75, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_with_estimator", false]], "evaluate_with_parameters() (squlearn.kernel.matrix.fidelitykernel method)": [[32, "squlearn.kernel.matrix.FidelityKernel.evaluate_with_parameters", false]], "evaluate_with_parameters() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate_with_parameters", false]], "evaluate_with_parameters() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_with_parameters", false]], "evaluate_with_sampler() (squlearn.util.optree.optreeevaluate static method)": [[75, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_with_sampler", false]], "execution (squlearn.executor attribute)": [[8, "squlearn.Executor.execution", false]], "executor (class in squlearn)": [[8, "squlearn.Executor", false]], "executorestimator (class in squlearn.util.executor)": [[76, "squlearn.util.executor.ExecutorEstimator", false]], "executorsampler (class in squlearn.util.executor)": [[77, "squlearn.util.executor.ExecutorSampler", false]], "expec (class in squlearn.qnn.lowlevel_qnn_qiskit)": [[68, "squlearn.qnn.lowlevel_qnn_qiskit.Expec", false]], "features (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.features", false]], "features (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.features", false]], "fidelitykernel (class in squlearn.kernel.matrix)": [[32, "squlearn.kernel.matrix.FidelityKernel", false]], "fit() (squlearn.kernel.ml.qgpc method)": [[35, "squlearn.kernel.ml.QGPC.fit", false]], "fit() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.fit", false]], "fit() (squlearn.kernel.ml.qkrr method)": [[37, "squlearn.kernel.ml.QKRR.fit", false]], "fit() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.fit", false]], "fit() (squlearn.kernel.ml.qsvr method)": [[39, "squlearn.kernel.ml.QSVR.fit", false]], "fit() (squlearn.qnn.base_qnn.baseqnn method)": [[57, "squlearn.qnn.base_qnn.BaseQNN.fit", false]], "fit() (squlearn.qnn.qnnclassifier method)": [[54, "squlearn.qnn.QNNClassifier.fit", false]], "fit() (squlearn.qnn.qnnregressor method)": [[55, "squlearn.qnn.QNNRegressor.fit", false]], "fit() (squlearn.qrc.base_qrc.baseqrc method)": [[74, "squlearn.qrc.base_qrc.BaseQRC.fit", false]], "fit() (squlearn.qrc.qrcclassifier method)": [[72, "squlearn.qrc.QRCClassifier.fit", false]], "fit() (squlearn.qrc.qrcregressor method)": [[73, "squlearn.qrc.QRCRegressor.fit", false]], "from_parameter() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[68, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_parameter", false]], "from_parameter_vector() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[68, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_parameter_vector", false]], "from_string() (squlearn.encoding_circuit.layeredencodingcircuit class method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.from_string", false]], "from_string() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[68, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_string", false]], "from_tuple() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[68, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_tuple", false]], "from_variable() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[68, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_variable", false]], "full_sum (squlearn.observables.summedpaulis attribute)": [[44, "squlearn.observables.SummedPaulis.full_sum", false]], "full_sum (squlearn.observables.summedprobabilities attribute)": [[45, "squlearn.observables.SummedProbabilities.full_sum", false]], "fully_connected() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit.fully_connected", false]], "gen_expectation_tree() (squlearn.util.optree static method)": [[75, "squlearn.util.OpTree.gen_expectation_tree", false]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[27, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.kyriienkoencodingcircuit method)": [[15, "squlearn.encoding_circuit.KyriienkoEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[17, "squlearn.encoding_circuit.MultiControlEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.paramzfeaturemap method)": [[18, "squlearn.encoding_circuit.ParamZFeatureMap.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[19, "squlearn.encoding_circuit.PrunedEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[21, "squlearn.encoding_circuit.QiskitEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.randomencodingcircuit method)": [[22, "squlearn.encoding_circuit.RandomEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.randomlayeredencodingcircuit method)": [[23, "squlearn.encoding_circuit.RandomLayeredEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[24, "squlearn.encoding_circuit.TranspiledEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[25, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.customobservable method)": [[40, "squlearn.observables.CustomObservable.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.isinghamiltonian method)": [[41, "squlearn.observables.IsingHamiltonian.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.observable_base.observablebase method)": [[46, "squlearn.observables.observable_base.ObservableBase.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.singlepauli method)": [[42, "squlearn.observables.SinglePauli.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.singleprobability method)": [[43, "squlearn.observables.SingleProbability.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.summedpaulis method)": [[44, "squlearn.observables.SummedPaulis.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.summedprobabilities method)": [[45, "squlearn.observables.SummedProbabilities.generate_initial_parameters", false]], "get_cheb_indices() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.get_cheb_indices", false]], "get_cheb_indices() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.get_cheb_indices", false]], "get_circuit() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[27, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.kyriienkoencodingcircuit method)": [[15, "squlearn.encoding_circuit.KyriienkoEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[17, "squlearn.encoding_circuit.MultiControlEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.paramzfeaturemap method)": [[18, "squlearn.encoding_circuit.ParamZFeatureMap.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[19, "squlearn.encoding_circuit.PrunedEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[21, "squlearn.encoding_circuit.QiskitEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.randomencodingcircuit method)": [[22, "squlearn.encoding_circuit.RandomEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.randomlayeredencodingcircuit method)": [[23, "squlearn.encoding_circuit.RandomLayeredEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[24, "squlearn.encoding_circuit.TranspiledEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[25, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.get_circuit", false]], "get_derivative() (squlearn.encoding_circuit.encodingcircuitderivatives method)": [[12, "squlearn.encoding_circuit.EncodingCircuitDerivatives.get_derivative", false]], "get_derivative() (squlearn.observables.observable_derivatives.observablederivatives method)": [[47, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_derivative", false]], "get_estimator() (squlearn.executor method)": [[8, "squlearn.Executor.get_estimator", false]], "get_first_leaf() (squlearn.util.optree static method)": [[75, "squlearn.util.OpTree.get_first_leaf", false]], "get_lr_decay (class in squlearn.qnn)": [[58, "squlearn.qnn.get_lr_decay", false]], "get_metadata_routing() (squlearn.kernel.ml.qgpc method)": [[35, "squlearn.kernel.ml.QGPC.get_metadata_routing", false]], "get_metadata_routing() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.get_metadata_routing", false]], "get_metadata_routing() (squlearn.kernel.ml.qkrr method)": [[37, "squlearn.kernel.ml.QKRR.get_metadata_routing", false]], "get_metadata_routing() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.get_metadata_routing", false]], "get_metadata_routing() (squlearn.kernel.ml.qsvr method)": [[39, "squlearn.kernel.ml.QSVR.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qnn.base_qnn.baseqnn method)": [[57, "squlearn.qnn.base_qnn.BaseQNN.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qnn.qnnclassifier method)": [[54, "squlearn.qnn.QNNClassifier.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qnn.qnnregressor method)": [[55, "squlearn.qnn.QNNRegressor.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qrc.base_qrc.baseqrc method)": [[74, "squlearn.qrc.base_qrc.BaseQRC.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qrc.qrcclassifier method)": [[72, "squlearn.qrc.QRCClassifier.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qrc.qrcregressor method)": [[73, "squlearn.qrc.QRCRegressor.get_metadata_routing", false]], "get_num_nested_lists() (squlearn.util.optree static method)": [[75, "squlearn.util.OpTree.get_num_nested_lists", false]], "get_number_of_leafs() (squlearn.util.optree static method)": [[75, "squlearn.util.OpTree.get_number_of_leafs", false]], "get_operator() (squlearn.observables.customobservable method)": [[40, "squlearn.observables.CustomObservable.get_operator", false]], "get_operator() (squlearn.observables.isinghamiltonian method)": [[41, "squlearn.observables.IsingHamiltonian.get_operator", false]], "get_operator() (squlearn.observables.observable_base.observablebase method)": [[46, "squlearn.observables.observable_base.ObservableBase.get_operator", false]], "get_operator() (squlearn.observables.observable_derivatives.observablederivatives method)": [[47, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_operator", false]], "get_operator() (squlearn.observables.singlepauli method)": [[42, "squlearn.observables.SinglePauli.get_operator", false]], "get_operator() (squlearn.observables.singleprobability method)": [[43, "squlearn.observables.SingleProbability.get_operator", false]], "get_operator() (squlearn.observables.summedpaulis method)": [[44, "squlearn.observables.SummedPaulis.get_operator", false]], "get_operator() (squlearn.observables.summedprobabilities method)": [[45, "squlearn.observables.SummedProbabilities.get_operator", false]], "get_operator_squared() (squlearn.observables.observable_derivatives.observablederivatives method)": [[47, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_operator_squared", false]], "get_optree_from_expec() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.get_optree_from_expec", false]], "get_optree_from_string() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.get_optree_from_string", false]], "get_params() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.get_params", false]], "get_params() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.get_params", false]], "get_params() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.get_params", false]], "get_params() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[27, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.get_params", false]], "get_params() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.kyriienkoencodingcircuit method)": [[15, "squlearn.encoding_circuit.KyriienkoEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[17, "squlearn.encoding_circuit.MultiControlEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.paramzfeaturemap method)": [[18, "squlearn.encoding_circuit.ParamZFeatureMap.get_params", false]], "get_params() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[19, "squlearn.encoding_circuit.PrunedEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[21, "squlearn.encoding_circuit.QiskitEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.randomencodingcircuit method)": [[22, "squlearn.encoding_circuit.RandomEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.randomlayeredencodingcircuit method)": [[23, "squlearn.encoding_circuit.RandomLayeredEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[24, "squlearn.encoding_circuit.TranspiledEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[25, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.get_params", false]], "get_params() (squlearn.kernel.matrix.fidelitykernel method)": [[32, "squlearn.kernel.matrix.FidelityKernel.get_params", false]], "get_params() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.get_params", false]], "get_params() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.get_params", false]], "get_params() (squlearn.kernel.ml.qgpc method)": [[35, "squlearn.kernel.ml.QGPC.get_params", false]], "get_params() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.get_params", false]], "get_params() (squlearn.kernel.ml.qkrr method)": [[37, "squlearn.kernel.ml.QKRR.get_params", false]], "get_params() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.get_params", false]], "get_params() (squlearn.kernel.ml.qsvr method)": [[39, "squlearn.kernel.ml.QSVR.get_params", false]], "get_params() (squlearn.observables.customobservable method)": [[40, "squlearn.observables.CustomObservable.get_params", false]], "get_params() (squlearn.observables.isinghamiltonian method)": [[41, "squlearn.observables.IsingHamiltonian.get_params", false]], "get_params() (squlearn.observables.observable_base.observablebase method)": [[46, "squlearn.observables.observable_base.ObservableBase.get_params", false]], "get_params() (squlearn.observables.singlepauli method)": [[42, "squlearn.observables.SinglePauli.get_params", false]], "get_params() (squlearn.observables.singleprobability method)": [[43, "squlearn.observables.SingleProbability.get_params", false]], "get_params() (squlearn.observables.summedpaulis method)": [[44, "squlearn.observables.SummedPaulis.get_params", false]], "get_params() (squlearn.observables.summedprobabilities method)": [[45, "squlearn.observables.SummedProbabilities.get_params", false]], "get_params() (squlearn.qnn.base_qnn.baseqnn method)": [[57, "squlearn.qnn.base_qnn.BaseQNN.get_params", false]], "get_params() (squlearn.qnn.lowlevel_qnn.lowlevelqnn method)": [[65, "squlearn.qnn.lowlevel_qnn.LowLevelQNN.get_params", false]], "get_params() (squlearn.qnn.lowlevel_qnn_base.lowlevelqnnbase method)": [[66, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.get_params", false]], "get_params() (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane method)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.get_params", false]], "get_params() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.get_params", false]], "get_params() (squlearn.qnn.qnnclassifier method)": [[54, "squlearn.qnn.QNNClassifier.get_params", false]], "get_params() (squlearn.qnn.qnnregressor method)": [[55, "squlearn.qnn.QNNRegressor.get_params", false]], "get_params() (squlearn.qrc.base_qrc.baseqrc method)": [[74, "squlearn.qrc.base_qrc.BaseQRC.get_params", false]], "get_params() (squlearn.qrc.qrcclassifier method)": [[72, "squlearn.qrc.QRCClassifier.get_params", false]], "get_params() (squlearn.qrc.qrcregressor method)": [[73, "squlearn.qrc.QRCRegressor.get_params", false]], "get_pauli() (squlearn.observables.customobservable method)": [[40, "squlearn.observables.CustomObservable.get_pauli", false]], "get_pauli() (squlearn.observables.isinghamiltonian method)": [[41, "squlearn.observables.IsingHamiltonian.get_pauli", false]], "get_pauli() (squlearn.observables.observable_base.observablebase method)": [[46, "squlearn.observables.observable_base.ObservableBase.get_pauli", false]], "get_pauli() (squlearn.observables.singlepauli method)": [[42, "squlearn.observables.SinglePauli.get_pauli", false]], "get_pauli() (squlearn.observables.singleprobability method)": [[43, "squlearn.observables.SingleProbability.get_pauli", false]], "get_pauli() (squlearn.observables.summedpaulis method)": [[44, "squlearn.observables.SummedPaulis.get_pauli", false]], "get_pauli() (squlearn.observables.summedprobabilities method)": [[45, "squlearn.observables.SummedProbabilities.get_pauli", false]], "get_pauli_mapped() (squlearn.observables.customobservable method)": [[40, "squlearn.observables.CustomObservable.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.isinghamiltonian method)": [[41, "squlearn.observables.IsingHamiltonian.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.observable_base.observablebase method)": [[46, "squlearn.observables.observable_base.ObservableBase.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.singlepauli method)": [[42, "squlearn.observables.SinglePauli.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.singleprobability method)": [[43, "squlearn.observables.SingleProbability.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.summedpaulis method)": [[44, "squlearn.observables.SummedPaulis.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.summedprobabilities method)": [[45, "squlearn.observables.SummedProbabilities.get_pauli_mapped", false]], "get_pennylane_circuit() (squlearn.util.pennylane.pennylanecircuit method)": [[86, "squlearn.util.pennylane.PennyLaneCircuit.get_pennylane_circuit", false]], "get_sampler() (squlearn.executor method)": [[8, "squlearn.Executor.get_sampler", false]], "get_shots() (squlearn.executor method)": [[8, "squlearn.Executor.get_shots", false]], "get_shots() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.get_shots", false]], "get_tree_depth() (squlearn.util.optree static method)": [[75, "squlearn.util.OpTree.get_tree_depth", false]], "get_variance_fac (class in squlearn.qnn)": [[59, "squlearn.qnn.get_variance_fac", false]], "gradient() (squlearn.qnn.loss.lossbase method)": [[60, "squlearn.qnn.loss.LossBase.gradient", false]], "gradient() (squlearn.qnn.loss.odeloss method)": [[61, "squlearn.qnn.loss.ODELoss.gradient", false]], "gradient() (squlearn.qnn.loss.parameterregularizationloss method)": [[62, "squlearn.qnn.loss.ParameterRegularizationLoss.gradient", false]], "gradient() (squlearn.qnn.loss.squaredloss method)": [[63, "squlearn.qnn.loss.SquaredLoss.gradient", false]], "gradient() (squlearn.qnn.loss.varianceloss method)": [[64, "squlearn.qnn.loss.VarianceLoss.gradient", false]], "gradient() (squlearn.qnn.lowlevel_qnn.lowlevelqnn method)": [[65, "squlearn.qnn.lowlevel_qnn.LowLevelQNN.gradient", false]], "gradient() (squlearn.qnn.lowlevel_qnn_base.lowlevelqnnbase method)": [[66, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.gradient", false]], "gradient() (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane method)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.gradient", false]], "gradient() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.gradient", false]], "h() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.H", false]], "hash (squlearn.util.pennylane.pennylanecircuit attribute)": [[86, "squlearn.util.pennylane.PennyLaneCircuit.hash", false]], "hash_circuit() (squlearn.util.optree static method)": [[75, "squlearn.util.OpTree.hash_circuit", false]], "hash_operator() (squlearn.util.optree static method)": [[75, "squlearn.util.OpTree.hash_operator", false]], "highdimencodingcircuit (class in squlearn.encoding_circuit)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit", false]], "hubregtsenencodingcircuit (class in squlearn.encoding_circuit)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit", false]], "i (squlearn.observables.isinghamiltonian attribute)": [[41, "squlearn.observables.IsingHamiltonian.I", false]], "i() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.I", false]], "ibmquantum (squlearn.executor attribute)": [[8, "squlearn.Executor.IBMQuantum", false]], "include_identity (squlearn.observables.summedpaulis attribute)": [[44, "squlearn.observables.SummedPaulis.include_identity", false]], "include_identity (squlearn.observables.summedprobabilities attribute)": [[45, "squlearn.observables.SummedProbabilities.include_identity", false]], "is_statevector (squlearn.executor attribute)": [[8, "squlearn.Executor.is_statevector", false]], "isinghamiltonian (class in squlearn.observables)": [[41, "squlearn.observables.IsingHamiltonian", false]], "kernellossbase (class in squlearn.kernel.loss.kernel_loss_base)": [[29, "squlearn.kernel.loss.kernel_loss_base.KernelLossBase", false]], "kernelmatrixbase (class in squlearn.kernel.matrix.kernel_matrix_base)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase", false]], "kyriienkoencodingcircuit (class in squlearn.encoding_circuit)": [[15, "squlearn.encoding_circuit.KyriienkoEncodingCircuit", false]], "layeredencodingcircuit (class in squlearn.encoding_circuit)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit", false]], "lbfgsb (class in squlearn.optimizers)": [[49, "squlearn.optimizers.LBFGSB", false]], "log_marginal_likelihood() (squlearn.kernel.ml.qgpc method)": [[35, "squlearn.kernel.ml.QGPC.log_marginal_likelihood", false]], "lossbase (class in squlearn.qnn.loss)": [[60, "squlearn.qnn.loss.LossBase", false]], "lowlevelqnn (class in squlearn.qnn.lowlevel_qnn)": [[65, "squlearn.qnn.lowlevel_qnn.LowLevelQNN", false]], "lowlevelqnnbase (class in squlearn.qnn.lowlevel_qnn_base)": [[66, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase", false]], "lowlevelqnnpennylane (class in squlearn.qnn.lowlevel_qnn_pennylane)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane", false]], "lowlevelqnnqiskit (class in squlearn.qnn.lowlevel_qnn_qiskit)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit", false]], "measure_circuit() (squlearn.util.optree.optreemeasuredoperator method)": [[82, "squlearn.util.optree.OpTreeMeasuredOperator.measure_circuit", false]], "measurement (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.measurement", false]], "minimize() (squlearn.optimizers.adam method)": [[48, "squlearn.optimizers.Adam.minimize", false]], "minimize() (squlearn.optimizers.lbfgsb method)": [[49, "squlearn.optimizers.LBFGSB.minimize", false]], "minimize() (squlearn.optimizers.optimizer_base.optimizerbase method)": [[53, "squlearn.optimizers.optimizer_base.OptimizerBase.minimize", false]], "minimize() (squlearn.optimizers.sglbo method)": [[50, "squlearn.optimizers.SGLBO.minimize", false]], "minimize() (squlearn.optimizers.slsqp method)": [[51, "squlearn.optimizers.SLSQP.minimize", false]], "minimize() (squlearn.optimizers.spsa method)": [[52, "squlearn.optimizers.SPSA.minimize", false]], "module": [[7, "module-squlearn.encoding_circuit", false], [7, "module-squlearn.kernel.loss", false], [7, "module-squlearn.kernel.matrix", false], [7, "module-squlearn.observables", false], [7, "module-squlearn.optimizers", false], [7, "module-squlearn.qnn", false]], "multicontrolencodingcircuit (class in squlearn.encoding_circuit)": [[17, "squlearn.encoding_circuit.MultiControlEncodingCircuit", false]], "multiple_output (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.multiple_output", false]], "multiple_output (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.multiple_output", false]], "name_hyper_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.name_hyper_parameters", false]], "nll (class in squlearn.kernel.loss.negative_log_likelihood)": [[30, "squlearn.kernel.loss.negative_log_likelihood.NLL", false]], "num_features (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_features", false]], "num_features (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_features", false]], "num_features (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_features", false]], "num_hyper_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_hyper_parameters", false]], "num_operator (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_operator", false]], "num_operator (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_operator", false]], "num_operators (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[47, "squlearn.observables.observable_derivatives.ObservableDerivatives.num_operators", false]], "num_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_parameters", false]], "num_parameters (squlearn.observables.customobservable attribute)": [[40, "squlearn.observables.CustomObservable.num_parameters", false]], "num_parameters (squlearn.observables.isinghamiltonian attribute)": [[41, "squlearn.observables.IsingHamiltonian.num_parameters", false]], "num_parameters (squlearn.observables.observable_base.observablebase attribute)": [[46, "squlearn.observables.observable_base.ObservableBase.num_parameters", false]], "num_parameters (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[47, "squlearn.observables.observable_derivatives.ObservableDerivatives.num_parameters", false]], "num_parameters (squlearn.observables.singlepauli attribute)": [[42, "squlearn.observables.SinglePauli.num_parameters", false]], "num_parameters (squlearn.observables.singleprobability attribute)": [[43, "squlearn.observables.SingleProbability.num_parameters", false]], "num_parameters (squlearn.observables.summedpaulis attribute)": [[44, "squlearn.observables.SummedPaulis.num_parameters", false]], "num_parameters (squlearn.observables.summedprobabilities attribute)": [[45, "squlearn.observables.SummedProbabilities.num_parameters", false]], "num_parameters (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_parameters", false]], "num_parameters (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_parameters", false]], "num_parameters_observable (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_parameters_observable", false]], "num_parameters_observable (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_parameters_observable", false]], "num_qubits (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_qubits", false]], "num_qubits (squlearn.observables.customobservable attribute)": [[40, "squlearn.observables.CustomObservable.num_qubits", false]], "num_qubits (squlearn.observables.isinghamiltonian attribute)": [[41, "squlearn.observables.IsingHamiltonian.num_qubits", false]], "num_qubits (squlearn.observables.observable_base.observablebase attribute)": [[46, "squlearn.observables.observable_base.ObservableBase.num_qubits", false]], "num_qubits (squlearn.observables.singlepauli attribute)": [[42, "squlearn.observables.SinglePauli.num_qubits", false]], "num_qubits (squlearn.observables.singleprobability attribute)": [[43, "squlearn.observables.SingleProbability.num_qubits", false]], "num_qubits (squlearn.observables.summedpaulis attribute)": [[44, "squlearn.observables.SummedPaulis.num_qubits", false]], "num_qubits (squlearn.observables.summedprobabilities attribute)": [[45, "squlearn.observables.SummedProbabilities.num_qubits", false]], "num_qubits (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_qubits", false]], "num_qubits (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_qubits", false]], "observable_parameter_dimension (squlearn.util.pennylane.pennylanecircuit attribute)": [[86, "squlearn.util.pennylane.PennyLaneCircuit.observable_parameter_dimension", false]], "observable_parameter_names (squlearn.util.pennylane.pennylanecircuit attribute)": [[86, "squlearn.util.pennylane.PennyLaneCircuit.observable_parameter_names", false]], "observablebase (class in squlearn.observables.observable_base)": [[46, "squlearn.observables.observable_base.ObservableBase", false]], "observablederivatives (class in squlearn.observables.observable_derivatives)": [[47, "squlearn.observables.observable_derivatives.ObservableDerivatives", false]], "odeloss (class in squlearn.qnn.loss)": [[61, "squlearn.qnn.loss.ODELoss", false]], "one_state (squlearn.observables.singleprobability attribute)": [[43, "squlearn.observables.SingleProbability.one_state", false]], "one_state (squlearn.observables.summedprobabilities attribute)": [[45, "squlearn.observables.SummedProbabilities.one_state", false]], "op_str (squlearn.observables.singlepauli attribute)": [[42, "squlearn.observables.SinglePauli.op_str", false]], "op_str (squlearn.observables.summedpaulis attribute)": [[44, "squlearn.observables.SummedPaulis.op_str", false]], "operator_string (squlearn.observables.customobservable attribute)": [[40, "squlearn.observables.CustomObservable.operator_string", false]], "optimizerbase (class in squlearn.optimizers.optimizer_base)": [[53, "squlearn.optimizers.optimizer_base.OptimizerBase", false]], "optree (class in squlearn.util)": [[75, "squlearn.util.OpTree", false]], "optree.optreederivative (class in squlearn.util)": [[75, "squlearn.util.OpTree.OpTreeDerivative", false]], "optree.optreeevaluate (class in squlearn.util)": [[75, "squlearn.util.OpTree.OpTreeEvaluate", false]], "optreecircuit (class in squlearn.util.optree)": [[78, "squlearn.util.optree.OpTreeCircuit", false]], "optreecontainer (class in squlearn.util.optree)": [[79, "squlearn.util.optree.OpTreeContainer", false]], "optreeexpectationvalue (class in squlearn.util.optree)": [[80, "squlearn.util.optree.OpTreeExpectationValue", false]], "optreelist (class in squlearn.util.optree)": [[81, "squlearn.util.optree.OpTreeList", false]], "optreemeasuredoperator (class in squlearn.util.optree)": [[82, "squlearn.util.optree.OpTreeMeasuredOperator", false]], "optreeoperator (class in squlearn.util.optree)": [[83, "squlearn.util.optree.OpTreeOperator", false]], "optreesum (class in squlearn.util.optree)": [[84, "squlearn.util.optree.OpTreeSum", false]], "optreevalue (class in squlearn.util.optree)": [[85, "squlearn.util.optree.OpTreeValue", false]], "outer_kernel (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.outer_kernel", false]], "p() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.P", false]], "parameter_vector (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[47, "squlearn.observables.observable_derivatives.ObservableDerivatives.parameter_vector", false]], "parameterized (squlearn.observables.customobservable attribute)": [[40, "squlearn.observables.CustomObservable.parameterized", false]], "parameterized (squlearn.observables.singlepauli attribute)": [[42, "squlearn.observables.SinglePauli.parameterized", false]], "parameterized (squlearn.observables.singleprobability attribute)": [[43, "squlearn.observables.SingleProbability.parameterized", false]], "parameterregularizationloss (class in squlearn.qnn.loss)": [[62, "squlearn.qnn.loss.ParameterRegularizationLoss", false]], "parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.parameters", false]], "parameters (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.parameters", false]], "parameters (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.parameters", false]], "parameters_operator (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.parameters_operator", false]], "parameters_operator (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.parameters_operator", false]], "paramzfeaturemap (class in squlearn.encoding_circuit)": [[18, "squlearn.encoding_circuit.ParamZFeatureMap", false]], "partial_fit() (squlearn.qnn.qnnclassifier method)": [[54, "squlearn.qnn.QNNClassifier.partial_fit", false]], "partial_fit() (squlearn.qnn.qnnregressor method)": [[55, "squlearn.qnn.QNNRegressor.partial_fit", false]], "pennylane_circuit (squlearn.util.pennylane.pennylanecircuit attribute)": [[86, "squlearn.util.pennylane.PennyLaneCircuit.pennylane_circuit", false]], "pennylane_execute() (squlearn.executor method)": [[8, "squlearn.Executor.pennylane_execute", false]], "pennylane_execute_batched() (squlearn.executor method)": [[8, "squlearn.Executor.pennylane_execute_batched", false]], "pennylanecircuit (class in squlearn.util.pennylane)": [[86, "squlearn.util.pennylane.PennyLaneCircuit", false]], "pooling() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit.pooling", false]], "predict() (squlearn.kernel.ml.qgpc method)": [[35, "squlearn.kernel.ml.QGPC.predict", false]], "predict() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.predict", false]], "predict() (squlearn.kernel.ml.qkrr method)": [[37, "squlearn.kernel.ml.QKRR.predict", false]], "predict() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.predict", false]], "predict() (squlearn.kernel.ml.qsvr method)": [[39, "squlearn.kernel.ml.QSVR.predict", false]], "predict() (squlearn.qnn.qnnclassifier method)": [[54, "squlearn.qnn.QNNClassifier.predict", false]], "predict() (squlearn.qnn.qnnregressor method)": [[55, "squlearn.qnn.QNNRegressor.predict", false]], "predict() (squlearn.qrc.base_qrc.baseqrc method)": [[74, "squlearn.qrc.base_qrc.BaseQRC.predict", false]], "predict() (squlearn.qrc.qrcclassifier method)": [[72, "squlearn.qrc.QRCClassifier.predict", false]], "predict() (squlearn.qrc.qrcregressor method)": [[73, "squlearn.qrc.QRCRegressor.predict", false]], "predict_log_proba() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.predict_log_proba", false]], "predict_proba() (squlearn.kernel.ml.qgpc method)": [[35, "squlearn.kernel.ml.QGPC.predict_proba", false]], "predict_proba() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.predict_proba", false]], "predict_proba() (squlearn.qnn.qnnclassifier method)": [[54, "squlearn.qnn.QNNClassifier.predict_proba", false]], "projectedquantumkernel (class in squlearn.kernel.matrix)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel", false]], "prunedencodingcircuit (class in squlearn.encoding_circuit)": [[19, "squlearn.encoding_circuit.PrunedEncodingCircuit", false]], "pruning_from_qfi() (in module squlearn.encoding_circuit)": [[28, "squlearn.encoding_circuit.pruning_from_QFI", false]], "qcnnencodingcircuit (class in squlearn.encoding_circuit)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit", false]], "qcnnobservable() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit.QCNNObservable", false]], "qgpc (class in squlearn.kernel.ml)": [[35, "squlearn.kernel.ml.QGPC", false]], "qgpr (class in squlearn.kernel.ml)": [[36, "squlearn.kernel.ml.QGPR", false]], "qiskit_execute() (squlearn.executor method)": [[8, "squlearn.Executor.qiskit_execute", false]], "qiskitencodingcircuit (class in squlearn.encoding_circuit)": [[21, "squlearn.encoding_circuit.QiskitEncodingCircuit", false]], "qkrr (class in squlearn.kernel.ml)": [[37, "squlearn.kernel.ml.QKRR", false]], "qnnclassifier (class in squlearn.qnn)": [[54, "squlearn.qnn.QNNClassifier", false]], "qnnregressor (class in squlearn.qnn)": [[55, "squlearn.qnn.QNNRegressor", false]], "qpu_parallelization (squlearn.executor attribute)": [[8, "squlearn.Executor.qpu_parallelization", false]], "qrcclassifier (class in squlearn.qrc)": [[72, "squlearn.qrc.QRCClassifier", false]], "qrcregressor (class in squlearn.qrc)": [[73, "squlearn.qrc.QRCRegressor", false]], "qsvc (class in squlearn.kernel.ml)": [[38, "squlearn.kernel.ml.QSVC", false]], "qsvr (class in squlearn.kernel.ml)": [[39, "squlearn.kernel.ml.QSVR", false]], "quantum_framework (squlearn.executor attribute)": [[8, "squlearn.Executor.quantum_framework", false]], "qubit (squlearn.observables.singlepauli attribute)": [[42, "squlearn.observables.SinglePauli.qubit", false]], "qubit (squlearn.observables.singleprobability attribute)": [[43, "squlearn.observables.SingleProbability.qubit", false]], "randomencodingcircuit (class in squlearn.encoding_circuit)": [[22, "squlearn.encoding_circuit.RandomEncodingCircuit", false]], "randomlayeredencodingcircuit (class in squlearn.encoding_circuit)": [[23, "squlearn.encoding_circuit.RandomLayeredEncodingCircuit", false]], "remove() (squlearn.util.optree.optreelist method)": [[81, "squlearn.util.optree.OpTreeList.remove", false]], "remove() (squlearn.util.optree.optreesum method)": [[84, "squlearn.util.optree.OpTreeSum.remove", false]], "repeat_layers() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit.repeat_layers", false]], "reset() (squlearn.optimizers.adam method)": [[48, "squlearn.optimizers.Adam.reset", false]], "reset() (squlearn.optimizers.sglbo method)": [[50, "squlearn.optimizers.SGLBO.reset", false]], "reset_shots() (squlearn.executor method)": [[8, "squlearn.Executor.reset_shots", false]], "reset_shots() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.reset_shots", false]], "reset_shots() (squlearn.qnn.shotsfromrstd method)": [[56, "squlearn.qnn.ShotsFromRSTD.reset_shots", false]], "rx() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.Rx", false]], "rxx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.rxx_entangling", false]], "ry() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.Ry", false]], "ryy_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.ryy_entangling", false]], "rz() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.Rz", false]], "rzx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.rzx_entangling", false]], "rzz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.rzz_entangling", false]], "s() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.S", false]], "s_conjugate() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.S_conjugate", false]], "sampler (squlearn.executor attribute)": [[8, "squlearn.Executor.sampler", false]], "sampler_options (squlearn.executor attribute)": [[8, "squlearn.Executor.sampler_options", false]], "sampler_run_v1() (squlearn.executor method)": [[8, "squlearn.Executor.sampler_run_v1", false]], "sampler_run_v2() (squlearn.executor method)": [[8, "squlearn.Executor.sampler_run_v2", false]], "score() (squlearn.kernel.ml.qgpc method)": [[35, "squlearn.kernel.ml.QGPC.score", false]], "score() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.score", false]], "score() (squlearn.kernel.ml.qkrr method)": [[37, "squlearn.kernel.ml.QKRR.score", false]], "score() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.score", false]], "score() (squlearn.kernel.ml.qsvr method)": [[39, "squlearn.kernel.ml.QSVR.score", false]], "score() (squlearn.qnn.qnnclassifier method)": [[54, "squlearn.qnn.QNNClassifier.score", false]], "score() (squlearn.qnn.qnnregressor method)": [[55, "squlearn.qnn.QNNRegressor.score", false]], "score() (squlearn.qrc.qrcclassifier method)": [[72, "squlearn.qrc.QRCClassifier.score", false]], "score() (squlearn.qrc.qrcregressor method)": [[73, "squlearn.qrc.QRCRegressor.score", false]], "select_backend() (squlearn.executor method)": [[8, "squlearn.Executor.select_backend", false]], "service (squlearn.executor attribute)": [[8, "squlearn.Executor.service", false]], "session (squlearn.executor attribute)": [[8, "squlearn.Executor.session", false]], "set_backend() (squlearn.executor method)": [[8, "squlearn.Executor.set_backend", false]], "set_callback() (squlearn.optimizers.adam method)": [[48, "squlearn.optimizers.Adam.set_callback", false]], "set_callback() (squlearn.optimizers.lbfgsb method)": [[49, "squlearn.optimizers.LBFGSB.set_callback", false]], "set_callback() (squlearn.optimizers.optimizer_base.optimizerbase method)": [[53, "squlearn.optimizers.optimizer_base.OptimizerBase.set_callback", false]], "set_callback() (squlearn.optimizers.sglbo method)": [[50, "squlearn.optimizers.SGLBO.set_callback", false]], "set_callback() (squlearn.optimizers.slsqp method)": [[51, "squlearn.optimizers.SLSQP.set_callback", false]], "set_callback() (squlearn.optimizers.spsa method)": [[52, "squlearn.optimizers.SPSA.set_callback", false]], "set_executor() (squlearn.qnn.shotsfromrstd method)": [[56, "squlearn.qnn.ShotsFromRSTD.set_executor", false]], "set_fit_request() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.set_fit_request", false]], "set_fit_request() (squlearn.kernel.ml.qsvr method)": [[39, "squlearn.kernel.ml.QSVR.set_fit_request", false]], "set_fit_request() (squlearn.qnn.base_qnn.baseqnn method)": [[57, "squlearn.qnn.base_qnn.BaseQNN.set_fit_request", false]], "set_fit_request() (squlearn.qnn.qnnclassifier method)": [[54, "squlearn.qnn.QNNClassifier.set_fit_request", false]], "set_fit_request() (squlearn.qnn.qnnregressor method)": [[55, "squlearn.qnn.QNNRegressor.set_fit_request", false]], "set_map() (squlearn.observables.customobservable method)": [[40, "squlearn.observables.CustomObservable.set_map", false]], "set_map() (squlearn.observables.isinghamiltonian method)": [[41, "squlearn.observables.IsingHamiltonian.set_map", false]], "set_map() (squlearn.observables.observable_base.observablebase method)": [[46, "squlearn.observables.observable_base.ObservableBase.set_map", false]], "set_map() (squlearn.observables.singlepauli method)": [[42, "squlearn.observables.SinglePauli.set_map", false]], "set_map() (squlearn.observables.singleprobability method)": [[43, "squlearn.observables.SingleProbability.set_map", false]], "set_map() (squlearn.observables.summedpaulis method)": [[44, "squlearn.observables.SummedPaulis.set_map", false]], "set_map() (squlearn.observables.summedprobabilities method)": [[45, "squlearn.observables.SummedProbabilities.set_map", false]], "set_opt_param_op() (squlearn.qnn.loss.lossbase method)": [[60, "squlearn.qnn.loss.LossBase.set_opt_param_op", false]], "set_opt_param_op() (squlearn.qnn.loss.odeloss method)": [[61, "squlearn.qnn.loss.ODELoss.set_opt_param_op", false]], "set_opt_param_op() (squlearn.qnn.loss.parameterregularizationloss method)": [[62, "squlearn.qnn.loss.ParameterRegularizationLoss.set_opt_param_op", false]], "set_opt_param_op() (squlearn.qnn.loss.squaredloss method)": [[63, "squlearn.qnn.loss.SquaredLoss.set_opt_param_op", false]], "set_opt_param_op() (squlearn.qnn.loss.varianceloss method)": [[64, "squlearn.qnn.loss.VarianceLoss.set_opt_param_op", false]], "set_options_estimator() (squlearn.executor method)": [[8, "squlearn.Executor.set_options_estimator", false]], "set_options_sampler() (squlearn.executor method)": [[8, "squlearn.Executor.set_options_sampler", false]], "set_params() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.set_params", false]], "set_params() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.set_params", false]], "set_params() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.set_params", false]], "set_params() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[27, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.set_params", false]], "set_params() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.kyriienkoencodingcircuit method)": [[15, "squlearn.encoding_circuit.KyriienkoEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[17, "squlearn.encoding_circuit.MultiControlEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.paramzfeaturemap method)": [[18, "squlearn.encoding_circuit.ParamZFeatureMap.set_params", false]], "set_params() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[19, "squlearn.encoding_circuit.PrunedEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[20, "squlearn.encoding_circuit.QCNNEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[21, "squlearn.encoding_circuit.QiskitEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.randomencodingcircuit method)": [[22, "squlearn.encoding_circuit.RandomEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.randomlayeredencodingcircuit method)": [[23, "squlearn.encoding_circuit.RandomLayeredEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[24, "squlearn.encoding_circuit.TranspiledEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[25, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.set_params", false]], "set_params() (squlearn.kernel.matrix.fidelitykernel method)": [[32, "squlearn.kernel.matrix.FidelityKernel.set_params", false]], "set_params() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[34, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.set_params", false]], "set_params() (squlearn.kernel.matrix.projectedquantumkernel method)": [[33, "squlearn.kernel.matrix.ProjectedQuantumKernel.set_params", false]], "set_params() (squlearn.kernel.ml.qgpc method)": [[35, "squlearn.kernel.ml.QGPC.set_params", false]], "set_params() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.set_params", false]], "set_params() (squlearn.kernel.ml.qkrr method)": [[37, "squlearn.kernel.ml.QKRR.set_params", false]], "set_params() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.set_params", false]], "set_params() (squlearn.kernel.ml.qsvr method)": [[39, "squlearn.kernel.ml.QSVR.set_params", false]], "set_params() (squlearn.observables.customobservable method)": [[40, "squlearn.observables.CustomObservable.set_params", false]], "set_params() (squlearn.observables.isinghamiltonian method)": [[41, "squlearn.observables.IsingHamiltonian.set_params", false]], "set_params() (squlearn.observables.observable_base.observablebase method)": [[46, "squlearn.observables.observable_base.ObservableBase.set_params", false]], "set_params() (squlearn.observables.singlepauli method)": [[42, "squlearn.observables.SinglePauli.set_params", false]], "set_params() (squlearn.observables.singleprobability method)": [[43, "squlearn.observables.SingleProbability.set_params", false]], "set_params() (squlearn.observables.summedpaulis method)": [[44, "squlearn.observables.SummedPaulis.set_params", false]], "set_params() (squlearn.observables.summedprobabilities method)": [[45, "squlearn.observables.SummedProbabilities.set_params", false]], "set_params() (squlearn.qnn.base_qnn.baseqnn method)": [[57, "squlearn.qnn.base_qnn.BaseQNN.set_params", false]], "set_params() (squlearn.qnn.lowlevel_qnn.lowlevelqnn method)": [[65, "squlearn.qnn.lowlevel_qnn.LowLevelQNN.set_params", false]], "set_params() (squlearn.qnn.lowlevel_qnn_base.lowlevelqnnbase method)": [[66, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.set_params", false]], "set_params() (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane method)": [[67, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.set_params", false]], "set_params() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.set_params", false]], "set_params() (squlearn.qnn.qnnclassifier method)": [[54, "squlearn.qnn.QNNClassifier.set_params", false]], "set_params() (squlearn.qnn.qnnregressor method)": [[55, "squlearn.qnn.QNNRegressor.set_params", false]], "set_params() (squlearn.qrc.base_qrc.baseqrc method)": [[74, "squlearn.qrc.base_qrc.BaseQRC.set_params", false]], "set_params() (squlearn.qrc.qrcclassifier method)": [[72, "squlearn.qrc.QRCClassifier.set_params", false]], "set_params() (squlearn.qrc.qrcregressor method)": [[73, "squlearn.qrc.QRCRegressor.set_params", false]], "set_partial_fit_request() (squlearn.qnn.qnnclassifier method)": [[54, "squlearn.qnn.QNNClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (squlearn.qnn.qnnregressor method)": [[55, "squlearn.qnn.QNNRegressor.set_partial_fit_request", false]], "set_predict_request() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.set_predict_request", false]], "set_primitive_options() (squlearn.executor method)": [[8, "squlearn.Executor.set_primitive_options", false]], "set_quantum_kernel() (squlearn.kernel.loss.kernel_loss_base.kernellossbase method)": [[29, "squlearn.kernel.loss.kernel_loss_base.KernelLossBase.set_quantum_kernel", false]], "set_quantum_kernel() (squlearn.kernel.loss.negative_log_likelihood.nll method)": [[30, "squlearn.kernel.loss.negative_log_likelihood.NLL.set_quantum_kernel", false]], "set_quantum_kernel() (squlearn.kernel.loss.target_alignment.targetalignment method)": [[31, "squlearn.kernel.loss.target_alignment.TargetAlignment.set_quantum_kernel", false]], "set_score_request() (squlearn.kernel.ml.qgpc method)": [[35, "squlearn.kernel.ml.QGPC.set_score_request", false]], "set_score_request() (squlearn.kernel.ml.qgpr method)": [[36, "squlearn.kernel.ml.QGPR.set_score_request", false]], "set_score_request() (squlearn.kernel.ml.qkrr method)": [[37, "squlearn.kernel.ml.QKRR.set_score_request", false]], "set_score_request() (squlearn.kernel.ml.qsvc method)": [[38, "squlearn.kernel.ml.QSVC.set_score_request", false]], "set_score_request() (squlearn.kernel.ml.qsvr method)": [[39, "squlearn.kernel.ml.QSVR.set_score_request", false]], "set_score_request() (squlearn.qnn.qnnclassifier method)": [[54, "squlearn.qnn.QNNClassifier.set_score_request", false]], "set_score_request() (squlearn.qnn.qnnregressor method)": [[55, "squlearn.qnn.QNNRegressor.set_score_request", false]], "set_score_request() (squlearn.qrc.qrcclassifier method)": [[72, "squlearn.qrc.QRCClassifier.set_score_request", false]], "set_score_request() (squlearn.qrc.qrcregressor method)": [[73, "squlearn.qrc.QRCRegressor.set_score_request", false]], "set_seed_for_primitive() (squlearn.executor method)": [[8, "squlearn.Executor.set_seed_for_primitive", false]], "set_shots() (squlearn.executor method)": [[8, "squlearn.Executor.set_shots", false]], "set_shots() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[69, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.set_shots", false]], "set_shots_for_grad() (squlearn.qnn.shotsfromrstd method)": [[56, "squlearn.qnn.ShotsFromRSTD.set_shots_for_grad", false]], "set_shots_for_loss() (squlearn.qnn.shotsfromrstd method)": [[56, "squlearn.qnn.ShotsFromRSTD.set_shots_for_loss", false]], "sglbo (class in squlearn.optimizers)": [[50, "squlearn.optimizers.SGLBO", false]], "shots (squlearn.executor attribute)": [[8, "squlearn.Executor.shots", false]], "shotsfromrstd (class in squlearn.qnn)": [[56, "squlearn.qnn.ShotsFromRSTD", false]], "simplify() (squlearn.util.optree static method)": [[75, "squlearn.util.OpTree.simplify", false]], "singlepauli (class in squlearn.observables)": [[42, "squlearn.observables.SinglePauli", false]], "singleprobability (class in squlearn.observables)": [[43, "squlearn.observables.SingleProbability", false]], "slsqp (class in squlearn.optimizers)": [[51, "squlearn.optimizers.SLSQP", false]], "spsa (class in squlearn.optimizers)": [[52, "squlearn.optimizers.SPSA", false]], "squaredloss (class in squlearn.qnn.loss)": [[63, "squlearn.qnn.loss.SquaredLoss", false]], "squlearn.encoding_circuit": [[7, "module-squlearn.encoding_circuit", false]], "squlearn.kernel.loss": [[7, "module-squlearn.kernel.loss", false]], "squlearn.kernel.matrix": [[7, "module-squlearn.kernel.matrix", false]], "squlearn.observables": [[7, "module-squlearn.observables", false]], "squlearn.optimizers": [[7, "module-squlearn.optimizers", false]], "squlearn.qnn": [[7, "module-squlearn.qnn", false]], "step() (squlearn.optimizers.adam method)": [[48, "squlearn.optimizers.Adam.step", false]], "step() (squlearn.optimizers.sglbo method)": [[50, "squlearn.optimizers.SGLBO.step", false]], "summedpaulis (class in squlearn.observables)": [[44, "squlearn.observables.SummedPaulis", false]], "summedprobabilities (class in squlearn.observables)": [[45, "squlearn.observables.SummedProbabilities", false]], "swap() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.swap", false]], "t() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.T", false]], "t_conjugate() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.T_conjugate", false]], "targetalignment (class in squlearn.kernel.loss.target_alignment)": [[31, "squlearn.kernel.loss.target_alignment.TargetAlignment", false]], "train (class in squlearn.qnn.training)": [[70, "squlearn.qnn.training.train", false]], "train_mini_batch (class in squlearn.qnn.training)": [[71, "squlearn.qnn.training.train_mini_batch", false]], "transform_to_zbasis() (squlearn.util.optree.optreeevaluate static method)": [[75, "squlearn.util.OpTree.OpTreeEvaluate.transform_to_zbasis", false]], "transpile_to_supported_instructions() (squlearn.util.optree.optreederivative static method)": [[75, "squlearn.util.OpTree.OpTreeDerivative.transpile_to_supported_instructions", false]], "transpiledencodingcircuit (class in squlearn.encoding_circuit)": [[24, "squlearn.encoding_circuit.TranspiledEncodingCircuit", false]], "u() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.U", false]], "unset_backend() (squlearn.executor method)": [[8, "squlearn.Executor.unset_backend", false]], "value() (squlearn.qnn.loss.lossbase method)": [[60, "squlearn.qnn.loss.LossBase.value", false]], "value() (squlearn.qnn.loss.odeloss method)": [[61, "squlearn.qnn.loss.ODELoss.value", false]], "value() (squlearn.qnn.loss.parameterregularizationloss method)": [[62, "squlearn.qnn.loss.ParameterRegularizationLoss.value", false]], "value() (squlearn.qnn.loss.squaredloss method)": [[63, "squlearn.qnn.loss.SquaredLoss.value", false]], "value() (squlearn.qnn.loss.varianceloss method)": [[64, "squlearn.qnn.loss.VarianceLoss.value", false]], "variance() (squlearn.qnn.loss.lossbase method)": [[60, "squlearn.qnn.loss.LossBase.variance", false]], "variance() (squlearn.qnn.loss.odeloss method)": [[61, "squlearn.qnn.loss.ODELoss.variance", false]], "variance() (squlearn.qnn.loss.parameterregularizationloss method)": [[62, "squlearn.qnn.loss.ParameterRegularizationLoss.variance", false]], "variance() (squlearn.qnn.loss.squaredloss method)": [[63, "squlearn.qnn.loss.SquaredLoss.variance", false]], "variance() (squlearn.qnn.loss.varianceloss method)": [[64, "squlearn.qnn.loss.VarianceLoss.variance", false]], "varianceloss (class in squlearn.qnn.loss)": [[64, "squlearn.qnn.loss.VarianceLoss", false]], "x (squlearn.observables.isinghamiltonian attribute)": [[41, "squlearn.observables.IsingHamiltonian.X", false]], "x() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.X", false]], "y() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.Y", false]], "yz_cx_encodingcircuit (class in squlearn.encoding_circuit)": [[25, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit", false]], "z (squlearn.observables.isinghamiltonian attribute)": [[41, "squlearn.observables.IsingHamiltonian.Z", false]], "z() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[16, "squlearn.encoding_circuit.LayeredEncodingCircuit.Z", false]], "zz (squlearn.observables.isinghamiltonian attribute)": [[41, "squlearn.observables.IsingHamiltonian.ZZ", false]]}, "objects": {"squlearn": [[8, 0, 1, "", "Executor"], [7, 3, 0, "-", "encoding_circuit"], [7, 3, 0, "-", "observables"], [7, 3, 0, "-", "optimizers"], [7, 3, 0, "-", "qnn"]], "squlearn.Executor": [[8, 1, 1, "", "IBMQuantum"], [8, 1, 1, "", "backend"], [8, 1, 1, "", "backend_chosen"], [8, 1, 1, "", "backend_list"], [8, 1, 1, "", "backend_name"], [8, 2, 1, "", "clear_estimator_cache"], [8, 2, 1, "", "clear_sampler_cache"], [8, 2, 1, "", "close_session"], [8, 2, 1, "", "create_session"], [8, 1, 1, "", "estimator"], [8, 1, 1, "", "estimator_options"], [8, 2, 1, "", "estimator_run_v1"], [8, 2, 1, "", "estimator_run_v2"], [8, 1, 1, "", "execution"], [8, 2, 1, "", "get_estimator"], [8, 2, 1, "", "get_sampler"], [8, 2, 1, "", "get_shots"], [8, 1, 1, "", "is_statevector"], [8, 2, 1, "", "pennylane_execute"], [8, 2, 1, "", "pennylane_execute_batched"], [8, 2, 1, "", "qiskit_execute"], [8, 1, 1, "", "qpu_parallelization"], [8, 1, 1, "", "quantum_framework"], [8, 2, 1, "", "reset_shots"], [8, 1, 1, "", "sampler"], [8, 1, 1, "", "sampler_options"], [8, 2, 1, "", "sampler_run_v1"], [8, 2, 1, "", "sampler_run_v2"], [8, 2, 1, "", "select_backend"], [8, 1, 1, "", "service"], [8, 1, 1, "", "session"], [8, 2, 1, "", "set_backend"], [8, 2, 1, "", "set_options_estimator"], [8, 2, 1, "", "set_options_sampler"], [8, 2, 1, "", "set_primitive_options"], [8, 2, 1, "", "set_seed_for_primitive"], [8, 2, 1, "", "set_shots"], [8, 1, 1, "", "shots"], [8, 2, 1, "", "unset_backend"]], "squlearn.encoding_circuit": [[9, 0, 1, "", "ChebyshevPQC"], [10, 0, 1, "", "ChebyshevRx"], [11, 0, 1, "", "ChebyshevTower"], [12, 0, 1, "", "EncodingCircuitDerivatives"], [13, 0, 1, "", "HighDimEncodingCircuit"], [14, 0, 1, "", "HubregtsenEncodingCircuit"], [15, 0, 1, "", "KyriienkoEncodingCircuit"], [16, 0, 1, "", "LayeredEncodingCircuit"], [17, 0, 1, "", "MultiControlEncodingCircuit"], [18, 0, 1, "", "ParamZFeatureMap"], [19, 0, 1, "", "PrunedEncodingCircuit"], [20, 0, 1, "", "QCNNEncodingCircuit"], [21, 0, 1, "", "QiskitEncodingCircuit"], [22, 0, 1, "", "RandomEncodingCircuit"], [23, 0, 1, "", "RandomLayeredEncodingCircuit"], [24, 0, 1, "", "TranspiledEncodingCircuit"], [25, 0, 1, "", "YZ_CX_EncodingCircuit"], [26, 4, 1, "", "automated_pruning"], [28, 4, 1, "", "pruning_from_QFI"]], "squlearn.encoding_circuit.ChebyshevPQC": [[9, 2, 1, "", "draw"], [9, 2, 1, "", "generate_initial_parameters"], [9, 2, 1, "", "get_cheb_indices"], [9, 2, 1, "", "get_circuit"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ChebyshevRx": [[10, 2, 1, "", "draw"], [10, 2, 1, "", "generate_initial_parameters"], [10, 2, 1, "", "get_cheb_indices"], [10, 2, 1, "", "get_circuit"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ChebyshevTower": [[11, 2, 1, "", "draw"], [11, 2, 1, "", "generate_initial_parameters"], [11, 2, 1, "", "get_circuit"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.EncodingCircuitDerivatives": [[12, 2, 1, "", "assign_parameters"], [12, 2, 1, "", "get_derivative"]], "squlearn.encoding_circuit.HighDimEncodingCircuit": [[13, 2, 1, "", "draw"], [13, 2, 1, "", "generate_initial_parameters"], [13, 2, 1, "", "get_circuit"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.HubregtsenEncodingCircuit": [[14, 2, 1, "", "draw"], [14, 2, 1, "", "generate_initial_parameters"], [14, 2, 1, "", "get_circuit"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.KyriienkoEncodingCircuit": [[15, 2, 1, "", "draw"], [15, 2, 1, "", "generate_initial_parameters"], [15, 2, 1, "", "get_circuit"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.LayeredEncodingCircuit": [[16, 2, 1, "", "H"], [16, 2, 1, "", "I"], [16, 2, 1, "", "P"], [16, 2, 1, "", "Rx"], [16, 2, 1, "", "Ry"], [16, 2, 1, "", "Rz"], [16, 2, 1, "", "S"], [16, 2, 1, "", "S_conjugate"], [16, 2, 1, "", "T"], [16, 2, 1, "", "T_conjugate"], [16, 2, 1, "", "U"], [16, 2, 1, "", "X"], [16, 2, 1, "", "Y"], [16, 2, 1, "", "Z"], [16, 2, 1, "", "add_layer"], [16, 2, 1, "", "ch_entangling"], [16, 2, 1, "", "cp_entangling"], [16, 2, 1, "", "crx_entangling"], [16, 2, 1, "", "cry_entangling"], [16, 2, 1, "", "crz_entangling"], [16, 2, 1, "", "cu_entangling"], [16, 2, 1, "", "cx_entangling"], [16, 2, 1, "", "cy_entangling"], [16, 2, 1, "", "cz_entangling"], [16, 2, 1, "", "draw"], [16, 2, 1, "", "from_string"], [16, 2, 1, "", "generate_initial_parameters"], [16, 2, 1, "", "get_circuit"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "rxx_entangling"], [16, 2, 1, "", "ryy_entangling"], [16, 2, 1, "", "rzx_entangling"], [16, 2, 1, "", "rzz_entangling"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "swap"]], "squlearn.encoding_circuit.MultiControlEncodingCircuit": [[17, 2, 1, "", "draw"], [17, 2, 1, "", "generate_initial_parameters"], [17, 2, 1, "", "get_circuit"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ParamZFeatureMap": [[18, 2, 1, "", "draw"], [18, 2, 1, "", "generate_initial_parameters"], [18, 2, 1, "", "get_circuit"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.PrunedEncodingCircuit": [[19, 2, 1, "", "draw"], [19, 2, 1, "", "generate_initial_parameters"], [19, 2, 1, "", "get_circuit"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.QCNNEncodingCircuit": [[20, 2, 1, "", "QCNNObservable"], [20, 2, 1, "", "build_circuit"], [20, 2, 1, "", "convolution"], [20, 2, 1, "", "default_circuit"], [20, 2, 1, "", "draw"], [20, 2, 1, "", "fully_connected"], [20, 2, 1, "", "generate_initial_parameters"], [20, 2, 1, "", "get_circuit"], [20, 2, 1, "", "get_params"], [20, 2, 1, "", "pooling"], [20, 2, 1, "", "repeat_layers"], [20, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.QiskitEncodingCircuit": [[21, 2, 1, "", "draw"], [21, 2, 1, "", "generate_initial_parameters"], [21, 2, 1, "", "get_circuit"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.RandomEncodingCircuit": [[22, 2, 1, "", "draw"], [22, 2, 1, "", "generate_initial_parameters"], [22, 2, 1, "", "get_circuit"], [22, 2, 1, "", "get_params"], [22, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.RandomLayeredEncodingCircuit": [[23, 2, 1, "", "draw"], [23, 2, 1, "", "generate_initial_parameters"], [23, 2, 1, "", "get_circuit"], [23, 2, 1, "", "get_params"], [23, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.TranspiledEncodingCircuit": [[24, 2, 1, "", "draw"], [24, 2, 1, "", "generate_initial_parameters"], [24, 2, 1, "", "get_circuit"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.YZ_CX_EncodingCircuit": [[25, 2, 1, "", "draw"], [25, 2, 1, "", "generate_initial_parameters"], [25, 2, 1, "", "get_circuit"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.encoding_circuit_base": [[27, 0, 1, "", "EncodingCircuitBase"]], "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase": [[27, 2, 1, "", "draw"], [27, 2, 1, "", "generate_initial_parameters"], [27, 2, 1, "", "get_circuit"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "set_params"]], "squlearn.kernel": [[7, 3, 0, "-", "loss"], [7, 3, 0, "-", "matrix"]], "squlearn.kernel.loss.kernel_loss_base": [[29, 0, 1, "", "KernelLossBase"]], "squlearn.kernel.loss.kernel_loss_base.KernelLossBase": [[29, 2, 1, "", "compute"], [29, 2, 1, "", "set_quantum_kernel"]], "squlearn.kernel.loss.negative_log_likelihood": [[30, 0, 1, "", "NLL"]], "squlearn.kernel.loss.negative_log_likelihood.NLL": [[30, 2, 1, "", "compute"], [30, 2, 1, "", "set_quantum_kernel"]], "squlearn.kernel.loss.target_alignment": [[31, 0, 1, "", "TargetAlignment"]], "squlearn.kernel.loss.target_alignment.TargetAlignment": [[31, 2, 1, "", "compute"], [31, 2, 1, "", "set_quantum_kernel"]], "squlearn.kernel.matrix": [[32, 0, 1, "", "FidelityKernel"], [33, 0, 1, "", "ProjectedQuantumKernel"]], "squlearn.kernel.matrix.FidelityKernel": [[32, 2, 1, "", "assign_parameters"], [32, 2, 1, "", "evaluate"], [32, 2, 1, "", "evaluate_pairwise"], [32, 2, 1, "", "evaluate_with_parameters"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "set_params"]], "squlearn.kernel.matrix.ProjectedQuantumKernel": [[33, 2, 1, "", "assign_parameters"], [33, 1, 1, "", "encoding_circuit"], [33, 2, 1, "", "evaluate"], [33, 2, 1, "", "evaluate_derivatives"], [33, 2, 1, "", "evaluate_pairwise"], [33, 2, 1, "", "evaluate_qnn"], [33, 2, 1, "", "evaluate_with_parameters"], [33, 2, 1, "", "get_params"], [33, 1, 1, "", "measurement"], [33, 1, 1, "", "name_hyper_parameters"], [33, 1, 1, "", "num_features"], [33, 1, 1, "", "num_hyper_parameters"], [33, 1, 1, "", "num_parameters"], [33, 1, 1, "", "num_qubits"], [33, 1, 1, "", "outer_kernel"], [33, 1, 1, "", "parameters"], [33, 2, 1, "", "set_params"]], "squlearn.kernel.matrix.kernel_matrix_base": [[34, 0, 1, "", "KernelMatrixBase"]], "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase": [[34, 2, 1, "", "assign_parameters"], [34, 2, 1, "", "evaluate"], [34, 2, 1, "", "evaluate_pairwise"], [34, 2, 1, "", "evaluate_with_parameters"], [34, 2, 1, "", "get_params"], [34, 2, 1, "", "set_params"]], "squlearn.kernel.ml": [[35, 0, 1, "", "QGPC"], [36, 0, 1, "", "QGPR"], [37, 0, 1, "", "QKRR"], [38, 0, 1, "", "QSVC"], [39, 0, 1, "", "QSVR"]], "squlearn.kernel.ml.QGPC": [[35, 2, 1, "", "fit"], [35, 2, 1, "", "get_metadata_routing"], [35, 2, 1, "", "get_params"], [35, 2, 1, "", "log_marginal_likelihood"], [35, 2, 1, "", "predict"], [35, 2, 1, "", "predict_proba"], [35, 2, 1, "", "score"], [35, 2, 1, "", "set_params"], [35, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QGPR": [[36, 2, 1, "", "calculate_cov_and_mean"], [36, 2, 1, "", "fit"], [36, 2, 1, "", "get_metadata_routing"], [36, 2, 1, "", "get_params"], [36, 2, 1, "", "predict"], [36, 2, 1, "", "score"], [36, 2, 1, "", "set_params"], [36, 2, 1, "", "set_predict_request"], [36, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QKRR": [[37, 2, 1, "", "fit"], [37, 2, 1, "", "get_metadata_routing"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "predict"], [37, 2, 1, "", "score"], [37, 2, 1, "", "set_params"], [37, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QSVC": [[38, 2, 1, "", "decision_function"], [38, 2, 1, "", "fit"], [38, 2, 1, "", "get_metadata_routing"], [38, 2, 1, "", "get_params"], [38, 2, 1, "", "predict"], [38, 2, 1, "", "predict_log_proba"], [38, 2, 1, "", "predict_proba"], [38, 2, 1, "", "score"], [38, 2, 1, "", "set_fit_request"], [38, 2, 1, "", "set_params"], [38, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QSVR": [[39, 2, 1, "", "fit"], [39, 2, 1, "", "get_metadata_routing"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "predict"], [39, 2, 1, "", "score"], [39, 2, 1, "", "set_fit_request"], [39, 2, 1, "", "set_params"], [39, 2, 1, "", "set_score_request"]], "squlearn.observables": [[40, 0, 1, "", "CustomObservable"], [41, 0, 1, "", "IsingHamiltonian"], [42, 0, 1, "", "SinglePauli"], [43, 0, 1, "", "SingleProbability"], [44, 0, 1, "", "SummedPaulis"], [45, 0, 1, "", "SummedProbabilities"]], "squlearn.observables.CustomObservable": [[40, 2, 1, "", "generate_initial_parameters"], [40, 2, 1, "", "get_operator"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "get_pauli"], [40, 2, 1, "", "get_pauli_mapped"], [40, 1, 1, "", "num_parameters"], [40, 1, 1, "", "num_qubits"], [40, 1, 1, "", "operator_string"], [40, 1, 1, "", "parameterized"], [40, 2, 1, "", "set_map"], [40, 2, 1, "", "set_params"]], "squlearn.observables.IsingHamiltonian": [[41, 1, 1, "", "I"], [41, 1, 1, "", "X"], [41, 1, 1, "", "Z"], [41, 1, 1, "", "ZZ"], [41, 2, 1, "", "generate_initial_parameters"], [41, 2, 1, "", "get_operator"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "get_pauli"], [41, 2, 1, "", "get_pauli_mapped"], [41, 1, 1, "", "num_parameters"], [41, 1, 1, "", "num_qubits"], [41, 2, 1, "", "set_map"], [41, 2, 1, "", "set_params"]], "squlearn.observables.SinglePauli": [[42, 2, 1, "", "generate_initial_parameters"], [42, 2, 1, "", "get_operator"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "get_pauli"], [42, 2, 1, "", "get_pauli_mapped"], [42, 1, 1, "", "num_parameters"], [42, 1, 1, "", "num_qubits"], [42, 1, 1, "", "op_str"], [42, 1, 1, "", "parameterized"], [42, 1, 1, "", "qubit"], [42, 2, 1, "", "set_map"], [42, 2, 1, "", "set_params"]], "squlearn.observables.SingleProbability": [[43, 2, 1, "", "generate_initial_parameters"], [43, 2, 1, "", "get_operator"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "get_pauli"], [43, 2, 1, "", "get_pauli_mapped"], [43, 1, 1, "", "num_parameters"], [43, 1, 1, "", "num_qubits"], [43, 1, 1, "", "one_state"], [43, 1, 1, "", "parameterized"], [43, 1, 1, "", "qubit"], [43, 2, 1, "", "set_map"], [43, 2, 1, "", "set_params"]], "squlearn.observables.SummedPaulis": [[44, 1, 1, "", "full_sum"], [44, 2, 1, "", "generate_initial_parameters"], [44, 2, 1, "", "get_operator"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "get_pauli"], [44, 2, 1, "", "get_pauli_mapped"], [44, 1, 1, "", "include_identity"], [44, 1, 1, "", "num_parameters"], [44, 1, 1, "", "num_qubits"], [44, 1, 1, "", "op_str"], [44, 2, 1, "", "set_map"], [44, 2, 1, "", "set_params"]], "squlearn.observables.SummedProbabilities": [[45, 1, 1, "", "full_sum"], [45, 2, 1, "", "generate_initial_parameters"], [45, 2, 1, "", "get_operator"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "get_pauli"], [45, 2, 1, "", "get_pauli_mapped"], [45, 1, 1, "", "include_identity"], [45, 1, 1, "", "num_parameters"], [45, 1, 1, "", "num_qubits"], [45, 1, 1, "", "one_state"], [45, 2, 1, "", "set_map"], [45, 2, 1, "", "set_params"]], "squlearn.observables.observable_base": [[46, 0, 1, "", "ObservableBase"]], "squlearn.observables.observable_base.ObservableBase": [[46, 2, 1, "", "generate_initial_parameters"], [46, 2, 1, "", "get_operator"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "get_pauli"], [46, 2, 1, "", "get_pauli_mapped"], [46, 1, 1, "", "num_parameters"], [46, 1, 1, "", "num_qubits"], [46, 2, 1, "", "set_map"], [46, 2, 1, "", "set_params"]], "squlearn.observables.observable_derivatives": [[47, 0, 1, "", "ObservableDerivatives"]], "squlearn.observables.observable_derivatives.ObservableDerivatives": [[47, 2, 1, "", "assign_parameters"], [47, 2, 1, "", "get_derivative"], [47, 2, 1, "", "get_operator"], [47, 2, 1, "", "get_operator_squared"], [47, 1, 1, "", "num_operators"], [47, 1, 1, "", "num_parameters"], [47, 1, 1, "", "parameter_vector"]], "squlearn.optimizers": [[48, 0, 1, "", "Adam"], [49, 0, 1, "", "LBFGSB"], [50, 0, 1, "", "SGLBO"], [51, 0, 1, "", "SLSQP"], [52, 0, 1, "", "SPSA"]], "squlearn.optimizers.Adam": [[48, 2, 1, "", "minimize"], [48, 2, 1, "", "reset"], [48, 2, 1, "", "set_callback"], [48, 2, 1, "", "step"]], "squlearn.optimizers.LBFGSB": [[49, 2, 1, "", "minimize"], [49, 2, 1, "", "set_callback"]], "squlearn.optimizers.SGLBO": [[50, 2, 1, "", "minimize"], [50, 2, 1, "", "reset"], [50, 2, 1, "", "set_callback"], [50, 2, 1, "", "step"]], "squlearn.optimizers.SLSQP": [[51, 2, 1, "", "minimize"], [51, 2, 1, "", "set_callback"]], "squlearn.optimizers.SPSA": [[52, 2, 1, "", "minimize"], [52, 2, 1, "", "set_callback"]], "squlearn.optimizers.optimizer_base": [[53, 0, 1, "", "OptimizerBase"]], "squlearn.optimizers.optimizer_base.OptimizerBase": [[53, 2, 1, "", "minimize"], [53, 2, 1, "", "set_callback"]], "squlearn.qnn": [[54, 0, 1, "", "QNNClassifier"], [55, 0, 1, "", "QNNRegressor"], [56, 0, 1, "", "ShotsFromRSTD"], [58, 0, 1, "", "get_lr_decay"], [59, 0, 1, "", "get_variance_fac"]], "squlearn.qnn.QNNClassifier": [[54, 2, 1, "", "fit"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "partial_fit"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "predict_proba"], [54, 2, 1, "", "score"], [54, 2, 1, "", "set_fit_request"], [54, 2, 1, "", "set_params"], [54, 2, 1, "", "set_partial_fit_request"], [54, 2, 1, "", "set_score_request"]], "squlearn.qnn.QNNRegressor": [[55, 2, 1, "", "fit"], [55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "partial_fit"], [55, 2, 1, "", "predict"], [55, 2, 1, "", "score"], [55, 2, 1, "", "set_fit_request"], [55, 2, 1, "", "set_params"], [55, 2, 1, "", "set_partial_fit_request"], [55, 2, 1, "", "set_score_request"]], "squlearn.qnn.ShotsFromRSTD": [[56, 2, 1, "", "reset_shots"], [56, 2, 1, "", "set_executor"], [56, 2, 1, "", "set_shots_for_grad"], [56, 2, 1, "", "set_shots_for_loss"]], "squlearn.qnn.base_qnn": [[57, 0, 1, "", "BaseQNN"]], "squlearn.qnn.base_qnn.BaseQNN": [[57, 2, 1, "", "fit"], [57, 2, 1, "", "get_metadata_routing"], [57, 2, 1, "", "get_params"], [57, 2, 1, "", "set_fit_request"], [57, 2, 1, "", "set_params"]], "squlearn.qnn.loss": [[60, 0, 1, "", "LossBase"], [61, 0, 1, "", "ODELoss"], [62, 0, 1, "", "ParameterRegularizationLoss"], [63, 0, 1, "", "SquaredLoss"], [64, 0, 1, "", "VarianceLoss"]], "squlearn.qnn.loss.LossBase": [[60, 2, 1, "", "gradient"], [60, 2, 1, "", "set_opt_param_op"], [60, 2, 1, "", "value"], [60, 2, 1, "", "variance"]], "squlearn.qnn.loss.ODELoss": [[61, 2, 1, "", "gradient"], [61, 2, 1, "", "set_opt_param_op"], [61, 2, 1, "", "value"], [61, 2, 1, "", "variance"]], "squlearn.qnn.loss.ParameterRegularizationLoss": [[62, 2, 1, "", "gradient"], [62, 2, 1, "", "set_opt_param_op"], [62, 2, 1, "", "value"], [62, 2, 1, "", "variance"]], "squlearn.qnn.loss.SquaredLoss": [[63, 2, 1, "", "gradient"], [63, 2, 1, "", "set_opt_param_op"], [63, 2, 1, "", "value"], [63, 2, 1, "", "variance"]], "squlearn.qnn.loss.VarianceLoss": [[64, 2, 1, "", "gradient"], [64, 2, 1, "", "set_opt_param_op"], [64, 2, 1, "", "value"], [64, 2, 1, "", "variance"]], "squlearn.qnn.lowlevel_qnn": [[65, 0, 1, "", "LowLevelQNN"]], "squlearn.qnn.lowlevel_qnn.LowLevelQNN": [[65, 2, 1, "", "evaluate"], [65, 2, 1, "", "get_params"], [65, 2, 1, "", "gradient"], [65, 2, 1, "", "set_params"]], "squlearn.qnn.lowlevel_qnn_base": [[66, 0, 1, "", "LowLevelQNNBase"]], "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase": [[66, 2, 1, "", "evaluate"], [66, 2, 1, "", "get_params"], [66, 2, 1, "", "gradient"], [66, 2, 1, "", "set_params"]], "squlearn.qnn.lowlevel_qnn_pennylane": [[67, 0, 1, "", "LowLevelQNNPennyLane"]], "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane": [[67, 2, 1, "", "evaluate"], [67, 1, 1, "", "features"], [67, 2, 1, "", "get_params"], [67, 2, 1, "", "gradient"], [67, 1, 1, "", "multiple_output"], [67, 1, 1, "", "num_features"], [67, 1, 1, "", "num_operator"], [67, 1, 1, "", "num_parameters"], [67, 1, 1, "", "num_parameters_observable"], [67, 1, 1, "", "num_qubits"], [67, 1, 1, "", "parameters"], [67, 1, 1, "", "parameters_operator"], [67, 2, 1, "", "set_params"]], "squlearn.qnn.lowlevel_qnn_qiskit": [[68, 0, 1, "", "Expec"], [69, 0, 1, "", "LowLevelQNNQiskit"]], "squlearn.qnn.lowlevel_qnn_qiskit.Expec": [[68, 2, 1, "", "from_parameter"], [68, 2, 1, "", "from_parameter_vector"], [68, 2, 1, "", "from_string"], [68, 2, 1, "", "from_tuple"], [68, 2, 1, "", "from_variable"]], "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit": [[69, 2, 1, "", "evaluate"], [69, 2, 1, "", "evaluate_dfdop"], [69, 2, 1, "", "evaluate_dfdopdx"], [69, 2, 1, "", "evaluate_dfdp"], [69, 2, 1, "", "evaluate_dfdpdx"], [69, 2, 1, "", "evaluate_dfdx"], [69, 2, 1, "", "evaluate_dfdxdx"], [69, 2, 1, "", "evaluate_diff_tuple"], [69, 2, 1, "", "evaluate_f"], [69, 2, 1, "", "evaluate_from_string"], [69, 2, 1, "", "evaluate_laplace"], [69, 2, 1, "", "evaluate_laplace_dop"], [69, 2, 1, "", "evaluate_laplace_dp"], [69, 2, 1, "", "evaluate_probabilities"], [69, 2, 1, "", "evaluate_var"], [69, 2, 1, "", "evaluate_variance"], [69, 1, 1, "", "features"], [69, 2, 1, "", "get_optree_from_expec"], [69, 2, 1, "", "get_optree_from_string"], [69, 2, 1, "", "get_params"], [69, 2, 1, "", "get_shots"], [69, 2, 1, "", "gradient"], [69, 1, 1, "", "multiple_output"], [69, 1, 1, "", "num_features"], [69, 1, 1, "", "num_operator"], [69, 1, 1, "", "num_parameters"], [69, 1, 1, "", "num_parameters_observable"], [69, 1, 1, "", "num_qubits"], [69, 1, 1, "", "parameters"], [69, 1, 1, "", "parameters_operator"], [69, 2, 1, "", "reset_shots"], [69, 2, 1, "", "set_params"], [69, 2, 1, "", "set_shots"]], "squlearn.qnn.training": [[70, 0, 1, "", "train"], [71, 0, 1, "", "train_mini_batch"]], "squlearn.qrc": [[72, 0, 1, "", "QRCClassifier"], [73, 0, 1, "", "QRCRegressor"]], "squlearn.qrc.QRCClassifier": [[72, 2, 1, "", "fit"], [72, 2, 1, "", "get_metadata_routing"], [72, 2, 1, "", "get_params"], [72, 2, 1, "", "predict"], [72, 2, 1, "", "score"], [72, 2, 1, "", "set_params"], [72, 2, 1, "", "set_score_request"]], "squlearn.qrc.QRCRegressor": [[73, 2, 1, "", "fit"], [73, 2, 1, "", "get_metadata_routing"], [73, 2, 1, "", "get_params"], [73, 2, 1, "", "predict"], [73, 2, 1, "", "score"], [73, 2, 1, "", "set_params"], [73, 2, 1, "", "set_score_request"]], "squlearn.qrc.base_qrc": [[74, 0, 1, "", "BaseQRC"]], "squlearn.qrc.base_qrc.BaseQRC": [[74, 2, 1, "", "fit"], [74, 2, 1, "", "get_metadata_routing"], [74, 2, 1, "", "get_params"], [74, 2, 1, "", "predict"], [74, 2, 1, "", "set_params"]], "squlearn.util": [[75, 0, 1, "", "OpTree"]], "squlearn.util.OpTree": [[75, 0, 1, "", "OpTreeDerivative"], [75, 0, 1, "", "OpTreeEvaluate"], [75, 2, 1, "", "assign_parameters"], [75, 1, 1, "", "derivative"], [75, 1, 1, "", "evaluate"], [75, 2, 1, "", "gen_expectation_tree"], [75, 2, 1, "", "get_first_leaf"], [75, 2, 1, "", "get_num_nested_lists"], [75, 2, 1, "", "get_number_of_leafs"], [75, 2, 1, "", "get_tree_depth"], [75, 2, 1, "", "hash_circuit"], [75, 2, 1, "", "hash_operator"], [75, 2, 1, "", "simplify"]], "squlearn.util.OpTree.OpTreeDerivative": [[75, 2, 1, "", "differentiate"], [75, 2, 1, "", "differentiate_v2"], [75, 2, 1, "", "transpile_to_supported_instructions"]], "squlearn.util.OpTree.OpTreeEvaluate": [[75, 2, 1, "", "evaluate_tree_with_estimator"], [75, 2, 1, "", "evaluate_tree_with_sampler"], [75, 2, 1, "", "evaluate_with_estimator"], [75, 2, 1, "", "evaluate_with_sampler"], [75, 2, 1, "", "transform_to_zbasis"]], "squlearn.util.executor": [[76, 0, 1, "", "ExecutorEstimator"], [77, 0, 1, "", "ExecutorSampler"]], "squlearn.util.optree": [[78, 0, 1, "", "OpTreeCircuit"], [79, 0, 1, "", "OpTreeContainer"], [80, 0, 1, "", "OpTreeExpectationValue"], [81, 0, 1, "", "OpTreeList"], [82, 0, 1, "", "OpTreeMeasuredOperator"], [83, 0, 1, "", "OpTreeOperator"], [84, 0, 1, "", "OpTreeSum"], [85, 0, 1, "", "OpTreeValue"]], "squlearn.util.optree.OpTreeCircuit": [[78, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeContainer": [[79, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeExpectationValue": [[80, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeList": [[81, 2, 1, "", "append"], [81, 2, 1, "", "copy"], [81, 2, 1, "", "remove"]], "squlearn.util.optree.OpTreeMeasuredOperator": [[82, 2, 1, "", "copy"], [82, 2, 1, "", "measure_circuit"]], "squlearn.util.optree.OpTreeOperator": [[83, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeSum": [[84, 2, 1, "", "append"], [84, 2, 1, "", "copy"], [84, 2, 1, "", "remove"]], "squlearn.util.optree.OpTreeValue": [[85, 2, 1, "", "copy"]], "squlearn.util.pennylane": [[86, 0, 1, "", "PennyLaneCircuit"]], "squlearn.util.pennylane.PennyLaneCircuit": [[86, 2, 1, "", "build_circuit_instructions"], [86, 2, 1, "", "build_observable_instructions"], [86, 2, 1, "", "build_pennylane_circuit"], [86, 1, 1, "", "circuit_arguments"], [86, 1, 1, "", "circuit_parameter_dimensions"], [86, 1, 1, "", "circuit_parameter_names"], [86, 2, 1, "", "draw"], [86, 2, 1, "", "get_pennylane_circuit"], [86, 1, 1, "", "hash"], [86, 1, 1, "", "observable_parameter_dimension"], [86, 1, 1, "", "observable_parameter_names"], [86, 1, 1, "", "pennylane_circuit"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"], "3": ["py", "module", "Python module"], "4": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:attribute", "2": "py:method", "3": "py:module", "4": "py:function"}, "terms": {"": [0, 1, 2, 3, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 33, 36, 37, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 55, 65, 66, 69, 75, 87, 88, 89, 91], "0": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 16, 20, 22, 23, 24, 25, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 47, 48, 50, 54, 55, 56, 57, 58, 59, 61, 62, 64, 72, 73, 74, 81, 84, 87, 88, 89, 90, 91], "00": [2, 33], "000": [], "00000000e": 33, "00009": 55, "0001": 1, "001": [0, 1, 91], "00138": 36, "00262416e": [], "005": [62, 64, 91], "01": [3, 33, 48, 50, 55, 73, 91], "010327": 88, "01039v3": 25, "01639": [9, 56, 59, 91], "01mq22002a": 5, "01mq22003d": 5, "02": [1, 33, 55], "020475311434476e": 1, "021": 0, "02276": 32, "02276v1": [14, 31, 32, 33, 89], "023": 36, "02577578e": [], "02654557e": 33, "02812614": [], "03": 33, "03760543e": 33, "03hy110d": 5, "04": 33, "040309": [26, 28, 87], "040504": [32, 89], "04463012e": [], "04578444": 3, "04653752e": [], "0491041": 3, "05": [1, 2, 33, 48, 55], "05495458": 3, "05745694e": 33, "05751658e": [], "05927669e": [], "05x367": 16, "06": [36, 37], "06335083": 3, "06825951e": 33, "07037611": 35, "07226488e": [], "07318673": 35, "07676122": 2, "08": 91, "08978477e": [], "08990": 5, "09": 2, "09696586": 35, "09746819e": [], "09988938": 35, "0e": 37, "0x0000016f98366c20": 1, "0x0000016f9872ef20": 1, "0x0000016f9c622ec0": 1, "0x000001804d3f0a90": 0, "0x16f984110f0": 1, "0x7f05dc964a40": 88, "1": [0, 1, 2, 3, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 45, 47, 48, 50, 54, 55, 56, 57, 59, 61, 72, 73, 81, 84, 87, 88, 89, 90, 91], "10": [0, 1, 2, 3, 5, 6, 8, 22, 23, 26, 28, 33, 36, 50, 71, 87, 88, 91], "100": [1, 2, 38, 39, 48, 50, 56, 72, 73, 74, 89, 91], "1000": [0, 2, 8, 72], "10000": [2, 88, 91], "1007": 36, "1038": 0, "10395": [15, 61], "1040x367": 87, "10478362e": 33, "11": [0, 19], "11020v2": 89, "1103": [26, 28, 87], "112": 89, "1123": 91, "11783785e": [], "12": [0, 1, 6, 33, 89], "1207": [16, 87], "122": 32, "1234": 88, "1273": 20, "1278": 20, "13": [0, 2], "13162v3": 89, "1335": [24, 87], "1374": 87, "14": [0, 15, 37], "14300554e": [], "1458": 16, "15": [15, 19, 20], "150": 55, "15082666e": 33, "15087431e": 33, "15554164e": [], "16": [54, 55], "161": 13, "17": [], "17335059e": [], "18": 6, "18215615e": 33, "18523855e": [], "18786411e": 33, "19": [], "19024448e": [], "19457665e": [], "19857474e": 33, "1e": [1, 26, 28, 36, 37, 48, 50], "1e0": 1, "1e1": 1, "1e2": 1, "2": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 61, 62, 63, 69, 72, 73, 87, 88, 89, 90, 91], "20": [1, 6, 50, 55, 91], "200": [0, 1], "2006": [30, 36], "2011": [15, 61], "2019": [20, 32, 89], "2021": [0, 13, 14, 15, 25, 31, 32, 33, 61, 89], "2023": [5, 9, 56, 59, 88, 89, 91], "20528491e": [], "209": 32, "2101": 89, "2105": [14, 31, 32, 33, 89], "2108": 25, "2110": 89, "21170354": 3, "212": 32, "21328096e": [], "2210": 21, "22539": 0, "22772938e": 33, "22it": 2, "22x367": [16, 87], "23": [13, 36, 37, 39, 55, 73], "2306": [9, 56, 59, 91], "2311": 5, "23788652e": [], "24124870e": 33, "24369752e": [], "25": 88, "25466019e": 33, "25809335e": [], "26211709e": [], "2631": [0, 33, 89], "26916778e": [], "27": 31, "27450689": [], "278": [21, 87], "28": 31, "28862046e": [], "29": 2, "29771953e": [], "2_i": 12, "2d": [32, 34], "2\u03c0": [], "3": [0, 1, 2, 3, 5, 6, 8, 9, 13, 16, 21, 23, 24, 32, 33, 35, 36, 37, 38, 39, 47, 50, 54, 55, 57, 72, 73, 87, 88, 89, 90, 91], "30": [0, 2], "300": [72, 73], "30273302e": 33, "31": 2, "31069756e": 33, "31519929e": [], "31728216e": [], "32": [0, 2], "32054449e": 33, "32289250e": [], "32609002": 3, "33": [0, 2, 54, 55, 72, 73], "33866887e": [], "33x284": [21, 87], "33x367": 16, "34": [2, 6], "34620771e": 33, "34922445e": [], "35": 2, "35175322e": 33, "35206642e": [], "36": 2, "36306418e": 33, "36702453e": 33, "37": 2, "370": 87, "37039000e": 33, "37111628e": [], "38": 2, "39": [1, 2], "39076129e": 33, "3e7": 8, "3f": 1, "4": [0, 1, 3, 6, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 32, 33, 37, 54, 55, 63, 67, 69, 72, 73, 87, 88, 89, 90, 91], "40": [0, 2, 16], "40829337e": [], "40881658": [], "40939215e": 33, "41": 2, "41099421e": [], "41717632": 2, "41838377e": 33, "42": [0, 1, 2, 16, 54, 55, 72, 73], "42663813e": [], "43919796e": [], "44769518e": [], "44x367": 87, "45": 6, "45993522e": 33, "47792952e": [], "48234872e": [], "48550": 5, "48935561": 3, "48991384e": [], "493": 37, "5": [0, 1, 2, 3, 13, 15, 22, 24, 30, 33, 37, 43, 45, 54, 55, 87, 88, 89, 90, 91], "50": [3, 22], "5000": 56, "50320697e": [], "50876202": 2, "52474685e": 33, "52817110e": 33, "538": [16, 21, 87], "53840133e": [], "54315575e": [], "55016198e": [], "55x1204": 21, "567": 32, "57024715e": 33, "57250595e": [], "57360683": [], "58579355e": [], "5a": 15, "5b": 15, "6": [0, 1, 2, 22, 23, 33, 36, 37, 48, 50, 55, 90, 91], "60": 54, "600": 88, "6014398": [], "60341061e": [], "61918080e": [], "61x367": 91, "62067497e": [], "62352025e": [], "62364852e": [], "63637404": [], "63879573e": [], "64": 0, "64031031e": 33, "64554501e": [], "64577632e": 33, "64628971": 2, "64835895": [], "65036814e": [], "65097398e": [], "65135232": 2, "65331064e": [], "65386260e": 33, "65698170e": [], "65699869e": 33, "66524017": 2, "66567045": 2, "667": 87, "67845599e": [], "67it": [], "68048299e": [], "68335046e": [], "68358480e": 33, "68546444e": 33, "68866580e": [], "7": [0, 1, 6, 13, 19, 33], "70026560e": 33, "71107540e": [], "72701897e": [], "72892165": 3, "73198175e": [], "75": [22, 88], "75403422": 3, "75559416e": [], "75620523e": [], "75721105e": [], "76941136e": [], "774x367": 19, "7928485": [], "79894338e": [], "8": [0, 1, 6, 23, 30, 33, 48], "80246877": [], "80314475": 35, "80990397e": 33, "81186487e": [], "81347238e": [], "81x451": [24, 87], "83757831e": [], "83891746e": 33, "84375660e": 33, "84602697e": [], "84914015": 2, "85643716": 35, "86413536e": [], "86694741e": 33, "87111837e": [], "87152953e": [], "872": 19, "88148150e": 33, "88482712e": [], "88728412e": [], "88730117e": [], "889": [16, 19, 87, 91], "89088529": 2, "89492800e": [], "89715235e": [], "89941938e": [], "8h": 8, "9": [0, 1, 5, 6, 33, 36, 48, 54, 55, 73], "906x200": 87, "90757301e": 33, "90761229e": [], "91728497e": [], "92": 1, "92017040e": [], "92679992e": 33, "93514152e": [], "94496047e": [], "94664274": 2, "94685078": 2, "95524371e": [], "95643135e": 33, "96": 3, "96012197": 2, "96258372": 3, "9671641791044776": 0, "97004195": 2, "9787878787878788": 0, "98": 35, "98136648e": 33, "98149636e": 33, "98264805e": [], "98504697": [], "98724664e": [], "99": 48, "999999978217105": 1, "A": [0, 2, 3, 5, 8, 9, 11, 13, 16, 20, 21, 23, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 56, 57, 59, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 87, 88, 89, 91], "And": 6, "As": [33, 72, 89], "At": [20, 89], "BY": 0, "But": 89, "By": [2, 3, 5, 20, 36, 37, 38, 39, 87, 88, 89], "For": [0, 1, 2, 3, 5, 8, 36, 37, 38, 39, 54, 55, 73, 87, 89, 91], "IN": 20, "If": [0, 2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 88, 89, 90], "In": [0, 1, 2, 3, 8, 22, 35, 38, 54, 67, 69, 72, 73, 87, 89, 90, 91], "Ising": [41, 47, 90], "It": [0, 8, 11, 16, 20, 22, 38, 39, 54, 55, 87, 88, 90, 91], "NOT": 61, "Near": [14, 31, 32, 33, 89], "No": 21, "On": [0, 1], "One": 25, "THE": 20, "TO": 20, "The": [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 61, 63, 65, 66, 67, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92], "Then": 91, "There": [3, 5, 6, 61, 87, 91], "These": [0, 1, 2, 32, 38, 39, 89], "To": [0, 1, 2, 3, 5, 6, 87, 89, 90, 91], "Will": [54, 55], "With": [0, 1, 21, 90, 91], "_": [0, 12, 61, 89], "__init__": 3, "_cach": [8, 88], "_circuit_kei": 75, "_i": [2, 41, 43, 44, 45, 64], "_initial_sampl": 3, "_j": [41, 61], "_k": 89, "_nestedsequ": 8, "_observable_kei": 75, "_regularize_matrix": 34, "_supportsarrai": 8, "aa": 16, "aba": 15, "abelian_group": 75, "abl": 89, "abort": [8, 88], "about": [3, 8, 37, 38, 39], "abov": [0, 1, 2, 8, 13, 88, 89, 91], "abstract": [29, 34, 46, 60, 65, 66], "accept": [19, 87], "access": [2, 12, 87, 88, 89], "accord": [0, 38, 39, 54, 55, 69, 87], "accordingli": [37, 88], "account": 2, "accumul": 3, "accuraci": [0, 3, 35, 38, 54, 72, 91], "accuracy_scor": 0, "achiev": [16, 33, 88, 89, 90, 91], "acq_func": 3, "acquisit": [3, 50], "across": 2, "act": [20, 42, 91], "action": [5, 23, 88], "activ": [20, 88], "actual": [2, 37], "ad": [2, 16, 18, 35, 36, 37, 38, 39, 54, 55, 57, 61, 72, 73, 75, 87, 90, 91], "adam": [2, 55, 58, 88, 89], "adam_opt": 89, "adapt": [3, 89], "add": [0, 1, 3, 16, 20, 75, 90], "add_ax": 1, "add_lay": [16, 87], "added_ob": 90, "addit": [1, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 35, 36, 37, 38, 39, 49, 51, 52, 65, 86, 88, 89, 91], "addition": [0, 2, 6, 16, 20, 35, 38, 39, 41, 91], "additive_chi2": 33, "address": [], "adequ": 1, "adher": 91, "adjust": [11, 16, 22, 38, 39, 58, 59, 67, 69, 87, 88, 89, 90], "adress": 20, "advanc": [], "advantag": 0, "aer": [6, 88], "aer_simul": 88, "aerprovid": 88, "aersimul": 88, "affair": 5, "affect": 2, "affirm": 2, "after": [0, 13, 20, 32, 33, 37, 56, 88, 89, 90], "afterward": [2, 16], "again": [0, 2, 13, 20], "against": 88, "aim": 5, "akin": 91, "al": [0, 13, 14, 15, 31, 32, 33, 61, 89], "algebra": 89, "algorithm": [0, 1, 3, 6, 8, 26, 28, 33, 36, 87, 88, 89, 91], "alia": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 75], "align": [2, 29, 31, 61, 89], "all": [0, 1, 2, 6, 8, 16, 20, 23, 32, 33, 35, 36, 37, 39, 41, 45, 55, 61, 62, 63, 73, 75, 86, 87, 88, 89, 90], "allevi": 0, "allow": [0, 1, 2, 3, 12, 22, 35, 36, 37, 38, 39, 40, 41, 44, 54, 55, 57, 72, 73, 87, 88, 90, 91], "along": [5, 59, 89, 91], "alongsid": 1, "alpha": [2, 3, 9, 10, 11, 33, 37, 62, 64, 91], "alpha_": 59, "alreadi": [2, 20, 54, 55, 57, 89], "also": [0, 1, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 72, 73, 75, 81, 84, 86, 87, 88, 89, 90, 91], "alter": 91, "altern": [5, 11, 15, 20, 21, 72, 73, 74, 88, 91], "although": 90, "alwai": [36, 37, 39, 55, 73, 88], "amazon": [8, 88], "ambigu": 89, "among": [89, 91], "an": [0, 1, 2, 3, 8, 20, 21, 23, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 58, 61, 68, 69, 72, 73, 75, 76, 80, 82, 83, 85, 87, 88, 89, 91], "analit": 3, "analog": [36, 37, 89, 91], "analysi": 89, "angl": [0, 23], "ani": [8, 79, 88], "annot": 1, "anoth": [16, 88], "ansatz": [15, 89], "anymor": 20, "apach": 5, "api": 5, "appeal": 3, "appear": [9, 10, 35, 38], "append": [1, 33, 81, 84], "appli": [0, 2, 3, 16, 20, 33, 38, 39, 47, 75, 81, 82, 84, 87, 88, 89, 91], "applic": [5, 87, 89, 91], "approach": [3, 87, 89, 91], "appropri": [32, 88, 91], "approxim": [2, 3, 63, 89], "aqua": 5, "ar": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 57, 61, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 81, 84, 87, 88, 89, 90, 91], "arang": [0, 2, 55, 73, 91], "arbitrari": [79, 87, 90], "arbitrarili": [36, 37, 39, 55, 73], "arcco": [0, 9, 10, 11, 16, 87], "arccos_x": 22, "architectur": [5, 91], "arctan": [9, 10, 11, 23], "arctan_x": 22, "area": 3, "arg": [3, 8, 33, 65], "arg_tupl": 8, "argmin": 3, "argument": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 35, 36, 37, 38, 39, 56, 65, 86, 88, 89, 91], "aris": 2, "arithmet": 87, "arn": [8, 88], "around": 9, "arrai": [1, 3, 8, 26, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 54, 55, 57, 61, 72, 73, 75, 81, 88], "arrang": [11, 15], "arrow": 88, "art": 0, "articl": 36, "artifici": [2, 91], "arxiv": [5, 9, 14, 15, 25, 31, 32, 33, 56, 59, 61, 89, 91], "ascend": 0, "aspect": [], "assess": 91, "assign": [0, 12, 13, 21, 32, 33, 34, 35, 47, 75], "assign_paramet": [12, 32, 33, 34, 35, 36, 47, 75], "associ": [2, 16, 68, 90], "assum": [2, 36, 37, 38, 39, 89], "assur": [36, 37], "attain": [89, 91], "attempt": 89, "attribut": [34, 35, 38, 88], "auto": [0, 8, 21, 88], "auto_backend_mod": [8, 88], "autom": [5, 26, 87], "automat": [2, 6, 8, 12, 13, 21, 47, 87, 89, 91], "automated_prun": 87, "autoqml": 5, "avail": [2, 3, 5, 8, 16, 21, 37, 87, 88, 89, 90], "averag": [48, 50], "avoid": [2, 8, 9, 48, 88], "aw": [8, 88], "ax": [1, 16, 19, 21, 24, 87, 91], "axi": [1, 9], "b": [3, 15, 16, 41, 44, 45, 49, 59, 91], "b_i": [41, 44, 45], "back": 0, "backend": [5, 8, 24, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 57, 87, 89, 90], "backend_chosen": 8, "backend_list": 8, "backend_nam": 8, "backend_noise_model": [], "background": [0, 37], "backward": 20, "bad": 0, "balanc": 3, "bar": [54, 55, 57, 88], "base": [0, 1, 2, 3, 8, 11, 18, 19, 26, 27, 32, 33, 34, 36, 46, 53, 54, 55, 57, 59, 60, 61, 65, 66, 67, 69, 72, 73, 74, 87, 88, 89, 90, 91], "base_qrc": [72, 73], "baseestim": [], "baseestimatorv1": [8, 75], "baseestimatorv2": [8, 75], "baseqnn": [54, 55], "baseqrc": [72, 73], "basesampl": [], "basesamplerv1": [8, 75], "basesamplerv2": [8, 75], "basi": [9, 75, 90], "basic": 89, "basis_g": [], "batch": [8, 54, 55, 57, 71], "batch_siz": [54, 55, 57, 71, 91], "bayesian": [4, 5, 6, 36, 50], "bayesopt": 3, "becaus": [0, 2, 36, 37, 38, 39, 55, 73], "becom": 0, "bee": 20, "been": [1, 2, 88, 89, 91], "befor": [2, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 36, 54, 55, 57, 71, 88, 90, 91], "begin": [0, 2, 20, 59, 61, 91], "beginn": 5, "behind": 0, "being": [0, 8, 43], "below": [8, 12, 16, 35, 88, 89], "benefici": 91, "benefit": [0, 88], "best": [1, 3, 8, 16, 36, 37, 39, 55, 73, 88], "best_estim": 1, "best_estimator_": 1, "best_params_": 16, "best_score_": 1, "bet": [], "beta": [56, 91], "beta_1": 48, "beta_2": 48, "beta_i": 2, "better": 1, "between": [0, 3, 5, 9, 18, 23, 33, 61, 63, 87, 88, 89, 91], "beyond": [61, 89], "bfg": [3, 49, 91], "big": 12, "bigg": 33, "bigger": [20, 91], "binari": [35, 45], "bit": 20, "black": 3, "blackbox_funct": 3, "bleed": 5, "block": [11, 15, 36, 91], "block_depth": 15, "block_width": 15, "blue": [3, 91], "blueprintcircuit": 21, "bo_acq_func": 50, "bo_bound": 50, "bo_n_cal": 50, "bo_n_initial_point": 50, "bo_xi": 50, "boldsymbol": [3, 89], "bool": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 91], "both": [0, 1, 2, 5, 8, 22, 75, 87, 88, 89, 91], "bound": [3, 48, 49, 50, 51, 52, 53, 56], "boundari": [0, 61], "boundary_handl": [55, 61], "box": 3, "bra": [43, 45, 89], "bracket": 16, "braket": [8, 88, 89], "branch": 75, "break_ti": 0, "bridg": [5, 89], "brought": 2, "broughton": [0, 33], "buffer": 8, "build": [2, 5, 6, 10, 20, 86, 87, 88, 90, 91], "build_circuit": 20, "build_circuit_instruct": 86, "build_observable_instruct": 86, "build_pennylane_circuit": 86, "built": [20, 86], "byte": 8, "c": [0, 1, 25, 35, 38, 39, 41, 91], "c_i": [41, 44], "ca": 88, "cach": [2, 8, 12, 33, 47, 54, 55, 57, 65, 66, 67, 69, 72, 73, 74, 86, 87, 88], "cache_dir": [8, 88], "cache_s": [0, 1], "calcul": [0, 1, 2, 8, 33, 36, 47, 60, 61, 62, 63, 64, 75, 87, 88, 89, 90, 91], "calculate_cov_and_mean": 36, "call": [0, 2, 8, 16, 20, 21, 35, 36, 37, 38, 39, 55, 73, 86, 87, 89, 91], "call_limit": 8, "callabl": [8, 16, 21, 24, 48, 49, 50, 51, 52, 53, 54, 55, 57, 62, 64, 81, 84, 86, 91], "callback": [48, 49, 50, 51, 52, 53, 54, 55, 57, 88], "calsif": 72, "can": [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 50, 54, 55, 57, 58, 67, 69, 72, 73, 74, 75, 79, 81, 84, 86, 87, 88, 89, 90, 91], "cancel": 88, "cannot": 3, "capabl": 5, "capac": [], "care": [8, 91], "carefulli": 2, "carl": [30, 36], "case": [0, 1, 2, 8, 35, 36, 47, 67, 69, 75, 88, 91], "catch_warn": 88, "categori": 0, "caus": 2, "cax": 1, "cbar": 1, "cbar_ax": 1, "cc": 0, "cdf": 3, "cdot": [0, 33, 61, 89, 91], "ceil": 1, "cell": [0, 1, 2, 91], "center": 54, "central": [8, 88, 89], "certain": 22, "cf": [0, 37], "ch": [16, 22], "ch_entangl": 16, "chang": [2, 9, 11, 13, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 72, 73, 88, 90], "channel": [8, 88], "chapter": [30, 37], "charact": 40, "characterist": 91, "charg": 8, "chebyshev": [9, 10, 11, 15, 91], "chebyshev_product": 15, "chebyshev_spars": 15, "chebyshev_tow": [15, 55], "chebyshevpqc": [0, 2, 10, 37, 87, 88, 89, 91], "chebyshevrx": [8, 24, 54, 55, 87, 88, 90], "chebyshevtow": 33, "check": [0, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74, 75, 88], "chi2": 33, "child": [74, 81, 84], "children": [81, 84], "children_list": [81, 84], "choi": 20, "choic": [0, 1, 3, 32, 36, 89], "choleski": [36, 37], "choos": [1, 32, 33], "chose": 0, "chosen": [0, 3, 8, 9, 23, 32, 72, 73, 88, 91], "christoph": [30, 36], "chunk": 1, "chunk_df": 1, "circ": 12, "circuit": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 54, 55, 57, 61, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 80, 82, 86, 88, 89, 90, 91, 92], "circuit_argu": 86, "circuit_parameter_dimens": 86, "circuit_parameter_nam": 86, "circuit_tre": 75, "circular": 0, "circumv": 89, "ciruit": 22, "class": [0, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92], "class_weight": 0, "classes_": [35, 38], "classic": [0, 1, 5, 20, 33, 72, 73, 74, 87, 89, 91], "classif": [7, 13, 35, 38, 39, 54, 55, 72, 73, 91], "classifi": [0, 5, 35, 38, 39, 72], "classmethod": [16, 68], "cleaner": 88, "clear": 8, "clear_estimator_cach": 8, "clear_sampler_cach": 8, "clearli": 0, "clf": [0, 54, 72], "climat": 5, "clone_kernel": 35, "close": [1, 2, 8, 9, 10, 14, 17, 25, 87, 88, 91], "close_sess": [2, 8, 88], "closer": 2, "closest": 0, "cloud": [], "cluster": 0, "cmap": 1, "cnot": 18, "co": 61, "code": [0, 9, 10, 11, 13, 14, 15, 17, 18, 22, 23, 25, 88, 91], "coef0": [38, 39], "coef_": 38, "coeff": [2, 41, 47, 90, 91], "coeffici": [36, 37, 39, 55, 73], "collect": [1, 15, 89], "color": [0, 1, 3], "colorbar": 1, "colormap": 1, "column": [1, 13, 35, 38], "com": [5, 6, 36], "combin": [1, 25, 33, 54, 55, 65, 66, 67, 69, 75, 88], "come": 0, "comfort": 88, "command": [5, 6], "common": [3, 91], "commonli": [89, 91], "commun": [0, 33, 89], "commut": 75, "compar": 1, "comparison": 75, "compat": [5, 86, 88], "compil": 88, "complet": 8, "complex": [0, 8, 89, 90], "compon": [8, 87, 88, 91], "compos": 91, "compound": 35, "comprehens": [5, 87], "compris": [0, 91], "comput": [0, 2, 5, 12, 14, 29, 30, 31, 32, 33, 34, 35, 38, 40, 65, 66, 67, 69, 72, 73, 74, 75, 87, 88, 89, 90, 91], "concaten": [3, 87], "concentr": 89, "concept": 91, "conceptu": 3, "concern": 89, "concurr": 88, "condit": [36, 37, 61], "configur": [20, 88, 91], "conform": 91, "cong": 20, "conjug": 16, "conjunct": 90, "connect": [2, 20], "consecut": 15, "consequ": [87, 88, 89], "consid": [0, 5, 8, 21, 25, 26, 28, 41, 68, 88, 89], "consist": [2, 9, 20, 36, 37, 39, 55, 73, 88, 89, 91], "constant": [36, 37, 39, 48, 55, 73, 91], "constraint": 3, "construct": [16, 42, 87, 89, 90, 91], "constructor": 8, "consult": [], "contain": [0, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 61, 62, 63, 64, 75, 79, 85, 87, 89, 90, 91], "context": 90, "contigu": [], "continu": 0, "contour": 3, "contribut": 87, "control": [0, 3, 9, 16, 17, 56, 70, 71, 89, 91], "conv": 20, "conveni": 89, "convent": [0, 89], "converg": 3, "convert": [68, 86], "convolut": 20, "coolwarm": 1, "copi": [1, 8, 35, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88], "core": [0, 5], "correct": [0, 2, 61], "correctli": [0, 35, 38, 54, 72], "correspond": [0, 9, 10, 20, 35, 38, 61, 88, 89], "cosin": 33, "cost": [2, 8, 57, 67, 69, 91], "cost_funct": 8, "costli": 2, "costoper": 91, "count": [61, 63, 90], "counter": [49, 51, 52], "counterpart": [1, 89], "coupl": 0, "coupling_map": [], "covari": 36, "cover": 2, "cp": 16, "cp_entangl": 16, "creat": [0, 1, 3, 8, 14, 16, 21, 23, 25, 33, 38, 41, 65, 68, 69, 76, 77, 88], "create_sess": [8, 88], "creation": [16, 87, 88, 90], "credenti": [8, 88], "cross": [1, 38], "crosstalk": 88, "crucial": [87, 88, 90], "crx": [16, 22, 23], "crx_entangl": 16, "cry": [16, 22, 23], "cry_entangl": 16, "crz": [9, 16, 22, 23, 87], "crz_entangl": 16, "csr_matrix": [], "cu": 16, "cu_entangl": 16, "cube": 90, "cumul": 3, "curli": 16, "current": [3, 5, 8, 20, 48, 50, 54, 55, 57, 69, 72, 73, 74, 88, 89, 90], "custom": [2, 3, 33, 40], "customis": 3, "customiz": 5, "customobserv": [33, 90], "cv": 16, "cv_results_": 1, "cx": [13, 16, 21, 22, 23, 25, 75, 87], "cx_entangl": [16, 87], "cxamplifi": [], "cy": [16, 22, 23, 75], "cy_entangl": 16, "cycl": 13, "cycling_typ": 13, "cz": [16, 22, 23, 75], "cz_entangl": 16, "d": [3, 5, 9, 20, 33, 41, 47, 56, 59, 88, 91], "d_": 41, "data": [2, 3, 5, 13, 14, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 54, 55, 57, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 87, 89, 91], "datafram": 1, "dataset": [0, 2, 16, 25, 35, 38, 54, 72], "datastructur": 88, "david": [], "dd": 2, "ddot": 61, "de": 5, "deal": 89, "decai": [48, 58, 59, 91], "decis": [0, 38], "decision_funct": 38, "decision_function_shap": [0, 38], "decompos": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27], "decomposit": [36, 37], "dedic": 91, "deep": [0, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 65, 66, 67, 69, 72, 73, 74], "def": [1, 3, 16], "default": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 54, 55, 56, 57, 58, 59, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 84, 88, 89], "default_callback": [48, 49, 50, 51, 52], "default_circuit": 20, "default_encoding_weight": 22, "default_gate_weight": 22, "defaultqubit": [8, 88], "defin": [0, 1, 3, 13, 15, 16, 20, 22, 30, 31, 32, 34, 36, 37, 39, 40, 55, 68, 69, 73, 89, 91], "definit": [1, 16, 30, 31, 40, 41, 42, 43, 44, 45, 46, 89, 90], "degrad": 5, "degre": [9, 38, 39, 88, 91], "delai": 2, "delta": 12, "demand": 3, "demonstr": [0, 1, 2, 88, 91], "denot": 91, "dens": [], "densiti": 89, "depend": [3, 5, 8, 21, 32, 36, 37, 61, 74, 91], "depict": [0, 91], "depolar": [32, 89], "deprec": 88, "depth": [15, 75, 89, 91], "deriv": [12, 33, 47, 61, 65, 66, 67, 68, 69, 75, 87], "descent": 71, "describ": [0, 68, 89, 91], "design": [5, 19, 20, 72, 73, 87, 89, 91], "desir": 91, "detail": [2, 8, 38, 56, 59, 87, 88], "detect": 75, "detect_dupl": 75, "detect_expectation_dupl": 75, "determin": [8, 12, 13, 16, 21, 28, 36, 37, 39, 47, 54, 55, 56, 69, 73, 87, 88], "dev": [6, 8, 88], "develop": 5, "deviat": [1, 36, 56, 91], "devic": [4, 5, 8, 86, 88], "device_arn": [8, 88], "df": 61, "dfdx": 61, "diagon": 89, "dict": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 86, 91], "dictionari": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 54, 55, 57, 65, 66, 67, 69, 72, 73, 74, 75, 86, 88], "dictionaries_combin": 75, "dictionary_circuit": 75, "dictionary_oper": 75, "did": [1, 2], "diferenti": 61, "diff_tupl": 69, "differ": [0, 1, 2, 3, 8, 16, 20, 22, 32, 33, 38, 40, 41, 42, 43, 44, 45, 46, 48, 50, 88, 89], "differenti": [12, 15, 47, 55, 61, 68, 69, 75, 87], "differentiate_v2": 75, "digit": [4, 5], "dill": 6, "dim": 3, "dimens": [0, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 22, 23, 25, 27, 50, 67, 69, 86, 87], "dimension": [9, 10, 11, 13, 14, 15, 17, 18, 22, 23, 25, 89], "diminish": [], "direct": [0, 13], "directevalu": 67, "directli": [0, 2, 5], "directori": 8, "disabl": [1, 2, 88], "disadvantag": 0, "discuss": [2, 5, 89], "displai": [0, 2, 5, 68], "dispos": 91, "disregard": [36, 37, 39, 55, 73], "distanc": [0, 33, 38, 89], "distinct": [], "distribut": [2, 3, 22, 36], "divid": [3, 8, 38], "divis": 48, "divisor": 15, "dkdx": 33, "dkdxdx": 33, "dkdy": 33, "do": [0, 20, 38, 39, 88, 91], "doc": 6, "document": [1, 2, 6, 38, 39, 87, 89, 91], "doe": [8, 20, 88], "doi": [0, 5, 26, 28, 87], "domain": [3, 91], "done": [33, 89], "dop": [47, 68, 90], "dopdop": [47, 68], "dot": 61, "dotproduct": 89, "doubl": 75, "down": [13, 33], "dp": [12, 47, 87], "dp0": 12, "dpdp": 12, "dpdxdx": 12, "draw": [0, 1, 2, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 86, 87, 91], "drawback": [0, 88], "drawn": 22, "dt": 61, "dtype": 8, "dual": 5, "dual_coeff_": 37, "due": [2, 3, 88, 89, 91], "duplic": [32, 75, 88], "dure": [1, 2, 9, 75, 90, 91], "dx": [12, 61], "dxdp": 12, "dxdx": 12, "dxfx": 61, "dy": 61, "dydt": [55, 61], "dynam": 88, "dynamical_decoupl": [2, 88], "e": [0, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 59, 67, 69, 70, 71, 72, 73, 88, 89], "each": [0, 1, 2, 3, 8, 15, 20, 35, 36, 37, 38, 39, 44, 50, 54, 55, 57, 61, 63, 67, 69, 70, 71, 72, 73, 75, 81, 84, 86, 87, 88, 89, 90, 91], "earli": 91, "earlier": [], "easi": 91, "easier": [0, 1, 2], "easili": [0, 3], "ec": 3, "econom": 5, "ecr": 75, "edg": 5, "educ": 5, "effect": [0, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 89], "effici": [5, 9, 14, 15, 17, 88], "effortlessli": 87, "ei": [3, 50], "eigenvalu": [26, 28], "either": [0, 8, 9, 10, 11, 12, 13, 15, 16, 23, 33, 35, 36, 37, 38, 39, 47, 54, 55, 57, 62, 86, 87, 89, 91], "el3": 5, "elabor": 5, "element": [0, 9, 12, 20, 61, 75, 87], "elimin": [], "els": [2, 54, 55], "emb": [33, 87], "embed": [0, 14, 31, 32, 33, 89, 91], "emphasi": [38, 39], "emploi": [2, 87, 90, 91], "empti": [8, 29], "emul": [], "en": 37, "enabl": [2, 5, 36, 87, 88, 89, 91], "enable_metadata_rout": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "enc_circ": [3, 35, 36, 37, 89], "encapsul": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74], "enclos": 0, "encod": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 54, 55, 57, 67, 69, 70, 71, 72, 73, 74, 88, 89, 90, 91, 92], "encoding_circuit": [0, 1, 2, 3, 8, 32, 33, 34, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74, 87, 88, 89, 90, 91], "encoding_circuit_deriv": 12, "encoding_circuit_param": 1, "encoding_circuit_str": 16, "encoding_styl": [15, 55], "encoding_weight": 22, "encodingcircuit": [19, 91], "encodingcircuitbas": [8, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 32, 33, 34, 54, 55, 57, 65, 66, 67, 69, 72, 73, 74], "end": [5, 9, 14, 17, 20, 61, 88], "end_idx": 1, "endow": 89, "enforc": [22, 23, 61], "engin": [5, 86], "enhanc": [2, 32, 88], "enrich": 89, "ensur": [1, 2, 8, 87], "ent_strategi": 16, "entail": [], "entangl": [0, 9, 10, 13, 14, 15, 16, 17, 18, 20, 87, 89, 91], "entangling_g": [9, 13], "enter": 20, "entri": [65, 66, 67, 69], "environ": [0, 1, 2, 8, 88], "environment": 2, "ep": [48, 50], "epoch": [54, 55, 57, 71, 91], "epsilon": [1, 39], "eq": [15, 55, 61], "equal": [1, 20, 41, 44, 45, 62, 87, 88], "equat": [15, 30, 31, 41, 42, 43, 44, 45, 61], "equival": 88, "era": 89, "error": [3, 4, 5, 13, 20, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 88, 91], "errstat": 3, "especi": 3, "essenti": [2, 87, 88, 91], "establish": [0, 91], "estiamtor": 8, "estim": [1, 2, 8, 35, 36, 37, 38, 39, 48, 54, 55, 57, 69, 72, 73, 75, 76, 88, 89], "estimat": 1, "estimator__c": 1, "estimator__epsilon": 1, "estimator__num_lay": 1, "estimator__num_qubit": 1, "estimator_list": 1, "estimator_nam": 1, "estimator_opt": [2, 8, 88], "estimator_param": 1, "estimator_run": 8, "estimator_run_v1": [8, 88], "estimator_run_v2": [8, 88], "estimatorpub": 8, "estimatorpublik": 8, "estimatorv1": 8, "estimatorv2": 2, "et": [0, 13, 14, 15, 31, 32, 33, 61, 89], "eta": 61, "etc": [67, 69, 88], "euclidean": 33, "eval_gradi": 35, "evalu": [0, 1, 3, 8, 12, 26, 32, 33, 34, 35, 37, 38, 47, 48, 56, 65, 66, 67, 69, 72, 73, 74, 75, 85, 87, 88, 91], "evaluate_deriv": 33, "evaluate_dfdop": 69, "evaluate_dfdopdx": 69, "evaluate_dfdp": 69, "evaluate_dfdpdx": 69, "evaluate_dfdx": 69, "evaluate_dfdxdx": 69, "evaluate_diff_tupl": 69, "evaluate_dupl": 32, "evaluate_f": 69, "evaluate_from_str": 69, "evaluate_laplac": 69, "evaluate_laplace_dop": 69, "evaluate_laplace_dp": 69, "evaluate_pairwis": [32, 33, 34], "evaluate_prob": 69, "evaluate_qnn": 33, "evaluate_tree_with_estim": 75, "evaluate_tree_with_sampl": 75, "evaluate_var": 69, "evaluate_vari": 69, "evaluate_with_estim": 75, "evaluate_with_paramet": [32, 33, 34], "evaluate_with_sampl": 75, "evan": 13, "even": 8, "evenli": 22, "eventu": 89, "ever": 89, "everi": [0, 1, 20, 22, 33], "everyth": [1, 8], "evolut": 55, "exact": [8, 38, 88], "exactli": [3, 20, 88], "examin": [], "exampl": [0, 2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 61, 65, 66, 67, 69, 72, 73, 87, 88, 89, 90, 91], "exce": 20, "except": [8, 36, 37, 39, 55, 73, 88, 89], "exchang": 3, "exclus": 89, "exec": 8, "execus": 8, "execut": [1, 2, 5, 8, 69, 88], "executor": [0, 1, 2, 3, 5, 16, 26, 32, 33, 34, 35, 36, 37, 38, 39, 54, 55, 56, 57, 65, 66, 67, 69, 72, 73, 74, 86, 87, 89, 91, 92], "executor_backend": [], "executor_dd_trex": 2, "executor_no_mitig": 2, "executor_sampl": 2, "executor_zn": 2, "executorestim": 88, "executorsampl": 88, "exist": [3, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 87, 88], "exp": [0, 33, 55, 59, 89], "expec": 69, "expect": [2, 3, 5, 8, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 57, 67, 68, 69, 72, 73, 74, 75, 80, 82, 88, 89, 91, 92], "expectation_tre": 75, "expected_improv": 3, "expedit": 88, "expens": 3, "experi": [2, 5], "experiment": 5, "explain": 91, "explicitli": [0, 88, 89, 91], "exploit": [3, 50, 89], "explor": [2, 3, 50, 91], "exponenti": [0, 89, 91], "expr": 61, "express": [12, 40, 41, 42, 43, 44, 45, 46, 61, 69, 86], "expsinesquar": 89, "extend": [35, 91], "extinct": 2, "extra": 61, "extract": 1, "extrapol": 88, "f": [0, 1, 2, 3, 5, 36, 38, 39, 41, 61, 63, 89, 91], "f_": 61, "f_0": 61, "f_b": 61, "f_j": 61, "f_ref": [61, 63], "facilit": [87, 88], "fact": 89, "factor": [11, 54, 55, 57, 59, 81, 84], "factor_list": [81, 84], "factori": 65, "fail": [8, 88], "fake": [2, 87, 88], "fake_manila": 88, "fake_provid": [2, 24, 87, 88, 90], "fakeathensv2": 88, "fakebelemv2": [2, 88], "fakemanilav2": [24, 87, 88, 90], "fall": 0, "fals": [0, 1, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 54, 55, 57, 71, 72, 73, 75, 87, 88], "famili": 89, "famou": 89, "far": 0, "fashion": 87, "fast": 89, "faster": [12, 47], "favour": 3, "fc": [3, 20], "featur": [0, 1, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 35, 36, 37, 38, 39, 55, 65, 66, 67, 69, 72, 73, 87, 89, 90, 91], "feature_dimens": 21, "feature_label": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27], "feature_prob": 23, "feature_str": 16, "feature_vector": 12, "feder": 5, "feel": [5, 87], "few": 0, "fidel": [1, 3, 14, 17, 32, 33, 34, 35, 36, 37, 38, 39], "fidelity_kernel": 1, "fidelitykernel": [1, 3, 8, 33, 35, 36, 88], "field": 8, "fig": [0, 1, 3], "figsiz": 1, "figur": [0, 1, 15, 16, 19, 21, 24, 86, 87, 88, 91], "file": [8, 48, 50, 88], "fill": [3, 13], "fill_between": 3, "final": [0, 58, 91], "final_encod": [14, 17], "final_num_qubit": 20, "find": [0, 2, 3, 89], "fine": 2, "finial": 2, "finish": 20, "finit": [8, 9, 48, 50, 56, 59, 91], "first": [2, 9, 10, 12, 13, 14, 17, 24, 33, 40, 47, 48, 61, 75, 87, 90], "firstli": [], "fischer": [28, 88], "fisher": [26, 28, 87, 88], "fit": [0, 1, 2, 3, 8, 16, 20, 32, 33, 35, 36, 37, 38, 39, 48, 50, 54, 55, 57, 72, 73, 74, 88, 89, 91], "fit_transform": [0, 54], "fix": [0, 23, 32, 33, 34, 88], "flag": [60, 61, 62, 63, 64, 75], "flat": [9, 10], "flatten": [1, 9, 10], "float": [8, 9, 10, 11, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 48, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 72, 73, 75, 81, 84, 85, 91], "float64": [], "fm": [12, 19, 24, 33, 87, 90], "fm1": 87, "fm2": 87, "fm3": 87, "fm_deriv": [12, 87], "fmt": 1, "focu": 91, "focus": 5, "folder": [5, 88], "follow": [0, 2, 5, 6, 8, 15, 16, 17, 61, 87, 88, 89, 90, 91], "follw": 3, "folow": 88, "foral": 41, "forc": [38, 39], "form": [0, 1, 3, 9, 18, 47, 75, 89, 91], "formal": 89, "format": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 47, 48, 49, 50, 51, 52, 53, 57, 67, 69, 75, 87], "formul": 89, "forthcom": [], "found": [5, 8, 75, 87, 88, 91], "four": [0, 8, 42, 88], "fqk": [32, 35, 36, 37, 38, 39], "fqk_instanc": 89, "frac": [0, 12, 30, 31, 33, 36, 37, 39, 47, 55, 56, 59, 61, 63, 73, 91], "framework": [2, 5, 8, 65, 72, 73, 88, 89], "fraunhof": 5, "free": [3, 5, 23, 87, 91], "freedom": 91, "freeli": 91, "fresh": [], "friendli": [5, 87], "from": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 54, 55, 57, 68, 69, 72, 73, 74, 75, 81, 84, 86, 87, 88, 89, 90, 91], "from_backend": [], "from_paramet": 68, "from_parameter_vector": 68, "from_str": [16, 68, 87], "from_tupl": 68, "from_vari": 68, "fulfil": 89, "full": [36, 41, 88], "full_regular": [1, 36], "full_sum": [44, 45], "fulli": [20, 87, 88], "fully_connect": 20, "fun": [3, 48, 49, 50, 51, 52, 53], "func": 16, "func_val": 3, "function": [0, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "fundament": 89, "further": [20, 38, 91], "furthermor": [0, 16, 87, 90, 91], "futur": [87, 88], "fx": 3, "fx_i": 3, "g": [3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 59, 67, 69, 70, 71, 72, 73, 88, 89], "gamma": [0, 33, 37, 38, 39, 89], "gap": 5, "gate": [0, 2, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 75, 86, 87, 91], "gate_weight": 22, "gather": [2, 3], "gaussian": [0, 1, 4, 5, 30, 35, 36, 37, 89], "gaussian_process": 35, "gaussianprocessclassifi": 35, "gen_expectation_tre": 75, "gener": [2, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 65, 66, 67, 69, 72, 73, 74, 75, 86, 87, 89, 91], "generate_i": 1, "generate_initial_paramet": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 40, 41, 42, 43, 44, 45, 46, 55], "geometri": 89, "german": 5, "get": [1, 3, 8, 35, 36, 37, 38, 39, 54, 55, 57, 65, 66, 71, 72, 73, 74, 90, 91], "get_backend": [8, 88], "get_cheb_indic": [9, 10], "get_circuit": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27], "get_deriv": [87, 90], "get_estim": [8, 88], "get_first_leaf": 75, "get_lr_decai": [55, 91], "get_metadata_rout": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74], "get_num_nested_list": 75, "get_number_of_leaf": 75, "get_oper": [40, 41, 42, 43, 44, 45, 46, 47], "get_operator_squar": [47, 90], "get_optree_from_expec": 69, "get_optree_from_str": 69, "get_param": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 65, 66, 67, 69, 72, 73, 74], "get_pauli": [40, 41, 42, 43, 44, 45, 46], "get_pauli_map": [40, 41, 42, 43, 44, 45, 46], "get_pennylane_circuit": 86, "get_sampl": [8, 88], "get_shot": [8, 69], "get_tree_depth": 75, "get_variance_fac": 91, "getter": [8, 69], "git": [5, 6], "github": [0, 1, 5, 6], "given": [3, 8, 13, 16, 23, 30, 31, 33, 35, 36, 37, 38, 39, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 65, 66, 67, 69, 70, 72, 73, 74, 75, 82, 89, 91], "global": 3, "gmail": 5, "go": [0, 1], "goe": 13, "good": [1, 87], "gp": [35, 36, 89], "gpr": 3, "grad": [12, 48, 49, 50, 51, 52, 53], "grad_from_list": 87, "grad_from_str": 87, "grad_from_tupl": 87, "gradient": [12, 35, 48, 49, 50, 51, 52, 53, 56, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 75, 87, 88, 90], "gram": 36, "grant": 5, "graph": 88, "grid": 3, "grid_search": [1, 16], "gridsearch": 22, "gridsearchcv": [1, 16], "gridsearchcvifittedgridsearchcv": 1, "ground": [1, 70, 71], "ground_truth": [61, 63, 70, 71], "group": [5, 16, 75, 88, 90], "gt": [0, 1], "guess": [48, 49, 50, 51, 52, 53], "guid": [5, 8, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74, 89, 91], "guidanc": 2, "guidelin": [5, 89], "h": [12, 16, 22, 23, 41, 42, 43, 44, 45, 75, 87, 89], "h2giga": 5, "ha": [0, 1, 2, 8, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 60, 61, 62, 63, 64, 70, 71, 72, 73, 86, 89, 91], "hadamard": 11, "hadamard_start": 11, "hagel\u00fcken": 5, "hamiltonian": [41, 47, 90], "handl": [0, 5, 8, 61, 86, 88], "handwritten": [4, 5], "happen": 3, "hardwar": [0, 2, 9, 14, 15, 17, 88, 91], "harsh": [35, 38, 54, 72], "hash": [75, 86, 88], "hash_circuit": 75, "hash_oper": 75, "hashabl": 86, "hat": [2, 13, 33, 41, 42, 43, 44, 45, 47, 90, 91], "haug": 25, "have": [0, 1, 2, 16, 20, 22, 38, 75, 87, 88, 89, 91], "havlicek": 32, "hea": [15, 55], "heat": 1, "heat_map_data": 1, "heatmap": 1, "help": 0, "helper": 0, "henc": 88, "here": [0, 1, 2, 3, 20, 38, 39, 88, 91], "hessian": [12, 87, 90], "hhl": 89, "hidden": 0, "high": [0, 3, 5, 8, 13, 88], "highdim": 13, "higher": [38, 39, 65, 66, 67, 69, 87, 90, 91], "highlight": [0, 1], "highlight_row": 0, "hilbert": [0, 32, 33, 89], "hint": 0, "hire": [9, 10, 11, 13, 14, 15, 17, 18, 22, 23, 25, 91], "hold": [1, 68, 89], "homogen": 61, "hood": 2, "horizont": 15, "hour": [], "how": [0, 1, 2, 3, 13, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74, 88, 89, 91], "howev": [0, 2, 87, 88, 91], "hqaa": 8, "html": [0, 1], "http": [0, 5, 6, 26, 28, 36, 37, 87], "huang": [0, 33, 89], "hub": 88, "hubregtsen": [14, 19, 31, 32, 33, 87, 89], "hubregtsenencodingcircuit": [3, 12, 19, 35, 36, 38, 39, 72, 73, 87], "hy": [0, 33], "hybrid": 91, "hyper": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 67, 69, 72, 73, 74, 91], "hyperparamet": [3, 4, 5, 16, 30, 33, 35, 36, 37], "hyperplan": [0, 38], "hz": 17, "i": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 54, 55, 56, 57, 59, 61, 62, 64, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "ibm": [4, 5, 6, 8], "ibm_brisban": [8, 88], "ibm_kyoto": [], "ibm_nairobi": [], "ibm_quantum": [8, 88], "ibm_strasbourg": 2, "ibmprovid": 88, "ibmq_qasm_simul": 88, "ibmquantum": 8, "idea": [0, 20, 89], "ideal": [2, 8, 89], "ident": [12, 41, 44, 45, 47, 75], "identifi": [16, 23, 75, 88], "idl": 2, "ignor": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 88], "ii": [2, 41, 90], "iii": [47, 90], "iiib": 15, "iiii": 91, "iiiii": 90, "iiiiz": 90, "iiiz": 91, "iiizi": 90, "iiz": [47, 90], "iizi": 91, "ij": [0, 12, 41], "illustr": [89, 91], "iloc": 1, "imag": 0, "immedi": 89, "imp": 3, "impact": 1, "imperfect": 2, "implement": [0, 2, 3, 15, 16, 28, 32, 36, 37, 41, 43, 45, 47, 48, 49, 50, 51, 52, 54, 55, 60, 61, 62, 67, 69, 72, 73, 74, 75, 88, 89, 91], "impli": 88, "implicitli": 89, "import": [3, 8, 12, 16, 19, 21, 24, 33, 35, 36, 37, 38, 39, 41, 47, 54, 55, 72, 73, 87, 88, 89, 90, 91], "impos": 3, "improv": [0, 3, 35, 36, 37], "includ": [0, 1, 2, 5, 8, 23, 44, 45, 54, 55, 57, 65, 66, 67, 69, 72, 73, 74, 88], "include_ident": [44, 45, 55], "increas": [2, 49, 51, 52, 88, 89, 91], "incur": 2, "independ": [61, 89], "index": [1, 11, 13, 40, 75, 81, 84], "indic": [0, 3, 9, 10, 13, 19, 28, 81, 84, 87, 88], "individu": [1, 35, 87], "industri": 3, "inf": 3, "infer": [2, 91], "infinit": 89, "influenc": [36, 37, 39, 55, 73, 91], "inform": [0, 3, 8, 13, 26, 28, 35, 36, 37, 38, 39, 47, 54, 55, 57, 72, 73, 74, 75, 87, 88, 89, 91], "infrastructur": [], "ingo": 88, "ingredi": 91, "inher": [2, 89], "inherit": 35, "init": 0, "initi": [1, 2, 3, 8, 9, 10, 20, 32, 33, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 69, 70, 71, 72, 73, 74, 86, 89, 90, 91], "initial_layout": [24, 87, 90], "initial_paramet": [0, 32, 33, 34, 37, 38, 39], "initial_valu": [55, 61], "inlier": 39, "inner": 89, "inplac": 75, "input": [0, 2, 3, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 58, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 87, 88, 90, 91], "input_expec": 69, "input_list": 20, "input_str": 69, "input_valu": [70, 71], "insert_barri": [21, 87], "insert_your_token_her": [8, 88], "insid": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "inspect": 2, "inspir": [20, 87, 89], "instal": [8, 88], "instanc": [1, 2, 35, 36, 37, 38, 39, 54, 55, 56, 57, 70, 71, 72, 73, 74, 76, 77, 88, 89, 91], "instead": [0, 35, 36, 37, 38, 39, 44, 45, 54, 55, 57, 72, 73, 88], "institut": 5, "instruct": [75, 86, 87, 88], "int": [1, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 54, 55, 56, 57, 58, 59, 62, 64, 67, 69, 71, 72, 73, 74, 75, 81, 84, 86, 88, 91], "integr": [1, 5, 8], "intens": [], "interact": [], "interconnect": 91, "interfac": [5, 54, 55, 88], "intern": [87, 88], "interpret": 89, "interv": 0, "intrest": 3, "intric": 91, "intrigu": 0, "introduc": [2, 15, 16, 88, 89, 91], "introduct": 8, "intuit": [1, 3], "involv": [2, 9, 10, 61, 87, 91], "ipa": 5, "is_statevector": 8, "isinghamiltonian": [47, 55, 90], "isinst": 2, "issu": 2, "iswap": 13, "item": 79, "iter": [3, 8, 13, 48, 49, 50, 51, 52, 58, 59, 62, 64, 88, 91], "iter_decai": 58, "iter_plateau": 58, "its": [0, 1, 3, 8, 12, 20, 21, 33, 35, 36, 48, 50, 67, 68, 69, 81, 84, 87, 91], "itself": [], "ix": [41, 90], "iz": [2, 90], "izi": [47, 90], "izii": 91, "izz": [47, 90], "j": [5, 31, 41, 47, 61, 89, 90], "jerbi": 89, "job": [8, 88], "jobv1": 8, "joint": 36, "jupyt": [0, 1, 8, 88], "just": [36, 88], "k": [0, 3, 30, 32, 33, 36, 89], "k_": [0, 30, 31, 33], "k_test": 36, "k_testtrain": [36, 37], "k_train": [36, 37], "keep": [2, 22, 36, 37, 39, 55, 73], "kei": [65, 66, 67, 69, 75, 87, 89], "kept": 75, "kernel": [3, 4, 5, 8, 14, 16, 17, 55, 72, 73, 74, 87, 88, 90, 92], "kernel_": 35, "kernel_matrix": 33, "kernel_optim": 89, "kernellossbas": [], "kernelmatrixbas": [29, 30, 31, 35, 36, 37, 38, 39], "kerneloptim": 89, "kernmatrixbas": 34, "ket": [0, 43, 45, 89], "kevin": 37, "keyword": [8, 33, 35, 36, 37, 56, 65, 88, 91], "killoran": 89, "kim": 25, "kind": [0, 41, 44, 79], "know": 3, "known": [0, 2, 3, 72, 73, 89], "kreplin": [5, 9, 56, 59, 91], "krr": 37, "kta": 89, "kta_loss": 89, "kta_optim": [], "kwarg": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 33, 35, 36, 37, 38, 39, 48, 50, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 86], "kyriienko": [15, 61], "kyriienkoencodingcircuit": 55, "l": [3, 30, 33, 49, 56, 61, 62, 91], "l1": 62, "l2": [2, 62], "l_": [61, 62, 64, 91], "l_2": 0, "label": [0, 1, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 35, 37, 38, 54, 55, 57, 68, 70, 71, 72, 73, 74], "label_train": 36, "labl": [38, 39], "lambda": 3, "langl": [0, 32, 91], "laplac": 12, "laplace_dp": 12, "laplacian": [12, 33, 69], "larg": [0, 22, 25], "larger": [1, 36, 37, 40, 41, 42, 43, 44, 45, 46, 88], "last": [2, 9, 10, 13, 14, 17, 40], "lastli": [0, 2], "later": [8, 91], "latest": 6, "latter": [9, 35], "layer": [0, 1, 2, 3, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 23, 25, 35, 36, 37, 38, 39, 72, 73, 87, 91], "layer_typ": 13, "layered_encoding_circuit": [16, 87], "layout": [3, 88], "lb": 3, "lbfgsb": 91, "lbrace": 89, "ldot": 12, "lead": [0, 89], "leaf": [75, 78, 79, 80, 82, 83, 85], "learn": [0, 1, 2, 3, 5, 6, 13, 25, 30, 32, 33, 35, 36, 37, 38, 39, 48, 54, 55, 58, 72, 73, 74, 87, 88, 89], "learning_r": 0, "least": [5, 20, 22, 23], "least_busi": 2, "leav": 0, "lec": 16, "left": [0, 13, 20, 33, 61, 62, 63, 89, 90], "legend": [1, 2, 3], "len": [1, 3], "length": [20, 58, 59, 61], "length_scal": 33, "lengthi": [], "less": [20, 91], "let": 0, "lett": [32, 89], "letter": 90, "level": [2, 5, 8, 33, 65, 66, 67, 69, 88], "leverag": [0, 87, 88], "librari": [5, 18, 21, 87], "licens": 0, "lightin": 8, "lightn": 8, "like": [1, 5, 8, 22, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 86, 88, 91], "likelihood": [30, 35, 89], "limit": [0, 2, 8, 26], "lincombqgt": 88, "line": [0, 89], "line2d": 0, "linear": [0, 2, 9, 16, 21, 32, 33, 36, 37, 72, 73, 74, 87, 88, 89, 90], "link": 36, "linspac": [1, 3, 39], "list": [8, 9, 10, 12, 16, 19, 20, 28, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 54, 55, 57, 61, 62, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 81, 84, 86, 87, 88, 89, 90, 91], "literatur": 89, "ll": [1, 2], "load": [0, 1], "load_digit": 0, "load_iri": 35, "local": [2, 21, 87, 88, 89], "locat": [0, 3, 91], "log": [2, 8, 30, 35, 38, 48, 50, 55, 73, 88, 89], "log_fil": [2, 8, 48, 50, 88], "log_likelihood": 35, "log_likelihood_gradi": 35, "log_marginal_likelihood": 35, "logarithm": [73, 91], "long": 88, "longer": 2, "loop": [1, 54, 55, 57, 89], "loss": [2, 54, 55, 56, 57, 70, 71, 88, 89, 91], "loss_od": [55, 61], "lossbas": [54, 55, 57, 70, 71], "lot": 91, "low": [2, 5, 8, 13, 33, 65, 66, 67, 69, 88, 91], "lower": [26, 28, 50], "lowlevelqnnbas": [65, 70, 71], "lr": [2, 48, 55, 89, 91], "lr_end": 58, "lr_start": 58, "lt": [0, 1, 2], "lukin": 20, "lvert": [0, 91], "m": [0, 3, 5, 9, 20, 25, 33, 36, 56, 59, 88, 89, 91], "machin": [1, 5, 6, 13, 25, 30, 32, 33, 36, 37, 72, 73, 74, 87, 88, 89], "machineri": 3, "made": [3, 21], "mai": [35, 36, 37, 39, 55, 73, 88, 90, 91], "main": 91, "maintain": 5, "make": [0, 1, 2, 14, 17, 37, 88], "make_blob": 54, "make_moon": [38, 72], "make_regress": 16, "manag": [2, 88], "mandatori": [8, 90], "mani": [87, 91], "manifold": 0, "manila": 88, "manipul": [9, 87, 91], "manner": [87, 91], "manual": [2, 88], "manufactur": 5, "map": [0, 1, 8, 9, 10, 11, 16, 18, 20, 21, 40, 41, 42, 43, 44, 45, 46, 88, 89, 91], "mapomat": [6, 8, 88], "mapsto": 0, "marco": [], "margin": 35, "mark": [0, 89], "marker": 3, "master": 6, "match": [61, 87], "matern": 89, "mathcal": 61, "mathemat": 89, "mathrm": [0, 3, 89], "matplotlib": [0, 1, 2, 3, 55, 86], "matric": [2, 26, 33, 36, 37, 38, 39, 89, 90, 91], "matrix": [0, 1, 3, 26, 28, 29, 30, 31, 35, 36, 37, 38, 39, 54, 55, 57, 73, 87, 89, 91], "max": [1, 2, 3], "max_diff": 86, "max_gat": 22, "max_it": [0, 1], "max_jobs_retri": [8, 88], "max_num_lay": 23, "max_num_qubit": 8, "max_session_tim": 8, "max_shot": [56, 91], "maxim": [0, 56, 88], "maximum": [8, 9, 10, 22, 23, 48, 50, 87, 88, 91], "maxit": [2, 3, 48, 50, 55, 88, 89, 91], "maxiter_tot": [48, 50], "mean": [1, 3, 35, 36, 37, 38, 39, 54, 55, 72, 73, 91], "mean_test_scor": 1, "meaning": 32, "meaningless": 38, "measument": 33, "measur": [0, 2, 8, 20, 25, 33, 37, 40, 42, 43, 44, 45, 65, 66, 72, 73, 74, 75, 82, 86, 88, 89, 91], "measure_circuit": 82, "measure_mitig": 2, "measure_noise_learn": 2, "mechan": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74, 89], "memori": 8, "mention": [88, 89], "mere": 89, "merg": 75, "meta": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "metadata": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74], "metadata_rout": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "metadatarequest": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74], "method": [1, 2, 3, 5, 16, 21, 28, 32, 34, 57, 61, 87, 88, 92], "metric": [0, 33, 35, 38, 54, 72, 89], "might": [3, 88], "mimiz": 3, "min": [1, 2, 3, 88], "min_": [3, 91], "min_gat": 22, "min_num_lay": 23, "min_num_qubit": 8, "min_obj": 3, "min_shot": [56, 91], "min_val": 3, "min_x": 3, "mini": [54, 55, 71], "minim": [3, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 70, 71, 89, 91], "minimum": [3, 8, 22, 23, 91], "ministri": 5, "minmaxscal": [0, 54], "mislead": 91, "mit": [30, 36, 37], "mit_depol_nois": [32, 89], "mitig": [4, 5, 32, 88, 89, 91], "mix": 12, "ml": [0, 1, 3, 33, 54, 55], "ml_method": 33, "ml_model": [72, 73, 74], "ml_model_opt": [72, 73, 74], "mlp": [72, 73, 74], "mmean": [32, 89], "mode": [8, 21, 62, 88], "model": [0, 1, 2, 4, 5, 8, 32, 35, 36, 37, 38, 39, 54, 55, 57, 61, 62, 63, 64, 72, 73, 74, 87, 88, 89, 91], "model_select": [0, 1, 16, 38, 39, 54, 55, 72, 73], "modest": 3, "modifi": [35, 72, 73, 74, 88, 91], "modul": [7, 90], "modulo": 20, "mohseni": [0, 33], "moment": 48, "monoton": 38, "moon": 72, "more": [0, 1, 2, 3, 5, 9, 22, 35, 37, 38, 39, 47, 87, 88, 90, 91], "moreov": 89, "most": [36, 88, 89, 91], "mpl": [0, 1, 2, 16, 19, 21, 24, 87, 91], "mse": 1, "msplit": [32, 89], "mu": 3, "mu_sampl": 3, "mu_sample_opt": 3, "multi": [35, 38, 54, 72, 73], "multiclass": 0, "multioutput": [36, 37, 39, 55, 73], "multioutputregressor": [36, 37, 39, 55, 73], "multipl": [9, 16, 40, 44, 47, 54, 55, 57, 61, 63, 64, 65, 66, 67, 69, 75, 90], "multiple_output": [61, 63, 64, 67, 69], "multipli": 90, "murphi": 37, "must": [15, 20, 35, 36, 37, 38, 39, 42, 61, 87], "n": [0, 13, 16, 20, 25, 30, 41, 61, 89, 90], "n_": [56, 91], "n_chebyshev": 11, "n_class": [35, 38], "n_col": 1, "n_compon": 0, "n_featur": [16, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "n_iter": 3, "n_kernel_param": 35, "n_output": [35, 36, 37, 38, 39, 54, 55, 72, 73], "n_restart": 3, "n_row": 1, "n_sampl": [0, 16, 26, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "n_samples_fit": [36, 37, 39, 55, 73], "n_samples_test": [38, 39], "n_samples_train": [38, 39], "n_test": 37, "n_time": 20, "n_train": 37, "n_trials_transpil": 8, "nabla": 12, "nabla_p": 12, "nabla_x": 12, "name": [2, 8, 20, 21, 33, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 75, 86, 88], "name_hyper_paramet": 33, "nat": [0, 20, 33, 89], "nation": 88, "nativ": 89, "natur": [32, 89], "nb": 15, "nbest": 16, "nbsp": [0, 1], "nbviewer": [0, 1], "ndarrai": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75], "nearest": [16, 87], "necess": [], "necessari": [3, 6, 8, 15, 20, 40, 41, 42, 43, 44, 45, 46, 90], "necessarili": [14, 17], "need": [0, 2, 38, 88, 89, 90], "neg": [1, 3, 30, 31, 36, 37, 39, 55, 73, 89], "neg_mean_squared_error": 1, "neglect": 64, "neighbor": [16, 87], "neq": 89, "nest": [65, 66, 67, 69, 75], "network": [4, 5, 9, 20, 54, 55, 56, 57, 59, 87, 90, 92], "networkx": 6, "neural": [4, 5, 9, 20, 54, 55, 56, 57, 59, 87, 90, 92], "neuron": 91, "nevertheless": 91, "new": [0, 3, 8, 23, 54, 55, 57, 72, 73, 74, 88, 91], "next": [0, 2, 3, 8, 69, 91], "nisq": [5, 89], "nll": [], "nll_loss": [], "nll_optim": [], "nn": [16, 87], "node": [81, 84], "nois": [3, 9, 16, 32, 38, 56, 59, 72, 88, 89, 91], "noise_amplifi": [], "noise_factor": [2, 88], "noise_level": 3, "noise_model": [], "noise_std": [], "noise_v": [], "noisemodel": [], "noisi": [0, 2, 3, 13, 88, 91], "noisy_backend": [], "nomenclatur": 91, "non": [9, 16, 22, 23, 35], "none": [0, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 81, 84, 86, 88, 89], "nonetheless": 88, "nonlinear": [9, 10, 11, 15, 61], "norm": [0, 3, 38], "normal": [3, 36], "normalize_i": 36, "notabl": [2, 38, 39], "note": [0, 1, 2, 3, 8, 35, 36, 37, 38, 39, 40, 54, 55, 57, 72, 73, 87, 88, 90, 91], "notebook": [0, 1, 2, 3, 8, 88], "noteworthi": [], "noth": [54, 55, 57, 89], "notic": 2, "notimplementederror": 27, "notion": 89, "now": [0, 1, 91], "np": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 54, 55, 61, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 87, 88, 91], "npj": 13, "nqubit": 2, "nr_initial_point": 3, "nu": 33, "num_all_qubit": [40, 41, 42, 43, 44, 45, 46], "num_averag": [48, 50], "num_chebyshev": [11, 33], "num_combin": 1, "num_encoding_lay": [15, 55], "num_estim": 1, "num_featur": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 25, 27, 33, 35, 36, 37, 38, 39, 55, 67, 69, 72, 73, 87, 89, 91], "num_hyper_paramet": 33, "num_lat": 16, "num_lay": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 16, 17, 18, 25, 35, 36, 37, 38, 39, 87, 89, 91], "num_layer_1": 16, "num_layers_list": 1, "num_oper": [47, 67, 69, 72, 73, 74], "num_paramet": [0, 2, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 67, 69], "num_parameters_observ": [67, 69], "num_physical_qubit": 90, "num_qubit": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 67, 69, 72, 73, 87, 89, 90, 91], "num_qubit_list": 1, "num_random": 2, "num_shot": [8, 69], "num_variational_lay": [15, 55], "number": [0, 1, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 54, 55, 56, 57, 59, 62, 64, 67, 69, 71, 72, 73, 74, 75, 87, 88, 90, 91], "number_of_lay": 13, "numer": [0, 8, 12, 32, 33, 34, 36, 37], "numpi": [0, 1, 2, 3, 6, 8, 16, 28, 32, 33, 34, 36, 37, 38, 39, 48, 49, 51, 52, 53, 55, 73, 75, 88, 91], "o": [1, 2, 15, 47, 61, 68, 69], "ob": [20, 41, 90], "ob1": 90, "ob2": 90, "object": [0, 1, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 68, 69, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91], "obligatori": 87, "observ": [2, 3, 5, 8, 20, 33, 54, 55, 65, 66, 67, 68, 69, 70, 71, 86, 88, 89, 91, 92], "observable_deriv": 90, "observable_parameter_dimens": 86, "observable_parameter_nam": 86, "observablebas": [20, 33, 47, 54, 55, 57, 65, 66, 67, 69, 72, 73, 74, 90], "observablederiv": 90, "obtain": [0, 2, 3, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 27, 35, 36, 37, 38, 39, 47, 69, 87, 88, 89, 90, 91], "occur": [2, 75], "od": 61, "ode_funct": 61, "ode_regressor": 55, "odeloss": 55, "odop": 47, "odopdop": 47, "off": [0, 3, 9, 41, 50, 75], "off_diagon": 32, "offer": [2, 5, 87, 88, 89, 91], "offset": [2, 59, 91], "often": [3, 72, 73, 87, 91], "omit": [38, 39], "onc": [0, 8, 20, 22, 23, 75, 88], "one": [0, 8, 14, 16, 17, 20, 35, 36, 38, 39, 42, 44, 48, 50, 54, 55, 57, 89], "one_st": [43, 45], "ones": [2, 40, 41, 42, 43, 44, 45, 46, 69, 89], "onli": [0, 3, 8, 12, 15, 20, 26, 32, 35, 36, 37, 38, 39, 44, 54, 55, 57, 69, 72, 73, 75, 86, 87, 89], "oo": [47, 68, 69], "oodop": 47, "oodopdop": 47, "op": [2, 47, 90, 91], "op0__": [67, 69], "op1__": [67, 69], "op3": 90, "op_str": [42, 44, 90], "open": 8, "oper": [2, 12, 20, 33, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 80, 81, 82, 83, 84, 87, 89, 90, 91], "operation_list": [81, 84], "operator_se": [72, 73, 74], "operator_str": [40, 90], "operator_tre": 75, "operatorbas": [12, 47], "operatornam": 64, "opt_kta_param": [], "opt_kta_result": [], "opt_nll_param": [], "opt_nll_result": [], "opt_param_op": [54, 55, 57, 60, 61, 62, 63, 64, 70, 71], "opt_result": [], "optim": [2, 4, 5, 6, 8, 9, 16, 22, 36, 54, 55, 57, 58, 61, 70, 71, 88, 89], "optimal_paramet": [], "optimization_level": 8, "optimizerbas": [54, 55, 57, 70, 71], "optimizeresult": 3, "optimizerresult": [48, 49, 50, 51, 52, 53], "optimum": 3, "option": [2, 3, 5, 8, 14, 15, 17, 18, 20, 21, 24, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 48, 49, 50, 51, 52, 54, 55, 57, 61, 72, 73, 74, 75, 76, 77, 81, 84, 87, 89, 90, 91], "options_dict": 91, "options_estim": [8, 88], "options_sampl": [8, 88], "optre": [12, 47, 69, 87], "optree_cach": [12, 47], "optree_el": 75, "optreecircuit": [75, 80, 82], "optreederiv": 75, "optreeelementbas": [12, 47, 75, 81, 84], "optreeevalu": 75, "optreeexpectationvalu": [75, 82], "optreeleafbas": 75, "optreeleafcircuit": [75, 78, 80, 82], "optreeleafcontain": 79, "optreeleafexpectationvalu": [75, 80, 82], "optreeleafmeasuredoper": [75, 82], "optreeleafoper": [75, 80, 83], "optreeleafvalu": 85, "optreemeasuredoper": 75, "optreenodebas": [75, 81, 84], "optreeoper": [75, 80, 82], "orang": 91, "order": [0, 2, 16, 35, 38, 47, 61, 65, 66, 67, 69, 87, 89, 90], "ordinari": 61, "org": [0, 1, 5, 26, 28, 37, 87], "origin": [0, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 87, 88, 89], "other": [0, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 88, 90, 91], "otherwis": [9, 10, 27, 35, 36, 37, 38, 39, 43, 54, 55, 57, 72, 73, 88], "our": [0, 2, 3, 5], "out": [1, 13, 88, 89], "outcom": [2, 38, 91], "outer": [0, 9, 10, 89], "outer_kernel": [0, 33, 37, 89], "outerkernel": 33, "outerkernelbas": 33, "outgo": 88, "outlier": 39, "output": [0, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 33, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 61, 63, 64, 65, 66, 67, 69, 87, 88, 91], "output_list": 20, "outsid": [], "over": [0, 2, 22, 84, 89, 91], "overal": [0, 2], "overflow": 8, "overlap": 32, "overli": 0, "overwrit": 8, "overwritten": [1, 8, 27], "ovo": 38, "ovr": [0, 38], "own": [0, 8, 87], "p": [0, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 33, 37, 41, 47, 75, 87, 88, 89, 90, 91], "p_": 12, "p_1": 12, "p_i": [12, 62], "p_j": [12, 63], "p_lim": 26, "p_m": 12, "p_op": [47, 90], "p_times_arccos_x": 22, "p_times_arctan_x": 22, "p_times_x": 22, "p_val": 26, "packag": [5, 6, 87, 88], "page": [0, 1], "panda": 1, "paper": [5, 15], "parabol": 2, "parabola": 2, "paradigm": 91, "parallel": 8, "param": [2, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 65, 66, 67, 69, 72, 73, 74], "param_estimator__num_lay": 1, "param_estimator__num_qubit": 1, "param_grid": [1, 16], "param_ini": [2, 54, 55, 57, 70, 71, 72, 73, 74], "param_initi": 55, "param_ob": [65, 66, 67, 69], "param_observ": 55, "param_op": [2, 65, 66, 67, 69], "param_op_ini": [2, 54, 55, 57, 70, 71, 72, 73, 74], "param_vec": [9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 27], "paramerer": 23, "paramet": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "parameter": [0, 2, 9, 18, 22, 26, 32, 33, 40, 42, 43, 54, 55, 57, 65, 66, 67, 69, 87, 90, 91], "parameter_label": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27], "parameter_list": 62, "parameter_operator_list": 62, "parameter_se": [1, 3, 32, 33, 34, 54, 55, 57, 72, 73, 74, 89], "parameter_str": 16, "parameter_valu": [8, 29, 30, 31], "parameter_vector": [12, 47, 87, 90], "parameterel": 12, "parameterexpress": [2, 41, 47, 75, 90, 91], "parameterized_quantum_circuit": [65, 66, 67, 69], "parameters_oper": [67, 69], "parametervector": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 40, 41, 42, 43, 44, 45, 46, 47, 65, 66, 67, 69, 75, 87], "parametervectorel": [65, 66, 67, 68, 69], "parametr": [2, 23, 89], "parent": [29, 38, 39, 88], "pariwisekernel": 89, "part": [1, 54, 55], "partial": [12, 61, 63, 87, 89], "partial_fit": [54, 55], "particl": 89, "particular": 91, "particularli": [36, 37, 38, 39], "pass": [8, 20, 21, 35, 36, 37, 38, 39, 54, 55, 57, 65, 72, 73, 88, 89, 91], "pattern": [2, 16, 89], "pauli": [2, 8, 20, 33, 40, 42, 43, 44, 47, 72, 73, 74, 86, 88, 89, 90, 91], "pauliop": [44, 45, 46], "paus": 88, "pbar": [54, 55, 57], "pd": 1, "pdf": [3, 9, 10, 11, 13, 14, 15, 17, 18, 22, 23, 25, 91], "pennylan": [2, 5, 6, 8, 55, 57, 67, 88], "pennylane_circuit": [8, 86], "pennylane_execut": 8, "pennylane_execute_batch": 8, "pennylanedevic": 8, "per": [1, 11, 38, 39, 48, 50], "perceptron": [72, 73], "perfect": [], "perfectli": 2, "perform": [0, 1, 2, 3, 33, 35, 37, 38, 39, 48, 50, 54, 55, 57, 71, 72, 73, 87, 88], "period": 33, "perplex": 0, "perspect": 37, "peter": 13, "phase": 91, "phenomena": 89, "phi": [0, 3, 32, 89], "phy": [20, 32, 89], "physic": [40, 41, 42, 43, 44, 45, 46, 89, 90], "pi": [1, 23, 26, 30, 33, 39], "pi_times_x": 22, "pick": 22, "pictur": 0, "pin": [55, 61], "pip": [5, 6, 88], "pipelin": [0, 4, 5, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "pipelinepipelin": 1, "pivot": 1, "pivot_t": 1, "pixel": 0, "place": [11, 16, 20, 22, 23, 87, 88], "plai": 90, "plateau": [58, 59, 91], "pleas": [0, 1, 5, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74, 87], "plot": [0, 1, 2, 3], "plot_data_in_feature_spac": 0, "plot_dataset": 0, "plot_it": 3, "plot_numb": 0, "plot_result": 0, "plot_surrog": 3, "plot_surrogate_acquisit": 3, "plt": [0, 1, 2, 3, 55], "plugin": [8, 88], "png": [9, 10, 11, 13, 14, 15, 17, 18, 22, 23, 25, 91], "poi": 50, "point": [0, 3, 33, 35, 36, 38, 39, 50, 54, 55, 57, 61, 63, 71, 89, 91], "poli": 33, "polynomi": [9, 33], "pool": 20, "posit": [0, 3, 35, 36, 37, 91], "possibl": [0, 3, 8, 11, 15, 16, 33, 35, 36, 37, 38, 39, 44, 48, 50, 54, 55, 57, 62, 69, 72, 73, 74, 87, 88, 90, 91], "possibli": [54, 55], "posterior": 3, "postprocessingevalu": 67, "potenti": [0, 2, 88], "power": [0, 33, 89], "pp": 37, "pq": 89, "pqc": [0, 2, 32, 34, 54, 55, 57, 65, 66, 67, 69, 70, 71, 87, 89, 91], "pqk": [1, 16, 35, 36, 37, 38, 39], "pqk_instanc": 89, "practic": [5, 89], "practition": 5, "pre": [3, 37, 87, 88], "precis": 8, "precomput": [35, 36, 37, 38, 39, 48, 50, 55, 73], "predefin": [23, 89, 90, 91], "predict": [0, 1, 2, 3, 35, 36, 37, 38, 39, 54, 55, 72, 73, 74, 91], "predict_log_proba": 38, "predict_proba": [35, 38, 54], "prefactor": 25, "prefer": 3, "prefix": [67, 69], "prepar": 2, "preprint": [], "preprocess": [1, 54], "present": [2, 14], "press": [30, 36, 37], "pretrain": [2, 54, 55, 57, 91], "prevent": 2, "previou": [0, 3, 14, 17], "previous": [86, 89], "price": 3, "primari": [], "primarili": 2, "prime": 89, "primit": [8, 54, 55, 57, 69, 75, 76, 77], "primitivesv2": 88, "primtiv": 88, "principl": [88, 91], "print": [0, 1, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 38, 39, 41, 47, 88, 90, 91], "prior": [32, 33, 36, 37], "priorit": 91, "prob": 86, "probabilist": 37, "probabl": [0, 2, 3, 8, 23, 35, 38, 43, 45, 54, 69, 89], "problem": [0, 3, 36, 37, 88, 89, 91], "proce": [2, 3], "procedur": [32, 33, 37, 89], "proceed": 2, "process": [1, 2, 4, 5, 30, 35, 36, 37, 54, 55, 57, 88, 89, 91], "processor": 13, "produc": 38, "product": [0, 89], "program": [8, 87, 88, 90], "progress": 88, "project": [1, 3, 4, 5, 33, 35, 36, 37, 38, 39, 87, 88, 90], "projected_kernel": 1, "projected_quantum_kernel": [0, 1], "projectedquantumkernel": [0, 1, 3, 16, 37, 38, 39], "promis": [0, 89], "properti": [0, 38, 39, 88, 89], "proport": 38, "propos": [20, 28], "propose_loc": 3, "proprietari": 87, "prospect": 89, "prototyp": 5, "provid": [5, 8, 19, 20, 35, 36, 37, 38, 39, 47, 50, 54, 55, 57, 61, 72, 73, 74, 87, 88, 89, 90, 91], "prune": [19, 26, 28], "pruned_encoding_circuit": 87, "pruned_paramet": 19, "prunedencodingcircuit": [26, 87], "pruning_thresh": [26, 28], "prx": 88, "prxquantum": [26, 28, 87], "psi": [89, 91], "pub": 8, "pull": [5, 87], "puls": 2, "pure": [89, 90], "purpos": 88, "put": [38, 39, 89], "pylab": [0, 1], "pyplot": [2, 3, 55], "python": [5, 6], "python3": 6, "q": 89, "q_kernel": [3, 35, 36], "q_kernel_pqk": 37, "qasm": [3, 88], "qasm_simul": [8, 88], "qasmsimul": 91, "qbo": 3, "qc": 88, "qcnn": 20, "qcnnobserv": 20, "qfi": [28, 88], "qfim": 87, "qgp": 3, "qgpc": 89, "qgpc_ansatz": 35, "qgpr": [1, 3, 37, 89], "qgpr_ansatz": 36, "qgpr_model": 3, "qgprqgpr": 1, "qiksit": 88, "qiskit": [1, 2, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 40, 41, 42, 43, 44, 45, 46, 52, 57, 69, 75, 86, 90, 91], "qiskit_a": 88, "qiskit_algorithm": [52, 88], "qiskit_circuit": 21, "qiskit_execut": 8, "qiskit_ibm_provid": 88, "qiskit_ibm_runtim": [2, 8, 24, 87, 88, 90], "qiskitencodingcircuit": 87, "qiskitruntimeservic": [2, 8, 88], "qkrr": [8, 16, 33, 36, 88, 89], "qkrr_pqk": 37, "qlem": [72, 73, 74], "qml": [0, 1, 5, 8, 86, 88, 89], "qnn": [5, 33, 53, 87, 88, 89, 90], "qnn_backend": 2, "qnn_simul": 2, "qnnclassifi": [55, 91], "qnnregressor": [2, 54, 88, 91], "qnode": 86, "qpu": 8, "qpu_parallel": [8, 88], "qquad": [42, 43], "qrcclassifi": 73, "qrcregressor": 72, "qsikit": [8, 88], "qsvc": [0, 35, 39, 89], "qsvcifittedqsvc": 0, "qsvr": [1, 36, 37, 38, 89], "quad": 61, "quadrat": [0, 89], "quadraticextrapol": [], "qualiti": [8, 88], "quality_hqaa": 8, "quantifi": 3, "quantum": [1, 4, 5, 8, 9, 13, 14, 15, 20, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 54, 55, 56, 57, 59, 61, 65, 66, 67, 69, 72, 73, 74, 90, 92], "quantum_circuit": 20, "quantum_fit": 26, "quantum_framework": 8, "quantum_info": 88, "quantum_kernel": [0, 1, 3, 16, 29, 30, 31, 33, 35, 36, 37, 38, 39, 89], "quantumcircuit": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 75, 78, 80, 82, 86], "quantumgaussianprocessregressor": [], "quantuminst": 69, "qubit": [0, 1, 2, 3, 8, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 27, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 67, 69, 72, 73, 74, 87, 88, 89, 91], "qubit1": 20, "qubit2": 20, "qubit3": 20, "qubit4": 20, "qubit_map": [40, 41, 42, 43, 44, 45, 46, 90], "queri": [35, 36], "question": [5, 38], "queu": 2, "queue": [8, 88], "quickli": 20, "quit": [1, 3], "r": [0, 3, 35, 36, 37, 38, 39, 54, 55, 72, 73, 75, 90], "r2_score": [36, 37, 39, 55, 73], "rais": [3, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "rand": [0, 2, 33, 35, 36, 38, 39, 54, 55], "randn": 3, "random": [0, 1, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 72, 73, 74, 88, 91], "random_circuit": 8, "random_pauli": [72, 73, 74], "random_st": [0, 3, 16, 38, 39, 54, 55, 72, 73], "randomli": [2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 40, 41, 42, 43, 44, 45, 46, 72, 73], "rang": [1, 3, 87], "rangl": [0, 32, 91], "rapp": [3, 5, 36], "rasmussen": [30, 36], "rate": [2, 48, 58], "rather": 2, "rationalquadrat": 89, "ravel": 3, "rbf": [33, 72, 89], "rbrace": 89, "rdm": 89, "re": [0, 3, 88], "reach": [8, 13, 89], "read": [5, 35, 37, 41, 91], "readabl": 0, "reader": 3, "readi": [0, 5], "readout": 2, "real": [2, 5, 8, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 88, 89, 91], "realm": 91, "reason": 89, "recent": 6, "recognit": [4, 5], "recommend": [13, 36, 88], "rect": 1, "recurs": 75, "red": [1, 3], "reduc": [2, 20, 88, 89, 91], "reduct": [9, 56, 59], "redund": [14, 17, 19, 26, 28, 87, 88], "ref": [30, 32, 33, 36, 37, 56, 59, 61, 89, 91], "refer": [2, 5, 9, 13, 14, 15, 20, 25, 30, 31, 32, 33, 36, 37, 56, 59, 61, 70, 71, 72, 73, 87, 88, 89, 91], "reflect": 89, "reg": [55, 73, 91], "regard": 5, "regardless": 87, "regener": 23, "region": 0, "regist": 2, "regress": [0, 1, 3, 7, 36, 37, 38, 39, 54, 55, 61, 63, 64, 72, 73, 91], "regressor": [5, 36, 37, 39, 55, 73], "regular": [1, 5, 30, 32, 33, 34, 36, 37, 38, 39, 48, 54, 55, 59, 62, 88, 89], "reiniti": [54, 55, 57], "rel": [56, 91], "relev": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "reli": [1, 89], "remain": [20, 88], "rememb": 88, "remot": 88, "remov": [19, 36, 75, 81, 84, 87, 88], "render": [0, 1, 3], "rep": [8, 21, 87], "repeat": [0, 9, 14, 16, 17, 20, 91], "repeat_lay": 20, "repeatedli": [20, 91], "repetit": [13, 16], "replac": [0, 38, 39, 47], "replic": 0, "report": 36, "repres": [0, 1, 3, 78, 79, 80, 81, 82, 83, 85, 89, 91], "represent": [0, 1, 3, 35, 61, 89], "reprint": 0, "reproduc": [23, 88, 89], "request": [5, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 87], "requir": [1, 2, 5, 6, 8, 35, 38, 54, 61, 72, 88, 91], "rerun": [0, 1], "rescal": [3, 25, 31, 38, 39], "rescale_class_label": 31, "research": 5, "resembl": 91, "reservoir": [72, 73, 74], "reset": [8, 48, 50, 56, 69], "reset_opt": [], "reset_options_estim": [], "reset_options_sampl": [], "reset_shot": [8, 56, 69], "reshap": [1, 2, 3, 33, 37], "residu": [36, 37, 39, 55, 73], "resili": [2, 88], "resilience_level": 88, "resolut": 0, "resourc": 2, "respect": [0, 12, 15, 32, 33, 35, 36, 37, 61, 68, 69, 87, 89, 90, 91], "respons": [8, 88], "rest": 35, "restart": [3, 8, 13, 59, 88], "restor": 89, "restrict": 89, "resubmit": 88, "result": [0, 2, 3, 8, 33, 35, 36, 37, 38, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 65, 66, 67, 69, 72, 73, 74, 75, 87, 88, 89, 90, 91], "result_cach": [], "results_df": 1, "retain": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "retri": 8, "retriev": [], "return": [1, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 86, 87, 88], "return_cov": 36, "return_std": [3, 36], "return_x_i": [0, 35], "reupload": 14, "reuqir": 88, "rev": [32, 89], "reveal": 89, "revers": [36, 40], "rho": 89, "rich": 89, "ridg": [37, 73, 89], "ridge_regress": 37, "right": [0, 33, 61, 62, 63, 89, 90], "rkh": 89, "rnd": 3, "ro": 3, "role": 90, "root": [], "rotat": [0, 9, 11, 14, 15, 16, 17], "rotation_g": [11, 15], "roth": [3, 5, 9, 36, 56, 59, 91], "rout": [8, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74, 88], "routin": [2, 8, 87, 89], "row": [0, 13], "rstd": [56, 91], "rstd_bound": [56, 91], "rule": [12, 87, 91], "run": [2, 3, 5, 6, 8, 40, 41, 42, 43, 44, 45, 46, 48, 50, 58, 88, 90], "run_input": 8, "run_optim": 3, "runtim": [2, 6, 8, 88], "rvert": 91, "rvert_2": 0, "rx": [9, 10, 11, 15, 16, 17, 22, 23, 75, 87], "rxx": [16, 22], "rxx_entangl": 16, "ry": [11, 15, 16, 17, 21, 22, 23, 25, 75, 87], "ryi": [16, 22], "ryy_entangl": 16, "rz": [11, 15, 16, 17, 22, 23, 25, 75, 87], "rzx": [16, 22], "rzx_entangl": 16, "rzz": [9, 16, 22], "rzz_entangl": 16, "s41467": 0, "s42484": 36, "s_conjug": 16, "sake": 0, "same": [1, 2, 8, 16, 20, 23, 35, 41, 44, 45, 47, 49, 51, 52, 61, 63, 70, 71, 75, 87, 88, 89], "sampl": [0, 1, 2, 3, 8, 9, 35, 36, 37, 38, 39, 54, 55, 56, 59, 72, 73, 91], "sample_test": 36, "sample_train": 36, "sample_weight": [35, 36, 37, 38, 39, 54, 55, 72, 73], "sampler": [8, 54, 55, 57, 69, 75, 77, 88], "sampler_opt": [2, 8, 88], "sampler_run": [], "sampler_run_v1": [8, 88], "sampler_run_v2": [8, 88], "samplerv1": 8, "samplerv2": 2, "satisfi": 91, "save_account": 88, "saw": 13, "sc": 16, "scalar": 0, "scale": [1, 11, 36, 89], "scaler": [0, 1], "scatter": [1, 3], "scenario": [2, 3], "scheme": 91, "schmidt": 89, "schnabel": 5, "schuld": [32, 89], "scikit": [0, 1, 3, 5, 6, 33, 35, 36, 37, 38, 39, 54, 55, 89], "scipi": [3, 6, 36, 37, 49, 51, 91], "score": [0, 1, 35, 36, 37, 38, 39, 54, 55, 72, 73], "sdg": 75, "seaborn": 1, "seamless": 5, "seamlessli": [1, 8], "search": [16, 22, 50], "second": [8, 16, 24, 40, 47, 48, 69, 75, 87, 90, 91], "section": [1, 15, 91], "see": [0, 12, 15, 34, 35, 36, 37, 38, 39, 47, 54, 55, 56, 57, 59, 72, 73, 88, 89, 91], "seed": [1, 2, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 72, 73, 74, 88], "seen": [89, 91], "select": [0, 2, 3, 8, 19, 23, 91], "select_backend": 8, "self": [3, 25, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "sensit": 1, "separ": [0, 8, 16, 38], "sequenc": [2, 48, 49, 50, 51, 52, 53, 91], "sequence_typ": [2, 88], "serv": 5, "servic": [2, 8, 88], "session": [2, 8, 88], "set": [3, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 87, 89, 90, 91], "set_backend": 8, "set_callback": [48, 49, 50, 51, 52, 53], "set_config": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "set_executor": 56, "set_fit_request": [38, 39, 54, 55, 57], "set_map": [40, 41, 42, 43, 44, 45, 46, 90], "set_opt": 88, "set_opt_param_op": [60, 61, 62, 63, 64], "set_options_estim": 8, "set_options_sampl": 8, "set_param": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 55, 57, 65, 66, 67, 69, 72, 73, 74], "set_partial_fit_request": [54, 55], "set_predict_request": 36, "set_primitive_opt": 8, "set_quantum_kernel": [29, 30, 31], "set_qubit_map": 90, "set_score_request": [35, 36, 37, 38, 39, 54, 55, 72, 73], "set_seed_for_primit": 8, "set_shot": [8, 69, 88], "set_shots_for_grad": 56, "set_shots_for_loss": 56, "set_titl": 1, "set_xlabel": 1, "set_ylabel": 1, "setup": 2, "sever": [0, 5, 6, 87, 89, 90, 91], "sgd": [54, 55, 57, 71, 91], "sgdmixin": [54, 55, 57], "shape": [0, 2, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "share": [0, 2], "share_param": 20, "shift": [12, 15, 87, 91], "shot": [2, 3, 8, 56, 69, 70, 71, 88], "shot_control": [54, 55, 57, 70, 71, 91], "shotcontrolbas": [54, 55, 57, 70, 71], "shots_per_random": 2, "shotsfromrstd": 91, "should": [2, 20, 34, 35, 36, 37, 38, 39, 50, 54, 55, 57, 72, 73, 89, 91], "show": [0, 1, 2, 3, 35, 88, 89, 91], "shown": [1, 13, 89, 91], "shrink": [0, 1], "shuffl": [54, 55, 57, 71, 91], "side": 0, "sigma": [3, 30, 36], "sigma_0": 33, "sigma_f": [63, 91], "sigma_l": [56, 91], "sigmai": 30, "sigmoid": [33, 59], "significantli": [88, 91], "similar": [0, 2, 8, 16, 40, 88, 89], "similarli": 1, "simpl": [2, 10, 16, 72, 73, 89], "simplefilt": 88, "simplest": 89, "simpli": [2, 20, 90], "simplifi": [75, 91], "simul": [0, 3, 5, 8, 88, 91], "simultan": 88, "sin": [1, 3, 33, 39, 55], "sinc": [0, 23, 35, 38, 54, 62, 64, 72, 88], "singl": [0, 2, 20, 22, 23, 25, 42, 43, 44, 45, 47, 72, 73, 74, 81, 84, 90], "single_pauli": [72, 73, 74], "size": [0, 3, 16, 19, 21, 24, 48, 50, 70, 71, 87, 89, 91], "skip": 48, "skip_fun": 48, "sklean": 33, "sklearn": [0, 1, 16, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74], "slack": 1, "slight": [], "slightli": 38, "slsqp": [54, 55, 89], "small": [38, 48, 88, 89], "smaller": 91, "smallest": [8, 88], "smooth": 2, "sn": 1, "sne": 0, "so": [0, 20, 23, 38, 89], "solut": [16, 36, 37, 87, 89], "solv": [0, 3, 15, 32, 33, 36, 37, 61, 89, 91], "solvabl": [0, 36, 37], "solver": 55, "some": [0, 3, 16, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 89], "sometim": 91, "somewhat": 91, "sophist": [3, 87], "sort": [35, 38], "sourc": [9, 10, 11, 13, 14, 15, 17, 18, 22, 23, 25, 91], "sp": [55, 61], "space": [0, 23, 32, 33, 37, 50, 89], "spars": [36, 37, 38, 39, 54, 55, 57], "sparsepauli": 86, "sparsepauliop": [2, 8, 40, 41, 42, 43, 44, 45, 46, 47, 75, 80, 82, 83, 86, 90, 91], "sparsevectorstatefn": 69, "speak": 89, "special": 5, "specif": [0, 1, 8, 38, 39, 65, 91], "specifi": [2, 8, 12, 16, 24, 26, 33, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 57, 86, 87, 88, 89, 91], "speed": [8, 88], "speed_hqaa": 8, "split": 89, "split_pauli": 47, "sprasepauliop": [40, 41, 42, 43, 44, 45, 46], "springer": 36, "spsa": 91, "sqrt": [1, 31, 33, 91], "squar": [2, 36, 37, 39, 47, 55, 61, 63, 73, 90, 91], "squared_ob": 90, "squaredloss": [2, 54, 55, 88, 91], "squlearn": [0, 1, 2, 3, 6, 87, 88, 89, 90, 91], "ssh": 5, "stabil": [36, 37], "stack": 11, "stage": 91, "stai": 20, "standard": [1, 3, 36, 38, 39, 56, 89, 91], "standardscal": 1, "standardscalerstandardscal": 1, "start": [0, 3, 9, 11, 13, 58], "start_idx": 1, "stat": 3, "state": [0, 32, 40, 43, 45, 48, 50, 72, 73, 86, 87, 89, 91], "statefn": [40, 41, 42, 43, 44, 45, 46], "statevector": [8, 88], "statevector_simul": [8, 88], "statevectorsimul": 1, "static": 75, "stem": [], "step": [0, 1, 2, 3, 37, 48, 50, 70, 71], "stochast": 91, "store": [0, 36, 37, 38, 39, 69, 87], "str": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 50, 54, 55, 57, 61, 62, 65, 66, 67, 68, 69, 72, 73, 74, 75, 86], "straightforward": [87, 89], "strateg": 3, "strategi": [2, 5, 16, 72, 73, 74], "strength": [30, 36, 37, 54, 55], "string": [8, 20, 33, 40, 44, 68, 69, 86, 87, 88, 90], "stronger": [36, 37], "structr": 3, "structur": [16, 20, 47, 68, 69, 75, 87, 88, 91], "studi": 89, "style": 15, "sub": [8, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 88], "subject": 91, "sublist": 20, "submit": 5, "subplot": 1, "subsequ": [3, 89, 91], "subset": [35, 38, 54, 72], "substanti": 88, "success": [2, 87], "suffer": 89, "suggest": 2, "suit": 88, "suitabl": [1, 88, 91], "sum": [36, 37, 39, 40, 41, 44, 45, 47, 55, 73, 75, 84, 87, 90], "sum_": [31, 41, 61, 89], "sum_i": [2, 12, 41, 44, 45, 62, 63, 64], "sum_j": [61, 63], "sum_k": [89, 91], "summar": 88, "summat": [2, 44, 84, 91], "summedpauli": [2, 47, 54, 55, 88, 90, 91], "superposit": 89, "supervis": [32, 89], "suppli": [16, 20, 33, 40, 54, 55, 57, 75, 87, 90], "support": [1, 2, 5, 35, 36, 37, 38, 39, 42, 57, 72, 75, 88, 89, 90], "supported_g": 75, "suppress": [2, 88], "surrog": [4, 5], "surrogate_model": 3, "sv1": [8, 88], "svc": [38, 39], "svm": [0, 38, 39, 89], "svr": 39, "swap": [9, 16], "switch": [2, 9, 41, 88, 89], "sx": 75, "symbol": [55, 61], "symbols_involved_in_od": [55, 61], "sympi": [55, 61], "synthet": 1, "system": [8, 32, 33, 36, 37, 40, 41, 42, 43, 44, 45, 46, 72, 73, 88], "t": [0, 14, 16, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 54, 55, 61, 72, 73, 75, 89, 90], "t_conjug": 16, "ta": 31, "tabl": 12, "tailor": 91, "take": [0, 8, 87, 88, 91], "taken": [3, 30, 31, 48], "tanh": 3, "target": [8, 29, 31, 35, 36, 37, 89, 91], "targetalign": 89, "task": [0, 1, 72, 73, 89], "tc": 16, "tdg": 75, "techniqu": [0, 2, 5, 32, 33, 89], "term": [11, 14, 31, 32, 33, 41, 61, 75, 89, 91], "termin": [2, 48, 50], "test": [0, 1, 2, 32, 33, 34, 35, 36, 37, 38, 39, 54, 55, 72, 73, 89], "test_scor": 1, "test_siz": [0, 54, 55, 72, 73], "text": [0, 3, 33, 42, 43, 56, 62, 91], "th": 89, "than": [2, 33, 38, 40, 41, 42, 43, 44, 45, 46, 88, 91], "thank": 5, "thei": [0, 5, 8, 35, 38, 39, 54, 55, 87, 88, 89, 91], "them": [0, 16, 22, 88, 89, 91], "theoret": 37, "theori": 89, "thereaft": 88, "therebi": 2, "therefor": [0, 88, 89, 91], "theta": [0, 30, 31, 35, 42, 61, 89, 91], "theta_i": 61, "thi": [0, 1, 2, 3, 5, 8, 12, 16, 18, 19, 20, 22, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 57, 61, 62, 63, 64, 72, 73, 74, 75, 86, 87, 88, 89, 90, 91], "those": 38, "though": 2, "three": [0, 9, 33], "threshold": [26, 28, 32, 33, 89, 91], "through": [1, 2, 3, 5, 8, 16, 88, 89, 91], "throughout": 88, "throw": 20, "thrown": [13, 27], "thu": [0, 2, 88, 89, 91], "tight_layout": 1, "tikhonov": [32, 33, 89], "time": [0, 2, 8, 9, 16, 20, 38, 75, 88, 89], "titl": [0, 1, 2, 3], "to_dict_fn": 69, "togeth": [11, 90, 91], "token": [2, 8, 88], "tol": [0, 1, 48, 50, 55], "toler": [48, 50], "tool": [5, 8, 88], "toolset": [], "top": 5, "total": [0, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 55, 73, 87, 91], "tower": [9, 10, 11, 15], "tqdm": [6, 54, 55, 57], "tr": 89, "trace": 89, "trade": [3, 50], "tradit": [1, 91], "train": [0, 1, 7, 9, 14, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 54, 55, 57, 87, 88, 90, 91], "train_test_split": [0, 38, 39, 54, 55, 72, 73], "trainabl": [0, 9, 12, 21, 23, 32, 33, 34, 40, 41, 42, 43, 44, 45, 46, 47, 60, 61, 62, 63, 64, 65, 66, 67, 69, 87, 89, 90, 91], "transfer": 0, "transform": [0, 2, 38, 75], "transform_to_zbasi": 75, "translat": [], "transpil": [8, 24, 75, 88, 90], "transpile_func": 24, "transpile_to_supported_instruct": 75, "transpiledencodingcircuit": 90, "treat": [1, 3], "tree": 75, "treinish": 88, "tri": 22, "trial": [8, 61], "trick": [0, 89], "trigger": 88, "trivial": 89, "troubl": 20, "true": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 87, 88, 90, 91], "trust": [0, 1], "truth": [1, 70, 71], "try": [0, 1], "tsne": 0, "tune": 2, "tupel": 50, "tupl": [8, 12, 26, 33, 40, 44, 47, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 86, 87, 90], "turn": 75, "tutori": [1, 2, 5], "twelv": 0, "twirl": 2, "two": [0, 1, 9, 15, 23, 33, 36, 40, 87, 88, 89, 91], "twoloc": [21, 87], "type": [8, 12, 15, 23, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 62, 65, 66, 67, 69, 72, 73, 74, 75, 81, 82, 84, 86, 89, 91], "typic": [3, 8, 33, 91], "u": [0, 1, 3, 16, 36, 37, 39, 55, 73, 91], "u_": 89, "u_0": 61, "u_i": 91, "ub": 3, "ucb": 50, "um_": 31, "unabl": [0, 1], "uncertainti": 3, "unchang": [35, 36, 37, 38, 39, 54, 55, 57, 72, 73], "under": [0, 2, 5], "underli": [35, 36, 37, 38, 39], "understand": [0, 1], "uniform": [2, 3], "uniform_averag": [36, 37, 39, 55, 73], "union": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 82, 86], "uniqu": 1, "uniquli": 22, "unit": [36, 88], "unknown": 3, "unless": 88, "unncessari": 88, "unnecessari": 8, "unset": [8, 88], "unset_backend": [8, 88], "until": [8, 20, 91], "untouch": 75, "untrain": 89, "unus": 8, "up": [3, 13, 68, 88, 89, 91], "upcom": 91, "updat": [3, 8, 35, 36, 37, 38, 39, 48, 50, 54, 55, 57, 72, 73, 88, 91], "upload": 0, "upon": [2, 88], "upper": 50, "us": [0, 1, 4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 87, 88, 89, 90, 91], "usag": 2, "use_hqaa": 8, "useful": 6, "user": [5, 8, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 74, 87, 88, 89, 91], "usual": [19, 73, 88], "util": [0, 2, 3, 8, 12, 16, 33, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 87, 89, 90, 91], "v": [1, 36, 37, 39, 55, 59, 73], "v1": [8, 88], "v2": [8, 88], "val": 68, "valid": [1, 8, 34, 38, 50], "valu": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 82, 85, 87, 88, 89, 91, 92], "value_dict": [60, 61, 62, 63, 64], "valueerror": 3, "var": [62, 64, 68], "var_i": 62, "vari": 1, "variabl": [1, 2, 16, 61, 88], "variable_str": 16, "varianc": [3, 36, 54, 55, 57, 59, 60, 61, 62, 63, 64, 69, 90], "variance_factor": [62, 64], "variant": 1, "variat": [15, 29, 30, 31], "variational_arrang": [15, 55], "varieti": 88, "variou": [0, 2, 5, 8, 88], "varphi": 3, "vec": 61, "vector": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 65, 66, 67, 69, 72, 81, 87, 89], "verbos": [0, 1, 8, 26], "veri": [0, 16, 38], "versa": [88, 89], "version": [5, 8, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 88], "versu": 35, "vert": 0, "vertic": 15, "via": [2, 5, 8, 9, 12, 35, 36, 37, 38, 39, 88, 90], "vice": [88, 89], "view": [0, 89], "visual": [0, 1, 2, 86], "vmax": 1, "vmin": 1, "vstack": 3, "w": [35, 36, 37, 38, 39, 54, 55, 72, 73, 75, 90], "w_i": 63, "wa": [5, 8, 20], "wai": [2, 88, 89], "wait": 8, "wait_restart": [8, 88], "want": [0, 1, 87, 88], "warn": [3, 88], "wave": [0, 68, 90], "wave_funct": 68, "we": [0, 1, 2, 3, 64, 87, 88, 89, 91], "websit": 0, "weigh": 88, "weight": [2, 22, 35, 36, 37, 38, 39, 54, 55, 57, 61, 62, 63, 64, 70, 71, 72, 73], "well": [0, 5, 16, 70, 71, 88, 89, 91], "were": 0, "what": 3, "when": [2, 3, 6, 8, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 55, 73, 87, 88, 89, 90, 91], "whenev": [40, 41, 42, 43, 44, 45, 46], "where": [0, 1, 3, 8, 9, 10, 16, 20, 23, 35, 36, 37, 38, 39, 41, 55, 56, 61, 73, 87, 88, 89, 91], "wherea": [8, 91], "whether": [3, 8, 20, 31, 36, 37, 72, 73, 74, 91], "which": [0, 1, 2, 5, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 57, 65, 69, 72, 75, 87, 88, 89, 90, 91], "while": [3, 16, 20, 91], "whose": 89, "wide": [0, 87], "width": 15, "wiki": 37, "wikipedia": 37, "william": [30, 36], "willmann": 5, "wire": [8, 86, 88], "within": [2, 16, 20, 36, 89], "without": [0, 87, 89], "won": [54, 55], "word": 86, "work": [0, 2, 3, 5, 8, 20, 35, 36, 37, 38, 39, 54, 55, 57, 65, 66, 67, 69, 72, 73, 74, 75, 89], "workflow": [0, 1, 89], "world": [], "wors": [36, 37, 39, 55, 73], "worth": [2, 88, 91], "would": [0, 36, 37, 39, 55, 73], "wrap": [32, 49, 51, 76, 77, 89, 91], "wrapper": [7, 21, 36, 37, 38, 39, 49, 51, 52, 87, 91], "wrt": [65, 66, 67, 69], "www": 5, "x": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 48, 50, 54, 55, 57, 61, 65, 66, 67, 69, 72, 73, 74, 75, 87, 89, 90, 91], "x0": [3, 48, 49, 50, 51, 52, 53], "x27": [0, 1], "x_": 12, "x_0": 61, "x_1": 12, "x_highlight": 0, "x_i": [0, 3, 12, 31, 33, 61, 63, 91], "x_iter": 3, "x_j": [0, 12, 31, 33], "x_lim": 26, "x_n": 12, "x_next": 3, "x_plot": 3, "x_rang": 0, "x_sampl": 3, "x_test": [0, 1, 38, 39, 54, 55, 72, 73, 91], "x_train": [0, 1, 2, 8, 37, 38, 39, 54, 55, 72, 73, 88, 89, 91], "x_tsne": 0, "x_val": 26, "xi": [3, 41], "xixi": 90, "xlabel": [1, 3], "xp": 12, "xpxm": [2, 88], "xx": 40, "xxxx": 33, "xyz": [0, 33, 37, 89], "y": [0, 1, 2, 3, 9, 16, 20, 22, 23, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 44, 54, 55, 57, 61, 72, 73, 74, 75, 87, 89, 90], "y_conv": 3, "y_cov": 36, "y_highlight": 0, "y_i": 31, "y_init": 3, "y_j": 31, "y_mean": 36, "y_next": 3, "y_plot": 3, "y_pred": [0, 1, 3, 36, 37, 38, 39, 54, 55, 72, 73, 91], "y_pred_pqk": 37, "y_sampl": 3, "y_std": 36, "y_test": [0, 1, 38, 39, 54, 55, 72, 73], "y_train": [0, 1, 2, 8, 37, 38, 39, 54, 55, 72, 73, 88, 89, 91], "y_true": [36, 37, 39, 55, 73], "yet": [0, 88], "yield": 91, "ylabel": [1, 3], "you": [0, 2, 5, 8, 35, 36, 37, 38, 39, 54, 55, 57, 72, 73, 87, 89, 91], "your": [2, 3, 5, 88, 91], "yyyi": 33, "yz": 25, "yz_cx_encodingcircuit": 1, "z": [0, 2, 3, 16, 18, 20, 22, 23, 33, 40, 41, 42, 43, 44, 45, 55, 75, 87, 89, 90, 91], "z_i": 42, "zero": [36, 41, 48, 62, 89, 90], "zfeaturemap": [18, 20], "zi": [2, 40, 90], "zigzag": 2, "zii": [47, 90], "ziii": 91, "ziiii": 90, "ziz": [47, 90], "zizz": 90, "zne": 88, "zne_mitig": [2, 88], "zy": 90, "zz": [40, 41, 55, 90], "zzfeaturemap": 21, "zzi": [47, 90], "zzzz": 33, "\u03b8": [], "\u03b8p": 21, "\u03c3i": []}, "titles": ["Handwritten Digit Recognition with Projected Quantum Kernels", "Hyperparameter Optimization and Pipelines", "Error Mitigation for Quantum Neural Networks on IBM Quantum Devices", "Bayesian Optimization using a Quantum Gaussian Process Surrogate Model", "Examples", "Welcome to the sQUlearn documentation!", "Installation", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn</span></code>.Executor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevPQC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevRx", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevTower", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.EncodingCircuitDerivatives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.HighDimEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.HubregtsenEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.KyriienkoEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.LayeredEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.MultiControlEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ParamZFeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.PrunedEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.QCNNEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.QiskitEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.RandomEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.RandomLayeredEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.TranspiledEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.YZ_CX_EncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.automated_pruning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit.encoding_circuit_base</span></code>.EncodingCircuitBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.pruning_from_QFI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.loss.kernel_loss_base</span></code>.KernelLossBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.loss.negative_log_likelihood</span></code>.NLL", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.loss.target_alignment</span></code>.TargetAlignment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix</span></code>.FidelityKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix</span></code>.ProjectedQuantumKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix.kernel_matrix_base</span></code>.KernelMatrixBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QGPC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QGPR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QKRR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.CustomObservable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.IsingHamiltonian", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SinglePauli", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SingleProbability", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SummedPaulis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SummedProbabilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables.observable_base</span></code>.ObservableBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables.observable_derivatives</span></code>.ObservableDerivatives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.Adam", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.LBFGSB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SGLBO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SLSQP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SPSA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers.optimizer_base</span></code>.OptimizerBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.QNNClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.QNNRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.ShotsFromRSTD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.base_qnn</span></code>.BaseQNN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.get_lr_decay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.get_variance_fac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.LossBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.ODELoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.ParameterRegularizationLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.SquaredLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.VarianceLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn</span></code>.LowLevelQNN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn_base</span></code>.LowLevelQNNBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn_pennylane</span></code>.LowLevelQNNPennyLane", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn_qiskit</span></code>.Expec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn_qiskit</span></code>.LowLevelQNNQiskit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.training</span></code>.train", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.training</span></code>.train_mini_batch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qrc</span></code>.QRCClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qrc</span></code>.QRCRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qrc.base_qrc</span></code>.BaseQRC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util</span></code>.OpTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.executor</span></code>.ExecutorEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.executor</span></code>.ExecutorSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeContainer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeExpectationValue", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeList", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeMeasuredOperator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeOperator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeSum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeValue", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.pennylane</span></code>.PennyLaneCircuit", "Quantum Encoding Circuits", "The Executor Class", "Quantum Kernel Methods", "Observables for expectation values", "Quantum Neural Networks", "User Guide"], "titleterms": {"In": 88, "The": [0, 88], "acknowledg": 5, "adam": [48, 91], "adjust": 91, "analysi": 1, "api": 7, "ar": [12, 33, 47], "assess": 2, "attribut": [8, 33, 37, 40, 41, 42, 43, 44, 45, 46, 47, 67, 69, 86], "automat": 88, "automated_prun": 26, "backend": [2, 88], "base": 7, "base_qnn": 57, "base_qrc": 74, "baseqnn": 57, "baseqrc": 74, "batch": 91, "bayesian": 3, "bleed": 6, "chebyshevpqc": 9, "chebyshevrx": 10, "chebyshevtow": 11, "circuit": [7, 87], "cite": 5, "class": [7, 88], "classif": [0, 89], "classifi": 7, "combin": 87, "configur": 2, "contact": 5, "content": 5, "contribut": 5, "core": 7, "creat": 87, "custom": [87, 90], "customobserv": 40, "data": [0, 1, 7], "decoupl": 2, "definit": 0, "depend": 6, "deriv": 90, "descent": 91, "design": 7, "develop": 6, "devic": 2, "differ": 87, "digit": 0, "dimension": 0, "document": 5, "dotproduct": 33, "dynam": [2, 91], "edg": 6, "emploi": 89, "encod": [7, 87], "encoding_circuit": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "encoding_circuit_bas": 27, "encodingcircuitbas": 27, "encodingcircuitderiv": [12, 87], "error": 2, "evalu": [2, 89], "exampl": [4, 5], "execut": 7, "executor": [8, 76, 77, 88], "executorestim": 76, "executorsampl": 77, "expec": 68, "expect": 90, "expsinesquar": 33, "extrapol": 2, "factor": 91, "featur": 88, "fidel": 89, "fidelitykernel": [32, 89], "follow": 33, "fqk": 89, "free": 2, "gate": 16, "gaussian": [3, 33], "gener": 1, "get_deriv": [12, 47], "get_lr_decai": 58, "get_variance_fac": 59, "gradient": 91, "grid": 1, "guid": 92, "handwritten": 0, "high": [89, 91], "highdimencodingcircuit": 13, "hubregtsenencodingcircuit": 14, "hyperparamet": 1, "ibm": [2, 88], "implement": [7, 33, 87, 90], "import": [0, 1, 2], "initi": 88, "instal": [5, 6], "interfac": 7, "introduct": [], "isinghamiltonian": 41, "kei": 88, "kernel": [0, 1, 7, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 89], "kernel_loss_bas": 29, "kernel_matrix_bas": 34, "kernel_optim": [], "kernel_optimization_bas": [], "kernellossbas": 29, "kernelmatrixbas": 34, "kerneloptim": [], "kerneloptimizerbas": [], "kyriienkoencodingcircuit": 15, "layeredencodingcircuit": [16, 87], "lbfgsb": 49, "learn": 91, "level": [89, 91], "librari": [1, 2], "licens": 5, "literatur": [], "loss": [29, 30, 31, 60, 61, 62, 63, 64], "lossbas": 60, "lowlevel_qnn": 65, "lowlevel_qnn_bas": 66, "lowlevel_qnn_pennylan": 67, "lowlevel_qnn_qiskit": [68, 69], "lowlevelqnn": 65, "lowlevelqnnbas": 66, "lowlevelqnnpennylan": 67, "lowlevelqnnqiskit": 69, "m3": [], "machin": 0, "map": 90, "matern": 33, "matrix": [32, 33, 34], "max": 0, "method": [0, 8, 12, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 67, 69, 72, 73, 86, 89, 91], "min": 0, "mini": 91, "mitig": 2, "ml": [35, 36, 37, 38, 39], "model": 3, "multicontrolencodingcircuit": 17, "negative_log_likelihood": 30, "network": [2, 91], "neural": [2, 91], "nll": 30, "nois": 2, "observ": [40, 41, 42, 43, 44, 45, 46, 47, 90], "observable_bas": 46, "observable_deriv": 47, "observablebas": 46, "observablederiv": 47, "odeloss": 61, "onli": 88, "oper": 7, "optim": [1, 3, 7, 48, 49, 50, 51, 52, 53, 91], "optimizer_bas": 53, "optimizerbas": 53, "option": [6, 88], "optre": [7, 75, 78, 79, 80, 81, 82, 83, 84, 85], "optreecircuit": 78, "optreecontain": 79, "optreeexpectationvalu": 80, "optreelist": 81, "optreemeasuredoper": 82, "optreeoper": 83, "optreesum": 84, "optreevalu": 85, "outer": 33, "overview": [2, 88], "pairwisekernel": 33, "parallel": 88, "parameterregularizationloss": 62, "paramzfeaturemap": 18, "pennylan": [7, 86], "pennylanecircuit": 86, "pipelin": 1, "pqk": 89, "preprocess": 0, "prerequisit": [5, 6], "primit": [2, 88], "process": 3, "project": [0, 89], "projectedquantumkernel": [33, 89], "prune": 87, "prunedencodingcircuit": 19, "pruning_from_qfi": 28, "qcnnencodingcircuit": 20, "qgpc": 35, "qgpr": 36, "qiskit": [87, 88], "qiskitencodingcircuit": 21, "qkrr": 37, "qml": 7, "qnn": [2, 7, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 91], "qnnclassifi": 54, "qnnregressor": 55, "qpu": 88, "qrc": [72, 73, 74], "qrcclassifi": 72, "qrcregressor": 73, "qsvc": 38, "qsvr": 39, "quantum": [0, 2, 3, 7, 87, 88, 89, 91], "qubit": [16, 90], "randomencodingcircuit": 22, "randomlayeredencodingcircuit": 23, "rate": 91, "rationalquadrat": 33, "real": 90, "recogn": [12, 47], "recognit": 0, "reduct": [0, 91], "refer": 7, "regress": 89, "regressor": 7, "regular": 91, "releas": [5, 6], "represent": 16, "result": 1, "retrain": [], "routin": 88, "run": 1, "sampler": 2, "scale": 0, "schedul": 91, "search": 1, "select": 88, "set": [0, 1, 2, 88], "sglbo": 50, "shot": 91, "shotsfromrstd": 56, "simul": 2, "singl": 16, "singlepauli": 42, "singleprob": 43, "slsqp": [51, 91], "split": 0, "spsa": 52, "squaredloss": 63, "squlearn": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "stabl": [5, 6], "string": [12, 16, 47], "structur": 7, "summari": 1, "summedpauli": 44, "summedprob": 45, "support": 0, "surrog": 3, "target_align": 31, "targetalign": 31, "tool": 7, "train": [2, 70, 71, 89], "train_mini_batch": 71, "transpil": 87, "transpiledencodingcircuit": [24, 87], "trex": 2, "two": 16, "up": [1, 2], "us": [2, 3], "user": 92, "util": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88], "valu": 90, "varianc": 91, "varianceloss": 64, "vector": 0, "version": 6, "via": [87, 89], "welcom": 5, "without": 2, "wrap": 87, "your": 87, "yz_cx_encodingcircuit": 25, "zero": 2, "zne": 2}})