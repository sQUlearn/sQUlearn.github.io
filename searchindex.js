Search.setIndex({"alltitles": {"API Reference": [[7, "api-reference"]], "Acknowledgements": [[5, "acknowledgements"]], "Assessing the QNN on the IBM backend using the sampler primitive": [[2, "Assessing-the-QNN-on-the-IBM-backend-using-the-sampler-primitive"]], "Attributes:": [[8, "attributes"], [27, "attributes"], [31, "attributes"], [39, "attributes"], [40, "attributes"], [41, "attributes"], [42, "attributes"], [43, "attributes"], [44, "attributes"], [45, "attributes"], [46, "attributes"], [65, "attributes"], [67, "attributes"], [79, "attributes"]], "Base Classes": [[7, "base-classes"]], "Bayesian Optimization using a Quantum Gaussian Process Surrogate Model": [[3, "Bayesian-Optimization-using-a-Quantum-Gaussian-Process-Surrogate-Model"]], "Bleeding-edge version": [[6, "bleeding-edge-version"]], "Circuit Design": [[7, "circuit-design"]], "Cite sQUlearn": [[5, "cite-squlearn"]], "Classification": [[0, "Classification"], [82, "classification"]], "Combining Quantum Encoding Circuits": [[80, "combining-quantum-encoding-circuits"]], "Contact": [[5, "contact"]], "Contents:": [[5, null]], "Contribute to sQUlearn": [[5, "contribute-to-squlearn"]], "Core": [[7, "core"]], "Create your custom Encoding Circuit via LayeredEncodingCircuit": [[80, "create-your-custom-encoding-circuit-via-layeredencodingcircuit"]], "Custom observables": [[83, "custom-observables"]], "Derivatives of the observable": [[83, "derivatives-of-the-observable"]], "Development version": [[6, "development-version"]], "Different Quantum Encoding Circuits via EncodingCircuitDerivatives": [[80, "different-quantum-encoding-circuits-via-encodingcircuitderivatives"]], "Dimensionality Reduction": [[0, "Dimensionality-Reduction"]], "DotProduct:": [[27, "dotproduct"]], "Dynamic decoupling and TREX error mitigation": [[2, "Dynamic-decoupling-and-TREX-error-mitigation"]], "Dynamic decoupling and zero-noise extrapolation (ZNE) for error mitigation": [[2, "Dynamic-decoupling-and-zero-noise-extrapolation-(ZNE)-for-error-mitigation"]], "Dynamically adjustments of the shots": [[84, "dynamically-adjustments-of-the-shots"]], "Encoding Circuit Tools": [[7, "encoding-circuit-tools"]], "Encoding Circuits": [[7, "module-squlearn.encoding_circuit"]], "Error Mitigation for QNNs on IBM Devices": [[2, "Error-Mitigation-for-QNNs-on-IBM-Devices"]], "Evaluating the QNN on the IBM backend with error mitigation": [[2, "Evaluating-the-QNN-on-the-IBM-backend-with-error-mitigation"]], "Examples": [[4, "examples"], [5, "examples"]], "Execution Tools": [[7, "execution-tools"]], "ExpSineSquared:": [[27, "expsinesquared"]], "Fidelity Quantum Kernel (FQK) via FidelityKernel": [[82, "fidelity-quantum-kernel-fqk-via-fidelitykernel"]], "Gaussian:": [[27, "gaussian"]], "Generating Data": [[1, "Generating-Data"]], "Handwritten Digit Recognition with Projected Quantum Kernels": [[0, "Handwritten-Digit-Recognition-with-Projected-Quantum-Kernels"]], "High-Level methods that employ quantum kernels": [[82, "high-level-methods-that-employ-quantum-kernels"]], "High-level methods for QNNs": [[84, "high-level-methods-for-qnns"]], "Hyperparameter Optimization and Pipelines": [[1, "Hyperparameter-Optimization-and-Pipelines"]], "Implemented Quantum Encoding Circuits": [[80, "implemented-quantum-encoding-circuits"]], "Implemented observables.": [[83, "implemented-observables"]], "Implemented optimizers": [[7, "module-squlearn.optimizers"]], "Importing Libraries": [[1, "Importing-Libraries"], [2, "Importing-Libraries"]], "Imports and Definitions": [[0, "Imports-and-Definitions"]], "Initialization of the Executor class": [[81, "initialization-of-the-executor-class"]], "Install sQUlearn": [[5, "install-squlearn"]], "Installation": [[6, "installation"]], "Introduction": [[2, "Introduction"]], "Key Features of the Executor": [[81, "key-features-of-the-executor"]], "License": [[5, "license"]], "Literature:": [[2, "Literature:"]], "Mapping observables to real qubits": [[83, "mapping-observables-to-real-qubits"]], "Matern:": [[27, "matern"]], "Methods to evaluate quantum kernels": [[82, "methods-to-evaluate-quantum-kernels"]], "Methods:": [[8, "methods"], [27, "methods"], [29, "methods"], [30, "methods"], [31, "methods"], [32, "methods"], [33, "methods"], [36, "methods"], [37, "methods"], [38, "methods"], [39, "methods"], [40, "methods"], [41, "methods"], [42, "methods"], [43, "methods"], [44, "methods"], [45, "methods"], [46, "methods"], [53, "methods"], [54, "methods"], [65, "methods"], [67, "methods"], [79, "methods"]], "Min Max Scaling": [[0, "Min-Max-Scaling"]], "Mini-Batch gradient descent with Adam": [[84, "mini-batch-gradient-descent-with-adam"]], "Observables for expectation values": [[83, "observables-for-expectation-values"]], "OpTree Data Structure": [[7, "optree-data-structure"]], "Operator Tools": [[7, "operator-tools"]], "Operators": [[7, "operators"]], "Optimization": [[84, "optimization"]], "Outer Kernels are implemented as follows:": [[27, "outer-kernels-are-implemented-as-follows"]], "Overview": [[81, "overview"]], "PairwiseKernel:": [[27, "pairwisekernel"]], "PennyLane interface": [[7, "pennylane-interface"]], "Preprocessing": [[0, "Preprocessing"]], "Prerequisites": [[5, "prerequisites"], [6, "prerequisites"]], "Projected Quantum Kernel": [[0, "Projected-Quantum-Kernel"]], "Projected Quantum Kernel (PQK) via ProjectedQuantumKernel": [[82, "projected-quantum-kernel-pqk-via-projectedquantumkernel"]], "Pruning of Quantum Encoding Circuits": [[80, "pruning-of-quantum-encoding-circuits"]], "QML Classifiers": [[7, "qml-classifiers"]], "QML Regressors": [[7, "qml-regressors"]], "QNN Core": [[7, "module-squlearn.qnn"]], "Quantum Encoding Circuits": [[80, "quantum-encoding-circuits"]], "Quantum Kernel Core": [[7, "module-squlearn.kernel.matrix"]], "Quantum Kernel Methods": [[0, "Quantum-Kernel-Methods"], [82, "quantum-kernel-methods"]], "Quantum Kernels": [[0, "Quantum-Kernels"]], "Quantum Neural Networks": [[84, "quantum-neural-networks"]], "RationalQuadratic:": [[27, "rationalquadratic"]], "Regression": [[82, "regression"]], "Results Analysis": [[1, "Results-Analysis"]], "Retraining the QNN on the IBM Backend without Error Mitigation using Variance Regularization": [[2, "Retraining-the-QNN-on-the-IBM-Backend-without-Error-Mitigation-using-Variance-Regularization"]], "Run the Sampler primitive with dynamic decoupling and M3 error mitigation": [[2, "Run-the-Sampler-primitive-with-dynamic-decoupling-and-M3-error-mitigation"]], "Run the Sampler primitive without error mitigation": [[2, "Run-the-Sampler-primitive-without-error-mitigation"]], "Running Grid Search": [[1, "Running-Grid-Search"]], "SLSQP": [[84, "slsqp"]], "Schedule of the learning rate of Adam": [[84, "schedule-of-the-learning-rate-of-adam"]], "Set-up of the QNN": [[2, "Set-up-of-the-QNN"]], "Setting Options for Qiskit Primitives": [[81, "setting-options-for-qiskit-primitives"]], "Setting up the grid search": [[1, "Setting-up-the-grid-search"]], "Setting up the kernels": [[1, "Setting-up-the-kernels"]], "Single qubit gates and their string representation": [[15, "id1"]], "Split Data sets": [[0, "Split-Data-sets"]], "Stable Release": [[5, "stable-release"], [6, "stable-release"]], "Strings that are recognized by the get_derivative() method": [[12, "id1"], [46, "id1"]], "Summary": [[1, "Summary"]], "Support Vector Machine": [[0, "Support-Vector-Machine"]], "The Data": [[0, "The-Data"]], "The Executor Class": [[81, "the-executor-class"]], "Training of quantum kernels": [[82, "training-of-quantum-kernels"]], "Training of the QNN with a noise free simulator": [[2, "Training-of-the-QNN-with-a-noise-free-simulator"]], "Transpile Quantum Encoding Circuits via TranspiledEncodingCircuit": [[80, "transpile-quantum-encoding-circuits-via-transpiledencodingcircuit"]], "Two qubit gates and their string representation": [[15, "id2"]], "User Guide": [[85, "user-guide"]], "Utilizing Executor Primitives in Qiskit Routines": [[81, "utilizing-executor-primitives-in-qiskit-routines"]], "Variance reduction": [[84, "variance-reduction"]], "Variance reduction with dynamic adjustment of the regularization factor": [[84, "variance-reduction-with-dynamic-adjustment-of-the-regularization-factor"]], "Welcome to the sQUlearn documentation!": [[5, "welcome-to-the-squlearn-documentation"]], "Without error mitigation": [[2, "Without-error-mitigation"]], "Wrapping Qiskit Encoding Circuits": [[80, "wrapping-qiskit-encoding-circuits"]], "squlearn.Executor": [[8, "squlearn-executor"]], "squlearn.encoding_circuit.ChebyshevPQC": [[9, "squlearn-encoding-circuit-chebyshevpqc"]], "squlearn.encoding_circuit.ChebyshevRx": [[10, "squlearn-encoding-circuit-chebyshevrx"]], "squlearn.encoding_circuit.ChebyshevTower": [[11, "squlearn-encoding-circuit-chebyshevtower"]], "squlearn.encoding_circuit.EncodingCircuitDerivatives": [[12, "squlearn-encoding-circuit-encodingcircuitderivatives"]], "squlearn.encoding_circuit.HighDimEncodingCircuit": [[13, "squlearn-encoding-circuit-highdimencodingcircuit"]], "squlearn.encoding_circuit.HubregtsenEncodingCircuit": [[14, "squlearn-encoding-circuit-hubregtsenencodingcircuit"]], "squlearn.encoding_circuit.LayeredEncodingCircuit": [[15, "squlearn-encoding-circuit-layeredencodingcircuit"]], "squlearn.encoding_circuit.MultiControlEncodingCircuit": [[16, "squlearn-encoding-circuit-multicontrolencodingcircuit"]], "squlearn.encoding_circuit.ParamZFeatureMap": [[17, "squlearn-encoding-circuit-paramzfeaturemap"]], "squlearn.encoding_circuit.PrunedEncodingCircuit": [[18, "squlearn-encoding-circuit-prunedencodingcircuit"]], "squlearn.encoding_circuit.QCNNEncodingCircuit": [[19, "squlearn-encoding-circuit-qcnnencodingcircuit"]], "squlearn.encoding_circuit.QiskitEncodingCircuit": [[20, "squlearn-encoding-circuit-qiskitencodingcircuit"]], "squlearn.encoding_circuit.TranspiledEncodingCircuit": [[21, "squlearn-encoding-circuit-transpiledencodingcircuit"]], "squlearn.encoding_circuit.YZ_CX_EncodingCircuit": [[22, "squlearn-encoding-circuit-yz-cx-encodingcircuit"]], "squlearn.encoding_circuit.automated_pruning": [[23, "squlearn-encoding-circuit-automated-pruning"]], "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase": [[24, "squlearn-encoding-circuit-encoding-circuit-base-encodingcircuitbase"]], "squlearn.encoding_circuit.pruning_from_QFI": [[25, "squlearn-encoding-circuit-pruning-from-qfi"]], "squlearn.kernel.matrix.FidelityKernel": [[26, "squlearn-kernel-matrix-fidelitykernel"]], "squlearn.kernel.matrix.ProjectedQuantumKernel": [[27, "squlearn-kernel-matrix-projectedquantumkernel"]], "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase": [[28, "squlearn-kernel-matrix-kernel-matrix-base-kernelmatrixbase"]], "squlearn.kernel.ml.QGPC": [[29, "squlearn-kernel-ml-qgpc"]], "squlearn.kernel.ml.QGPR": [[30, "squlearn-kernel-ml-qgpr"]], "squlearn.kernel.ml.QKRR": [[31, "squlearn-kernel-ml-qkrr"]], "squlearn.kernel.ml.QSVC": [[32, "squlearn-kernel-ml-qsvc"]], "squlearn.kernel.ml.QSVR": [[33, "squlearn-kernel-ml-qsvr"]], "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase": [[34, "squlearn-kernel-optimization-kernel-loss-base-kernellossbase"]], "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase": [[35, "squlearn-kernel-optimization-kernel-optimization-base-kerneloptimizerbase"]], "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer": [[36, "squlearn-kernel-optimization-kernel-optimizer-kerneloptimizer"]], "squlearn.kernel.optimization.negative_log_likelihood.NLL": [[37, "squlearn-kernel-optimization-negative-log-likelihood-nll"]], "squlearn.kernel.optimization.target_alignment.TargetAlignment": [[38, "squlearn-kernel-optimization-target-alignment-targetalignment"]], "squlearn.observables.CustomObservable": [[39, "squlearn-observables-customobservable"]], "squlearn.observables.IsingHamiltonian": [[40, "squlearn-observables-isinghamiltonian"]], "squlearn.observables.SinglePauli": [[41, "squlearn-observables-singlepauli"]], "squlearn.observables.SingleProbability": [[42, "squlearn-observables-singleprobability"]], "squlearn.observables.SummedPaulis": [[43, "squlearn-observables-summedpaulis"]], "squlearn.observables.SummedProbabilities": [[44, "squlearn-observables-summedprobabilities"]], "squlearn.observables.observable_base.ObservableBase": [[45, "squlearn-observables-observable-base-observablebase"]], "squlearn.observables.observable_derivatives.ObservableDerivatives": [[46, "squlearn-observables-observable-derivatives-observablederivatives"]], "squlearn.optimizers.Adam": [[47, "squlearn-optimizers-adam"]], "squlearn.optimizers.LBFGSB": [[48, "squlearn-optimizers-lbfgsb"]], "squlearn.optimizers.SGLBO": [[49, "squlearn-optimizers-sglbo"]], "squlearn.optimizers.SLSQP": [[50, "squlearn-optimizers-slsqp"]], "squlearn.optimizers.SPSA": [[51, "squlearn-optimizers-spsa"]], "squlearn.optimizers.optimizer_base.OptimizerBase": [[52, "squlearn-optimizers-optimizer-base-optimizerbase"]], "squlearn.qnn.QNNClassifier": [[53, "squlearn-qnn-qnnclassifier"]], "squlearn.qnn.QNNRegressor": [[54, "squlearn-qnn-qnnregressor"]], "squlearn.qnn.ShotsFromRSTD": [[55, "squlearn-qnn-shotsfromrstd"]], "squlearn.qnn.base_qnn.BaseQNN": [[56, "squlearn-qnn-base-qnn-baseqnn"]], "squlearn.qnn.get_lr_decay": [[57, "squlearn-qnn-get-lr-decay"]], "squlearn.qnn.get_variance_fac": [[58, "squlearn-qnn-get-variance-fac"]], "squlearn.qnn.loss.LossBase": [[59, "squlearn-qnn-loss-lossbase"]], "squlearn.qnn.loss.ParameterRegularizationLoss": [[60, "squlearn-qnn-loss-parameterregularizationloss"]], "squlearn.qnn.loss.SquaredLoss": [[61, "squlearn-qnn-loss-squaredloss"]], "squlearn.qnn.loss.VarianceLoss": [[62, "squlearn-qnn-loss-varianceloss"]], "squlearn.qnn.lowlevel_qnn.LowLevelQNN": [[63, "squlearn-qnn-lowlevel-qnn-lowlevelqnn"]], "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase": [[64, "squlearn-qnn-lowlevel-qnn-base-lowlevelqnnbase"]], "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane": [[65, "squlearn-qnn-lowlevel-qnn-pennylane-lowlevelqnnpennylane"]], "squlearn.qnn.lowlevel_qnn_qiskit.Expec": [[66, "squlearn-qnn-lowlevel-qnn-qiskit-expec"]], "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit": [[67, "squlearn-qnn-lowlevel-qnn-qiskit-lowlevelqnnqiskit"]], "squlearn.qnn.training.train": [[68, "squlearn-qnn-training-train"]], "squlearn.qnn.training.train_mini_batch": [[69, "squlearn-qnn-training-train-mini-batch"]], "squlearn.util.OpTree": [[70, "squlearn-util-optree"]], "squlearn.util.optree.OpTreeCircuit": [[71, "squlearn-util-optree-optreecircuit"]], "squlearn.util.optree.OpTreeContainer": [[72, "squlearn-util-optree-optreecontainer"]], "squlearn.util.optree.OpTreeExpectationValue": [[73, "squlearn-util-optree-optreeexpectationvalue"]], "squlearn.util.optree.OpTreeList": [[74, "squlearn-util-optree-optreelist"]], "squlearn.util.optree.OpTreeMeasuredOperator": [[75, "squlearn-util-optree-optreemeasuredoperator"]], "squlearn.util.optree.OpTreeOperator": [[76, "squlearn-util-optree-optreeoperator"]], "squlearn.util.optree.OpTreeSum": [[77, "squlearn-util-optree-optreesum"]], "squlearn.util.optree.OpTreeValue": [[78, "squlearn-util-optree-optreevalue"]], "squlearn.util.pennylane.PennyLaneCircuit": [[79, "squlearn-util-pennylane-pennylanecircuit"]]}, "docnames": ["examples/example_kernel_digit_classification", "examples/example_kernel_grid_search", "examples/example_qnn_backend_mitigation", "examples/example_quantum_bayesian_optimization", "examples/examples_index", "index", "install/install", "modules/classes", "modules/generated/squlearn.Executor", "modules/generated/squlearn.encoding_circuit.ChebyshevPQC", "modules/generated/squlearn.encoding_circuit.ChebyshevRx", "modules/generated/squlearn.encoding_circuit.ChebyshevTower", "modules/generated/squlearn.encoding_circuit.EncodingCircuitDerivatives", "modules/generated/squlearn.encoding_circuit.HighDimEncodingCircuit", "modules/generated/squlearn.encoding_circuit.HubregtsenEncodingCircuit", "modules/generated/squlearn.encoding_circuit.LayeredEncodingCircuit", "modules/generated/squlearn.encoding_circuit.MultiControlEncodingCircuit", "modules/generated/squlearn.encoding_circuit.ParamZFeatureMap", "modules/generated/squlearn.encoding_circuit.PrunedEncodingCircuit", "modules/generated/squlearn.encoding_circuit.QCNNEncodingCircuit", "modules/generated/squlearn.encoding_circuit.QiskitEncodingCircuit", "modules/generated/squlearn.encoding_circuit.TranspiledEncodingCircuit", "modules/generated/squlearn.encoding_circuit.YZ_CX_EncodingCircuit", "modules/generated/squlearn.encoding_circuit.automated_pruning", "modules/generated/squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase", "modules/generated/squlearn.encoding_circuit.pruning_from_QFI", "modules/generated/squlearn.kernel.matrix.FidelityKernel", "modules/generated/squlearn.kernel.matrix.ProjectedQuantumKernel", "modules/generated/squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase", "modules/generated/squlearn.kernel.ml.QGPC", "modules/generated/squlearn.kernel.ml.QGPR", "modules/generated/squlearn.kernel.ml.QKRR", "modules/generated/squlearn.kernel.ml.QSVC", "modules/generated/squlearn.kernel.ml.QSVR", "modules/generated/squlearn.kernel.optimization.kernel_loss_base.KernelLossBase", "modules/generated/squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase", "modules/generated/squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer", "modules/generated/squlearn.kernel.optimization.negative_log_likelihood.NLL", "modules/generated/squlearn.kernel.optimization.target_alignment.TargetAlignment", "modules/generated/squlearn.observables.CustomObservable", "modules/generated/squlearn.observables.IsingHamiltonian", "modules/generated/squlearn.observables.SinglePauli", "modules/generated/squlearn.observables.SingleProbability", "modules/generated/squlearn.observables.SummedPaulis", "modules/generated/squlearn.observables.SummedProbabilities", "modules/generated/squlearn.observables.observable_base.ObservableBase", "modules/generated/squlearn.observables.observable_derivatives.ObservableDerivatives", "modules/generated/squlearn.optimizers.Adam", "modules/generated/squlearn.optimizers.LBFGSB", "modules/generated/squlearn.optimizers.SGLBO", "modules/generated/squlearn.optimizers.SLSQP", "modules/generated/squlearn.optimizers.SPSA", "modules/generated/squlearn.optimizers.optimizer_base.OptimizerBase", "modules/generated/squlearn.qnn.QNNClassifier", "modules/generated/squlearn.qnn.QNNRegressor", "modules/generated/squlearn.qnn.ShotsFromRSTD", "modules/generated/squlearn.qnn.base_qnn.BaseQNN", "modules/generated/squlearn.qnn.get_lr_decay", "modules/generated/squlearn.qnn.get_variance_fac", "modules/generated/squlearn.qnn.loss.LossBase", "modules/generated/squlearn.qnn.loss.ParameterRegularizationLoss", "modules/generated/squlearn.qnn.loss.SquaredLoss", "modules/generated/squlearn.qnn.loss.VarianceLoss", "modules/generated/squlearn.qnn.lowlevel_qnn.LowLevelQNN", "modules/generated/squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase", "modules/generated/squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane", "modules/generated/squlearn.qnn.lowlevel_qnn_qiskit.Expec", "modules/generated/squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit", "modules/generated/squlearn.qnn.training.train", "modules/generated/squlearn.qnn.training.train_mini_batch", "modules/generated/squlearn.util.OpTree", "modules/generated/squlearn.util.optree.OpTreeCircuit", "modules/generated/squlearn.util.optree.OpTreeContainer", "modules/generated/squlearn.util.optree.OpTreeExpectationValue", "modules/generated/squlearn.util.optree.OpTreeList", "modules/generated/squlearn.util.optree.OpTreeMeasuredOperator", "modules/generated/squlearn.util.optree.OpTreeOperator", "modules/generated/squlearn.util.optree.OpTreeSum", "modules/generated/squlearn.util.optree.OpTreeValue", "modules/generated/squlearn.util.pennylane.PennyLaneCircuit", "user_guide/encoding_circuits", "user_guide/executor", "user_guide/kernel_methods", "user_guide/observables", "user_guide/quantum_neural_networks", "user_guide/user_guide_index"], "envversion": {"nbsphinx": 4, "sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["examples/example_kernel_digit_classification.nblink", "examples/example_kernel_grid_search.nblink", "examples/example_qnn_backend_mitigation.nblink", "examples/example_quantum_bayesian_optimization.nblink", "examples/examples_index.rst", "index.rst", "install/install.rst", "modules/classes.rst", "modules/generated/squlearn.Executor.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevPQC.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevRx.rst", "modules/generated/squlearn.encoding_circuit.ChebyshevTower.rst", "modules/generated/squlearn.encoding_circuit.EncodingCircuitDerivatives.rst", "modules/generated/squlearn.encoding_circuit.HighDimEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.HubregtsenEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.LayeredEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.MultiControlEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.ParamZFeatureMap.rst", "modules/generated/squlearn.encoding_circuit.PrunedEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.QCNNEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.QiskitEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.TranspiledEncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.YZ_CX_EncodingCircuit.rst", "modules/generated/squlearn.encoding_circuit.automated_pruning.rst", "modules/generated/squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.rst", "modules/generated/squlearn.encoding_circuit.pruning_from_QFI.rst", "modules/generated/squlearn.kernel.matrix.FidelityKernel.rst", "modules/generated/squlearn.kernel.matrix.ProjectedQuantumKernel.rst", "modules/generated/squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.rst", "modules/generated/squlearn.kernel.ml.QGPC.rst", "modules/generated/squlearn.kernel.ml.QGPR.rst", "modules/generated/squlearn.kernel.ml.QKRR.rst", "modules/generated/squlearn.kernel.ml.QSVC.rst", "modules/generated/squlearn.kernel.ml.QSVR.rst", "modules/generated/squlearn.kernel.optimization.kernel_loss_base.KernelLossBase.rst", "modules/generated/squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase.rst", "modules/generated/squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer.rst", "modules/generated/squlearn.kernel.optimization.negative_log_likelihood.NLL.rst", "modules/generated/squlearn.kernel.optimization.target_alignment.TargetAlignment.rst", "modules/generated/squlearn.observables.CustomObservable.rst", "modules/generated/squlearn.observables.IsingHamiltonian.rst", "modules/generated/squlearn.observables.SinglePauli.rst", "modules/generated/squlearn.observables.SingleProbability.rst", "modules/generated/squlearn.observables.SummedPaulis.rst", "modules/generated/squlearn.observables.SummedProbabilities.rst", "modules/generated/squlearn.observables.observable_base.ObservableBase.rst", "modules/generated/squlearn.observables.observable_derivatives.ObservableDerivatives.rst", "modules/generated/squlearn.optimizers.Adam.rst", "modules/generated/squlearn.optimizers.LBFGSB.rst", "modules/generated/squlearn.optimizers.SGLBO.rst", "modules/generated/squlearn.optimizers.SLSQP.rst", "modules/generated/squlearn.optimizers.SPSA.rst", "modules/generated/squlearn.optimizers.optimizer_base.OptimizerBase.rst", "modules/generated/squlearn.qnn.QNNClassifier.rst", "modules/generated/squlearn.qnn.QNNRegressor.rst", "modules/generated/squlearn.qnn.ShotsFromRSTD.rst", "modules/generated/squlearn.qnn.base_qnn.BaseQNN.rst", "modules/generated/squlearn.qnn.get_lr_decay.rst", "modules/generated/squlearn.qnn.get_variance_fac.rst", "modules/generated/squlearn.qnn.loss.LossBase.rst", "modules/generated/squlearn.qnn.loss.ParameterRegularizationLoss.rst", "modules/generated/squlearn.qnn.loss.SquaredLoss.rst", "modules/generated/squlearn.qnn.loss.VarianceLoss.rst", "modules/generated/squlearn.qnn.lowlevel_qnn.LowLevelQNN.rst", "modules/generated/squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.rst", "modules/generated/squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.rst", "modules/generated/squlearn.qnn.lowlevel_qnn_qiskit.Expec.rst", "modules/generated/squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.rst", "modules/generated/squlearn.qnn.training.train.rst", "modules/generated/squlearn.qnn.training.train_mini_batch.rst", "modules/generated/squlearn.util.OpTree.rst", "modules/generated/squlearn.util.optree.OpTreeCircuit.rst", "modules/generated/squlearn.util.optree.OpTreeContainer.rst", "modules/generated/squlearn.util.optree.OpTreeExpectationValue.rst", "modules/generated/squlearn.util.optree.OpTreeList.rst", "modules/generated/squlearn.util.optree.OpTreeMeasuredOperator.rst", "modules/generated/squlearn.util.optree.OpTreeOperator.rst", "modules/generated/squlearn.util.optree.OpTreeSum.rst", "modules/generated/squlearn.util.optree.OpTreeValue.rst", "modules/generated/squlearn.util.pennylane.PennyLaneCircuit.rst", "user_guide/encoding_circuits.rst", "user_guide/executor.rst", "user_guide/kernel_methods.rst", "user_guide/observables.rst", "user_guide/quantum_neural_networks.rst", "user_guide/user_guide_index.rst"], "indexentries": {"adam (class in squlearn.optimizers)": [[47, "squlearn.optimizers.Adam", false]], "add_layer() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.add_layer", false]], "append() (squlearn.util.optree.optreelist method)": [[74, "squlearn.util.optree.OpTreeList.append", false]], "append() (squlearn.util.optree.optreesum method)": [[77, "squlearn.util.optree.OpTreeSum.append", false]], "assign_parameters() (squlearn.encoding_circuit.encodingcircuitderivatives method)": [[12, "squlearn.encoding_circuit.EncodingCircuitDerivatives.assign_parameters", false]], "assign_parameters() (squlearn.kernel.matrix.fidelitykernel method)": [[26, "squlearn.kernel.matrix.FidelityKernel.assign_parameters", false]], "assign_parameters() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[28, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.assign_parameters", false]], "assign_parameters() (squlearn.kernel.matrix.projectedquantumkernel method)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.assign_parameters", false]], "assign_parameters() (squlearn.observables.observable_derivatives.observablederivatives method)": [[46, "squlearn.observables.observable_derivatives.ObservableDerivatives.assign_parameters", false]], "assign_parameters() (squlearn.util.optree static method)": [[70, "squlearn.util.OpTree.assign_parameters", false]], "automated_pruning() (in module squlearn.encoding_circuit)": [[23, "squlearn.encoding_circuit.automated_pruning", false]], "backend (squlearn.executor attribute)": [[8, "squlearn.Executor.backend", false]], "baseqnn (class in squlearn.qnn.base_qnn)": [[56, "squlearn.qnn.base_qnn.BaseQNN", false]], "build_circuit() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit.build_circuit", false]], "build_circuit_instructions() (squlearn.util.pennylane.pennylanecircuit method)": [[79, "squlearn.util.pennylane.PennyLaneCircuit.build_circuit_instructions", false]], "build_observable_instructions() (squlearn.util.pennylane.pennylanecircuit method)": [[79, "squlearn.util.pennylane.PennyLaneCircuit.build_observable_instructions", false]], "build_pennylane_circuit() (squlearn.util.pennylane.pennylanecircuit method)": [[79, "squlearn.util.pennylane.PennyLaneCircuit.build_pennylane_circuit", false]], "calculate_cov_and_mean() (squlearn.kernel.ml.qgpr method)": [[30, "squlearn.kernel.ml.QGPR.calculate_cov_and_mean", false]], "ch_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.ch_entangling", false]], "chebyshevpqc (class in squlearn.encoding_circuit)": [[9, "squlearn.encoding_circuit.ChebyshevPQC", false]], "chebyshevrx (class in squlearn.encoding_circuit)": [[10, "squlearn.encoding_circuit.ChebyshevRx", false]], "chebyshevtower (class in squlearn.encoding_circuit)": [[11, "squlearn.encoding_circuit.ChebyshevTower", false]], "circuit_arguments (squlearn.util.pennylane.pennylanecircuit attribute)": [[79, "squlearn.util.pennylane.PennyLaneCircuit.circuit_arguments", false]], "circuit_parameter_dimensions (squlearn.util.pennylane.pennylanecircuit attribute)": [[79, "squlearn.util.pennylane.PennyLaneCircuit.circuit_parameter_dimensions", false]], "circuit_parameter_names (squlearn.util.pennylane.pennylanecircuit attribute)": [[79, "squlearn.util.pennylane.PennyLaneCircuit.circuit_parameter_names", false]], "clear_estimator_cache() (squlearn.executor method)": [[8, "squlearn.Executor.clear_estimator_cache", false]], "clear_sampler_cache() (squlearn.executor method)": [[8, "squlearn.Executor.clear_sampler_cache", false]], "close_session() (squlearn.executor method)": [[8, "squlearn.Executor.close_session", false]], "compute() (squlearn.kernel.optimization.kernel_loss_base.kernellossbase method)": [[34, "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase.compute", false]], "compute() (squlearn.kernel.optimization.negative_log_likelihood.nll method)": [[37, "squlearn.kernel.optimization.negative_log_likelihood.NLL.compute", false]], "compute() (squlearn.kernel.optimization.target_alignment.targetalignment method)": [[38, "squlearn.kernel.optimization.target_alignment.TargetAlignment.compute", false]], "convolution() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit.convolution", false]], "copy() (squlearn.util.optree.optreecircuit method)": [[71, "squlearn.util.optree.OpTreeCircuit.copy", false]], "copy() (squlearn.util.optree.optreecontainer method)": [[72, "squlearn.util.optree.OpTreeContainer.copy", false]], "copy() (squlearn.util.optree.optreeexpectationvalue method)": [[73, "squlearn.util.optree.OpTreeExpectationValue.copy", false]], "copy() (squlearn.util.optree.optreelist method)": [[74, "squlearn.util.optree.OpTreeList.copy", false]], "copy() (squlearn.util.optree.optreemeasuredoperator method)": [[75, "squlearn.util.optree.OpTreeMeasuredOperator.copy", false]], "copy() (squlearn.util.optree.optreeoperator method)": [[76, "squlearn.util.optree.OpTreeOperator.copy", false]], "copy() (squlearn.util.optree.optreesum method)": [[77, "squlearn.util.optree.OpTreeSum.copy", false]], "copy() (squlearn.util.optree.optreevalue method)": [[78, "squlearn.util.optree.OpTreeValue.copy", false]], "cp_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.cp_entangling", false]], "create_session() (squlearn.executor method)": [[8, "squlearn.Executor.create_session", false]], "crx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.crx_entangling", false]], "cry_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.cry_entangling", false]], "crz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.crz_entangling", false]], "cu_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.cu_entangling", false]], "customobservable (class in squlearn.observables)": [[39, "squlearn.observables.CustomObservable", false]], "cx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.cx_entangling", false]], "cy_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.cy_entangling", false]], "cz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.cz_entangling", false]], "decision_function() (squlearn.kernel.ml.qsvc method)": [[32, "squlearn.kernel.ml.QSVC.decision_function", false]], "default_circuit() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit.default_circuit", false]], "derivative (squlearn.util.optree attribute)": [[70, "squlearn.util.OpTree.derivative", false]], "differentiate() (squlearn.util.optree.optreederivative static method)": [[70, "squlearn.util.OpTree.OpTreeDerivative.differentiate", false]], "differentiate_v2() (squlearn.util.optree.optreederivative static method)": [[70, "squlearn.util.OpTree.OpTreeDerivative.differentiate_v2", false]], "draw() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.draw", false]], "draw() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.draw", false]], "draw() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.draw", false]], "draw() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[24, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.draw", false]], "draw() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[16, "squlearn.encoding_circuit.MultiControlEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.paramzfeaturemap method)": [[17, "squlearn.encoding_circuit.ParamZFeatureMap.draw", false]], "draw() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[18, "squlearn.encoding_circuit.PrunedEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[20, "squlearn.encoding_circuit.QiskitEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[21, "squlearn.encoding_circuit.TranspiledEncodingCircuit.draw", false]], "draw() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[22, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.draw", false]], "draw() (squlearn.util.pennylane.pennylanecircuit method)": [[79, "squlearn.util.pennylane.PennyLaneCircuit.draw", false]], "encoding_circuit (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.encoding_circuit", false]], "encodingcircuitbase (class in squlearn.encoding_circuit.encoding_circuit_base)": [[24, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase", false]], "encodingcircuitderivatives (class in squlearn.encoding_circuit)": [[12, "squlearn.encoding_circuit.EncodingCircuitDerivatives", false]], "estimator (squlearn.executor attribute)": [[8, "squlearn.Executor.estimator", false]], "estimator_run() (squlearn.executor method)": [[8, "squlearn.Executor.estimator_run", false]], "evaluate (squlearn.util.optree attribute)": [[70, "squlearn.util.OpTree.evaluate", false]], "evaluate() (squlearn.kernel.matrix.fidelitykernel method)": [[26, "squlearn.kernel.matrix.FidelityKernel.evaluate", false]], "evaluate() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[28, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate", false]], "evaluate() (squlearn.kernel.matrix.projectedquantumkernel method)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate", false]], "evaluate() (squlearn.qnn.lowlevel_qnn.lowlevelqnn method)": [[63, "squlearn.qnn.lowlevel_qnn.LowLevelQNN.evaluate", false]], "evaluate() (squlearn.qnn.lowlevel_qnn_base.lowlevelqnnbase method)": [[64, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.evaluate", false]], "evaluate() (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane method)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.evaluate", false]], "evaluate() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate", false]], "evaluate_dfdop() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdop", false]], "evaluate_dfdopdx() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdopdx", false]], "evaluate_dfdp() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdp", false]], "evaluate_dfdpdx() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdpdx", false]], "evaluate_dfdx() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdx", false]], "evaluate_dfdxdx() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_dfdxdx", false]], "evaluate_diff_tuple() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_diff_tuple", false]], "evaluate_f() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_f", false]], "evaluate_from_string() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_from_string", false]], "evaluate_laplace() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_laplace", false]], "evaluate_laplace_dop() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_laplace_dop", false]], "evaluate_laplace_dp() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_laplace_dp", false]], "evaluate_pairwise() (squlearn.kernel.matrix.fidelitykernel method)": [[26, "squlearn.kernel.matrix.FidelityKernel.evaluate_pairwise", false]], "evaluate_pairwise() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[28, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate_pairwise", false]], "evaluate_pairwise() (squlearn.kernel.matrix.projectedquantumkernel method)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_pairwise", false]], "evaluate_probabilities() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_probabilities", false]], "evaluate_qnn() (squlearn.kernel.matrix.projectedquantumkernel method)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_qnn", false]], "evaluate_tree_with_estimator() (squlearn.util.optree.optreeevaluate static method)": [[70, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_tree_with_estimator", false]], "evaluate_tree_with_sampler() (squlearn.util.optree.optreeevaluate static method)": [[70, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_tree_with_sampler", false]], "evaluate_var() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_var", false]], "evaluate_variance() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.evaluate_variance", false]], "evaluate_with_estimator() (squlearn.util.optree.optreeevaluate static method)": [[70, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_with_estimator", false]], "evaluate_with_parameters() (squlearn.kernel.matrix.fidelitykernel method)": [[26, "squlearn.kernel.matrix.FidelityKernel.evaluate_with_parameters", false]], "evaluate_with_parameters() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[28, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.evaluate_with_parameters", false]], "evaluate_with_parameters() (squlearn.kernel.matrix.projectedquantumkernel method)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.evaluate_with_parameters", false]], "evaluate_with_sampler() (squlearn.util.optree.optreeevaluate static method)": [[70, "squlearn.util.OpTree.OpTreeEvaluate.evaluate_with_sampler", false]], "execution (squlearn.executor attribute)": [[8, "squlearn.Executor.execution", false]], "executor (class in squlearn)": [[8, "squlearn.Executor", false]], "expec (class in squlearn.qnn.lowlevel_qnn_qiskit)": [[66, "squlearn.qnn.lowlevel_qnn_qiskit.Expec", false]], "features (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.features", false]], "features (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.features", false]], "fidelitykernel (class in squlearn.kernel.matrix)": [[26, "squlearn.kernel.matrix.FidelityKernel", false]], "fit() (squlearn.kernel.ml.qgpc method)": [[29, "squlearn.kernel.ml.QGPC.fit", false]], "fit() (squlearn.kernel.ml.qgpr method)": [[30, "squlearn.kernel.ml.QGPR.fit", false]], "fit() (squlearn.kernel.ml.qkrr method)": [[31, "squlearn.kernel.ml.QKRR.fit", false]], "fit() (squlearn.kernel.ml.qsvc method)": [[32, "squlearn.kernel.ml.QSVC.fit", false]], "fit() (squlearn.kernel.ml.qsvr method)": [[33, "squlearn.kernel.ml.QSVR.fit", false]], "fit() (squlearn.qnn.base_qnn.baseqnn method)": [[56, "squlearn.qnn.base_qnn.BaseQNN.fit", false]], "fit() (squlearn.qnn.qnnclassifier method)": [[53, "squlearn.qnn.QNNClassifier.fit", false]], "fit() (squlearn.qnn.qnnregressor method)": [[54, "squlearn.qnn.QNNRegressor.fit", false]], "from_parameter() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[66, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_parameter", false]], "from_parameter_vector() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[66, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_parameter_vector", false]], "from_string() (squlearn.encoding_circuit.layeredencodingcircuit class method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.from_string", false]], "from_string() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[66, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_string", false]], "from_tuple() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[66, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_tuple", false]], "from_variable() (squlearn.qnn.lowlevel_qnn_qiskit.expec class method)": [[66, "squlearn.qnn.lowlevel_qnn_qiskit.Expec.from_variable", false]], "full_sum (squlearn.observables.summedpaulis attribute)": [[43, "squlearn.observables.SummedPaulis.full_sum", false]], "full_sum (squlearn.observables.summedprobabilities attribute)": [[44, "squlearn.observables.SummedProbabilities.full_sum", false]], "fully_connected() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit.fully_connected", false]], "gen_expectation_tree() (squlearn.util.optree static method)": [[70, "squlearn.util.OpTree.gen_expectation_tree", false]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[24, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[16, "squlearn.encoding_circuit.MultiControlEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.paramzfeaturemap method)": [[17, "squlearn.encoding_circuit.ParamZFeatureMap.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[18, "squlearn.encoding_circuit.PrunedEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[20, "squlearn.encoding_circuit.QiskitEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[21, "squlearn.encoding_circuit.TranspiledEncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[22, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.customobservable method)": [[39, "squlearn.observables.CustomObservable.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.isinghamiltonian method)": [[40, "squlearn.observables.IsingHamiltonian.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.observable_base.observablebase method)": [[45, "squlearn.observables.observable_base.ObservableBase.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.singlepauli method)": [[41, "squlearn.observables.SinglePauli.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.singleprobability method)": [[42, "squlearn.observables.SingleProbability.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.summedpaulis method)": [[43, "squlearn.observables.SummedPaulis.generate_initial_parameters", false]], "generate_initial_parameters() (squlearn.observables.summedprobabilities method)": [[44, "squlearn.observables.SummedProbabilities.generate_initial_parameters", false]], "get_cheb_indices() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.get_cheb_indices", false]], "get_cheb_indices() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.get_cheb_indices", false]], "get_circuit() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[24, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[16, "squlearn.encoding_circuit.MultiControlEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.paramzfeaturemap method)": [[17, "squlearn.encoding_circuit.ParamZFeatureMap.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[18, "squlearn.encoding_circuit.PrunedEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[20, "squlearn.encoding_circuit.QiskitEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[21, "squlearn.encoding_circuit.TranspiledEncodingCircuit.get_circuit", false]], "get_circuit() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[22, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.get_circuit", false]], "get_derivative() (squlearn.encoding_circuit.encodingcircuitderivatives method)": [[12, "squlearn.encoding_circuit.EncodingCircuitDerivatives.get_derivative", false]], "get_derivative() (squlearn.observables.observable_derivatives.observablederivatives method)": [[46, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_derivative", false]], "get_estimator() (squlearn.executor method)": [[8, "squlearn.Executor.get_estimator", false]], "get_first_leaf() (squlearn.util.optree static method)": [[70, "squlearn.util.OpTree.get_first_leaf", false]], "get_lr_decay (class in squlearn.qnn)": [[57, "squlearn.qnn.get_lr_decay", false]], "get_metadata_routing() (squlearn.kernel.ml.qgpc method)": [[29, "squlearn.kernel.ml.QGPC.get_metadata_routing", false]], "get_metadata_routing() (squlearn.kernel.ml.qgpr method)": [[30, "squlearn.kernel.ml.QGPR.get_metadata_routing", false]], "get_metadata_routing() (squlearn.kernel.ml.qkrr method)": [[31, "squlearn.kernel.ml.QKRR.get_metadata_routing", false]], "get_metadata_routing() (squlearn.kernel.ml.qsvc method)": [[32, "squlearn.kernel.ml.QSVC.get_metadata_routing", false]], "get_metadata_routing() (squlearn.kernel.ml.qsvr method)": [[33, "squlearn.kernel.ml.QSVR.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qnn.base_qnn.baseqnn method)": [[56, "squlearn.qnn.base_qnn.BaseQNN.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qnn.qnnclassifier method)": [[53, "squlearn.qnn.QNNClassifier.get_metadata_routing", false]], "get_metadata_routing() (squlearn.qnn.qnnregressor method)": [[54, "squlearn.qnn.QNNRegressor.get_metadata_routing", false]], "get_num_nested_lists() (squlearn.util.optree static method)": [[70, "squlearn.util.OpTree.get_num_nested_lists", false]], "get_number_of_leafs() (squlearn.util.optree static method)": [[70, "squlearn.util.OpTree.get_number_of_leafs", false]], "get_operator() (squlearn.observables.customobservable method)": [[39, "squlearn.observables.CustomObservable.get_operator", false]], "get_operator() (squlearn.observables.isinghamiltonian method)": [[40, "squlearn.observables.IsingHamiltonian.get_operator", false]], "get_operator() (squlearn.observables.observable_base.observablebase method)": [[45, "squlearn.observables.observable_base.ObservableBase.get_operator", false]], "get_operator() (squlearn.observables.observable_derivatives.observablederivatives method)": [[46, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_operator", false]], "get_operator() (squlearn.observables.singlepauli method)": [[41, "squlearn.observables.SinglePauli.get_operator", false]], "get_operator() (squlearn.observables.singleprobability method)": [[42, "squlearn.observables.SingleProbability.get_operator", false]], "get_operator() (squlearn.observables.summedpaulis method)": [[43, "squlearn.observables.SummedPaulis.get_operator", false]], "get_operator() (squlearn.observables.summedprobabilities method)": [[44, "squlearn.observables.SummedProbabilities.get_operator", false]], "get_operator_squared() (squlearn.observables.observable_derivatives.observablederivatives method)": [[46, "squlearn.observables.observable_derivatives.ObservableDerivatives.get_operator_squared", false]], "get_optree_from_expec() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.get_optree_from_expec", false]], "get_optree_from_string() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.get_optree_from_string", false]], "get_params() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.get_params", false]], "get_params() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.get_params", false]], "get_params() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.get_params", false]], "get_params() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[24, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.get_params", false]], "get_params() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[16, "squlearn.encoding_circuit.MultiControlEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.paramzfeaturemap method)": [[17, "squlearn.encoding_circuit.ParamZFeatureMap.get_params", false]], "get_params() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[18, "squlearn.encoding_circuit.PrunedEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[20, "squlearn.encoding_circuit.QiskitEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[21, "squlearn.encoding_circuit.TranspiledEncodingCircuit.get_params", false]], "get_params() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[22, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.get_params", false]], "get_params() (squlearn.kernel.matrix.fidelitykernel method)": [[26, "squlearn.kernel.matrix.FidelityKernel.get_params", false]], "get_params() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[28, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.get_params", false]], "get_params() (squlearn.kernel.matrix.projectedquantumkernel method)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.get_params", false]], "get_params() (squlearn.kernel.ml.qgpc method)": [[29, "squlearn.kernel.ml.QGPC.get_params", false]], "get_params() (squlearn.kernel.ml.qgpr method)": [[30, "squlearn.kernel.ml.QGPR.get_params", false]], "get_params() (squlearn.kernel.ml.qkrr method)": [[31, "squlearn.kernel.ml.QKRR.get_params", false]], "get_params() (squlearn.kernel.ml.qsvc method)": [[32, "squlearn.kernel.ml.QSVC.get_params", false]], "get_params() (squlearn.kernel.ml.qsvr method)": [[33, "squlearn.kernel.ml.QSVR.get_params", false]], "get_params() (squlearn.observables.customobservable method)": [[39, "squlearn.observables.CustomObservable.get_params", false]], "get_params() (squlearn.observables.isinghamiltonian method)": [[40, "squlearn.observables.IsingHamiltonian.get_params", false]], "get_params() (squlearn.observables.observable_base.observablebase method)": [[45, "squlearn.observables.observable_base.ObservableBase.get_params", false]], "get_params() (squlearn.observables.singlepauli method)": [[41, "squlearn.observables.SinglePauli.get_params", false]], "get_params() (squlearn.observables.singleprobability method)": [[42, "squlearn.observables.SingleProbability.get_params", false]], "get_params() (squlearn.observables.summedpaulis method)": [[43, "squlearn.observables.SummedPaulis.get_params", false]], "get_params() (squlearn.observables.summedprobabilities method)": [[44, "squlearn.observables.SummedProbabilities.get_params", false]], "get_params() (squlearn.qnn.base_qnn.baseqnn method)": [[56, "squlearn.qnn.base_qnn.BaseQNN.get_params", false]], "get_params() (squlearn.qnn.lowlevel_qnn.lowlevelqnn method)": [[63, "squlearn.qnn.lowlevel_qnn.LowLevelQNN.get_params", false]], "get_params() (squlearn.qnn.lowlevel_qnn_base.lowlevelqnnbase method)": [[64, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.get_params", false]], "get_params() (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane method)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.get_params", false]], "get_params() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.get_params", false]], "get_params() (squlearn.qnn.qnnclassifier method)": [[53, "squlearn.qnn.QNNClassifier.get_params", false]], "get_params() (squlearn.qnn.qnnregressor method)": [[54, "squlearn.qnn.QNNRegressor.get_params", false]], "get_pauli() (squlearn.observables.customobservable method)": [[39, "squlearn.observables.CustomObservable.get_pauli", false]], "get_pauli() (squlearn.observables.isinghamiltonian method)": [[40, "squlearn.observables.IsingHamiltonian.get_pauli", false]], "get_pauli() (squlearn.observables.observable_base.observablebase method)": [[45, "squlearn.observables.observable_base.ObservableBase.get_pauli", false]], "get_pauli() (squlearn.observables.singlepauli method)": [[41, "squlearn.observables.SinglePauli.get_pauli", false]], "get_pauli() (squlearn.observables.singleprobability method)": [[42, "squlearn.observables.SingleProbability.get_pauli", false]], "get_pauli() (squlearn.observables.summedpaulis method)": [[43, "squlearn.observables.SummedPaulis.get_pauli", false]], "get_pauli() (squlearn.observables.summedprobabilities method)": [[44, "squlearn.observables.SummedProbabilities.get_pauli", false]], "get_pauli_mapped() (squlearn.observables.customobservable method)": [[39, "squlearn.observables.CustomObservable.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.isinghamiltonian method)": [[40, "squlearn.observables.IsingHamiltonian.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.observable_base.observablebase method)": [[45, "squlearn.observables.observable_base.ObservableBase.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.singlepauli method)": [[41, "squlearn.observables.SinglePauli.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.singleprobability method)": [[42, "squlearn.observables.SingleProbability.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.summedpaulis method)": [[43, "squlearn.observables.SummedPaulis.get_pauli_mapped", false]], "get_pauli_mapped() (squlearn.observables.summedprobabilities method)": [[44, "squlearn.observables.SummedProbabilities.get_pauli_mapped", false]], "get_pennylane_circuit() (squlearn.util.pennylane.pennylanecircuit method)": [[79, "squlearn.util.pennylane.PennyLaneCircuit.get_pennylane_circuit", false]], "get_sampler() (squlearn.executor method)": [[8, "squlearn.Executor.get_sampler", false]], "get_shots() (squlearn.executor method)": [[8, "squlearn.Executor.get_shots", false]], "get_shots() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.get_shots", false]], "get_tree_depth() (squlearn.util.optree static method)": [[70, "squlearn.util.OpTree.get_tree_depth", false]], "get_variance_fac (class in squlearn.qnn)": [[58, "squlearn.qnn.get_variance_fac", false]], "gradient() (squlearn.qnn.loss.lossbase method)": [[59, "squlearn.qnn.loss.LossBase.gradient", false]], "gradient() (squlearn.qnn.loss.parameterregularizationloss method)": [[60, "squlearn.qnn.loss.ParameterRegularizationLoss.gradient", false]], "gradient() (squlearn.qnn.loss.squaredloss method)": [[61, "squlearn.qnn.loss.SquaredLoss.gradient", false]], "gradient() (squlearn.qnn.loss.varianceloss method)": [[62, "squlearn.qnn.loss.VarianceLoss.gradient", false]], "gradient() (squlearn.qnn.lowlevel_qnn.lowlevelqnn method)": [[63, "squlearn.qnn.lowlevel_qnn.LowLevelQNN.gradient", false]], "gradient() (squlearn.qnn.lowlevel_qnn_base.lowlevelqnnbase method)": [[64, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.gradient", false]], "gradient() (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane method)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.gradient", false]], "gradient() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.gradient", false]], "h() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.H", false]], "hash (squlearn.util.pennylane.pennylanecircuit attribute)": [[79, "squlearn.util.pennylane.PennyLaneCircuit.hash", false]], "hash_circuit() (squlearn.util.optree static method)": [[70, "squlearn.util.OpTree.hash_circuit", false]], "hash_operator() (squlearn.util.optree static method)": [[70, "squlearn.util.OpTree.hash_operator", false]], "highdimencodingcircuit (class in squlearn.encoding_circuit)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit", false]], "hubregtsenencodingcircuit (class in squlearn.encoding_circuit)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit", false]], "i (squlearn.observables.isinghamiltonian attribute)": [[40, "squlearn.observables.IsingHamiltonian.I", false]], "i() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.I", false]], "include_identity (squlearn.observables.summedpaulis attribute)": [[43, "squlearn.observables.SummedPaulis.include_identity", false]], "include_identity (squlearn.observables.summedprobabilities attribute)": [[44, "squlearn.observables.SummedProbabilities.include_identity", false]], "isinghamiltonian (class in squlearn.observables)": [[40, "squlearn.observables.IsingHamiltonian", false]], "kernellossbase (class in squlearn.kernel.optimization.kernel_loss_base)": [[34, "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase", false]], "kernelmatrixbase (class in squlearn.kernel.matrix.kernel_matrix_base)": [[28, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase", false]], "kerneloptimizer (class in squlearn.kernel.optimization.kernel_optimizer)": [[36, "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer", false]], "kerneloptimizerbase (class in squlearn.kernel.optimization.kernel_optimization_base)": [[35, "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase", false]], "layeredencodingcircuit (class in squlearn.encoding_circuit)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit", false]], "lbfgsb (class in squlearn.optimizers)": [[48, "squlearn.optimizers.LBFGSB", false]], "log_marginal_likelihood() (squlearn.kernel.ml.qgpc method)": [[29, "squlearn.kernel.ml.QGPC.log_marginal_likelihood", false]], "lossbase (class in squlearn.qnn.loss)": [[59, "squlearn.qnn.loss.LossBase", false]], "lowlevelqnn (class in squlearn.qnn.lowlevel_qnn)": [[63, "squlearn.qnn.lowlevel_qnn.LowLevelQNN", false]], "lowlevelqnnbase (class in squlearn.qnn.lowlevel_qnn_base)": [[64, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase", false]], "lowlevelqnnpennylane (class in squlearn.qnn.lowlevel_qnn_pennylane)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane", false]], "lowlevelqnnqiskit (class in squlearn.qnn.lowlevel_qnn_qiskit)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit", false]], "measure_circuit() (squlearn.util.optree.optreemeasuredoperator method)": [[75, "squlearn.util.optree.OpTreeMeasuredOperator.measure_circuit", false]], "measurement (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.measurement", false]], "minimize() (squlearn.optimizers.adam method)": [[47, "squlearn.optimizers.Adam.minimize", false]], "minimize() (squlearn.optimizers.lbfgsb method)": [[48, "squlearn.optimizers.LBFGSB.minimize", false]], "minimize() (squlearn.optimizers.optimizer_base.optimizerbase method)": [[52, "squlearn.optimizers.optimizer_base.OptimizerBase.minimize", false]], "minimize() (squlearn.optimizers.sglbo method)": [[49, "squlearn.optimizers.SGLBO.minimize", false]], "minimize() (squlearn.optimizers.slsqp method)": [[50, "squlearn.optimizers.SLSQP.minimize", false]], "minimize() (squlearn.optimizers.spsa method)": [[51, "squlearn.optimizers.SPSA.minimize", false]], "module": [[7, "module-squlearn.encoding_circuit", false], [7, "module-squlearn.kernel.matrix", false], [7, "module-squlearn.kernel.optimization", false], [7, "module-squlearn.observables", false], [7, "module-squlearn.optimizers", false], [7, "module-squlearn.qnn", false]], "multicontrolencodingcircuit (class in squlearn.encoding_circuit)": [[16, "squlearn.encoding_circuit.MultiControlEncodingCircuit", false]], "multiple_output (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.multiple_output", false]], "multiple_output (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.multiple_output", false]], "name_hyper_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.name_hyper_parameters", false]], "nll (class in squlearn.kernel.optimization.negative_log_likelihood)": [[37, "squlearn.kernel.optimization.negative_log_likelihood.NLL", false]], "num_features (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_features", false]], "num_features (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_features", false]], "num_features (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_features", false]], "num_hyper_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_hyper_parameters", false]], "num_operator (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_operator", false]], "num_operator (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_operator", false]], "num_operators (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[46, "squlearn.observables.observable_derivatives.ObservableDerivatives.num_operators", false]], "num_parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_parameters", false]], "num_parameters (squlearn.observables.customobservable attribute)": [[39, "squlearn.observables.CustomObservable.num_parameters", false]], "num_parameters (squlearn.observables.isinghamiltonian attribute)": [[40, "squlearn.observables.IsingHamiltonian.num_parameters", false]], "num_parameters (squlearn.observables.observable_base.observablebase attribute)": [[45, "squlearn.observables.observable_base.ObservableBase.num_parameters", false]], "num_parameters (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[46, "squlearn.observables.observable_derivatives.ObservableDerivatives.num_parameters", false]], "num_parameters (squlearn.observables.singlepauli attribute)": [[41, "squlearn.observables.SinglePauli.num_parameters", false]], "num_parameters (squlearn.observables.singleprobability attribute)": [[42, "squlearn.observables.SingleProbability.num_parameters", false]], "num_parameters (squlearn.observables.summedpaulis attribute)": [[43, "squlearn.observables.SummedPaulis.num_parameters", false]], "num_parameters (squlearn.observables.summedprobabilities attribute)": [[44, "squlearn.observables.SummedProbabilities.num_parameters", false]], "num_parameters (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_parameters", false]], "num_parameters (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_parameters", false]], "num_parameters_observable (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_parameters_observable", false]], "num_parameters_observable (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_parameters_observable", false]], "num_qubits (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.num_qubits", false]], "num_qubits (squlearn.observables.customobservable attribute)": [[39, "squlearn.observables.CustomObservable.num_qubits", false]], "num_qubits (squlearn.observables.isinghamiltonian attribute)": [[40, "squlearn.observables.IsingHamiltonian.num_qubits", false]], "num_qubits (squlearn.observables.observable_base.observablebase attribute)": [[45, "squlearn.observables.observable_base.ObservableBase.num_qubits", false]], "num_qubits (squlearn.observables.singlepauli attribute)": [[41, "squlearn.observables.SinglePauli.num_qubits", false]], "num_qubits (squlearn.observables.singleprobability attribute)": [[42, "squlearn.observables.SingleProbability.num_qubits", false]], "num_qubits (squlearn.observables.summedpaulis attribute)": [[43, "squlearn.observables.SummedPaulis.num_qubits", false]], "num_qubits (squlearn.observables.summedprobabilities attribute)": [[44, "squlearn.observables.SummedProbabilities.num_qubits", false]], "num_qubits (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.num_qubits", false]], "num_qubits (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.num_qubits", false]], "observable_parameter_dimension (squlearn.util.pennylane.pennylanecircuit attribute)": [[79, "squlearn.util.pennylane.PennyLaneCircuit.observable_parameter_dimension", false]], "observable_parameter_names (squlearn.util.pennylane.pennylanecircuit attribute)": [[79, "squlearn.util.pennylane.PennyLaneCircuit.observable_parameter_names", false]], "observablebase (class in squlearn.observables.observable_base)": [[45, "squlearn.observables.observable_base.ObservableBase", false]], "observablederivatives (class in squlearn.observables.observable_derivatives)": [[46, "squlearn.observables.observable_derivatives.ObservableDerivatives", false]], "one_state (squlearn.observables.singleprobability attribute)": [[42, "squlearn.observables.SingleProbability.one_state", false]], "one_state (squlearn.observables.summedprobabilities attribute)": [[44, "squlearn.observables.SummedProbabilities.one_state", false]], "op_str (squlearn.observables.singlepauli attribute)": [[41, "squlearn.observables.SinglePauli.op_str", false]], "op_str (squlearn.observables.summedpaulis attribute)": [[43, "squlearn.observables.SummedPaulis.op_str", false]], "operator_string (squlearn.observables.customobservable attribute)": [[39, "squlearn.observables.CustomObservable.operator_string", false]], "optimizerbase (class in squlearn.optimizers.optimizer_base)": [[52, "squlearn.optimizers.optimizer_base.OptimizerBase", false]], "optree (class in squlearn.util)": [[70, "squlearn.util.OpTree", false]], "optree.optreederivative (class in squlearn.util)": [[70, "squlearn.util.OpTree.OpTreeDerivative", false]], "optree.optreeevaluate (class in squlearn.util)": [[70, "squlearn.util.OpTree.OpTreeEvaluate", false]], "optreecircuit (class in squlearn.util.optree)": [[71, "squlearn.util.optree.OpTreeCircuit", false]], "optreecontainer (class in squlearn.util.optree)": [[72, "squlearn.util.optree.OpTreeContainer", false]], "optreeexpectationvalue (class in squlearn.util.optree)": [[73, "squlearn.util.optree.OpTreeExpectationValue", false]], "optreelist (class in squlearn.util.optree)": [[74, "squlearn.util.optree.OpTreeList", false]], "optreemeasuredoperator (class in squlearn.util.optree)": [[75, "squlearn.util.optree.OpTreeMeasuredOperator", false]], "optreeoperator (class in squlearn.util.optree)": [[76, "squlearn.util.optree.OpTreeOperator", false]], "optreesum (class in squlearn.util.optree)": [[77, "squlearn.util.optree.OpTreeSum", false]], "optreevalue (class in squlearn.util.optree)": [[78, "squlearn.util.optree.OpTreeValue", false]], "outer_kernel (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.outer_kernel", false]], "p() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.P", false]], "parameter_vector (squlearn.observables.observable_derivatives.observablederivatives attribute)": [[46, "squlearn.observables.observable_derivatives.ObservableDerivatives.parameter_vector", false]], "parameterized (squlearn.observables.customobservable attribute)": [[39, "squlearn.observables.CustomObservable.parameterized", false]], "parameterized (squlearn.observables.singlepauli attribute)": [[41, "squlearn.observables.SinglePauli.parameterized", false]], "parameterized (squlearn.observables.singleprobability attribute)": [[42, "squlearn.observables.SingleProbability.parameterized", false]], "parameterregularizationloss (class in squlearn.qnn.loss)": [[60, "squlearn.qnn.loss.ParameterRegularizationLoss", false]], "parameters (squlearn.kernel.matrix.projectedquantumkernel attribute)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.parameters", false]], "parameters (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.parameters", false]], "parameters (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.parameters", false]], "parameters_operator (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane attribute)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.parameters_operator", false]], "parameters_operator (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit attribute)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.parameters_operator", false]], "paramzfeaturemap (class in squlearn.encoding_circuit)": [[17, "squlearn.encoding_circuit.ParamZFeatureMap", false]], "partial_fit() (squlearn.qnn.qnnclassifier method)": [[53, "squlearn.qnn.QNNClassifier.partial_fit", false]], "partial_fit() (squlearn.qnn.qnnregressor method)": [[54, "squlearn.qnn.QNNRegressor.partial_fit", false]], "pennylane_circuit (squlearn.util.pennylane.pennylanecircuit attribute)": [[79, "squlearn.util.pennylane.PennyLaneCircuit.pennylane_circuit", false]], "pennylane_execute() (squlearn.executor method)": [[8, "squlearn.Executor.pennylane_execute", false]], "pennylane_execute_batched() (squlearn.executor method)": [[8, "squlearn.Executor.pennylane_execute_batched", false]], "pennylanecircuit (class in squlearn.util.pennylane)": [[79, "squlearn.util.pennylane.PennyLaneCircuit", false]], "pooling() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit.pooling", false]], "predict() (squlearn.kernel.ml.qgpc method)": [[29, "squlearn.kernel.ml.QGPC.predict", false]], "predict() (squlearn.kernel.ml.qgpr method)": [[30, "squlearn.kernel.ml.QGPR.predict", false]], "predict() (squlearn.kernel.ml.qkrr method)": [[31, "squlearn.kernel.ml.QKRR.predict", false]], "predict() (squlearn.kernel.ml.qsvc method)": [[32, "squlearn.kernel.ml.QSVC.predict", false]], "predict() (squlearn.kernel.ml.qsvr method)": [[33, "squlearn.kernel.ml.QSVR.predict", false]], "predict() (squlearn.qnn.qnnclassifier method)": [[53, "squlearn.qnn.QNNClassifier.predict", false]], "predict() (squlearn.qnn.qnnregressor method)": [[54, "squlearn.qnn.QNNRegressor.predict", false]], "predict_log_proba() (squlearn.kernel.ml.qsvc method)": [[32, "squlearn.kernel.ml.QSVC.predict_log_proba", false]], "predict_proba() (squlearn.kernel.ml.qgpc method)": [[29, "squlearn.kernel.ml.QGPC.predict_proba", false]], "predict_proba() (squlearn.kernel.ml.qsvc method)": [[32, "squlearn.kernel.ml.QSVC.predict_proba", false]], "predict_proba() (squlearn.qnn.qnnclassifier method)": [[53, "squlearn.qnn.QNNClassifier.predict_proba", false]], "projectedquantumkernel (class in squlearn.kernel.matrix)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel", false]], "prunedencodingcircuit (class in squlearn.encoding_circuit)": [[18, "squlearn.encoding_circuit.PrunedEncodingCircuit", false]], "pruning_from_qfi() (in module squlearn.encoding_circuit)": [[25, "squlearn.encoding_circuit.pruning_from_QFI", false]], "qcnnencodingcircuit (class in squlearn.encoding_circuit)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit", false]], "qcnnobservable() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit.QCNNObservable", false]], "qgpc (class in squlearn.kernel.ml)": [[29, "squlearn.kernel.ml.QGPC", false]], "qgpr (class in squlearn.kernel.ml)": [[30, "squlearn.kernel.ml.QGPR", false]], "qiskit_execute() (squlearn.executor method)": [[8, "squlearn.Executor.qiskit_execute", false]], "qiskitencodingcircuit (class in squlearn.encoding_circuit)": [[20, "squlearn.encoding_circuit.QiskitEncodingCircuit", false]], "qkrr (class in squlearn.kernel.ml)": [[31, "squlearn.kernel.ml.QKRR", false]], "qnnclassifier (class in squlearn.qnn)": [[53, "squlearn.qnn.QNNClassifier", false]], "qnnregressor (class in squlearn.qnn)": [[54, "squlearn.qnn.QNNRegressor", false]], "qsvc (class in squlearn.kernel.ml)": [[32, "squlearn.kernel.ml.QSVC", false]], "qsvr (class in squlearn.kernel.ml)": [[33, "squlearn.kernel.ml.QSVR", false]], "qubit (squlearn.observables.singlepauli attribute)": [[41, "squlearn.observables.SinglePauli.qubit", false]], "qubit (squlearn.observables.singleprobability attribute)": [[42, "squlearn.observables.SingleProbability.qubit", false]], "remove() (squlearn.util.optree.optreelist method)": [[74, "squlearn.util.optree.OpTreeList.remove", false]], "remove() (squlearn.util.optree.optreesum method)": [[77, "squlearn.util.optree.OpTreeSum.remove", false]], "repeat_layers() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit.repeat_layers", false]], "reset() (squlearn.optimizers.adam method)": [[47, "squlearn.optimizers.Adam.reset", false]], "reset() (squlearn.optimizers.sglbo method)": [[49, "squlearn.optimizers.SGLBO.reset", false]], "reset_options() (squlearn.executor method)": [[8, "squlearn.Executor.reset_options", false]], "reset_options_estimator() (squlearn.executor method)": [[8, "squlearn.Executor.reset_options_estimator", false]], "reset_options_sampler() (squlearn.executor method)": [[8, "squlearn.Executor.reset_options_sampler", false]], "reset_shots() (squlearn.executor method)": [[8, "squlearn.Executor.reset_shots", false]], "reset_shots() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.reset_shots", false]], "reset_shots() (squlearn.qnn.shotsfromrstd method)": [[55, "squlearn.qnn.ShotsFromRSTD.reset_shots", false]], "run_optimization() (squlearn.kernel.optimization.kernel_optimization_base.kerneloptimizerbase method)": [[35, "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase.run_optimization", false]], "run_optimization() (squlearn.kernel.optimization.kernel_optimizer.kerneloptimizer method)": [[36, "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer.run_optimization", false]], "rx() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.Rx", false]], "rxx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.rxx_entangling", false]], "ry() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.Ry", false]], "ryy_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.ryy_entangling", false]], "rz() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.Rz", false]], "rzx_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.rzx_entangling", false]], "rzz_entangling() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.rzz_entangling", false]], "s() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.S", false]], "s_conjugate() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.S_conjugate", false]], "sampler (squlearn.executor attribute)": [[8, "squlearn.Executor.sampler", false]], "sampler_run() (squlearn.executor method)": [[8, "squlearn.Executor.sampler_run", false]], "score() (squlearn.kernel.ml.qgpc method)": [[29, "squlearn.kernel.ml.QGPC.score", false]], "score() (squlearn.kernel.ml.qgpr method)": [[30, "squlearn.kernel.ml.QGPR.score", false]], "score() (squlearn.kernel.ml.qkrr method)": [[31, "squlearn.kernel.ml.QKRR.score", false]], "score() (squlearn.kernel.ml.qsvc method)": [[32, "squlearn.kernel.ml.QSVC.score", false]], "score() (squlearn.kernel.ml.qsvr method)": [[33, "squlearn.kernel.ml.QSVR.score", false]], "score() (squlearn.qnn.qnnclassifier method)": [[53, "squlearn.qnn.QNNClassifier.score", false]], "score() (squlearn.qnn.qnnregressor method)": [[54, "squlearn.qnn.QNNRegressor.score", false]], "service (squlearn.executor attribute)": [[8, "squlearn.Executor.service", false]], "session (squlearn.executor attribute)": [[8, "squlearn.Executor.session", false]], "set_callback() (squlearn.optimizers.adam method)": [[47, "squlearn.optimizers.Adam.set_callback", false]], "set_callback() (squlearn.optimizers.lbfgsb method)": [[48, "squlearn.optimizers.LBFGSB.set_callback", false]], "set_callback() (squlearn.optimizers.optimizer_base.optimizerbase method)": [[52, "squlearn.optimizers.optimizer_base.OptimizerBase.set_callback", false]], "set_callback() (squlearn.optimizers.sglbo method)": [[49, "squlearn.optimizers.SGLBO.set_callback", false]], "set_callback() (squlearn.optimizers.slsqp method)": [[50, "squlearn.optimizers.SLSQP.set_callback", false]], "set_callback() (squlearn.optimizers.spsa method)": [[51, "squlearn.optimizers.SPSA.set_callback", false]], "set_executor() (squlearn.qnn.shotsfromrstd method)": [[55, "squlearn.qnn.ShotsFromRSTD.set_executor", false]], "set_fit_request() (squlearn.kernel.ml.qsvc method)": [[32, "squlearn.kernel.ml.QSVC.set_fit_request", false]], "set_fit_request() (squlearn.kernel.ml.qsvr method)": [[33, "squlearn.kernel.ml.QSVR.set_fit_request", false]], "set_fit_request() (squlearn.qnn.base_qnn.baseqnn method)": [[56, "squlearn.qnn.base_qnn.BaseQNN.set_fit_request", false]], "set_fit_request() (squlearn.qnn.qnnclassifier method)": [[53, "squlearn.qnn.QNNClassifier.set_fit_request", false]], "set_fit_request() (squlearn.qnn.qnnregressor method)": [[54, "squlearn.qnn.QNNRegressor.set_fit_request", false]], "set_map() (squlearn.observables.customobservable method)": [[39, "squlearn.observables.CustomObservable.set_map", false]], "set_map() (squlearn.observables.isinghamiltonian method)": [[40, "squlearn.observables.IsingHamiltonian.set_map", false]], "set_map() (squlearn.observables.observable_base.observablebase method)": [[45, "squlearn.observables.observable_base.ObservableBase.set_map", false]], "set_map() (squlearn.observables.singlepauli method)": [[41, "squlearn.observables.SinglePauli.set_map", false]], "set_map() (squlearn.observables.singleprobability method)": [[42, "squlearn.observables.SingleProbability.set_map", false]], "set_map() (squlearn.observables.summedpaulis method)": [[43, "squlearn.observables.SummedPaulis.set_map", false]], "set_map() (squlearn.observables.summedprobabilities method)": [[44, "squlearn.observables.SummedProbabilities.set_map", false]], "set_opt_param_op() (squlearn.qnn.loss.lossbase method)": [[59, "squlearn.qnn.loss.LossBase.set_opt_param_op", false]], "set_opt_param_op() (squlearn.qnn.loss.parameterregularizationloss method)": [[60, "squlearn.qnn.loss.ParameterRegularizationLoss.set_opt_param_op", false]], "set_opt_param_op() (squlearn.qnn.loss.squaredloss method)": [[61, "squlearn.qnn.loss.SquaredLoss.set_opt_param_op", false]], "set_opt_param_op() (squlearn.qnn.loss.varianceloss method)": [[62, "squlearn.qnn.loss.VarianceLoss.set_opt_param_op", false]], "set_options_estimator() (squlearn.executor method)": [[8, "squlearn.Executor.set_options_estimator", false]], "set_options_sampler() (squlearn.executor method)": [[8, "squlearn.Executor.set_options_sampler", false]], "set_params() (squlearn.encoding_circuit.chebyshevpqc method)": [[9, "squlearn.encoding_circuit.ChebyshevPQC.set_params", false]], "set_params() (squlearn.encoding_circuit.chebyshevrx method)": [[10, "squlearn.encoding_circuit.ChebyshevRx.set_params", false]], "set_params() (squlearn.encoding_circuit.chebyshevtower method)": [[11, "squlearn.encoding_circuit.ChebyshevTower.set_params", false]], "set_params() (squlearn.encoding_circuit.encoding_circuit_base.encodingcircuitbase method)": [[24, "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase.set_params", false]], "set_params() (squlearn.encoding_circuit.highdimencodingcircuit method)": [[13, "squlearn.encoding_circuit.HighDimEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.hubregtsenencodingcircuit method)": [[14, "squlearn.encoding_circuit.HubregtsenEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.multicontrolencodingcircuit method)": [[16, "squlearn.encoding_circuit.MultiControlEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.paramzfeaturemap method)": [[17, "squlearn.encoding_circuit.ParamZFeatureMap.set_params", false]], "set_params() (squlearn.encoding_circuit.prunedencodingcircuit method)": [[18, "squlearn.encoding_circuit.PrunedEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.qcnnencodingcircuit method)": [[19, "squlearn.encoding_circuit.QCNNEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.qiskitencodingcircuit method)": [[20, "squlearn.encoding_circuit.QiskitEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.transpiledencodingcircuit method)": [[21, "squlearn.encoding_circuit.TranspiledEncodingCircuit.set_params", false]], "set_params() (squlearn.encoding_circuit.yz_cx_encodingcircuit method)": [[22, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit.set_params", false]], "set_params() (squlearn.kernel.matrix.fidelitykernel method)": [[26, "squlearn.kernel.matrix.FidelityKernel.set_params", false]], "set_params() (squlearn.kernel.matrix.kernel_matrix_base.kernelmatrixbase method)": [[28, "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase.set_params", false]], "set_params() (squlearn.kernel.matrix.projectedquantumkernel method)": [[27, "squlearn.kernel.matrix.ProjectedQuantumKernel.set_params", false]], "set_params() (squlearn.kernel.ml.qgpc method)": [[29, "squlearn.kernel.ml.QGPC.set_params", false]], "set_params() (squlearn.kernel.ml.qgpr method)": [[30, "squlearn.kernel.ml.QGPR.set_params", false]], "set_params() (squlearn.kernel.ml.qkrr method)": [[31, "squlearn.kernel.ml.QKRR.set_params", false]], "set_params() (squlearn.kernel.ml.qsvc method)": [[32, "squlearn.kernel.ml.QSVC.set_params", false]], "set_params() (squlearn.kernel.ml.qsvr method)": [[33, "squlearn.kernel.ml.QSVR.set_params", false]], "set_params() (squlearn.observables.customobservable method)": [[39, "squlearn.observables.CustomObservable.set_params", false]], "set_params() (squlearn.observables.isinghamiltonian method)": [[40, "squlearn.observables.IsingHamiltonian.set_params", false]], "set_params() (squlearn.observables.observable_base.observablebase method)": [[45, "squlearn.observables.observable_base.ObservableBase.set_params", false]], "set_params() (squlearn.observables.singlepauli method)": [[41, "squlearn.observables.SinglePauli.set_params", false]], "set_params() (squlearn.observables.singleprobability method)": [[42, "squlearn.observables.SingleProbability.set_params", false]], "set_params() (squlearn.observables.summedpaulis method)": [[43, "squlearn.observables.SummedPaulis.set_params", false]], "set_params() (squlearn.observables.summedprobabilities method)": [[44, "squlearn.observables.SummedProbabilities.set_params", false]], "set_params() (squlearn.qnn.base_qnn.baseqnn method)": [[56, "squlearn.qnn.base_qnn.BaseQNN.set_params", false]], "set_params() (squlearn.qnn.lowlevel_qnn.lowlevelqnn method)": [[63, "squlearn.qnn.lowlevel_qnn.LowLevelQNN.set_params", false]], "set_params() (squlearn.qnn.lowlevel_qnn_base.lowlevelqnnbase method)": [[64, "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase.set_params", false]], "set_params() (squlearn.qnn.lowlevel_qnn_pennylane.lowlevelqnnpennylane method)": [[65, "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane.set_params", false]], "set_params() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.set_params", false]], "set_params() (squlearn.qnn.qnnclassifier method)": [[53, "squlearn.qnn.QNNClassifier.set_params", false]], "set_params() (squlearn.qnn.qnnregressor method)": [[54, "squlearn.qnn.QNNRegressor.set_params", false]], "set_partial_fit_request() (squlearn.qnn.qnnclassifier method)": [[53, "squlearn.qnn.QNNClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (squlearn.qnn.qnnregressor method)": [[54, "squlearn.qnn.QNNRegressor.set_partial_fit_request", false]], "set_predict_request() (squlearn.kernel.ml.qgpr method)": [[30, "squlearn.kernel.ml.QGPR.set_predict_request", false]], "set_primitive_options() (squlearn.executor method)": [[8, "squlearn.Executor.set_primitive_options", false]], "set_score_request() (squlearn.kernel.ml.qgpc method)": [[29, "squlearn.kernel.ml.QGPC.set_score_request", false]], "set_score_request() (squlearn.kernel.ml.qgpr method)": [[30, "squlearn.kernel.ml.QGPR.set_score_request", false]], "set_score_request() (squlearn.kernel.ml.qkrr method)": [[31, "squlearn.kernel.ml.QKRR.set_score_request", false]], "set_score_request() (squlearn.kernel.ml.qsvc method)": [[32, "squlearn.kernel.ml.QSVC.set_score_request", false]], "set_score_request() (squlearn.kernel.ml.qsvr method)": [[33, "squlearn.kernel.ml.QSVR.set_score_request", false]], "set_score_request() (squlearn.qnn.qnnclassifier method)": [[53, "squlearn.qnn.QNNClassifier.set_score_request", false]], "set_score_request() (squlearn.qnn.qnnregressor method)": [[54, "squlearn.qnn.QNNRegressor.set_score_request", false]], "set_seed_for_primitive() (squlearn.executor method)": [[8, "squlearn.Executor.set_seed_for_primitive", false]], "set_shots() (squlearn.executor method)": [[8, "squlearn.Executor.set_shots", false]], "set_shots() (squlearn.qnn.lowlevel_qnn_qiskit.lowlevelqnnqiskit method)": [[67, "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit.set_shots", false]], "set_shots_for_grad() (squlearn.qnn.shotsfromrstd method)": [[55, "squlearn.qnn.ShotsFromRSTD.set_shots_for_grad", false]], "set_shots_for_loss() (squlearn.qnn.shotsfromrstd method)": [[55, "squlearn.qnn.ShotsFromRSTD.set_shots_for_loss", false]], "sglbo (class in squlearn.optimizers)": [[49, "squlearn.optimizers.SGLBO", false]], "shots (squlearn.executor attribute)": [[8, "squlearn.Executor.shots", false]], "shotsfromrstd (class in squlearn.qnn)": [[55, "squlearn.qnn.ShotsFromRSTD", false]], "simplify() (squlearn.util.optree static method)": [[70, "squlearn.util.OpTree.simplify", false]], "singlepauli (class in squlearn.observables)": [[41, "squlearn.observables.SinglePauli", false]], "singleprobability (class in squlearn.observables)": [[42, "squlearn.observables.SingleProbability", false]], "slsqp (class in squlearn.optimizers)": [[50, "squlearn.optimizers.SLSQP", false]], "spsa (class in squlearn.optimizers)": [[51, "squlearn.optimizers.SPSA", false]], "squaredloss (class in squlearn.qnn.loss)": [[61, "squlearn.qnn.loss.SquaredLoss", false]], "squlearn.encoding_circuit": [[7, "module-squlearn.encoding_circuit", false]], "squlearn.kernel.matrix": [[7, "module-squlearn.kernel.matrix", false]], "squlearn.kernel.optimization": [[7, "module-squlearn.kernel.optimization", false]], "squlearn.observables": [[7, "module-squlearn.observables", false]], "squlearn.optimizers": [[7, "module-squlearn.optimizers", false]], "squlearn.qnn": [[7, "module-squlearn.qnn", false]], "step() (squlearn.optimizers.adam method)": [[47, "squlearn.optimizers.Adam.step", false]], "step() (squlearn.optimizers.sglbo method)": [[49, "squlearn.optimizers.SGLBO.step", false]], "summedpaulis (class in squlearn.observables)": [[43, "squlearn.observables.SummedPaulis", false]], "summedprobabilities (class in squlearn.observables)": [[44, "squlearn.observables.SummedProbabilities", false]], "swap() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.swap", false]], "t() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.T", false]], "t_conjugate() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.T_conjugate", false]], "targetalignment (class in squlearn.kernel.optimization.target_alignment)": [[38, "squlearn.kernel.optimization.target_alignment.TargetAlignment", false]], "train (class in squlearn.qnn.training)": [[68, "squlearn.qnn.training.train", false]], "train_mini_batch (class in squlearn.qnn.training)": [[69, "squlearn.qnn.training.train_mini_batch", false]], "transform_to_zbasis() (squlearn.util.optree.optreeevaluate static method)": [[70, "squlearn.util.OpTree.OpTreeEvaluate.transform_to_zbasis", false]], "transpile_to_supported_instructions() (squlearn.util.optree.optreederivative static method)": [[70, "squlearn.util.OpTree.OpTreeDerivative.transpile_to_supported_instructions", false]], "transpiledencodingcircuit (class in squlearn.encoding_circuit)": [[21, "squlearn.encoding_circuit.TranspiledEncodingCircuit", false]], "u() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.U", false]], "value() (squlearn.qnn.loss.lossbase method)": [[59, "squlearn.qnn.loss.LossBase.value", false]], "value() (squlearn.qnn.loss.parameterregularizationloss method)": [[60, "squlearn.qnn.loss.ParameterRegularizationLoss.value", false]], "value() (squlearn.qnn.loss.squaredloss method)": [[61, "squlearn.qnn.loss.SquaredLoss.value", false]], "value() (squlearn.qnn.loss.varianceloss method)": [[62, "squlearn.qnn.loss.VarianceLoss.value", false]], "variance() (squlearn.qnn.loss.lossbase method)": [[59, "squlearn.qnn.loss.LossBase.variance", false]], "variance() (squlearn.qnn.loss.parameterregularizationloss method)": [[60, "squlearn.qnn.loss.ParameterRegularizationLoss.variance", false]], "variance() (squlearn.qnn.loss.squaredloss method)": [[61, "squlearn.qnn.loss.SquaredLoss.variance", false]], "variance() (squlearn.qnn.loss.varianceloss method)": [[62, "squlearn.qnn.loss.VarianceLoss.variance", false]], "varianceloss (class in squlearn.qnn.loss)": [[62, "squlearn.qnn.loss.VarianceLoss", false]], "x (squlearn.observables.isinghamiltonian attribute)": [[40, "squlearn.observables.IsingHamiltonian.X", false]], "x() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.X", false]], "y() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.Y", false]], "yz_cx_encodingcircuit (class in squlearn.encoding_circuit)": [[22, "squlearn.encoding_circuit.YZ_CX_EncodingCircuit", false]], "z (squlearn.observables.isinghamiltonian attribute)": [[40, "squlearn.observables.IsingHamiltonian.Z", false]], "z() (squlearn.encoding_circuit.layeredencodingcircuit method)": [[15, "squlearn.encoding_circuit.LayeredEncodingCircuit.Z", false]], "zz (squlearn.observables.isinghamiltonian attribute)": [[40, "squlearn.observables.IsingHamiltonian.ZZ", false]]}, "objects": {"squlearn": [[8, 0, 1, "", "Executor"], [7, 3, 0, "-", "encoding_circuit"], [7, 3, 0, "-", "observables"], [7, 3, 0, "-", "optimizers"], [7, 3, 0, "-", "qnn"]], "squlearn.Executor": [[8, 1, 1, "", "backend"], [8, 2, 1, "", "clear_estimator_cache"], [8, 2, 1, "", "clear_sampler_cache"], [8, 2, 1, "", "close_session"], [8, 2, 1, "", "create_session"], [8, 1, 1, "", "estimator"], [8, 2, 1, "", "estimator_run"], [8, 1, 1, "", "execution"], [8, 2, 1, "", "get_estimator"], [8, 2, 1, "", "get_sampler"], [8, 2, 1, "", "get_shots"], [8, 2, 1, "", "pennylane_execute"], [8, 2, 1, "", "pennylane_execute_batched"], [8, 2, 1, "", "qiskit_execute"], [8, 2, 1, "", "reset_options"], [8, 2, 1, "", "reset_options_estimator"], [8, 2, 1, "", "reset_options_sampler"], [8, 2, 1, "", "reset_shots"], [8, 1, 1, "", "sampler"], [8, 2, 1, "", "sampler_run"], [8, 1, 1, "", "service"], [8, 1, 1, "", "session"], [8, 2, 1, "", "set_options_estimator"], [8, 2, 1, "", "set_options_sampler"], [8, 2, 1, "", "set_primitive_options"], [8, 2, 1, "", "set_seed_for_primitive"], [8, 2, 1, "", "set_shots"], [8, 1, 1, "", "shots"]], "squlearn.encoding_circuit": [[9, 0, 1, "", "ChebyshevPQC"], [10, 0, 1, "", "ChebyshevRx"], [11, 0, 1, "", "ChebyshevTower"], [12, 0, 1, "", "EncodingCircuitDerivatives"], [13, 0, 1, "", "HighDimEncodingCircuit"], [14, 0, 1, "", "HubregtsenEncodingCircuit"], [15, 0, 1, "", "LayeredEncodingCircuit"], [16, 0, 1, "", "MultiControlEncodingCircuit"], [17, 0, 1, "", "ParamZFeatureMap"], [18, 0, 1, "", "PrunedEncodingCircuit"], [19, 0, 1, "", "QCNNEncodingCircuit"], [20, 0, 1, "", "QiskitEncodingCircuit"], [21, 0, 1, "", "TranspiledEncodingCircuit"], [22, 0, 1, "", "YZ_CX_EncodingCircuit"], [23, 4, 1, "", "automated_pruning"], [25, 4, 1, "", "pruning_from_QFI"]], "squlearn.encoding_circuit.ChebyshevPQC": [[9, 2, 1, "", "draw"], [9, 2, 1, "", "generate_initial_parameters"], [9, 2, 1, "", "get_cheb_indices"], [9, 2, 1, "", "get_circuit"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ChebyshevRx": [[10, 2, 1, "", "draw"], [10, 2, 1, "", "generate_initial_parameters"], [10, 2, 1, "", "get_cheb_indices"], [10, 2, 1, "", "get_circuit"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ChebyshevTower": [[11, 2, 1, "", "draw"], [11, 2, 1, "", "generate_initial_parameters"], [11, 2, 1, "", "get_circuit"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.EncodingCircuitDerivatives": [[12, 2, 1, "", "assign_parameters"], [12, 2, 1, "", "get_derivative"]], "squlearn.encoding_circuit.HighDimEncodingCircuit": [[13, 2, 1, "", "draw"], [13, 2, 1, "", "generate_initial_parameters"], [13, 2, 1, "", "get_circuit"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.HubregtsenEncodingCircuit": [[14, 2, 1, "", "draw"], [14, 2, 1, "", "generate_initial_parameters"], [14, 2, 1, "", "get_circuit"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.LayeredEncodingCircuit": [[15, 2, 1, "", "H"], [15, 2, 1, "", "I"], [15, 2, 1, "", "P"], [15, 2, 1, "", "Rx"], [15, 2, 1, "", "Ry"], [15, 2, 1, "", "Rz"], [15, 2, 1, "", "S"], [15, 2, 1, "", "S_conjugate"], [15, 2, 1, "", "T"], [15, 2, 1, "", "T_conjugate"], [15, 2, 1, "", "U"], [15, 2, 1, "", "X"], [15, 2, 1, "", "Y"], [15, 2, 1, "", "Z"], [15, 2, 1, "", "add_layer"], [15, 2, 1, "", "ch_entangling"], [15, 2, 1, "", "cp_entangling"], [15, 2, 1, "", "crx_entangling"], [15, 2, 1, "", "cry_entangling"], [15, 2, 1, "", "crz_entangling"], [15, 2, 1, "", "cu_entangling"], [15, 2, 1, "", "cx_entangling"], [15, 2, 1, "", "cy_entangling"], [15, 2, 1, "", "cz_entangling"], [15, 2, 1, "", "draw"], [15, 2, 1, "", "from_string"], [15, 2, 1, "", "generate_initial_parameters"], [15, 2, 1, "", "get_circuit"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "rxx_entangling"], [15, 2, 1, "", "ryy_entangling"], [15, 2, 1, "", "rzx_entangling"], [15, 2, 1, "", "rzz_entangling"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "swap"]], "squlearn.encoding_circuit.MultiControlEncodingCircuit": [[16, 2, 1, "", "draw"], [16, 2, 1, "", "generate_initial_parameters"], [16, 2, 1, "", "get_circuit"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.ParamZFeatureMap": [[17, 2, 1, "", "draw"], [17, 2, 1, "", "generate_initial_parameters"], [17, 2, 1, "", "get_circuit"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.PrunedEncodingCircuit": [[18, 2, 1, "", "draw"], [18, 2, 1, "", "generate_initial_parameters"], [18, 2, 1, "", "get_circuit"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.QCNNEncodingCircuit": [[19, 2, 1, "", "QCNNObservable"], [19, 2, 1, "", "build_circuit"], [19, 2, 1, "", "convolution"], [19, 2, 1, "", "default_circuit"], [19, 2, 1, "", "draw"], [19, 2, 1, "", "fully_connected"], [19, 2, 1, "", "generate_initial_parameters"], [19, 2, 1, "", "get_circuit"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "pooling"], [19, 2, 1, "", "repeat_layers"], [19, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.QiskitEncodingCircuit": [[20, 2, 1, "", "draw"], [20, 2, 1, "", "generate_initial_parameters"], [20, 2, 1, "", "get_circuit"], [20, 2, 1, "", "get_params"], [20, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.TranspiledEncodingCircuit": [[21, 2, 1, "", "draw"], [21, 2, 1, "", "generate_initial_parameters"], [21, 2, 1, "", "get_circuit"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.YZ_CX_EncodingCircuit": [[22, 2, 1, "", "draw"], [22, 2, 1, "", "generate_initial_parameters"], [22, 2, 1, "", "get_circuit"], [22, 2, 1, "", "get_params"], [22, 2, 1, "", "set_params"]], "squlearn.encoding_circuit.encoding_circuit_base": [[24, 0, 1, "", "EncodingCircuitBase"]], "squlearn.encoding_circuit.encoding_circuit_base.EncodingCircuitBase": [[24, 2, 1, "", "draw"], [24, 2, 1, "", "generate_initial_parameters"], [24, 2, 1, "", "get_circuit"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "set_params"]], "squlearn.kernel": [[7, 3, 0, "-", "matrix"], [7, 3, 0, "-", "optimization"]], "squlearn.kernel.matrix": [[26, 0, 1, "", "FidelityKernel"], [27, 0, 1, "", "ProjectedQuantumKernel"]], "squlearn.kernel.matrix.FidelityKernel": [[26, 2, 1, "", "assign_parameters"], [26, 2, 1, "", "evaluate"], [26, 2, 1, "", "evaluate_pairwise"], [26, 2, 1, "", "evaluate_with_parameters"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "set_params"]], "squlearn.kernel.matrix.ProjectedQuantumKernel": [[27, 2, 1, "", "assign_parameters"], [27, 1, 1, "", "encoding_circuit"], [27, 2, 1, "", "evaluate"], [27, 2, 1, "", "evaluate_pairwise"], [27, 2, 1, "", "evaluate_qnn"], [27, 2, 1, "", "evaluate_with_parameters"], [27, 2, 1, "", "get_params"], [27, 1, 1, "", "measurement"], [27, 1, 1, "", "name_hyper_parameters"], [27, 1, 1, "", "num_features"], [27, 1, 1, "", "num_hyper_parameters"], [27, 1, 1, "", "num_parameters"], [27, 1, 1, "", "num_qubits"], [27, 1, 1, "", "outer_kernel"], [27, 1, 1, "", "parameters"], [27, 2, 1, "", "set_params"]], "squlearn.kernel.matrix.kernel_matrix_base": [[28, 0, 1, "", "KernelMatrixBase"]], "squlearn.kernel.matrix.kernel_matrix_base.KernelMatrixBase": [[28, 2, 1, "", "assign_parameters"], [28, 2, 1, "", "evaluate"], [28, 2, 1, "", "evaluate_pairwise"], [28, 2, 1, "", "evaluate_with_parameters"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "set_params"]], "squlearn.kernel.ml": [[29, 0, 1, "", "QGPC"], [30, 0, 1, "", "QGPR"], [31, 0, 1, "", "QKRR"], [32, 0, 1, "", "QSVC"], [33, 0, 1, "", "QSVR"]], "squlearn.kernel.ml.QGPC": [[29, 2, 1, "", "fit"], [29, 2, 1, "", "get_metadata_routing"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "log_marginal_likelihood"], [29, 2, 1, "", "predict"], [29, 2, 1, "", "predict_proba"], [29, 2, 1, "", "score"], [29, 2, 1, "", "set_params"], [29, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QGPR": [[30, 2, 1, "", "calculate_cov_and_mean"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "get_metadata_routing"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "score"], [30, 2, 1, "", "set_params"], [30, 2, 1, "", "set_predict_request"], [30, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QKRR": [[31, 2, 1, "", "fit"], [31, 2, 1, "", "get_metadata_routing"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "score"], [31, 2, 1, "", "set_params"], [31, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QSVC": [[32, 2, 1, "", "decision_function"], [32, 2, 1, "", "fit"], [32, 2, 1, "", "get_metadata_routing"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "predict"], [32, 2, 1, "", "predict_log_proba"], [32, 2, 1, "", "predict_proba"], [32, 2, 1, "", "score"], [32, 2, 1, "", "set_fit_request"], [32, 2, 1, "", "set_params"], [32, 2, 1, "", "set_score_request"]], "squlearn.kernel.ml.QSVR": [[33, 2, 1, "", "fit"], [33, 2, 1, "", "get_metadata_routing"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "predict"], [33, 2, 1, "", "score"], [33, 2, 1, "", "set_fit_request"], [33, 2, 1, "", "set_params"], [33, 2, 1, "", "set_score_request"]], "squlearn.kernel.optimization.kernel_loss_base": [[34, 0, 1, "", "KernelLossBase"]], "squlearn.kernel.optimization.kernel_loss_base.KernelLossBase": [[34, 2, 1, "", "compute"]], "squlearn.kernel.optimization.kernel_optimization_base": [[35, 0, 1, "", "KernelOptimizerBase"]], "squlearn.kernel.optimization.kernel_optimization_base.KernelOptimizerBase": [[35, 2, 1, "", "run_optimization"]], "squlearn.kernel.optimization.kernel_optimizer": [[36, 0, 1, "", "KernelOptimizer"]], "squlearn.kernel.optimization.kernel_optimizer.KernelOptimizer": [[36, 2, 1, "", "run_optimization"]], "squlearn.kernel.optimization.negative_log_likelihood": [[37, 0, 1, "", "NLL"]], "squlearn.kernel.optimization.negative_log_likelihood.NLL": [[37, 2, 1, "", "compute"]], "squlearn.kernel.optimization.target_alignment": [[38, 0, 1, "", "TargetAlignment"]], "squlearn.kernel.optimization.target_alignment.TargetAlignment": [[38, 2, 1, "", "compute"]], "squlearn.observables": [[39, 0, 1, "", "CustomObservable"], [40, 0, 1, "", "IsingHamiltonian"], [41, 0, 1, "", "SinglePauli"], [42, 0, 1, "", "SingleProbability"], [43, 0, 1, "", "SummedPaulis"], [44, 0, 1, "", "SummedProbabilities"]], "squlearn.observables.CustomObservable": [[39, 2, 1, "", "generate_initial_parameters"], [39, 2, 1, "", "get_operator"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "get_pauli"], [39, 2, 1, "", "get_pauli_mapped"], [39, 1, 1, "", "num_parameters"], [39, 1, 1, "", "num_qubits"], [39, 1, 1, "", "operator_string"], [39, 1, 1, "", "parameterized"], [39, 2, 1, "", "set_map"], [39, 2, 1, "", "set_params"]], "squlearn.observables.IsingHamiltonian": [[40, 1, 1, "", "I"], [40, 1, 1, "", "X"], [40, 1, 1, "", "Z"], [40, 1, 1, "", "ZZ"], [40, 2, 1, "", "generate_initial_parameters"], [40, 2, 1, "", "get_operator"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "get_pauli"], [40, 2, 1, "", "get_pauli_mapped"], [40, 1, 1, "", "num_parameters"], [40, 1, 1, "", "num_qubits"], [40, 2, 1, "", "set_map"], [40, 2, 1, "", "set_params"]], "squlearn.observables.SinglePauli": [[41, 2, 1, "", "generate_initial_parameters"], [41, 2, 1, "", "get_operator"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "get_pauli"], [41, 2, 1, "", "get_pauli_mapped"], [41, 1, 1, "", "num_parameters"], [41, 1, 1, "", "num_qubits"], [41, 1, 1, "", "op_str"], [41, 1, 1, "", "parameterized"], [41, 1, 1, "", "qubit"], [41, 2, 1, "", "set_map"], [41, 2, 1, "", "set_params"]], "squlearn.observables.SingleProbability": [[42, 2, 1, "", "generate_initial_parameters"], [42, 2, 1, "", "get_operator"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "get_pauli"], [42, 2, 1, "", "get_pauli_mapped"], [42, 1, 1, "", "num_parameters"], [42, 1, 1, "", "num_qubits"], [42, 1, 1, "", "one_state"], [42, 1, 1, "", "parameterized"], [42, 1, 1, "", "qubit"], [42, 2, 1, "", "set_map"], [42, 2, 1, "", "set_params"]], "squlearn.observables.SummedPaulis": [[43, 1, 1, "", "full_sum"], [43, 2, 1, "", "generate_initial_parameters"], [43, 2, 1, "", "get_operator"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "get_pauli"], [43, 2, 1, "", "get_pauli_mapped"], [43, 1, 1, "", "include_identity"], [43, 1, 1, "", "num_parameters"], [43, 1, 1, "", "num_qubits"], [43, 1, 1, "", "op_str"], [43, 2, 1, "", "set_map"], [43, 2, 1, "", "set_params"]], "squlearn.observables.SummedProbabilities": [[44, 1, 1, "", "full_sum"], [44, 2, 1, "", "generate_initial_parameters"], [44, 2, 1, "", "get_operator"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "get_pauli"], [44, 2, 1, "", "get_pauli_mapped"], [44, 1, 1, "", "include_identity"], [44, 1, 1, "", "num_parameters"], [44, 1, 1, "", "num_qubits"], [44, 1, 1, "", "one_state"], [44, 2, 1, "", "set_map"], [44, 2, 1, "", "set_params"]], "squlearn.observables.observable_base": [[45, 0, 1, "", "ObservableBase"]], "squlearn.observables.observable_base.ObservableBase": [[45, 2, 1, "", "generate_initial_parameters"], [45, 2, 1, "", "get_operator"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "get_pauli"], [45, 2, 1, "", "get_pauli_mapped"], [45, 1, 1, "", "num_parameters"], [45, 1, 1, "", "num_qubits"], [45, 2, 1, "", "set_map"], [45, 2, 1, "", "set_params"]], "squlearn.observables.observable_derivatives": [[46, 0, 1, "", "ObservableDerivatives"]], "squlearn.observables.observable_derivatives.ObservableDerivatives": [[46, 2, 1, "", "assign_parameters"], [46, 2, 1, "", "get_derivative"], [46, 2, 1, "", "get_operator"], [46, 2, 1, "", "get_operator_squared"], [46, 1, 1, "", "num_operators"], [46, 1, 1, "", "num_parameters"], [46, 1, 1, "", "parameter_vector"]], "squlearn.optimizers": [[47, 0, 1, "", "Adam"], [48, 0, 1, "", "LBFGSB"], [49, 0, 1, "", "SGLBO"], [50, 0, 1, "", "SLSQP"], [51, 0, 1, "", "SPSA"]], "squlearn.optimizers.Adam": [[47, 2, 1, "", "minimize"], [47, 2, 1, "", "reset"], [47, 2, 1, "", "set_callback"], [47, 2, 1, "", "step"]], "squlearn.optimizers.LBFGSB": [[48, 2, 1, "", "minimize"], [48, 2, 1, "", "set_callback"]], "squlearn.optimizers.SGLBO": [[49, 2, 1, "", "minimize"], [49, 2, 1, "", "reset"], [49, 2, 1, "", "set_callback"], [49, 2, 1, "", "step"]], "squlearn.optimizers.SLSQP": [[50, 2, 1, "", "minimize"], [50, 2, 1, "", "set_callback"]], "squlearn.optimizers.SPSA": [[51, 2, 1, "", "minimize"], [51, 2, 1, "", "set_callback"]], "squlearn.optimizers.optimizer_base": [[52, 0, 1, "", "OptimizerBase"]], "squlearn.optimizers.optimizer_base.OptimizerBase": [[52, 2, 1, "", "minimize"], [52, 2, 1, "", "set_callback"]], "squlearn.qnn": [[53, 0, 1, "", "QNNClassifier"], [54, 0, 1, "", "QNNRegressor"], [55, 0, 1, "", "ShotsFromRSTD"], [57, 0, 1, "", "get_lr_decay"], [58, 0, 1, "", "get_variance_fac"]], "squlearn.qnn.QNNClassifier": [[53, 2, 1, "", "fit"], [53, 2, 1, "", "get_metadata_routing"], [53, 2, 1, "", "get_params"], [53, 2, 1, "", "partial_fit"], [53, 2, 1, "", "predict"], [53, 2, 1, "", "predict_proba"], [53, 2, 1, "", "score"], [53, 2, 1, "", "set_fit_request"], [53, 2, 1, "", "set_params"], [53, 2, 1, "", "set_partial_fit_request"], [53, 2, 1, "", "set_score_request"]], "squlearn.qnn.QNNRegressor": [[54, 2, 1, "", "fit"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "partial_fit"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "score"], [54, 2, 1, "", "set_fit_request"], [54, 2, 1, "", "set_params"], [54, 2, 1, "", "set_partial_fit_request"], [54, 2, 1, "", "set_score_request"]], "squlearn.qnn.ShotsFromRSTD": [[55, 2, 1, "", "reset_shots"], [55, 2, 1, "", "set_executor"], [55, 2, 1, "", "set_shots_for_grad"], [55, 2, 1, "", "set_shots_for_loss"]], "squlearn.qnn.base_qnn": [[56, 0, 1, "", "BaseQNN"]], "squlearn.qnn.base_qnn.BaseQNN": [[56, 2, 1, "", "fit"], [56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "set_fit_request"], [56, 2, 1, "", "set_params"]], "squlearn.qnn.loss": [[59, 0, 1, "", "LossBase"], [60, 0, 1, "", "ParameterRegularizationLoss"], [61, 0, 1, "", "SquaredLoss"], [62, 0, 1, "", "VarianceLoss"]], "squlearn.qnn.loss.LossBase": [[59, 2, 1, "", "gradient"], [59, 2, 1, "", "set_opt_param_op"], [59, 2, 1, "", "value"], [59, 2, 1, "", "variance"]], "squlearn.qnn.loss.ParameterRegularizationLoss": [[60, 2, 1, "", "gradient"], [60, 2, 1, "", "set_opt_param_op"], [60, 2, 1, "", "value"], [60, 2, 1, "", "variance"]], "squlearn.qnn.loss.SquaredLoss": [[61, 2, 1, "", "gradient"], [61, 2, 1, "", "set_opt_param_op"], [61, 2, 1, "", "value"], [61, 2, 1, "", "variance"]], "squlearn.qnn.loss.VarianceLoss": [[62, 2, 1, "", "gradient"], [62, 2, 1, "", "set_opt_param_op"], [62, 2, 1, "", "value"], [62, 2, 1, "", "variance"]], "squlearn.qnn.lowlevel_qnn": [[63, 0, 1, "", "LowLevelQNN"]], "squlearn.qnn.lowlevel_qnn.LowLevelQNN": [[63, 2, 1, "", "evaluate"], [63, 2, 1, "", "get_params"], [63, 2, 1, "", "gradient"], [63, 2, 1, "", "set_params"]], "squlearn.qnn.lowlevel_qnn_base": [[64, 0, 1, "", "LowLevelQNNBase"]], "squlearn.qnn.lowlevel_qnn_base.LowLevelQNNBase": [[64, 2, 1, "", "evaluate"], [64, 2, 1, "", "get_params"], [64, 2, 1, "", "gradient"], [64, 2, 1, "", "set_params"]], "squlearn.qnn.lowlevel_qnn_pennylane": [[65, 0, 1, "", "LowLevelQNNPennyLane"]], "squlearn.qnn.lowlevel_qnn_pennylane.LowLevelQNNPennyLane": [[65, 2, 1, "", "evaluate"], [65, 1, 1, "", "features"], [65, 2, 1, "", "get_params"], [65, 2, 1, "", "gradient"], [65, 1, 1, "", "multiple_output"], [65, 1, 1, "", "num_features"], [65, 1, 1, "", "num_operator"], [65, 1, 1, "", "num_parameters"], [65, 1, 1, "", "num_parameters_observable"], [65, 1, 1, "", "num_qubits"], [65, 1, 1, "", "parameters"], [65, 1, 1, "", "parameters_operator"], [65, 2, 1, "", "set_params"]], "squlearn.qnn.lowlevel_qnn_qiskit": [[66, 0, 1, "", "Expec"], [67, 0, 1, "", "LowLevelQNNQiskit"]], "squlearn.qnn.lowlevel_qnn_qiskit.Expec": [[66, 2, 1, "", "from_parameter"], [66, 2, 1, "", "from_parameter_vector"], [66, 2, 1, "", "from_string"], [66, 2, 1, "", "from_tuple"], [66, 2, 1, "", "from_variable"]], "squlearn.qnn.lowlevel_qnn_qiskit.LowLevelQNNQiskit": [[67, 2, 1, "", "evaluate"], [67, 2, 1, "", "evaluate_dfdop"], [67, 2, 1, "", "evaluate_dfdopdx"], [67, 2, 1, "", "evaluate_dfdp"], [67, 2, 1, "", "evaluate_dfdpdx"], [67, 2, 1, "", "evaluate_dfdx"], [67, 2, 1, "", "evaluate_dfdxdx"], [67, 2, 1, "", "evaluate_diff_tuple"], [67, 2, 1, "", "evaluate_f"], [67, 2, 1, "", "evaluate_from_string"], [67, 2, 1, "", "evaluate_laplace"], [67, 2, 1, "", "evaluate_laplace_dop"], [67, 2, 1, "", "evaluate_laplace_dp"], [67, 2, 1, "", "evaluate_probabilities"], [67, 2, 1, "", "evaluate_var"], [67, 2, 1, "", "evaluate_variance"], [67, 1, 1, "", "features"], [67, 2, 1, "", "get_optree_from_expec"], [67, 2, 1, "", "get_optree_from_string"], [67, 2, 1, "", "get_params"], [67, 2, 1, "", "get_shots"], [67, 2, 1, "", "gradient"], [67, 1, 1, "", "multiple_output"], [67, 1, 1, "", "num_features"], [67, 1, 1, "", "num_operator"], [67, 1, 1, "", "num_parameters"], [67, 1, 1, "", "num_parameters_observable"], [67, 1, 1, "", "num_qubits"], [67, 1, 1, "", "parameters"], [67, 1, 1, "", "parameters_operator"], [67, 2, 1, "", "reset_shots"], [67, 2, 1, "", "set_params"], [67, 2, 1, "", "set_shots"]], "squlearn.qnn.training": [[68, 0, 1, "", "train"], [69, 0, 1, "", "train_mini_batch"]], "squlearn.util": [[70, 0, 1, "", "OpTree"]], "squlearn.util.OpTree": [[70, 0, 1, "", "OpTreeDerivative"], [70, 0, 1, "", "OpTreeEvaluate"], [70, 2, 1, "", "assign_parameters"], [70, 1, 1, "", "derivative"], [70, 1, 1, "", "evaluate"], [70, 2, 1, "", "gen_expectation_tree"], [70, 2, 1, "", "get_first_leaf"], [70, 2, 1, "", "get_num_nested_lists"], [70, 2, 1, "", "get_number_of_leafs"], [70, 2, 1, "", "get_tree_depth"], [70, 2, 1, "", "hash_circuit"], [70, 2, 1, "", "hash_operator"], [70, 2, 1, "", "simplify"]], "squlearn.util.OpTree.OpTreeDerivative": [[70, 2, 1, "", "differentiate"], [70, 2, 1, "", "differentiate_v2"], [70, 2, 1, "", "transpile_to_supported_instructions"]], "squlearn.util.OpTree.OpTreeEvaluate": [[70, 2, 1, "", "evaluate_tree_with_estimator"], [70, 2, 1, "", "evaluate_tree_with_sampler"], [70, 2, 1, "", "evaluate_with_estimator"], [70, 2, 1, "", "evaluate_with_sampler"], [70, 2, 1, "", "transform_to_zbasis"]], "squlearn.util.optree": [[71, 0, 1, "", "OpTreeCircuit"], [72, 0, 1, "", "OpTreeContainer"], [73, 0, 1, "", "OpTreeExpectationValue"], [74, 0, 1, "", "OpTreeList"], [75, 0, 1, "", "OpTreeMeasuredOperator"], [76, 0, 1, "", "OpTreeOperator"], [77, 0, 1, "", "OpTreeSum"], [78, 0, 1, "", "OpTreeValue"]], "squlearn.util.optree.OpTreeCircuit": [[71, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeContainer": [[72, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeExpectationValue": [[73, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeList": [[74, 2, 1, "", "append"], [74, 2, 1, "", "copy"], [74, 2, 1, "", "remove"]], "squlearn.util.optree.OpTreeMeasuredOperator": [[75, 2, 1, "", "copy"], [75, 2, 1, "", "measure_circuit"]], "squlearn.util.optree.OpTreeOperator": [[76, 2, 1, "", "copy"]], "squlearn.util.optree.OpTreeSum": [[77, 2, 1, "", "append"], [77, 2, 1, "", "copy"], [77, 2, 1, "", "remove"]], "squlearn.util.optree.OpTreeValue": [[78, 2, 1, "", "copy"]], "squlearn.util.pennylane": [[79, 0, 1, "", "PennyLaneCircuit"]], "squlearn.util.pennylane.PennyLaneCircuit": [[79, 2, 1, "", "build_circuit_instructions"], [79, 2, 1, "", "build_observable_instructions"], [79, 2, 1, "", "build_pennylane_circuit"], [79, 1, 1, "", "circuit_arguments"], [79, 1, 1, "", "circuit_parameter_dimensions"], [79, 1, 1, "", "circuit_parameter_names"], [79, 2, 1, "", "draw"], [79, 2, 1, "", "get_pennylane_circuit"], [79, 1, 1, "", "hash"], [79, 1, 1, "", "observable_parameter_dimension"], [79, 1, 1, "", "observable_parameter_names"], [79, 1, 1, "", "pennylane_circuit"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"], "3": ["py", "module", "Python module"], "4": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:attribute", "2": "py:method", "3": "py:module", "4": "py:function"}, "terms": {"": [0, 1, 2, 3, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 30, 31, 35, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 54, 63, 64, 67, 70, 80, 82, 84], "0": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 19, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 40, 41, 42, 44, 46, 47, 49, 53, 54, 55, 56, 57, 58, 60, 62, 74, 77, 80, 81, 82, 83, 84], "00": [2, 27], "000": 2, "00000000e": 27, "0001": [1, 2], "001": [0, 1, 84], "00138": 30, "00303197e": [], "005": [2, 60, 62, 84], "01": [2, 3, 27, 47, 49, 54, 84], "01039v3": 22, "01639": [2, 9, 55, 58, 84], "01mq22002a": 5, "01mq22003d": 5, "02": [1, 2, 27], "020475311434476e": 1, "021": 0, "02276": 26, "02276v1": [14, 26, 27, 38, 82], "023": 30, "02495751e": 27, "02765489": 3, "03": 27, "03318152e": 27, "03429419e": 27, "03556262e": [], "03804586e": 27, "03hy110d": 5, "04": 27, "040309": [23, 25, 80], "040504": [26, 82], "05": [1, 27, 47], "05x367": 15, "06": [30, 31], "06270471e": 27, "06492028e": [], "06539398e": [], "07037611": 29, "07318673": 29, "07611169e": [], "07676122": 2, "08": 84, "0862532": 3, "08990": 5, "09696586": 29, "09988938": 29, "0e": 31, "0x0000016f98366c20": 1, "0x0000016f9872ef20": 1, "0x0000016f9c622ec0": 1, "0x000001804d3f0a90": 0, "0x16f984110f0": 1, "1": [0, 1, 2, 3, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 26, 27, 29, 30, 31, 32, 33, 36, 37, 38, 40, 42, 44, 46, 47, 49, 53, 54, 55, 56, 58, 74, 77, 80, 82, 83, 84], "10": [0, 1, 2, 3, 5, 8, 23, 25, 27, 30, 49, 69, 80, 81, 84], "100": [1, 2, 32, 33, 47, 49, 55, 82, 84], "1000": [0, 8, 81], "10000": [2, 84], "10056955e": [], "1007": 30, "1038": 0, "1040x367": 80, "10471547e": [], "11": [0, 2, 18], "11020v2": 82, "1103": [23, 25, 80], "112": 82, "1123": 84, "12": [0, 1, 2, 6, 27, 82], "1207": [15, 80], "122": 26, "1234": 81, "1273": 19, "1278": 19, "13": [0, 2], "13162v3": 82, "13218404e": 27, "1335": [21, 80], "13690848": 3, "1374": 80, "14": [0, 2, 31], "1458": 15, "14935177e": 27, "15": [2, 18, 19], "15049479e": [], "16": [2, 53, 54], "161": 13, "16173581e": 27, "17": [2, 6], "17113443e": 27, "18": 2, "18117369e": 27, "19": 2, "1e": [1, 23, 25, 30, 31, 47, 49], "1e0": 1, "1e1": 1, "1e2": 1, "2": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 60, 61, 67, 80, 81, 82, 83, 84], "20": [1, 2, 36, 49, 84], "200": [0, 1], "2006": [30, 37], "2019": [19, 26, 82], "2021": [0, 13, 14, 22, 26, 27, 38, 82], "2023": [2, 5, 9, 55, 58, 82, 84], "209": 26, "2101": 82, "2105": [14, 26, 27, 38, 82], "2108": 22, "2110": 82, "212": 26, "21275148e": [], "2210": 20, "22539": 0, "22x367": [15, 80], "23": [13, 30, 31, 33, 54], "2306": [2, 9, 55, 58, 84], "2311": 5, "24359999e": 27, "25489244e": [], "2631": [0, 27, 82], "26389174e": [], "27": 38, "278": [20, 80], "27936704": 3, "28": 38, "28376660e": [], "28966609e": [], "29117061e": 27, "29209090e": [], "2_i": 12, "2d": [26, 28], "2\u03c0": 37, "3": [0, 1, 2, 3, 5, 6, 9, 13, 15, 20, 21, 26, 27, 29, 30, 31, 32, 33, 46, 49, 53, 54, 56, 80, 82, 83, 84], "30": 0, "30451335e": 27, "30453939e": [], "31753224e": 27, "32": 0, "32895358e": [], "33": [0, 53, 54], "33164216e": 27, "33x284": [20, 80], "33x367": 15, "370": 80, "39": [1, 2], "39188948": 3, "3f": 1, "4": [0, 1, 2, 3, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 31, 37, 53, 54, 61, 65, 67, 80, 82, 83, 84], "40": [0, 15], "40284344e": [], "40412140e": [], "40862079e": 27, "40908953e": 27, "41295122e": 27, "41717632": 2, "42": [0, 1, 6, 15, 53, 54], "43506913e": 27, "44x367": 80, "45003258e": 27, "45260112e": 27, "45667715": 3, "48550": 5, "493": 31, "5": [0, 1, 2, 3, 6, 13, 21, 27, 31, 37, 42, 44, 53, 54, 80, 82, 83, 84], "50": 3, "5000": [55, 81], "50729076e": 27, "50876202": 2, "51218174e": 27, "51639750e": [], "538": [15, 20, 80], "53871751e": 27, "55221653e": 27, "55x1204": 20, "567": 26, "57133543e": 27, "58332949e": [], "59266487": 3, "6": [0, 1, 2, 6, 27, 30, 31, 47, 49, 83, 84], "60": 53, "600": 81, "60047492e": 27, "60229489e": 27, "60622125e": 27, "61x367": 84, "62334884e": 27, "63003532e": 27, "63060200e": [], "63412231e": 27, "63991662e": [], "64": 0, "64347122e": 27, "64409107e": [], "64628971": 2, "65135232": 2, "65935051": 3, "66006118e": [], "66524017": 2, "66567045": 2, "667": 80, "67203657e": 27, "67567859e": [], "67it": 2, "68495665e": 27, "68686057e": [], "69549321e": [], "7": [0, 1, 2, 13, 18, 27], "71305173e": [], "71932650e": [], "72102917e": [], "72947802e": [], "73683345e": [], "76029417e": 27, "76604906e": [], "76732236e": 27, "76864160e": [], "77093379e": 27, "774x367": 18, "77663043e": [], "78091979e": 27, "78741939e": 27, "79434396e": 27, "79975178e": 27, "8": [0, 1, 2, 27, 37, 47], "80314475": 29, "81x451": [21, 80], "82020259e": [], "82170272e": [], "82838279e": [], "84914015": 2, "85297303e": [], "85342043e": 27, "85587441e": [], "85643716": 29, "86900791e": [], "872": 18, "87684165e": [], "889": [15, 18, 80, 84], "89068908e": [], "89088529": 2, "89861385e": [], "8h": 8, "9": [0, 1, 2, 5, 6, 27, 30, 47, 53, 54], "906x200": 80, "92": 1, "93201381e": [], "94664274": 2, "94685078": 2, "95940892e": 27, "96": 3, "96012197": 2, "9671641791044776": 0, "97004195": 2, "9787878787878788": 0, "98": 29, "99": 47, "99430829e": 27, "99631079": 3, "99999685": 3, "999999978217105": 1, "A": [0, 2, 3, 5, 8, 9, 11, 13, 15, 19, 20, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 53, 54, 55, 56, 58, 70, 71, 72, 74, 76, 77, 78, 80, 81, 82, 84], "As": [27, 82], "At": [19, 82], "BY": 0, "But": 82, "By": [3, 5, 19, 30, 31, 32, 33, 80, 82], "For": [0, 1, 2, 3, 5, 8, 30, 31, 32, 33, 53, 54, 80, 82, 84], "IN": 19, "If": [0, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 53, 54, 56, 63, 64, 65, 66, 67, 68, 69, 70, 81, 82, 83], "In": [0, 1, 2, 3, 8, 29, 32, 53, 65, 67, 80, 81, 82, 83, 84], "Ising": [40, 46, 83], "It": [0, 2, 8, 11, 15, 19, 32, 33, 53, 54, 80, 81, 83, 84], "Near": [14, 26, 27, 38, 82], "No": [20, 81], "On": [0, 1], "One": 22, "THE": 19, "TO": 19, "The": [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 53, 54, 55, 56, 61, 63, 64, 65, 67, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85], "Then": [2, 84], "There": [3, 5, 80, 84], "These": [0, 1, 26, 32, 33, 82], "To": [0, 1, 2, 3, 5, 6, 80, 82, 83, 84], "Will": [53, 54], "With": [0, 1, 20, 83, 84], "_": [0, 12, 82], "__init__": 3, "_cach": [8, 81], "_circuit_kei": 70, "_i": [2, 40, 42, 43, 44, 62], "_initial_sampl": 3, "_j": 40, "_k": 82, "_observable_kei": 70, "_regularize_matrix": 28, "aa": 15, "abelian_group": 70, "abl": 82, "abort": [8, 81], "about": [3, 8, 31, 32, 33], "abov": [0, 1, 13, 81, 82, 84], "abstract": [45, 59, 63, 64], "accept": [18, 80], "access": [2, 12, 80, 81, 82], "accord": [0, 32, 33, 53, 54, 80], "accordingli": 31, "account": 2, "accumul": 3, "accuraci": [0, 3, 29, 32, 53, 84], "accuracy_scor": 0, "achiev": [2, 15, 27, 81, 83, 84], "acq_func": 3, "acquisit": [3, 49], "act": [19, 41, 84], "action": [5, 81], "activ": [2, 19, 81], "actual": [2, 31, 34, 35], "ad": [2, 15, 17, 29, 30, 31, 32, 33, 53, 54, 56, 70, 80, 83, 84], "adam": [2, 36, 57, 82], "adam_opt": 82, "adapt": [2, 3, 49, 82], "add": [0, 1, 3, 15, 19, 70, 83], "add_ax": 1, "add_lay": [15, 80], "added_ob": 83, "addit": [1, 2, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 32, 33, 48, 50, 51, 63, 79, 82, 84], "addition": [0, 2, 6, 15, 19, 29, 32, 33, 40, 84], "additive_chi2": 27, "address": 2, "adequ": 1, "adher": 84, "adjust": [2, 11, 15, 32, 33, 57, 58, 65, 67, 80, 81, 82, 83], "adress": 19, "advanc": 2, "advantag": 0, "aer": [2, 6, 8, 81], "aer_simul": 81, "affair": 5, "affect": 2, "affirm": 2, "after": [0, 13, 19, 26, 27, 31, 55, 81, 82, 83], "afterward": [2, 15], "again": [0, 13, 19], "aim": [2, 5], "akin": 84, "al": [0, 13, 14, 26, 27, 38, 82], "algebra": 82, "algorithm": [0, 1, 3, 23, 25, 27, 30, 80, 81, 82, 84], "alia": [29, 30, 31, 32, 33, 53, 54, 56, 70], "align": [2, 38, 82], "all": [0, 1, 2, 8, 15, 19, 26, 27, 29, 30, 31, 33, 40, 44, 54, 60, 61, 70, 79, 80, 81, 82, 83], "allevi": 0, "allow": [0, 1, 2, 3, 12, 29, 30, 31, 32, 33, 39, 40, 43, 53, 54, 56, 80, 81, 83, 84], "along": [5, 58, 82, 84], "alongsid": 1, "alpha": [2, 3, 9, 10, 11, 27, 31, 60, 62, 84], "alpha_": 58, "alreadi": [2, 19, 53, 54, 56, 82], "also": [0, 1, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 70, 74, 77, 79, 80, 81, 82, 83, 84], "alter": 84, "altern": [5, 11, 19, 20, 84], "although": 83, "alwai": [30, 31, 33, 54], "amazon": [8, 81], "ambigu": 82, "among": [82, 84], "an": [0, 1, 2, 3, 8, 19, 20, 27, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 57, 66, 67, 70, 73, 75, 76, 78, 80, 81, 82, 84], "analit": 3, "analog": [30, 31, 82, 84], "analysi": 82, "angl": 0, "ani": [2, 8, 72, 81], "annot": 1, "anoth": 15, "ansatz": 82, "anymor": 19, "apach": 5, "api": 5, "appeal": 3, "appear": [9, 10, 29, 32], "append": [1, 27, 74, 77], "appli": [0, 2, 3, 15, 19, 27, 32, 33, 46, 70, 74, 75, 77, 80, 82, 84], "applic": [5, 80, 82, 84], "approach": [2, 3, 80, 82, 84], "appropri": [26, 84], "approxim": [3, 61, 82], "aqua": 5, "ar": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 56, 63, 64, 65, 67, 68, 69, 70, 74, 77, 80, 81, 82, 83, 84], "arang": [0, 2, 54, 84], "arbitrari": [72, 80, 83], "arbitrarili": [30, 31, 33, 54], "arcco": [0, 9, 10, 15, 80], "architectur": [5, 84], "area": 3, "arg": [3, 8, 27, 63], "arg_tupl": 8, "argmin": 3, "argument": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 32, 33, 55, 63, 79, 81, 82, 84], "arithmet": 80, "arn": [8, 81], "around": 9, "arrai": [1, 3, 8, 23, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 47, 53, 54, 70, 74], "arrang": 11, "arrow": 81, "art": 0, "articl": 30, "artifici": [2, 84], "arxiv": [2, 5, 9, 14, 22, 26, 27, 38, 55, 58, 82, 84], "ascend": 0, "aspect": 2, "assess": 84, "assign": [0, 12, 13, 20, 26, 27, 28, 29, 46, 70, 82], "assign_paramet": [12, 26, 27, 28, 29, 30, 36, 46, 70, 82], "associ": [15, 66, 83], "assum": [2, 30, 31, 32, 33, 82], "assur": [30, 31], "attain": [82, 84], "attempt": 82, "attribut": [28, 29, 32, 81], "auto": [0, 20], "autom": [5, 23, 80], "automat": [6, 8, 12, 13, 20, 46, 80, 81, 84], "automated_prun": 80, "autoqml": 5, "avail": [3, 5, 15, 20, 31, 80, 81, 82, 83], "averag": [47, 49], "avoid": [8, 9, 47, 81], "aw": [8, 81], "ax": [1, 15, 18, 20, 21, 80, 84], "axi": [1, 9], "b": [3, 15, 40, 43, 44, 48, 58, 84], "b_i": [40, 43, 44], "back": 0, "backend": [5, 8, 21, 26, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 80, 81, 82, 83], "backend_noise_model": 2, "background": [0, 31], "backward": 19, "bad": 0, "balanc": 3, "bar": [53, 54, 56], "base": [0, 1, 2, 3, 8, 11, 17, 18, 23, 24, 26, 27, 28, 30, 45, 49, 52, 53, 54, 56, 58, 59, 63, 64, 65, 67, 80, 81, 82, 83, 84], "baseestim": [8, 70], "baseestimatorv1": [8, 70], "baseqnn": [53, 54], "basesampl": [8, 70], "basesamplerv1": [8, 70], "basi": [9, 70, 83], "basic": 82, "basis_g": 2, "batch": [8, 53, 54, 56, 69], "batch_siz": [53, 54, 56, 69, 84], "bayesian": [4, 5, 30, 49], "bayesopt": 3, "becaus": [0, 2, 30, 31, 32, 33, 54], "becom": 0, "bee": 19, "been": [1, 2, 82, 84], "befor": [5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 30, 53, 54, 56, 69, 81, 83, 84], "begin": [0, 19, 58, 84], "beginn": 5, "behind": 0, "being": [0, 42, 81], "below": [12, 15, 29, 81, 82], "benefici": 84, "benefit": [0, 81], "best": [1, 3, 15, 30, 31, 33, 54], "best_estim": 1, "best_estimator_": 1, "best_params_": 15, "best_score_": 1, "bet": 82, "beta": [55, 84], "beta_1": 47, "beta_2": 47, "beta_i": 2, "better": 1, "between": [0, 2, 3, 5, 9, 17, 27, 61, 80, 81, 82, 84], "beyond": 82, "bfg": [3, 48, 84], "big": 12, "bigg": 27, "bigger": [19, 84], "binari": [29, 44], "bit": 19, "black": 3, "blackbox_funct": 3, "bleed": 5, "block": [11, 30, 84], "blue": [3, 84], "blueprintcircuit": 20, "bo_acq_func": 49, "bo_aqc_optim": 49, "bo_bound": 49, "bo_bounds_fac": 49, "bo_n_cal": 49, "bo_n_initial_point": 49, "bo_nois": 49, "bo_x0_point": 49, "boldsymbol": [3, 82], "bool": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 53, 54, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 84], "both": [0, 1, 2, 5, 8, 70, 80, 81, 82, 84], "bound": [3, 47, 48, 49, 50, 51, 52, 55], "boundari": 0, "box": 3, "bra": [42, 44, 82], "bracket": 15, "braket": [8, 81, 82], "branch": 70, "break_ti": 0, "bridg": [5, 82], "broughton": [0, 27], "build": [5, 10, 19, 79, 80, 81, 83, 84], "build_circuit": 19, "build_circuit_instruct": 79, "build_observable_instruct": 79, "build_pennylane_circuit": 79, "built": [19, 79], "c": [0, 1, 22, 29, 32, 33, 40, 84], "c_i": [40, 43], "ca": 81, "cach": [2, 8, 12, 27, 46, 53, 54, 56, 63, 64, 65, 67, 79, 80, 81], "cache_dir": [8, 81], "cache_s": [0, 1], "calcul": [0, 1, 2, 27, 30, 46, 59, 60, 61, 62, 70, 80, 82, 83, 84], "calculate_cov_and_mean": 30, "call": [0, 2, 8, 15, 19, 20, 29, 30, 31, 32, 33, 54, 79, 80, 82, 84], "callabl": [8, 15, 20, 21, 47, 48, 49, 50, 51, 52, 53, 54, 56, 60, 62, 74, 77, 79, 84], "callback": [47, 48, 49, 50, 51, 52, 53, 54, 56], "can": [0, 1, 2, 3, 5, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 26, 27, 29, 30, 31, 32, 33, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49, 53, 54, 56, 57, 65, 67, 70, 72, 74, 77, 79, 80, 81, 82, 83, 84], "cancel": 81, "cannot": 3, "capabl": [2, 5], "capac": 2, "care": [8, 84], "carl": [30, 37], "case": [0, 1, 8, 29, 30, 46, 65, 67, 70, 81, 84], "categori": 0, "cax": 1, "cbar": 1, "cbar_ax": 1, "cc": 0, "cdf": 3, "cdot": [0, 27, 82, 84], "ceil": 1, "cell": [0, 1, 2, 84], "center": 53, "central": [8, 81, 82], "cf": [0, 31, 82], "ch": 15, "ch_entangl": 15, "chang": [2, 9, 11, 13, 27, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 83], "channel": [2, 8, 81], "chapter": [31, 37], "charact": 39, "characterist": [2, 84], "chebyshev": [9, 10, 11, 84], "chebyshevpqc": [0, 2, 10, 31, 80, 82, 84], "chebyshevrx": [21, 53, 54, 80, 83], "chebyshevtow": 27, "check": [0, 29, 30, 31, 32, 33, 53, 54, 56, 70, 81], "chi2": 27, "child": [74, 77], "children": [74, 77], "children_list": [74, 77], "choi": 19, "choic": [0, 1, 2, 3, 26, 30, 82], "choleski": [30, 31], "choos": [1, 26, 27], "chose": 0, "chosen": [0, 3, 9, 26, 84], "christoph": [30, 37], "chunk": 1, "chunk_df": 1, "circ": 12, "circuit": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 53, 54, 56, 63, 64, 65, 67, 68, 69, 70, 71, 73, 75, 79, 81, 82, 83, 84, 85], "circuit_argu": 79, "circuit_parameter_dimens": 79, "circuit_parameter_nam": 79, "circuit_tre": 70, "circular": 0, "circumv": 82, "class": [0, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85], "class_weight": 0, "classes_": [29, 32], "classic": [0, 1, 5, 19, 27, 80, 82, 84], "classif": [7, 13, 29, 32, 33, 53, 54, 84], "classifi": [0, 5, 29, 32, 33], "classmethod": [15, 66], "clear": 8, "clear_estimator_cach": 8, "clear_sampler_cach": 8, "clearli": 0, "clf": [0, 53], "climat": 5, "clone_kernel": 29, "close": [1, 2, 8, 9, 10, 14, 16, 22, 80, 84], "close_sess": 8, "closer": 2, "closest": 0, "cloud": 2, "cluster": 0, "cmap": 1, "cnot": 17, "code": [0, 9, 10, 11, 13, 14, 16, 17, 22, 81, 84], "coef0": [32, 33], "coef_": 32, "coeff": [2, 40, 46, 83, 84], "coeffici": [30, 31, 33, 54], "collect": [1, 82], "color": [0, 1, 3], "colorbar": 1, "colormap": 1, "column": [1, 13, 29, 32], "com": [5, 6, 30], "combin": [1, 22, 27, 53, 54, 63, 64, 65, 67, 70], "come": 0, "comfort": 81, "command": [5, 6], "common": [3, 84], "commonli": [82, 84], "commun": [0, 27, 82], "commut": 70, "compar": [1, 2], "comparison": 70, "compat": [5, 79, 81], "complet": 2, "complex": [0, 82, 83], "compon": [8, 80, 81, 84], "compos": 84, "compound": 29, "comprehens": [5, 80], "compris": [0, 84], "comput": [0, 2, 5, 12, 14, 26, 27, 28, 29, 32, 34, 37, 38, 39, 63, 64, 65, 67, 70, 80, 81, 82, 83, 84], "concaten": [3, 80], "concentr": 82, "concept": 84, "conceptu": 3, "concern": 82, "condit": [30, 31], "configur": [2, 19, 81, 84], "conform": 84, "cong": 19, "conjug": 15, "conjunct": 83, "connect": [2, 19], "consequ": [2, 80, 82], "consid": [0, 5, 20, 22, 23, 25, 40, 66, 82], "consist": [9, 19, 30, 31, 33, 54, 82, 84], "constant": [2, 30, 31, 33, 47, 54, 84], "constraint": 3, "construct": [15, 41, 80, 82, 83, 84], "consult": 2, "contain": [0, 2, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 60, 61, 62, 70, 72, 78, 80, 82, 83, 84], "context": [2, 83], "contigu": [32, 33], "continu": 0, "contour": 3, "contribut": 80, "control": [0, 3, 9, 15, 16, 55, 68, 69, 82, 84], "conv": 19, "conveni": 82, "convent": [0, 82], "converg": 3, "convert": [66, 79], "convolut": 19, "coolwarm": 1, "copi": [1, 2, 29, 32, 33, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81], "core": [0, 5], "correct": 0, "correctli": [0, 29, 32, 53], "correspond": [0, 9, 10, 19, 29, 32, 81, 82], "cosin": 27, "cost": [56, 65, 67, 84], "costli": 2, "costoper": 84, "count": [61, 83], "counter": [48, 50, 51], "counterpart": [1, 82], "coupl": 0, "coupling_map": 2, "covari": 30, "cp": 15, "cp_entangl": 15, "creat": [0, 1, 2, 3, 8, 14, 15, 20, 22, 27, 32, 40, 63, 66, 67, 81], "create_sess": [8, 81], "creation": [15, 80, 81, 83], "credenti": [8, 81], "cross": [1, 32], "crucial": [2, 80, 83], "crx": 15, "crx_entangl": 15, "cry": 15, "cry_entangl": 15, "crz": [9, 15, 80], "crz_entangl": 15, "csr_matrix": [32, 33], "cu": 15, "cu_entangl": 15, "cube": 83, "cumul": 3, "curli": 15, "current": [3, 5, 8, 19, 47, 49, 53, 54, 56, 67, 82, 83], "custom": [3, 27, 39], "customis": 3, "customiz": 5, "customobserv": [27, 83], "cv": 15, "cv_results_": 1, "cx": [13, 15, 20, 22, 70, 80], "cx_entangl": [15, 80], "cxamplifi": 2, "cy": [15, 70], "cy_entangl": 15, "cycl": 13, "cycling_typ": 13, "cz": [15, 70], "cz_entangl": 15, "d": [5, 9, 19, 27, 40, 46, 55, 58, 84], "d_": 40, "data": [2, 3, 5, 13, 14, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 53, 54, 56, 61, 63, 64, 65, 66, 67, 68, 69, 80, 82, 84], "datafram": 1, "dataset": [0, 2, 15, 22, 29, 32, 53], "david": 2, "de": 5, "deal": 82, "decai": [47, 57, 58, 84], "decis": [0, 32], "decision_funct": 32, "decision_function_shap": [0, 32], "decompos": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24], "decomposit": [30, 31], "dedic": 84, "deep": [0, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 63, 64, 65, 67], "def": [1, 3, 15], "default": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 53, 54, 55, 56, 57, 58, 60, 65, 66, 67, 68, 69, 70, 74, 77, 81, 82], "default_callback": [47, 48, 49, 50, 51], "default_circuit": 19, "defin": [0, 1, 3, 13, 15, 19, 26, 28, 30, 31, 33, 35, 37, 38, 39, 54, 66, 67, 82, 84], "definit": [1, 15, 37, 38, 39, 40, 41, 42, 43, 44, 45, 82, 83], "degrad": 5, "degre": [9, 32, 33, 84], "delai": 2, "delta": 12, "demand": 3, "demonstr": [0, 1, 2, 84], "denot": 84, "dens": [32, 33], "densiti": 82, "depend": [2, 3, 20, 26, 30, 31, 84], "depict": [0, 84], "depolar": [26, 82], "deprec": 81, "depth": [2, 70, 82, 84], "deriv": [12, 46, 63, 64, 65, 66, 67, 70, 80], "descent": 69, "describ": [0, 66, 82, 84], "design": [5, 18, 19, 80, 82, 84], "desir": 84, "detail": [2, 8, 32, 55, 58, 80, 82], "detect": 70, "detect_dupl": 70, "detect_expectation_dupl": 70, "determin": [12, 13, 15, 20, 25, 30, 31, 33, 46, 53, 54, 55, 67, 80], "dev": [8, 81], "develop": 5, "deviat": [1, 30, 55, 84], "devic": [4, 5, 8, 79, 81], "device_arn": [8, 81], "diagon": 82, "dict": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 79, 84], "dictionari": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 47, 49, 53, 54, 56, 63, 64, 65, 67, 70, 79], "dictionaries_combin": 70, "dictionary_circuit": 70, "dictionary_oper": 70, "did": [1, 2], "diff_tupl": 67, "differ": [0, 1, 2, 3, 8, 15, 19, 26, 27, 32, 39, 40, 41, 42, 43, 44, 45, 47, 49, 81, 82], "differenti": [12, 46, 66, 67, 70, 80], "differentiate_v2": 70, "digit": [4, 5], "dill": 6, "dim": 3, "dimens": [0, 9, 10, 11, 13, 14, 15, 16, 17, 19, 22, 24, 49, 65, 67, 79, 80], "dimension": [9, 10, 11, 13, 14, 16, 17, 22, 82], "diminish": 2, "direct": [0, 13], "directevalu": 65, "directli": [0, 5], "directori": 8, "disabl": [1, 2, 81], "disadvantag": 0, "discuss": [5, 82], "displai": [0, 2, 5, 66], "dispos": 84, "disregard": [30, 31, 33, 54], "distanc": [0, 27, 32, 82], "distinct": 2, "distribut": [3, 30], "divid": [3, 32], "divis": 47, "do": [0, 19, 32, 33, 81, 84], "document": [1, 32, 33, 80, 82, 84], "doe": [19, 81], "doi": [0, 5, 23, 25, 80], "domain": [3, 84], "done": [27, 82], "dop": [46, 66, 83], "dopdop": [46, 66], "dotproduct": 82, "doubl": 70, "down": [13, 27], "dp": [12, 46, 80], "dp0": 12, "dpdp": 12, "dpdxdx": 12, "draw": [0, 1, 2, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 79, 80, 84], "drawback": 0, "dual": 5, "dual_coeff_": 31, "due": [3, 82, 84], "duplic": [26, 70], "dure": [1, 2, 9, 70, 83, 84], "dx": 12, "dxdp": 12, "dxdx": 12, "e": [0, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 58, 65, 67, 68, 69, 81, 82], "each": [0, 1, 2, 3, 19, 29, 30, 31, 32, 33, 43, 49, 53, 54, 56, 61, 65, 67, 68, 69, 70, 74, 77, 79, 80, 82, 83, 84], "earli": 84, "earlier": 2, "easi": 84, "easier": [0, 1], "easili": [0, 3], "ec": 3, "econom": 5, "ecr": 70, "edg": 5, "educ": 5, "effect": [0, 2, 29, 30, 31, 32, 33, 53, 54, 56, 82], "effici": [5, 9, 14, 16], "effortlessli": 80, "ei": [3, 49], "eigenvalu": [23, 25], "either": [0, 8, 9, 11, 12, 13, 15, 27, 29, 30, 31, 32, 33, 34, 37, 38, 46, 53, 54, 56, 60, 79, 80, 82, 84], "el3": 5, "elabor": 5, "element": [0, 9, 12, 19, 70, 80], "elimin": 2, "els": [53, 54], "emb": [27, 80], "embed": [0, 14, 26, 27, 38, 82, 84], "emphasi": [32, 33], "emploi": [2, 80, 83, 84], "empti": [8, 34, 35], "emul": 2, "en": 31, "enabl": [2, 5, 30, 80, 81, 84], "enable_metadata_rout": [29, 30, 31, 32, 33, 53, 54, 56], "enc_circ": [3, 29, 30, 31, 36, 82], "encapsul": [29, 30, 31, 32, 33, 53, 54, 56], "enclos": 0, "encod": [0, 1, 2, 3, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 53, 54, 56, 65, 67, 68, 69, 82, 83, 84, 85], "encoding_circuit": [0, 1, 2, 3, 26, 27, 28, 29, 30, 31, 32, 33, 36, 53, 54, 56, 80, 82, 83, 84], "encoding_circuit_deriv": 12, "encoding_circuit_param": 1, "encoding_circuit_str": 15, "encodingcircuit": [18, 84], "encodingcircuitbas": [12, 18, 19, 21, 23, 26, 27, 28, 53, 54, 56, 63, 64, 65, 67], "end": [5, 9, 14, 16, 19], "end_idx": 1, "endow": 82, "engin": [5, 79], "enhanc": 26, "enrich": 82, "ensur": [1, 2, 80], "ent_strategi": 15, "entail": 2, "entangl": [0, 9, 10, 13, 14, 15, 16, 17, 19, 80, 82, 84], "entangling_g": [9, 13], "enter": 19, "entri": [63, 64, 65, 67], "environ": [0, 1, 2, 8, 81], "ep": [47, 49], "epoch": [53, 54, 56, 69, 84], "epsilon": [1, 33], "equal": [1, 19, 40, 43, 44, 60, 80], "equat": [37, 38, 40, 41, 42, 43, 44], "equival": 81, "era": 82, "error": [3, 4, 5, 13, 19, 29, 30, 31, 32, 33, 53, 54, 56, 81, 84], "errstat": 3, "especi": 3, "essenti": [80, 84], "establish": [0, 2, 84], "estim": [1, 2, 8, 29, 30, 31, 32, 33, 47, 53, 54, 56, 70, 81, 82], "estimat": 1, "estimator__c": 1, "estimator__epsilon": 1, "estimator__num_lay": 1, "estimator__num_qubit": 1, "estimator_list": 1, "estimator_nam": 1, "estimator_param": 1, "estimator_run": [8, 81], "et": [0, 13, 14, 26, 27, 38, 82], "etc": [65, 67, 81], "euclidean": 27, "eval_gradi": 29, "evalu": [0, 1, 3, 8, 12, 23, 26, 27, 28, 29, 31, 32, 46, 47, 55, 63, 64, 65, 67, 70, 78, 80, 81, 84], "evaluate_dfdop": 67, "evaluate_dfdopdx": 67, "evaluate_dfdp": 67, "evaluate_dfdpdx": 67, "evaluate_dfdx": 67, "evaluate_dfdxdx": 67, "evaluate_diff_tupl": 67, "evaluate_dupl": 26, "evaluate_f": 67, "evaluate_from_str": 67, "evaluate_laplac": 67, "evaluate_laplace_dop": 67, "evaluate_laplace_dp": 67, "evaluate_pairwis": [26, 27, 28], "evaluate_prob": 67, "evaluate_qnn": 27, "evaluate_tree_with_estim": 70, "evaluate_tree_with_sampl": 70, "evaluate_var": 67, "evaluate_vari": 67, "evaluate_with_estim": 70, "evaluate_with_paramet": [26, 27, 28], "evaluate_with_sampl": 70, "evan": 13, "eventu": 82, "ever": 82, "everi": [0, 1, 19, 27], "everyth": [1, 8], "exact": 32, "exactli": [3, 19, 81], "examin": 2, "exampl": [0, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 27, 29, 30, 31, 32, 33, 36, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 63, 64, 65, 67, 80, 81, 82, 83, 84], "exce": 19, "except": [30, 31, 33, 54, 82], "exchang": 3, "exclus": 82, "exec": 8, "execut": [1, 2, 5, 8, 67, 81], "executor": [0, 1, 2, 3, 5, 15, 23, 26, 27, 28, 29, 30, 31, 32, 33, 36, 53, 54, 55, 56, 63, 64, 65, 67, 79, 80, 82, 84, 85], "executor_backend": 2, "exist": [3, 29, 30, 31, 32, 33, 53, 54, 56, 80, 81], "exp": [0, 27, 58, 82], "expec": 67, "expect": [2, 3, 5, 27, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 56, 65, 66, 67, 70, 73, 75, 82, 84, 85], "expectation_tre": 70, "expected_improv": 3, "expens": 3, "experi": 5, "experiment": 5, "explain": 84, "explicitli": [0, 82, 84], "exploit": [3, 82], "explor": [2, 3, 84], "exponenti": [0, 82, 84], "express": [12, 39, 40, 41, 42, 43, 44, 45, 67, 79], "expsinesquar": 82, "extend": [29, 84], "extract": 1, "f": [0, 1, 2, 3, 5, 30, 32, 33, 40, 61, 82, 84], "f_ref": 61, "facilit": 80, "fact": 82, "factor": [2, 11, 49, 53, 54, 56, 58, 74, 77], "factor_list": [74, 77], "factori": 63, "fail": [8, 81], "fake": [80, 81], "fake_provid": [21, 80, 81, 83], "fakemanilav2": [21, 80, 81, 83], "fall": [0, 2], "fals": [0, 1, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 32, 33, 39, 41, 42, 43, 44, 46, 47, 49, 53, 54, 56, 69, 70, 80, 81], "famili": 82, "famou": 82, "far": 0, "fashion": 80, "fast": [81, 82], "faster": [12, 46], "favour": 3, "fc": [3, 19], "featur": [0, 1, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 33, 35, 54, 63, 64, 65, 67, 80, 82, 83, 84], "feature_dimens": 20, "feature_label": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24], "feature_str": 15, "feature_vector": 12, "feder": 5, "feel": [5, 80], "few": 0, "fidel": [1, 3, 14, 16, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38], "fidelity_kernel": 1, "fidelitykernel": [1, 3, 27, 29, 30, 36], "field": 8, "fig": [0, 1, 3], "figsiz": 1, "figur": [0, 1, 15, 18, 20, 21, 79, 80, 81, 84], "file": [2, 8, 47, 49, 81], "fill": [3, 13], "fill_between": 3, "final": [0, 2, 57, 84], "final_encod": [14, 16], "final_num_qubit": 19, "find": [0, 3, 35, 49, 82], "fine": 2, "finial": 2, "finish": 19, "finit": [2, 8, 9, 47, 49, 55, 58, 84], "first": [2, 9, 10, 12, 13, 14, 16, 21, 27, 39, 46, 47, 70, 80, 83], "firstli": 2, "fischer": [25, 81], "fisher": [23, 25, 80, 81], "fit": [0, 1, 2, 3, 15, 19, 26, 27, 29, 30, 31, 32, 33, 47, 49, 53, 54, 56, 84], "fit_transform": [0, 53], "fix": [0, 26, 27, 28], "flag": [59, 60, 61, 62, 70], "flat": [9, 10], "flatten": [1, 9, 10], "float": [9, 10, 11, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 74, 77, 78, 84], "float64": [32, 33], "fm": [12, 18, 21, 27, 80, 83], "fm1": 80, "fm2": 80, "fm3": 80, "fm_deriv": [12, 80], "fmt": 1, "focu": 84, "focus": 5, "folder": [5, 81], "follow": [0, 2, 5, 6, 15, 16, 80, 81, 82, 83, 84], "follw": 3, "foral": 40, "forc": [32, 33], "form": [0, 1, 3, 9, 17, 46, 70, 82, 84], "formal": 82, "format": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 46, 47, 48, 49, 50, 51, 52, 56, 65, 67, 70, 80], "formul": 82, "forthcom": 2, "found": [5, 8, 70, 80, 84], "four": [0, 41], "fqk": [26, 29, 30, 31, 32, 33, 34, 37, 38], "fqk_instanc": 82, "frac": [0, 12, 27, 30, 31, 33, 37, 38, 46, 54, 55, 58, 61, 84], "framework": [5, 63, 81, 82], "fraunhof": 5, "free": [3, 5, 80, 84], "freedom": 84, "freeli": 84, "fresh": 2, "friendli": [5, 80], "from": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 56, 66, 67, 70, 74, 77, 79, 80, 81, 82, 83, 84], "from_backend": 2, "from_paramet": 66, "from_parameter_vector": 66, "from_str": [15, 66, 80], "from_tupl": 66, "from_vari": 66, "fulfil": 82, "full": [30, 40], "full_regular": [1, 30], "full_sum": [43, 44], "fulli": [19, 80, 81], "fully_connect": 19, "fun": [3, 47, 48, 49, 50, 51, 52], "func": 15, "func_val": 3, "function": [0, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "fundament": 82, "further": [19, 32, 84], "furthermor": [0, 2, 15, 80, 83, 84], "futur": [80, 81], "fx": 3, "fx_i": 3, "g": [3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 58, 65, 67, 68, 69, 81, 82], "gamma": [0, 27, 31, 32, 33, 82], "gap": 5, "gate": [0, 2, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 70, 79, 80, 84], "gather": [2, 3], "gaussian": [0, 1, 4, 5, 29, 30, 31, 37, 49, 82], "gaussian_process": 29, "gaussianprocessclassifi": 29, "gen_expectation_tre": 70, "gener": [2, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 33, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 63, 64, 65, 67, 70, 79, 80, 82, 84], "generate_i": 1, "generate_initial_paramet": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 39, 40, 41, 42, 43, 44, 45], "geometri": 82, "german": 5, "get": [1, 3, 8, 29, 30, 31, 32, 33, 53, 54, 56, 63, 64, 69, 83, 84], "get_backend": [2, 8, 81], "get_cheb_indic": [9, 10], "get_circuit": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24], "get_deriv": [80, 83], "get_estim": [8, 81], "get_first_leaf": 70, "get_lr_decai": 84, "get_metadata_rout": [29, 30, 31, 32, 33, 53, 54, 56], "get_num_nested_list": 70, "get_number_of_leaf": 70, "get_oper": [39, 40, 41, 42, 43, 44, 45, 46], "get_operator_squar": [46, 83], "get_optree_from_expec": 67, "get_optree_from_str": 67, "get_param": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 63, 64, 65, 67], "get_pauli": [39, 40, 41, 42, 43, 44, 45], "get_pauli_map": [39, 40, 41, 42, 43, 44, 45], "get_pennylane_circuit": 79, "get_sampl": [8, 81], "get_shot": [8, 67], "get_tree_depth": 70, "get_variance_fac": 84, "getter": [8, 67], "git": [5, 6], "github": [0, 1, 5, 6], "given": [2, 3, 8, 13, 15, 27, 29, 30, 31, 32, 33, 37, 38, 47, 48, 49, 50, 51, 52, 53, 54, 56, 63, 64, 65, 67, 68, 70, 75, 82, 84], "global": 3, "gmail": 5, "go": [0, 1], "goe": 13, "good": [1, 80], "gp": [29, 30, 82], "gp_hedg": 49, "gpr": 3, "grad": [12, 47, 48, 49, 50, 51, 52], "grad_from_list": 80, "grad_from_str": 80, "grad_from_tupl": 80, "gradient": [12, 29, 47, 48, 49, 50, 51, 52, 55, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 80, 81, 83], "gram": 30, "grant": 5, "grid": 3, "grid_search": [1, 15], "gridsearchcv": [1, 15], "gridsearchcvifittedgridsearchcv": 1, "ground": [1, 68, 69], "ground_truth": [61, 68, 69], "group": [5, 15, 70, 81, 83], "gt": [0, 1], "guess": [35, 47, 48, 49, 50, 51, 52], "guid": [5, 8, 29, 30, 31, 32, 33, 53, 54, 56, 82, 84], "guidelin": [5, 82], "h": [12, 15, 40, 41, 42, 43, 44, 70, 80, 82], "h2giga": 5, "ha": [0, 1, 2, 8, 23, 24, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 59, 60, 61, 62, 68, 69, 79, 82, 84], "hadamard": 11, "hadamard_start": 11, "hagel\u00fcken": 5, "hamiltonian": [40, 46, 83], "handl": [0, 5, 8, 79, 81], "handwritten": [4, 5], "happen": 3, "hardwar": [0, 2, 9, 14, 16, 81, 84], "harsh": [29, 32, 53], "hash": [70, 79, 81], "hash_circuit": 70, "hash_oper": 70, "hashabl": 79, "hat": [2, 13, 27, 40, 41, 42, 43, 44, 46, 83, 84], "haug": 22, "have": [0, 1, 2, 15, 19, 32, 70, 80, 82, 84], "havlicek": 26, "heat": 1, "heat_map_data": 1, "heatmap": 1, "help": 0, "helper": 0, "here": [0, 1, 2, 3, 19, 32, 33, 84], "hessian": [12, 80, 83], "hhl": 82, "hidden": 0, "high": [0, 3, 5, 8, 13, 81], "highdim": 13, "higher": [32, 33, 63, 64, 65, 67, 80, 83, 84], "highlight": [0, 1], "highlight_row": 0, "hilbert": [0, 26, 27, 82], "hint": 0, "hire": [9, 10, 11, 13, 14, 16, 17, 22, 84], "hold": [1, 34, 66, 82], "hour": 2, "how": [0, 1, 2, 3, 13, 29, 30, 31, 32, 33, 53, 54, 56, 81, 82, 84], "howev": [0, 2, 80, 81, 84], "html": [0, 1], "http": [0, 5, 6, 23, 25, 30, 31, 80], "huang": [0, 27, 82], "hub": 81, "hubregtsen": [14, 18, 26, 27, 38, 80, 82], "hubregtsenencodingcircuit": [3, 12, 18, 29, 30, 32, 33, 36, 80], "hy": [0, 27], "hybrid": 84, "hyper": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 32, 33, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 65, 67, 84], "hyperparamet": [2, 3, 4, 5, 15, 27, 29, 30, 31, 37], "hyperplan": [0, 32], "hz": 16, "i": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 58, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "ibm": [4, 5, 6, 8, 81], "ibm_kyoto": 81, "ibm_nairobi": [2, 8], "ibm_quantum": [2, 8, 81], "ibmprovid": 81, "ibmq_qasm_simul": [2, 81], "idea": [0, 19, 82], "ideal": [8, 82], "ident": [12, 40, 43, 44, 46, 70], "identifi": [15, 70], "ignor": [29, 30, 31, 32, 33, 53, 54, 56], "ii": [2, 40, 83], "iii": [46, 83], "iiii": 84, "iiiii": 83, "iiiiz": 83, "iiiz": 84, "iiizi": 83, "iiz": [46, 83], "iizi": 84, "ij": [0, 12, 40], "illustr": [2, 82, 84], "iloc": 1, "imag": 0, "immedi": 82, "imp": 3, "impact": 1, "imperfect": 2, "implement": [0, 2, 3, 15, 25, 26, 30, 31, 34, 40, 42, 44, 46, 47, 48, 49, 50, 51, 53, 54, 59, 60, 65, 67, 70, 82, 84], "implicitli": 82, "import": [3, 8, 12, 15, 18, 20, 21, 27, 29, 30, 31, 32, 33, 36, 40, 46, 53, 54, 80, 81, 82, 83, 84], "impos": 3, "improv": [0, 2, 3, 29, 30, 31], "includ": [0, 1, 5, 8, 43, 44, 53, 54, 56, 63, 64, 65, 67, 81], "include_ident": [43, 44], "increas": [2, 48, 50, 51, 82, 84], "independ": 82, "index": [1, 11, 13, 39, 70, 74, 77], "indic": [0, 3, 9, 10, 13, 18, 25, 74, 77, 80, 81], "individu": [1, 29, 80], "industri": 3, "inf": 3, "infer": [2, 84], "infinit": 82, "influenc": [30, 31, 33, 54, 84], "inform": [0, 2, 3, 13, 23, 25, 29, 30, 31, 32, 33, 46, 49, 53, 54, 56, 70, 80, 81, 82, 84], "infrastructur": 2, "ingo": 81, "ingredi": 84, "inher": 82, "inherit": 29, "init": 0, "initi": [1, 2, 3, 8, 9, 10, 19, 26, 27, 28, 35, 36, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 67, 68, 69, 79, 82, 83, 84], "initial_layout": [21, 80, 83], "initial_paramet": [0, 26, 27, 28, 31, 32, 33, 35, 36], "inlier": 33, "inner": 82, "inplac": 70, "input": [0, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 32, 33, 36, 39, 40, 41, 42, 43, 44, 45, 49, 53, 54, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 80, 81, 83, 84], "input_expec": 67, "input_list": 19, "input_str": 67, "input_valu": [68, 69], "insert_barri": [20, 80], "insert_your_token_her": [8, 81], "insid": [29, 30, 31, 32, 33, 53, 54, 56], "inspir": [19, 80, 82], "instal": 81, "instanc": [1, 29, 30, 31, 53, 54, 55, 56, 68, 69, 81, 82, 84], "instead": [0, 29, 30, 31, 32, 33, 43, 44, 53, 54, 56, 81], "institut": 5, "instruct": [2, 70, 79, 80], "int": [1, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 53, 54, 55, 56, 57, 58, 60, 62, 65, 67, 69, 70, 74, 77, 84], "integr": [1, 5], "intens": 2, "interact": 2, "interconnect": 84, "interfac": [5, 53, 54, 81], "intern": [80, 81], "interpret": 82, "interv": 0, "intrest": 3, "intric": 84, "intrigu": 0, "introduc": [2, 15, 82, 84], "introduct": 8, "intuit": [1, 3], "involv": [2, 9, 10, 80, 84], "ipa": 5, "isinghamiltonian": [46, 54, 83], "issu": 2, "iswap": 13, "item": 72, "iter": [3, 13, 47, 48, 49, 50, 51, 57, 58, 60, 62, 84], "iter_decai": 57, "iter_plateau": 57, "its": [0, 1, 2, 3, 12, 19, 20, 29, 30, 47, 49, 65, 66, 67, 74, 77, 80, 84], "itself": [31, 34], "ix": [40, 83], "iz": [2, 83], "izi": [46, 83], "izii": 84, "izz": [46, 83], "j": [5, 38, 40, 46, 82, 83], "jerbi": 82, "job": [8, 81], "jobv1": 8, "joint": 30, "jupyt": [0, 1], "just": 30, "k": [0, 3, 26, 27, 30, 37, 82], "k_": [0, 27, 37, 38], "k_test": 30, "k_testtrain": [30, 31], "k_train": [30, 31], "keep": [30, 31, 33, 54], "kei": [63, 64, 65, 67, 70, 80, 82], "kept": 70, "kernel": [3, 4, 5, 14, 15, 16, 54, 80, 83, 85], "kernel_": 29, "kernel_matrix": 27, "kernel_optim": 82, "kernellossbas": [35, 36], "kernelmatrixbas": [29, 30, 31, 32, 33, 34, 37, 38], "kerneloptim": 82, "kernmatrixbas": 28, "ket": [0, 42, 44, 82], "kevin": 31, "keyword": [8, 27, 29, 30, 31, 55, 63, 84], "killoran": 82, "kim": 22, "kind": [0, 40, 43, 72], "know": 3, "known": [0, 2, 3, 82], "kreplin": [2, 5, 9, 55, 58, 84], "krr": 31, "kta": 82, "kta_loss": 82, "kta_optim": 82, "kwarg": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 29, 30, 31, 32, 33, 47, 49, 53, 54, 55, 56, 59, 60, 61, 62, 63, 79], "l": [3, 27, 37, 48, 55, 60, 84], "l1": 60, "l2": [2, 60], "l_": [60, 62, 84], "l_2": 0, "label": [0, 1, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 29, 31, 32, 33, 35, 36, 37, 38, 53, 54, 56, 66, 68, 69], "label_train": 30, "lambda": 3, "langl": [0, 26, 84], "laplac": 12, "laplace_dp": 12, "laplacian": [12, 27, 67], "larg": [0, 22], "larger": [1, 30, 31, 39, 40, 41, 42, 43, 44, 45], "last": [2, 9, 10, 13, 14, 16, 39], "lastli": [0, 2], "later": 84, "latest": 6, "latter": [9, 29], "layer": [0, 1, 2, 3, 5, 9, 10, 11, 13, 14, 15, 16, 17, 19, 22, 29, 30, 31, 32, 33, 80, 84], "layer_typ": 13, "layered_encoding_circuit": [15, 80], "layout": 3, "lbfg": 49, "lbfgsb": 84, "lbrace": 82, "lcb": 49, "ldot": 12, "lead": [0, 2, 82], "leaf": [70, 71, 72, 73, 75, 76, 78], "learn": [0, 1, 2, 3, 5, 6, 13, 22, 26, 27, 29, 30, 31, 32, 33, 37, 47, 53, 54, 57, 80, 82], "learning_r": 0, "least": [5, 19], "leav": 0, "lec": 15, "left": [0, 13, 19, 27, 60, 61, 82, 83], "legend": [1, 2, 3], "len": 1, "length": [19, 57, 58], "length_scal": 27, "lengthi": 2, "less": [19, 84], "let": 0, "lett": [26, 82], "letter": 83, "level": [2, 5, 8, 27, 63, 64, 65, 67, 81], "leverag": [0, 2, 80, 81], "librari": [5, 17, 20, 80], "licens": 0, "lightin": 8, "lightn": 8, "like": [1, 5, 29, 30, 31, 32, 33, 53, 54, 79, 81, 84], "likelihood": [29, 37, 38, 82], "limit": [0, 2, 23], "lincombqgt": 81, "line": [0, 82], "line2d": 0, "linear": [0, 9, 15, 20, 26, 27, 30, 31, 80, 82, 83], "link": [2, 30], "linspac": [1, 3, 33], "list": [8, 9, 10, 12, 15, 18, 19, 25, 27, 29, 30, 31, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 53, 54, 56, 60, 63, 64, 65, 67, 68, 69, 70, 74, 77, 79, 80, 82, 83, 84], "literatur": 82, "ll": 1, "load": [0, 1], "load_digit": 0, "load_iri": 29, "local": [20, 80, 81, 82], "locat": [0, 3, 84], "log": [8, 29, 32, 37, 38, 47, 49, 54, 81, 82], "log_fil": [8, 47, 49, 81], "log_likelihood": 29, "log_likelihood_gradi": 29, "log_marginal_likelihood": 29, "logarithm": 84, "long": 81, "longer": 2, "loop": [1, 53, 54, 56, 82], "loss": [2, 34, 35, 36, 37, 38, 53, 54, 55, 56, 68, 69, 82, 84], "lossbas": [53, 54, 56, 68, 69], "lot": 84, "low": [5, 8, 13, 27, 63, 64, 65, 67, 81, 84], "lower": [2, 23, 25, 49], "lowlevelqnnbas": [63, 68, 69], "lr": [2, 36, 47, 82, 84], "lr_end": 57, "lr_start": 57, "lt": [0, 1, 2], "lukin": 19, "lvert": [0, 84], "m": [0, 3, 5, 9, 19, 22, 27, 30, 55, 58, 82, 84], "machin": [1, 5, 6, 13, 22, 26, 27, 30, 31, 37, 80, 82], "machineri": 3, "made": [3, 20], "mai": [29, 30, 31, 32, 33, 54, 83, 84], "main": 84, "maintain": 5, "make": [0, 1, 14, 16, 31, 81], "make_blob": 53, "make_moon": 32, "make_regress": 15, "manag": [2, 81], "mandatori": [8, 83], "mani": [80, 84], "manifold": 0, "manipul": [9, 80, 84], "manner": [80, 84], "manual": 81, "manufactur": 5, "map": [0, 1, 11, 15, 17, 19, 20, 39, 40, 41, 42, 43, 44, 45, 82, 84], "mapsto": 0, "marco": 2, "margin": 29, "mark": [0, 82], "marker": 3, "master": 6, "match": 80, "matern": 82, "mathemat": 82, "mathrm": [0, 3, 82], "matplotlib": [0, 1, 2, 3, 79], "matric": [2, 23, 27, 30, 31, 32, 33, 82, 83, 84], "matrix": [0, 1, 3, 23, 25, 29, 30, 31, 32, 33, 36, 37, 38, 54, 80, 82, 84], "max": [1, 2, 3], "max_it": [0, 1], "max_jobs_retri": [8, 81], "max_session_tim": 8, "max_shot": [55, 84], "maxim": [0, 55], "maximum": [8, 9, 10, 47, 49, 80, 81, 84], "maxit": [3, 36, 47, 49, 82, 84], "maxiter_tot": [47, 49], "mean": [1, 3, 29, 30, 31, 32, 33, 53, 54, 84], "mean_test_scor": 1, "meaning": 26, "meaningless": 32, "measument": 27, "measur": [0, 8, 19, 22, 27, 31, 39, 41, 42, 43, 44, 63, 64, 70, 75, 79, 82, 84], "measure_circuit": 75, "mechan": [29, 30, 31, 32, 33, 53, 54, 56, 82], "memori": 8, "mention": [2, 81, 82], "mere": 82, "merg": 70, "meta": [29, 30, 31, 32, 33, 53, 54, 56], "metadata": [29, 30, 31, 32, 33, 53, 54, 56], "metadata_rout": [29, 30, 31, 32, 33, 53, 54, 56], "metadatarequest": [29, 30, 31, 32, 33, 53, 54, 56], "method": [1, 2, 3, 5, 15, 20, 25, 26, 28, 49, 56, 80, 81, 85], "metric": [0, 27, 29, 32, 53, 82], "might": 3, "mimiz": 3, "min": [1, 2, 3, 81], "min_": [3, 84], "min_obj": 3, "min_shot": [55, 84], "min_surrog": 49, "min_val": 3, "min_x": 3, "mini": [53, 54, 69], "minim": [3, 36, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 68, 69, 82, 84], "minimum": [3, 35, 84], "ministri": 5, "minmaxscal": [0, 53], "mislead": 84, "mit": [30, 31, 37], "mit_depol_nois": [26, 82], "mitig": [4, 5, 26, 81, 82, 84], "mix": 12, "ml": [0, 1, 3, 27, 53, 54], "ml_method": 27, "mmean": [26, 82], "mode": [20, 60], "model": [0, 1, 2, 4, 5, 26, 29, 30, 31, 32, 33, 49, 53, 54, 56, 60, 61, 62, 80, 82, 84], "model_select": [0, 1, 15, 32, 33, 53, 54], "modest": 3, "modifi": [29, 81, 84], "modul": [7, 83], "modulo": 19, "mohseni": [0, 27], "moment": 47, "monoton": 32, "more": [0, 1, 2, 3, 5, 9, 29, 31, 32, 33, 46, 80, 83, 84], "moreov": 82, "most": [30, 81, 82, 84], "mpl": [0, 1, 2, 15, 18, 20, 21, 80, 84], "mse": 1, "msplit": [26, 82], "mu": 3, "mu_sampl": 3, "mu_sample_opt": 3, "multi": [29, 32, 53], "multiclass": 0, "multioutput": [30, 31, 33, 54], "multioutputregressor": [30, 31, 33, 54], "multipl": [9, 15, 39, 43, 46, 53, 54, 56, 61, 62, 63, 64, 65, 67, 70, 83], "multiple_output": [61, 62, 65, 67], "multipli": 83, "murphi": 31, "must": [2, 19, 29, 30, 31, 32, 33, 37, 38, 41, 80], "n": [0, 13, 15, 19, 22, 37, 40, 82, 83], "n_": [55, 84], "n_chebyshev": 11, "n_class": [29, 32], "n_col": 1, "n_compon": 0, "n_dim": 3, "n_featur": [15, 29, 30, 31, 32, 33, 53, 54], "n_iter": 3, "n_kernel_param": 29, "n_output": [29, 30, 31, 32, 33, 53, 54], "n_restart": 3, "n_row": 1, "n_sampl": [0, 3, 15, 23, 29, 30, 31, 32, 33, 53, 54], "n_samples_fit": [30, 31, 33, 54], "n_samples_test": [32, 33], "n_samples_train": [32, 33], "n_test": 31, "n_time": 19, "n_train": 31, "nabla": 12, "nabla_p": 12, "nabla_x": 12, "name": [8, 19, 20, 27, 29, 30, 31, 32, 33, 53, 54, 56, 70, 79, 81], "name_hyper_paramet": 27, "nat": [0, 19, 27, 82], "nativ": 82, "natur": [26, 82], "nbest": 15, "nbsp": [0, 1], "nbviewer": [0, 1], "ndarrai": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70], "nearest": [15, 80], "necess": 2, "necessari": [2, 3, 6, 8, 19, 39, 40, 41, 42, 43, 44, 45, 81, 83], "necessarili": [14, 16], "need": [0, 2, 32, 82, 83], "neg": [1, 3, 30, 31, 33, 37, 38, 54, 82], "neg_mean_squared_error": 1, "neglect": 62, "neighbor": [15, 80], "neq": 82, "nest": [63, 64, 65, 67, 70], "network": [2, 5, 9, 19, 53, 54, 55, 56, 58, 80, 83, 85], "neural": [2, 5, 9, 19, 53, 54, 55, 56, 58, 80, 83, 85], "neuron": 84, "nevertheless": [2, 84], "new": [0, 2, 3, 8, 53, 54, 56, 81, 84], "next": [0, 3, 8, 67, 84], "nisq": [5, 82], "nll": [36, 82], "nll_loss": [36, 82], "nll_optim": 82, "nn": [15, 80], "node": [74, 77], "nois": [3, 9, 15, 26, 32, 49, 55, 58, 82, 84], "noise_amplifi": 2, "noise_factor": 2, "noise_level": 3, "noise_model": 2, "noise_std": 36, "noise_v": 82, "noisemodel": 2, "noisi": [0, 2, 3, 13, 49, 84], "noisy_backend": 2, "nomenclatur": 84, "non": [9, 15, 29], "none": [0, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 63, 64, 65, 66, 67, 68, 69, 74, 77, 79, 81, 82], "norm": [0, 3, 32], "normal": [3, 8, 30], "normalize_i": 30, "notabl": [32, 33], "note": [0, 1, 2, 3, 29, 30, 31, 32, 33, 39, 53, 54, 56, 80, 81, 82, 83, 84], "notebook": [0, 1, 2, 3], "noteworthi": 2, "noth": 82, "notic": 2, "notimplementederror": 24, "notion": 82, "now": [0, 1, 2, 84], "np": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 53, 54, 61, 63, 64, 65, 67, 68, 69, 80, 82, 84], "npj": 13, "nqubit": 2, "nr_initial_point": 3, "nu": 27, "num_all_qubit": [39, 40, 41, 42, 43, 44, 45], "num_averag": [47, 49], "num_chebyshev": [11, 27], "num_combin": 1, "num_estim": 1, "num_featur": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 24, 27, 29, 30, 31, 32, 33, 36, 65, 67, 80, 82, 84], "num_hyper_paramet": 27, "num_lat": 15, "num_lay": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 29, 30, 31, 32, 33, 36, 80, 82, 84], "num_layer_1": 15, "num_layers_list": 1, "num_oper": [46, 65, 67], "num_paramet": [0, 2, 27, 29, 30, 32, 33, 36, 39, 40, 41, 42, 43, 44, 45, 46, 65, 67], "num_parameters_observ": [65, 67], "num_physical_qubit": 83, "num_qubit": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 36, 39, 40, 41, 42, 43, 44, 45, 46, 65, 67, 80, 82, 83, 84], "num_qubit_list": 1, "num_shot": [8, 67], "number": [0, 1, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 53, 54, 55, 56, 58, 60, 62, 65, 67, 69, 70, 80, 81, 83, 84], "number_of_lay": 13, "numer": [0, 12, 26, 27, 28, 30, 31], "numpi": [0, 1, 2, 3, 6, 15, 25, 26, 27, 28, 30, 31, 32, 33, 47, 48, 50, 51, 52, 54, 70, 82, 84], "o": [1, 2, 46, 66, 67], "ob": [19, 40, 83], "ob1": 83, "ob2": 83, "object": [0, 1, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 84], "obligatori": 80, "observ": [2, 3, 5, 8, 19, 27, 49, 53, 54, 63, 64, 65, 66, 67, 68, 69, 79, 82, 84, 85], "observable_deriv": 83, "observable_parameter_dimens": 79, "observable_parameter_nam": 79, "observablebas": [19, 27, 46, 53, 54, 56, 63, 64, 65, 67, 83], "observablederiv": 83, "obtain": [0, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 32, 33, 46, 67, 80, 81, 82, 83, 84], "occur": [2, 70], "odop": 46, "odopdop": 46, "off": [0, 2, 3, 9, 40, 70], "off_diagon": 26, "offer": [2, 5, 80, 82, 84], "offset": [2, 58, 84], "often": [3, 80, 84], "omit": [32, 33], "onc": [0, 19, 70], "one": [0, 8, 14, 15, 16, 19, 29, 30, 32, 33, 41, 43, 47, 49, 82], "one_st": [42, 44], "ones": [2, 39, 40, 41, 42, 43, 44, 45, 67, 82], "onli": [0, 3, 8, 12, 19, 23, 26, 29, 30, 31, 32, 33, 43, 53, 54, 56, 67, 70, 79, 80, 81, 82], "oo": [46, 66, 67], "oodop": 46, "oodopdop": 46, "op": [2, 46, 83, 84], "op0__": [65, 67], "op1__": [65, 67], "op3": 83, "op_str": [41, 43, 83], "oper": [2, 12, 19, 27, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 73, 74, 75, 76, 77, 80, 82, 83, 84], "operation_list": [74, 77], "operator_str": [39, 83], "operator_tre": 70, "operatorbas": [12, 46], "operatornam": 62, "opt_kta_param": 82, "opt_kta_result": 82, "opt_nll_param": 82, "opt_nll_result": 82, "opt_param_op": [53, 54, 56, 59, 60, 61, 62, 68, 69], "opt_result": 36, "optim": [2, 4, 5, 9, 15, 30, 53, 54, 56, 57, 68, 69, 81, 82], "optimal_paramet": 36, "optimization_level": [2, 81], "optimizerbas": [35, 36, 53, 54, 56, 68, 69], "optimizeresult": [3, 36], "optimizerresult": [47, 48, 49, 50, 51, 52], "optimum": 3, "option": [2, 3, 8, 14, 16, 17, 19, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 40, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 56, 70, 74, 77, 80, 82, 83, 84], "options_dict": 84, "options_estim": [8, 81], "options_sampl": [8, 81], "optre": [12, 46, 67, 80], "optree_cach": [12, 46, 67], "optree_el": 70, "optreecircuit": [70, 73, 75], "optreederiv": 70, "optreeelementbas": [12, 46, 70, 74, 77], "optreeevalu": 70, "optreeexpectationvalu": [70, 75], "optreeleafbas": 70, "optreeleafcircuit": [70, 71, 73, 75], "optreeleafcontain": 72, "optreeleafexpectationvalu": [70, 73, 75], "optreeleafmeasuredoper": [70, 75], "optreeleafoper": [70, 73, 76], "optreeleafvalu": 78, "optreemeasuredoper": 70, "optreenodebas": [70, 74, 77], "optreeoper": [70, 73, 75], "orang": 84, "order": [0, 15, 29, 32, 33, 46, 63, 64, 65, 67, 80, 82, 83], "org": [0, 1, 5, 23, 25, 31, 80], "origin": [0, 29, 30, 31, 32, 33, 53, 54, 56, 80, 82], "other": [0, 29, 30, 31, 32, 33, 53, 54, 56, 81, 83, 84], "otherwis": [9, 10, 24, 29, 30, 31, 32, 33, 42, 53, 54, 56], "our": [0, 2, 3, 5], "out": [1, 13, 81, 82], "outcom": [2, 32, 84], "outer": [0, 9, 10, 82], "outer_kernel": [0, 27, 31, 82], "outerkernel": 27, "outerkernelbas": 27, "outgo": 81, "outlier": 33, "output": [0, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 61, 62, 63, 64, 65, 67, 80, 84], "output_list": 19, "outsid": 2, "over": [0, 2, 77, 82, 84], "overal": 0, "overflow": 8, "overlap": 26, "overli": 0, "overwrit": [2, 8], "overwritten": [1, 8, 24], "ovo": 32, "ovr": [0, 32], "own": [0, 80], "p": [0, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 31, 40, 46, 70, 80, 82, 83, 84], "p_": 12, "p_1": 12, "p_i": [12, 60], "p_j": [12, 61], "p_lim": 23, "p_m": 12, "p_op": [46, 83], "p_val": 23, "packag": [2, 5, 6, 80, 81], "page": [0, 1], "panda": 1, "paper": 5, "parabol": 2, "parabola": 2, "paradigm": 84, "param": [2, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 63, 64, 65, 67], "param_estimator__num_lay": 1, "param_estimator__num_qubit": 1, "param_grid": [1, 15], "param_ini": [2, 53, 54, 56, 68, 69], "param_ob": [63, 64, 65, 67], "param_op": [2, 63, 64, 65, 67], "param_op_ini": [2, 53, 54, 56, 68, 69], "param_vec": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24], "paramet": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84], "parameter": [0, 2, 9, 17, 23, 26, 27, 39, 41, 42, 53, 54, 56, 63, 64, 65, 67, 80, 83, 84], "parameter_label": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24], "parameter_list": 60, "parameter_operator_list": 60, "parameter_se": [1, 3, 26, 27, 28, 53, 54, 56, 82], "parameter_str": 15, "parameter_valu": [8, 37, 38], "parameter_vector": [12, 46, 80, 83], "parameterel": 12, "parameterexpress": [2, 40, 46, 70, 83, 84], "parameterized_quantum_circuit": [63, 64, 65, 67], "parameters_oper": [65, 67], "parametervector": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 39, 40, 41, 42, 43, 44, 45, 46, 63, 64, 65, 67, 70, 80], "parametervectorel": [63, 64, 65, 66, 67], "parametr": [2, 82], "parent": [32, 33, 34, 35, 81], "pariwisekernel": 82, "part": [1, 53, 54], "partial": [12, 61, 80, 82], "partial_fit": [53, 54], "particl": 82, "particular": 84, "particularli": [30, 31, 32, 33], "pass": [8, 19, 20, 29, 30, 31, 32, 33, 53, 54, 56, 63, 82, 84], "pattern": [2, 15, 82], "pauli": [2, 19, 27, 39, 41, 42, 43, 46, 79, 81, 82, 83, 84], "pauliop": [43, 44, 45], "paus": 81, "pbar": [53, 54, 56], "pd": 1, "pdf": [3, 9, 10, 11, 13, 14, 16, 17, 22, 84], "pennylan": [5, 8, 65, 81], "pennylane_circuit": [8, 79], "pennylane_execut": 8, "pennylane_execute_batch": 8, "per": [1, 11, 32, 33, 47, 49], "perfect": 2, "perform": [0, 1, 2, 3, 27, 29, 31, 32, 33, 47, 49, 53, 54, 56, 69, 80], "period": 27, "perplex": 0, "perspect": 31, "peter": 13, "phase": [2, 84], "phenomena": 82, "phi": [0, 3, 26, 82], "phy": [19, 26, 82], "physic": [2, 39, 40, 41, 42, 43, 44, 45, 82, 83], "pi": [1, 23, 27, 33, 49], "pictur": 0, "pip": [5, 6, 81], "pipelin": [0, 4, 5, 29, 30, 31, 32, 33, 53, 54, 56], "pipelinepipelin": 1, "pivot": 1, "pivot_t": 1, "pixel": 0, "place": [11, 15, 19, 80], "plai": 83, "plateau": [57, 58, 84], "pleas": [0, 1, 2, 5, 29, 30, 31, 32, 33, 53, 54, 56, 80], "plot": [0, 1, 2, 3], "plot_data_in_feature_spac": 0, "plot_dataset": 0, "plot_it": 3, "plot_numb": 0, "plot_result": 0, "plot_surrog": 3, "plot_surrogate_acquisit": 3, "plt": [0, 1, 2, 3], "plugin": 81, "png": [9, 10, 11, 13, 14, 16, 17, 22, 84], "point": [0, 3, 27, 29, 30, 32, 33, 49, 53, 54, 56, 61, 69, 82, 84], "poli": 27, "polynomi": [9, 27], "pool": 19, "posit": [0, 3, 29, 30, 31, 84], "possibl": [0, 3, 8, 11, 15, 27, 29, 30, 31, 32, 33, 43, 47, 49, 53, 54, 60, 80, 81, 83, 84], "possibli": [53, 54], "posterior": 3, "postprocessingevalu": 65, "potenti": [0, 2], "power": [0, 27, 82], "pp": 31, "pq": 82, "pqc": [0, 2, 26, 28, 53, 54, 56, 63, 64, 65, 67, 68, 69, 80, 82, 84], "pqk": [1, 15, 29, 30, 31, 32, 33, 34, 37, 38], "pqk_instanc": 82, "practic": [5, 82], "practition": 5, "pre": [2, 3, 31, 80, 81], "precomput": [29, 30, 31, 32, 33, 47, 49, 54], "predefin": [82, 83, 84], "predict": [0, 1, 2, 3, 29, 30, 31, 32, 33, 53, 54, 84], "predict_log_proba": 32, "predict_proba": [29, 32, 53], "prefactor": 22, "prefer": 3, "prefix": [65, 67], "prepar": 3, "preprint": 2, "preprocess": [1, 53], "present": [2, 14], "press": [30, 31, 37], "pretrain": [2, 53, 54, 56, 84], "previou": [0, 3, 14, 16], "previous": [79, 82], "price": 3, "primari": 2, "primarili": 2, "prime": 82, "primit": [8, 67, 70, 82], "principl": 84, "print": [0, 1, 2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 32, 33, 40, 46, 83, 84], "prior": [26, 27, 30, 31], "priorit": 84, "prob": 79, "probabilist": 31, "probabl": [0, 2, 3, 29, 32, 42, 44, 53, 67, 82], "problem": [0, 3, 30, 31, 82, 84], "proce": [2, 3], "procedur": [26, 27, 31, 82], "process": [1, 2, 4, 5, 29, 30, 31, 37, 53, 54, 56, 82, 84], "processor": 13, "produc": 32, "product": [0, 82], "program": [8, 80, 81, 83], "project": [1, 3, 4, 5, 27, 29, 30, 31, 32, 33, 37, 38, 80, 81, 83], "projected_kernel": 1, "projected_quantum_kernel": [0, 1], "projectedquantumkernel": [0, 1, 3, 15, 31, 32, 33], "promis": [0, 82], "properti": [0, 32, 33, 81, 82], "proport": 32, "propos": [19, 25], "propose_loc": 3, "proprietari": 80, "prospect": 82, "prototyp": 5, "provid": [2, 5, 8, 18, 19, 29, 30, 31, 32, 33, 37, 38, 46, 49, 53, 54, 56, 80, 81, 82, 83, 84], "prune": [18, 23, 25], "pruned_encoding_circuit": 80, "pruned_paramet": 18, "prunedencodingcircuit": [23, 80], "pruning_thresh": [23, 25], "prxquantum": [23, 25, 80], "psi": [82, 84], "pull": [5, 80], "pure": [82, 83], "put": [32, 33, 82], "pylab": [0, 1], "pyplot": [2, 3], "python": [5, 6], "python3": 6, "q": 82, "q_kernel": [3, 29, 30, 36], "q_kernel_pqk": 31, "qasm": [2, 3, 81], "qasm_simul": [8, 81], "qasmsimul": 84, "qbo": 3, "qc": 81, "qcnn": 19, "qcnnobserv": 19, "qfi": [25, 81], "qfim": 80, "qgp": 3, "qgpc": 82, "qgpc_ansatz": 29, "qgpr": [1, 3, 31, 82], "qgpr_ansatz": 30, "qgpr_model": 3, "qgprqgpr": 1, "qiksit": 81, "qiskit": [1, 2, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 39, 40, 41, 42, 43, 44, 45, 51, 67, 70, 79, 82, 83, 84], "qiskit_a": [2, 81], "qiskit_algorithm": [51, 81], "qiskit_circuit": 20, "qiskit_execut": 8, "qiskit_ibm_provid": 81, "qiskit_ibm_runtim": [2, 8, 21, 80, 81, 83], "qiskitencodingcircuit": 80, "qiskitruntimeservic": [2, 8, 81], "qkrr": [15, 27, 30, 82], "qkrr_pqk": 31, "qml": [0, 1, 5, 8, 79, 81, 82], "qnn": [4, 5, 27, 52, 80, 82, 83], "qnn_backend": 2, "qnn_simul": 2, "qnnclassifi": [54, 84], "qnnregressor": [2, 53, 84], "qnode": 79, "qquad": [41, 42], "qsikit": [8, 81], "qsvc": [0, 29, 33, 82], "qsvcifittedqsvc": 0, "qsvr": [1, 30, 31, 32, 82], "quadrat": [0, 82], "quadraticextrapol": 2, "quantifi": 3, "quantum": [1, 2, 4, 5, 8, 9, 13, 14, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 53, 54, 55, 56, 58, 63, 64, 65, 67, 81, 83, 85], "quantum_circuit": 19, "quantum_fit": 23, "quantum_info": 81, "quantum_kernel": [0, 1, 3, 15, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 82], "quantumcircuit": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 70, 71, 73, 75, 79], "quantumgaussianprocessregressor": 30, "quantuminst": 67, "qubit": [0, 1, 2, 3, 8, 9, 10, 11, 13, 14, 16, 17, 19, 22, 24, 27, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 46, 65, 67, 80, 81, 82, 84], "qubit1": 19, "qubit2": 19, "qubit3": 19, "qubit4": 19, "qubit_map": [39, 40, 41, 42, 43, 44, 45, 83], "queri": [29, 30], "question": [5, 32], "queu": 2, "quickli": 19, "quit": [1, 3], "r": [0, 3, 29, 30, 31, 32, 33, 53, 54, 70, 83], "r2_score": [30, 31, 33, 54], "rais": [3, 29, 30, 31, 32, 33, 53, 54, 56], "rand": [0, 2, 27, 29, 30, 32, 33, 36, 53, 54], "randn": 3, "random": [0, 1, 2, 3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 36, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 81, 84], "random_circuit": 8, "random_st": [0, 3, 15, 32, 33, 53, 54], "randomli": [2, 3, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 39, 40, 41, 42, 43, 44, 45], "rang": [1, 2, 3, 80], "rangl": [0, 26, 84], "rapp": [3, 5, 30], "rasmussen": [30, 37], "rate": [2, 47, 57], "rationalquadrat": 82, "ravel": 3, "rbf": [27, 82], "rbrace": 82, "rdm": 82, "re": [0, 3, 81], "reach": [13, 82], "read": [5, 29, 31, 40, 84], "readabl": 0, "reader": 3, "readi": [0, 5], "readout": 2, "real": [2, 5, 26, 27, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 81, 82, 84], "realm": 84, "reason": [2, 82], "recent": 6, "recognit": [4, 5], "recommend": [2, 13, 30, 67, 81], "rect": 1, "recurs": 70, "red": [1, 3], "reduc": [2, 19, 82, 84], "reduct": [2, 9, 55, 58], "redund": [14, 16, 18, 23, 25, 80, 81], "ref": [26, 27, 30, 31, 37, 55, 58, 82, 84], "refer": [2, 5, 9, 13, 14, 19, 22, 26, 27, 30, 31, 37, 38, 55, 58, 68, 69, 80, 81, 82, 84], "reflect": 82, "reg": [54, 84], "regard": 5, "regardless": 80, "region": 0, "regist": 2, "regress": [0, 1, 3, 7, 30, 31, 32, 33, 53, 54, 61, 62, 84], "regressor": [5, 30, 31, 33, 54], "regular": [1, 5, 26, 27, 28, 30, 31, 32, 33, 37, 47, 53, 54, 58, 60, 81, 82], "reiniti": [2, 53, 54, 56], "rel": [55, 84], "relev": [29, 30, 31, 32, 33, 53, 54, 56], "reli": [1, 2, 82], "remain": 19, "remot": 81, "remov": [18, 30, 70, 74, 77, 80], "render": [0, 1, 3], "rep": [8, 20, 80], "repeat": [0, 9, 14, 15, 16, 19, 84], "repeat_lay": 19, "repeatedli": [19, 84], "repetit": [13, 15], "replac": [0, 32, 33, 46], "replic": [0, 2], "report": 30, "repres": [0, 1, 3, 71, 72, 73, 74, 75, 76, 78, 82, 84], "represent": [0, 1, 3, 29, 82], "reprint": 0, "reproduc": [81, 82], "request": [5, 29, 30, 31, 32, 33, 53, 54, 56, 80], "requir": [1, 5, 6, 8, 29, 32, 53, 81, 84], "rerun": [0, 1], "rescal": [3, 22, 32, 33, 38], "rescale_class_label": 38, "research": 5, "resembl": 84, "reset": [2, 8, 47, 49, 55, 67], "reset_opt": 8, "reset_options_estim": [2, 8], "reset_options_sampl": [2, 8], "reset_shot": [8, 55, 67], "reshap": [1, 3, 27, 31], "residu": [30, 31, 33, 54], "resili": 2, "resilience_level": [2, 81], "resolut": 0, "respect": [0, 12, 26, 27, 29, 30, 31, 34, 35, 66, 67, 80, 82, 83, 84], "respons": [8, 81], "rest": 29, "restart": [3, 8, 13, 58, 81], "restor": 82, "restrict": 82, "resubmit": 81, "result": [0, 2, 3, 8, 27, 29, 30, 31, 32, 36, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 63, 64, 65, 67, 70, 80, 81, 82, 83, 84], "result_cach": [65, 67], "results_df": 1, "retain": [29, 30, 31, 32, 33, 53, 54, 56], "retri": 8, "retriev": 82, "return": [1, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81], "return_cov": 30, "return_std": [3, 30], "return_x_i": [0, 29], "reupload": 14, "rev": [26, 82], "reveal": 82, "revers": [30, 39], "rho": 82, "rich": 82, "ridg": [31, 82], "ridge_regress": 31, "right": [0, 27, 60, 61, 82, 83], "rkh": 82, "rnd": 3, "ro": 3, "role": 83, "root": 2, "rotat": [0, 9, 11, 14, 15, 16], "rotation_g": 11, "roth": [2, 3, 5, 9, 30, 55, 58, 84], "rout": [29, 30, 31, 32, 33, 53, 54, 56, 81], "routin": [2, 8, 80, 82], "row": [0, 13], "rstd": [55, 84], "rstd_bound": [55, 84], "rule": [12, 80, 84], "run": [3, 5, 6, 8, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 49, 57, 81, 83], "run_input": 8, "run_optim": [3, 35, 36, 82], "runtim": [2, 6, 8, 81], "rv": 3, "rvert": 84, "rvert_2": 0, "rx": [9, 10, 11, 15, 16, 70, 80], "rxx": 15, "rxx_entangl": 15, "ry": [11, 15, 16, 20, 22, 70, 80], "ryi": 15, "ryy_entangl": 15, "rz": [11, 15, 16, 22, 70, 80], "rzx": 15, "rzx_entangl": 15, "rzz": [9, 15], "rzz_entangl": 15, "s41467": 0, "s42484": 30, "s_conjug": 15, "sake": 0, "same": [1, 2, 15, 19, 29, 40, 43, 44, 46, 48, 50, 51, 61, 68, 69, 70, 80, 81, 82], "sampl": [0, 1, 2, 3, 8, 9, 29, 30, 31, 32, 33, 49, 53, 54, 55, 58, 84], "sample_test": 30, "sample_train": 30, "sample_weight": [29, 30, 31, 32, 33, 53, 54], "sampler": [8, 70, 81], "sampler_run": [8, 81], "satisfi": 84, "save_account": [2, 81], "saw": 13, "sc": 15, "scalar": 0, "scale": [1, 11, 30, 82], "scaler": [0, 1], "scatter": [1, 3], "scenario": [2, 3], "scheme": 84, "schmidt": 82, "schnabel": 5, "schuld": [26, 82], "scikit": [0, 1, 3, 5, 6, 27, 29, 30, 31, 32, 33, 53, 54, 82], "scipi": [3, 6, 30, 31, 32, 33, 48, 50, 84], "score": [0, 1, 29, 30, 31, 32, 33, 53, 54], "sdg": 70, "seaborn": 1, "seamless": 5, "seamlessli": [1, 8], "search": [3, 15, 49], "second": [8, 15, 21, 39, 46, 47, 67, 70, 80, 83, 84], "section": [1, 2, 84], "see": [0, 2, 12, 28, 29, 30, 31, 32, 33, 46, 53, 54, 55, 56, 58, 81, 82, 84], "seed": [1, 2, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 81], "seen": [82, 84], "select": [0, 3, 18, 84], "self": [3, 22, 29, 30, 31, 32, 33, 34, 53, 54, 56], "sensit": 1, "separ": [0, 8, 15, 32], "sequenc": [35, 36, 37, 38, 47, 48, 49, 50, 51, 52, 84], "serv": [2, 5], "servic": [2, 8, 81], "session": [2, 8, 81], "set": [3, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 80, 82, 83, 84], "set_callback": [47, 48, 49, 50, 51, 52], "set_config": [29, 30, 31, 32, 33, 53, 54, 56], "set_executor": 55, "set_fit_request": [32, 33, 53, 54, 56], "set_map": [39, 40, 41, 42, 43, 44, 45, 83], "set_opt": 81, "set_opt_param_op": [59, 60, 61, 62], "set_options_estim": 8, "set_options_sampl": 8, "set_param": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 53, 54, 56, 63, 64, 65, 67], "set_partial_fit_request": [53, 54], "set_predict_request": 30, "set_primitive_opt": 8, "set_qubit_map": 83, "set_score_request": [29, 30, 31, 32, 33, 53, 54], "set_seed_for_primit": 8, "set_shot": [8, 67, 81], "set_shots_for_grad": 55, "set_shots_for_loss": 55, "set_titl": 1, "set_xlabel": 1, "set_ylabel": 1, "setup": 2, "sever": [0, 2, 5, 80, 82, 83, 84], "sgd": [53, 54, 56, 69, 84], "sgdmixin": [53, 54, 56], "shape": [0, 2, 29, 30, 31, 32, 33, 53, 54], "share": 0, "share_param": 19, "shift": [12, 80, 84], "shot": [2, 3, 8, 55, 67, 68, 69, 81], "shot_control": [53, 54, 56, 68, 69, 84], "shotcontrolbas": [53, 54, 56, 68, 69], "shotsfromrstd": 84, "should": [19, 28, 29, 30, 31, 32, 33, 49, 53, 54, 56, 82, 84], "show": [0, 1, 2, 3, 29, 81, 82, 84], "shown": [1, 13, 82, 84], "shrink": [0, 1], "shuffl": [53, 54, 56, 69, 84], "side": 0, "sigma": [3, 30, 36, 37, 82], "sigma_0": 27, "sigma_f": [61, 84], "sigma_l": [55, 84], "sigmoid": [27, 58], "significantli": [2, 84], "similar": [0, 8, 15, 39, 82], "similarli": [1, 2], "simpl": [2, 10, 15], "simplest": 82, "simpli": [19, 83], "simplifi": [70, 84], "simul": [0, 3, 5, 8, 81, 84], "sin": [1, 3, 27, 33], "sinc": [0, 2, 29, 32, 53, 60, 62, 81], "singl": [0, 19, 22, 41, 42, 43, 44, 46, 74, 77, 83], "size": [0, 3, 15, 18, 20, 21, 47, 49, 68, 69, 80, 82, 84], "skip": 47, "skip_fun": 47, "sklean": 27, "sklearn": [0, 1, 15, 29, 30, 31, 32, 33, 53, 54, 56], "skopt": 3, "slack": 1, "slight": 2, "slightli": 32, "slsqp": [53, 54, 82], "small": [2, 32, 47, 82], "smaller": 84, "smooth": 2, "sn": 1, "sne": 0, "so": [0, 19, 32, 82], "solut": [15, 30, 31, 80, 82], "solv": [0, 3, 26, 27, 30, 31, 82, 84], "solvabl": [0, 30, 31], "some": [0, 2, 3, 15, 29, 30, 31, 32, 33, 53, 54, 56, 82], "sometim": 84, "somewhat": 84, "sophist": [3, 80], "sort": [29, 32], "sourc": [2, 9, 10, 11, 13, 14, 16, 17, 22, 84], "space": [0, 3, 26, 27, 31, 49, 82], "spars": [32, 33], "sparsepauli": 79, "sparsepauliop": [2, 39, 40, 41, 42, 43, 44, 45, 46, 70, 73, 75, 76, 79, 83, 84], "sparsevectorstatefn": 67, "speak": 82, "special": 5, "specif": [0, 1, 2, 8, 32, 33, 63, 84], "specifi": [2, 8, 12, 15, 21, 23, 27, 28, 30, 31, 34, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 79, 80, 81, 82, 84], "split": 82, "split_pauli": 46, "sprasepauliop": [39, 40, 41, 42, 43, 44, 45], "springer": 30, "spsa": 84, "sqrt": [1, 27, 38, 84], "squar": [2, 30, 31, 33, 46, 54, 61, 83, 84], "squared_ob": 83, "squaredloss": [2, 53, 54, 84], "squlearn": [0, 1, 2, 3, 6, 80, 81, 82, 83, 84], "ssh": 5, "stabil": [30, 31], "stack": 11, "stage": 84, "stai": 19, "standard": [1, 3, 30, 32, 33, 55, 81, 82, 84], "standardscal": 1, "standardscalerstandardscal": 1, "start": [0, 3, 9, 11, 13, 35, 57], "start_idx": 1, "stat": 3, "state": [0, 26, 39, 42, 44, 47, 49, 79, 80, 82, 84], "statefn": [39, 40, 41, 42, 43, 44, 45], "statevector": [8, 81], "statevector_simul": [2, 8, 80, 81, 82], "statevectorsimul": [1, 8], "static": 70, "stem": 2, "step": [0, 1, 2, 3, 31, 47, 49, 68, 69], "stochast": 84, "store": [0, 30, 31, 32, 33, 67, 80], "str": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 43, 46, 47, 49, 53, 54, 56, 60, 63, 64, 65, 66, 67, 70, 79], "straightforward": [80, 82], "strateg": 3, "strategi": [5, 15], "strength": [30, 31, 37, 53, 54], "string": [8, 19, 27, 39, 43, 66, 67, 79, 80, 81, 83], "stronger": [30, 31], "structr": 3, "structur": [15, 19, 46, 66, 67, 70, 80, 81, 84], "studi": 82, "sub": [8, 29, 30, 31, 32, 33, 53, 54, 56, 81], "subject": 84, "sublist": 19, "submit": 5, "subplot": 1, "subsequ": [2, 3, 82, 84], "subset": [29, 32, 53], "success": [2, 80], "suffer": 82, "suitabl": [1, 84], "sum": [30, 31, 33, 39, 40, 43, 44, 46, 54, 70, 77, 80, 83], "sum_": [38, 40, 82], "sum_i": [2, 12, 40, 43, 44, 60, 61, 62], "sum_j": 61, "sum_k": [82, 84], "summar": 81, "summat": [2, 43, 77, 84], "summedpauli": [2, 46, 53, 83, 84], "superposit": 82, "supervis": [26, 82], "suppli": [15, 19, 27, 39, 53, 54, 56, 70, 80, 83], "support": [1, 5, 29, 30, 31, 32, 33, 41, 70, 82, 83], "supported_g": 70, "surrog": [4, 5, 49], "surrogate_model": 3, "sv1": [8, 81], "svc": [32, 33], "svm": [0, 32, 33, 82], "svr": 33, "swap": [9, 15], "switch": [9, 40, 82], "sx": 70, "synthet": 1, "system": [8, 26, 27, 30, 31, 39, 40, 41, 42, 43, 44, 45], "t": [0, 14, 15, 22, 26, 27, 29, 30, 31, 32, 33, 37, 38, 53, 54, 70, 82, 83], "t_conjug": 15, "ta": 38, "tabl": 12, "tailor": 84, "take": [0, 2, 8, 80, 84], "taken": [3, 37, 38, 47], "tanh": 3, "target": [29, 30, 31, 32, 33, 38, 82, 84], "targetalign": 82, "task": [0, 1, 2, 82], "tc": 15, "tdg": 70, "techniqu": [0, 2, 5, 26, 27, 82], "term": [2, 11, 14, 26, 27, 38, 40, 70, 82, 84], "termin": [47, 49], "test": [0, 1, 2, 26, 27, 28, 29, 30, 31, 32, 33, 53, 54, 82], "test_scor": 1, "test_siz": [0, 53, 54], "text": [0, 3, 27, 41, 42, 55, 60, 84], "th": 82, "than": [27, 32, 39, 40, 41, 42, 43, 44, 45, 84], "thank": 5, "thei": [0, 2, 5, 8, 29, 32, 33, 53, 54, 80, 81, 82, 84], "them": [0, 15, 82, 84], "theoret": 31, "theori": 82, "therebi": 2, "therefor": [0, 81, 82, 84], "theta": [0, 29, 41, 82, 84], "thi": [0, 1, 2, 3, 5, 8, 12, 15, 17, 18, 19, 26, 27, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 56, 60, 61, 62, 70, 79, 80, 81, 82, 83, 84], "those": 32, "three": [0, 9, 27], "threshold": [23, 25, 26, 27, 82, 84], "through": [1, 2, 3, 5, 8, 15, 81, 82, 84], "throughout": 2, "throw": 19, "thrown": [13, 24], "thu": [0, 81, 82, 84], "tight_layout": 1, "tikhonov": [26, 27, 82], "time": [0, 2, 8, 9, 15, 19, 32, 70, 81, 82], "titl": [0, 1, 2, 3], "to_dict_fn": 67, "togeth": [11, 83, 84], "token": [2, 8, 81], "tol": [0, 1, 47, 49], "toler": [47, 49], "tool": 5, "toolset": 5, "top": 5, "total": [0, 30, 31, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 54, 80, 84], "tower": [9, 10, 11], "tqdm": [53, 54, 56], "tr": 82, "trace": 82, "trade": 3, "tradit": [1, 84], "train": [0, 1, 7, 9, 14, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 53, 54, 56, 80, 83, 84], "train_test_split": [0, 32, 33, 53, 54], "trainabl": [0, 9, 12, 20, 26, 27, 28, 35, 39, 40, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 63, 64, 65, 67, 80, 82, 83, 84], "transfer": 0, "transform": [0, 32, 70], "transform_to_zbasi": 70, "translat": 2, "transpil": [21, 70, 81, 83], "transpile_func": 21, "transpile_to_supported_instruct": 70, "transpiledencodingcircuit": 83, "treat": [1, 3], "tree": 70, "trick": [0, 82], "trivial": 82, "troubl": 19, "true": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 53, 54, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 80, 81, 83, 84], "trust": [0, 1], "truth": [1, 68, 69], "try": [0, 1], "tsne": 0, "tune": 2, "tupel": 49, "tupl": [8, 12, 23, 39, 43, 46, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 79, 80, 83], "turn": [2, 70], "tutori": [1, 2, 5], "twelv": 0, "two": [0, 1, 9, 27, 30, 39, 80, 82, 84], "twoloc": [20, 80], "type": [8, 12, 27, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 60, 63, 64, 65, 67, 70, 74, 75, 77, 79, 82, 84], "typic": [2, 3, 8, 27, 84], "u": [0, 1, 2, 3, 15, 30, 31, 33, 54, 84], "u_": 82, "u_i": 84, "unabl": [0, 1], "uncertainti": 3, "unchang": [29, 30, 31, 32, 33, 53, 54, 56], "under": [0, 5], "underli": [29, 30, 31, 32, 33], "understand": [0, 1], "uniform": 3, "uniform_averag": [30, 31, 33, 54], "union": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 56, 63, 64, 65, 66, 67, 68, 69, 70, 73, 75, 79], "uniqu": 1, "unit": 30, "unknown": 3, "until": [8, 19, 84], "untouch": 70, "untrain": 82, "up": [3, 13, 66, 81, 82, 84], "upcom": [2, 84], "updat": [2, 3, 8, 29, 30, 31, 32, 33, 47, 49, 53, 54, 56, 84], "upload": 0, "upon": [2, 81], "upper": 49, "us": [0, 1, 4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 72, 80, 81, 82, 83, 84], "usag": 2, "user": [2, 5, 8, 29, 30, 31, 32, 33, 53, 54, 56, 80, 82, 84], "usual": [2, 18, 81], "util": [0, 2, 3, 8, 12, 15, 27, 29, 30, 31, 32, 33, 53, 54, 56, 80, 82, 83, 84], "v": [1, 30, 31, 33, 54, 58], "val": 66, "valid": [1, 8, 28, 32, 49], "valu": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 75, 78, 80, 82, 84, 85], "value_dict": [59, 60, 61, 62], "valueerror": 3, "var": [60, 62, 66], "var_i": 60, "vari": 1, "variabl": [1, 15], "variable_str": 15, "varianc": [3, 30, 53, 54, 56, 58, 59, 60, 61, 62, 67, 83], "variance_factor": [60, 62], "variant": 1, "variat": [36, 37, 38], "varieti": 81, "variou": [0, 2, 5, 8, 81], "varphi": 3, "vector": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 46, 63, 64, 65, 67, 74, 80, 82], "verbos": [0, 1, 23], "veri": [0, 15, 32], "versa": [81, 82], "version": [5, 29, 30, 31, 32, 33, 53, 54, 56], "versu": 29, "vert": 0, "via": [2, 5, 8, 9, 12, 29, 30, 31, 32, 33, 81, 83], "vice": [81, 82], "view": [0, 82], "visual": [0, 1, 2, 79], "vmax": 1, "vmin": 1, "vstack": 3, "w": [29, 30, 31, 32, 33, 53, 54, 70, 83], "w_i": 61, "wa": [5, 8, 19], "wai": [81, 82], "wait": 8, "wait_restart": [8, 81], "want": [0, 1, 80, 81], "warn": 3, "wave": [0, 66, 83], "wave_funct": 66, "we": [0, 1, 2, 3, 62, 80, 82, 84], "websit": 0, "weight": [2, 29, 30, 31, 32, 33, 53, 54, 56, 60, 61, 62, 68, 69], "well": [0, 5, 15, 68, 69, 81, 82, 84], "were": 0, "what": 3, "when": [3, 6, 8, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 54, 80, 81, 82, 83, 84], "whenev": [39, 40, 41, 42, 43, 44, 45], "where": [0, 1, 2, 3, 8, 9, 10, 15, 19, 29, 30, 31, 32, 33, 40, 54, 55, 80, 82, 84], "wherea": 84, "whether": [3, 8, 19, 30, 31, 38, 84], "which": [0, 1, 2, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 35, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 56, 63, 67, 70, 80, 81, 82, 83, 84], "while": [2, 3, 15, 19, 84], "whose": 82, "wide": [0, 80], "wiki": 31, "wikipedia": 31, "william": [30, 37], "willmann": 5, "wire": [8, 79, 81], "within": [2, 15, 19, 30, 82], "without": [0, 80, 82], "won": [53, 54], "word": 79, "work": [0, 3, 5, 19, 29, 30, 31, 32, 33, 53, 54, 56, 63, 64, 65, 67, 70, 82], "workflow": [0, 1, 82], "world": 2, "wors": [30, 31, 33, 54], "worth": 84, "would": [0, 30, 31, 33, 54], "wrap": [26, 48, 50, 82, 84], "wrapper": [7, 20, 30, 31, 32, 33, 48, 50, 51, 80, 84], "wrt": [63, 64, 65, 67], "www": 5, "x": [0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 40, 41, 43, 47, 49, 53, 54, 56, 63, 64, 65, 67, 70, 80, 82, 83, 84], "x0": [3, 47, 48, 49, 50, 51, 52], "x27": [0, 1], "x_": 12, "x_1": 12, "x_highlight": 0, "x_i": [0, 3, 12, 27, 38, 61, 84], "x_iter": 3, "x_j": [0, 12, 27, 38], "x_lim": 23, "x_n": 12, "x_next": 3, "x_plot": 3, "x_rang": 0, "x_sampl": 3, "x_test": [0, 1, 32, 33, 53, 54, 84], "x_train": [0, 1, 2, 31, 32, 33, 36, 53, 54, 82, 84], "x_tsne": 0, "x_val": 23, "xi": [3, 40], "xixi": 83, "xlabel": [1, 3], "xp": 12, "xx": 39, "xxxx": 27, "xyz": [0, 27, 31, 82], "y": [0, 1, 2, 3, 9, 15, 19, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 41, 43, 53, 54, 56, 70, 80, 82, 83], "y_conv": 3, "y_cov": 30, "y_highlight": 0, "y_i": 38, "y_init": 3, "y_j": 38, "y_mean": 30, "y_next": 3, "y_plot": 3, "y_pred": [0, 1, 3, 30, 31, 32, 33, 53, 54, 84], "y_pred_pqk": 31, "y_sampl": 3, "y_std": 30, "y_test": [0, 1, 32, 33, 53, 54], "y_train": [0, 1, 2, 31, 32, 33, 36, 53, 54, 82, 84], "y_true": [30, 31, 33, 54], "yet": 0, "yield": 84, "ylabel": [1, 3], "you": [0, 2, 5, 29, 30, 31, 32, 33, 53, 54, 56, 80, 82, 84], "your": [2, 3, 5, 84], "yyyi": 27, "yz": 22, "yz_cx_encodingcircuit": 1, "z": [0, 2, 3, 15, 17, 19, 27, 39, 40, 41, 42, 43, 44, 54, 70, 80, 82, 83, 84], "z_i": 41, "zero": [30, 40, 47, 60, 82, 83], "zfeaturemap": [17, 19], "zi": [2, 39, 83], "zigzag": 2, "zii": [46, 83], "ziii": 84, "ziiii": 83, "ziz": [46, 83], "zizz": 83, "zne": 81, "zy": 83, "zz": [39, 40, 54, 83], "zzfeaturemap": 20, "zzi": [46, 83], "zzzz": 27, "\u03b8": [37, 38], "\u03b8p": 20, "\u03c3i": 37}, "titles": ["Handwritten Digit Recognition with Projected Quantum Kernels", "Hyperparameter Optimization and Pipelines", "Error Mitigation for QNNs on IBM Devices", "Bayesian Optimization using a Quantum Gaussian Process Surrogate Model", "Examples", "Welcome to the sQUlearn documentation!", "Installation", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn</span></code>.Executor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevPQC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevRx", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ChebyshevTower", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.EncodingCircuitDerivatives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.HighDimEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.HubregtsenEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.LayeredEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.MultiControlEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.ParamZFeatureMap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.PrunedEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.QCNNEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.QiskitEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.TranspiledEncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.YZ_CX_EncodingCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.automated_pruning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit.encoding_circuit_base</span></code>.EncodingCircuitBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.encoding_circuit</span></code>.pruning_from_QFI", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix</span></code>.FidelityKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix</span></code>.ProjectedQuantumKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.matrix.kernel_matrix_base</span></code>.KernelMatrixBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QGPC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QGPR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QKRR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.ml</span></code>.QSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.kernel_loss_base</span></code>.KernelLossBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.kernel_optimization_base</span></code>.KernelOptimizerBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.kernel_optimizer</span></code>.KernelOptimizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.negative_log_likelihood</span></code>.NLL", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.kernel.optimization.target_alignment</span></code>.TargetAlignment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.CustomObservable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.IsingHamiltonian", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SinglePauli", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SingleProbability", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SummedPaulis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables</span></code>.SummedProbabilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables.observable_base</span></code>.ObservableBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.observables.observable_derivatives</span></code>.ObservableDerivatives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.Adam", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.LBFGSB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SGLBO", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SLSQP", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers</span></code>.SPSA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.optimizers.optimizer_base</span></code>.OptimizerBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.QNNClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.QNNRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.ShotsFromRSTD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.base_qnn</span></code>.BaseQNN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.get_lr_decay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn</span></code>.get_variance_fac", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.LossBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.ParameterRegularizationLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.SquaredLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.loss</span></code>.VarianceLoss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn</span></code>.LowLevelQNN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn_base</span></code>.LowLevelQNNBase", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn_pennylane</span></code>.LowLevelQNNPennyLane", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn_qiskit</span></code>.Expec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.lowlevel_qnn_qiskit</span></code>.LowLevelQNNQiskit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.training</span></code>.train", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.qnn.training</span></code>.train_mini_batch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util</span></code>.OpTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeCircuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeContainer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeExpectationValue", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeList", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeMeasuredOperator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeOperator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeSum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.optree</span></code>.OpTreeValue", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">squlearn.util.pennylane</span></code>.PennyLaneCircuit", "Quantum Encoding Circuits", "The Executor Class", "Quantum Kernel Methods", "Observables for expectation values", "Quantum Neural Networks", "User Guide"], "titleterms": {"The": [0, 81], "acknowledg": 5, "adam": [47, 84], "adjust": 84, "analysi": 1, "api": 7, "ar": [12, 27, 46], "assess": 2, "attribut": [8, 27, 31, 39, 40, 41, 42, 43, 44, 45, 46, 65, 67, 79], "automated_prun": 23, "backend": 2, "base": 7, "base_qnn": 56, "baseqnn": 56, "batch": 84, "bayesian": 3, "bleed": 6, "chebyshevpqc": 9, "chebyshevrx": 10, "chebyshevtow": 11, "circuit": [7, 80], "cite": 5, "class": [7, 81], "classif": [0, 82], "classifi": 7, "combin": 80, "contact": 5, "content": 5, "contribut": 5, "core": 7, "creat": 80, "custom": [80, 83], "customobserv": 39, "data": [0, 1, 7], "decoupl": 2, "definit": 0, "deriv": 83, "descent": 84, "design": 7, "develop": 6, "devic": 2, "differ": 80, "digit": 0, "dimension": 0, "document": 5, "dotproduct": 27, "dynam": [2, 84], "edg": 6, "emploi": 82, "encod": [7, 80], "encoding_circuit": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "encoding_circuit_bas": 24, "encodingcircuitbas": 24, "encodingcircuitderiv": [12, 80], "error": 2, "evalu": [2, 82], "exampl": [4, 5], "execut": 7, "executor": [8, 81], "expec": 66, "expect": 83, "expsinesquar": 27, "extrapol": 2, "factor": 84, "featur": 81, "fidel": 82, "fidelitykernel": [26, 82], "follow": 27, "fqk": 82, "free": 2, "gate": 15, "gaussian": [3, 27], "gener": 1, "get_deriv": [12, 46], "get_lr_decai": 57, "get_variance_fac": 58, "gradient": 84, "grid": 1, "guid": 85, "handwritten": 0, "high": [82, 84], "highdimencodingcircuit": 13, "hubregtsenencodingcircuit": 14, "hyperparamet": 1, "ibm": 2, "implement": [7, 27, 80, 83], "import": [0, 1, 2], "initi": 81, "instal": [5, 6], "interfac": 7, "introduct": 2, "isinghamiltonian": 40, "kei": 81, "kernel": [0, 1, 7, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 82], "kernel_loss_bas": 34, "kernel_matrix_bas": 28, "kernel_optim": 36, "kernel_optimization_bas": 35, "kernellossbas": 34, "kernelmatrixbas": 28, "kerneloptim": 36, "kerneloptimizerbas": 35, "layeredencodingcircuit": [15, 80], "lbfgsb": 48, "learn": 84, "level": [82, 84], "librari": [1, 2], "licens": 5, "literatur": 2, "loss": [59, 60, 61, 62], "lossbas": 59, "lowlevel_qnn": 63, "lowlevel_qnn_bas": 64, "lowlevel_qnn_pennylan": 65, "lowlevel_qnn_qiskit": [66, 67], "lowlevelqnn": 63, "lowlevelqnnbas": 64, "lowlevelqnnpennylan": 65, "lowlevelqnnqiskit": 67, "m3": 2, "machin": 0, "map": 83, "matern": 27, "matrix": [26, 27, 28], "max": 0, "method": [0, 8, 12, 27, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 65, 67, 79, 82, 84], "min": 0, "mini": 84, "mitig": 2, "ml": [29, 30, 31, 32, 33], "model": 3, "multicontrolencodingcircuit": 16, "negative_log_likelihood": 37, "network": 84, "neural": 84, "nll": 37, "nois": 2, "observ": [39, 40, 41, 42, 43, 44, 45, 46, 83], "observable_bas": 45, "observable_deriv": 46, "observablebas": 45, "observablederiv": 46, "oper": 7, "optim": [1, 3, 7, 34, 35, 36, 37, 38, 47, 48, 49, 50, 51, 52, 84], "optimizer_bas": 52, "optimizerbas": 52, "option": 81, "optre": [7, 70, 71, 72, 73, 74, 75, 76, 77, 78], "optreecircuit": 71, "optreecontain": 72, "optreeexpectationvalu": 73, "optreelist": 74, "optreemeasuredoper": 75, "optreeoper": 76, "optreesum": 77, "optreevalu": 78, "outer": 27, "overview": 81, "pairwisekernel": 27, "parameterregularizationloss": 60, "paramzfeaturemap": 17, "pennylan": [7, 79], "pennylanecircuit": 79, "pipelin": 1, "pqk": 82, "preprocess": 0, "prerequisit": [5, 6], "primit": [2, 81], "process": 3, "project": [0, 82], "projectedquantumkernel": [27, 82], "prune": 80, "prunedencodingcircuit": 18, "pruning_from_qfi": 25, "qcnnencodingcircuit": 19, "qgpc": 29, "qgpr": 30, "qiskit": [80, 81], "qiskitencodingcircuit": 20, "qkrr": 31, "qml": 7, "qnn": [2, 7, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 84], "qnnclassifi": 53, "qnnregressor": 54, "qsvc": 32, "qsvr": 33, "quantum": [0, 3, 7, 80, 82, 84], "qubit": [15, 83], "rate": 84, "rationalquadrat": 27, "real": 83, "recogn": [12, 46], "recognit": 0, "reduct": [0, 84], "refer": 7, "regress": 82, "regressor": 7, "regular": [2, 84], "releas": [5, 6], "represent": 15, "result": 1, "retrain": 2, "routin": 81, "run": [1, 2], "sampler": 2, "scale": 0, "schedul": 84, "search": 1, "set": [0, 1, 2, 81], "sglbo": 49, "shot": 84, "shotsfromrstd": 55, "simul": 2, "singl": 15, "singlepauli": 41, "singleprob": 42, "slsqp": [50, 84], "split": 0, "spsa": 51, "squaredloss": 61, "squlearn": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "stabl": [5, 6], "string": [12, 15, 46], "structur": 7, "summari": 1, "summedpauli": 43, "summedprob": 44, "support": 0, "surrog": 3, "target_align": 38, "targetalign": 38, "tool": 7, "train": [2, 68, 69, 82], "train_mini_batch": 69, "transpil": 80, "transpiledencodingcircuit": [21, 80], "trex": 2, "two": 15, "up": [1, 2], "us": [2, 3], "user": 85, "util": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81], "valu": 83, "varianc": [2, 84], "varianceloss": 62, "vector": 0, "version": 6, "via": [80, 82], "welcom": 5, "without": 2, "wrap": 80, "your": 80, "yz_cx_encodingcircuit": 22, "zero": 2, "zne": 2}})